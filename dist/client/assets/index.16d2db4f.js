const p$2 = function polyfill() {
    const relList = document.createElement('link').relList;
    if (relList && relList.supports && relList.supports('modulepreload')) {
        return;
    }
    for (const link of document.querySelectorAll('link[rel="modulepreload"]')) {
        processPreload(link);
    }
    new MutationObserver((mutations) => {
        for (const mutation of mutations) {
            if (mutation.type !== 'childList') {
                continue;
            }
            for (const node of mutation.addedNodes) {
                if (node.tagName === 'LINK' && node.rel === 'modulepreload') processPreload(node);
            }
        }
    }).observe(document, { childList: true, subtree: true });
    function getFetchOpts(script) {
        const fetchOpts = {};
        if (script.integrity) fetchOpts.integrity = script.integrity;
        if (script.referrerpolicy) fetchOpts.referrerPolicy = script.referrerpolicy;
        if (script.crossorigin === 'use-credentials') fetchOpts.credentials = 'include';
        else if (script.crossorigin === 'anonymous') fetchOpts.credentials = 'omit';
        else fetchOpts.credentials = 'same-origin';
        return fetchOpts;
    }
    function processPreload(link) {
        if (link.ep)
            // ep marker = processed
            return;
        link.ep = true;
        // prepopulate the load record
        const fetchOpts = getFetchOpts(link);
        fetch(link.href, fetchOpts);
    }
};
true && p$2();

var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

var reactDom = { exports: {} };

var reactDom_production_min = {};

var react = { exports: {} };

var react_production_min = {};

/*
object-assign
(c) Sindre Sorhus
@license MIT
*/
/* eslint-disable no-unused-vars */
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty$9 = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
    if (val === null || val === undefined) {
        throw new TypeError('Object.assign cannot be called with null or undefined');
    }

    return Object(val);
}

function shouldUseNative() {
    try {
        if (!Object.assign) {
            return false;
        }

        // Detect buggy property enumeration order in older V8 versions.

        // https://bugs.chromium.org/p/v8/issues/detail?id=4118
        var test1 = new String('abc'); // eslint-disable-line no-new-wrappers
        test1[5] = 'de';
        if (Object.getOwnPropertyNames(test1)[0] === '5') {
            return false;
        }

        // https://bugs.chromium.org/p/v8/issues/detail?id=3056
        var test2 = {};
        for (var i = 0; i < 10; i++) {
            test2['_' + String.fromCharCode(i)] = i;
        }
        var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
            return test2[n];
        });
        if (order2.join('') !== '0123456789') {
            return false;
        }

        // https://bugs.chromium.org/p/v8/issues/detail?id=3056
        var test3 = {};
        'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
            test3[letter] = letter;
        });
        if (Object.keys(Object.assign({}, test3)).join('') !== 'abcdefghijklmnopqrst') {
            return false;
        }

        return true;
    } catch (err) {
        // We don't expect any of the above to throw, but better to be safe.
        return false;
    }
}

var objectAssign = shouldUseNative()
    ? Object.assign
    : function (target, source) {
          var from;
          var to = toObject(target);
          var symbols;

          for (var s = 1; s < arguments.length; s++) {
              from = Object(arguments[s]);

              for (var key in from) {
                  if (hasOwnProperty$9.call(from, key)) {
                      to[key] = from[key];
                  }
              }

              if (getOwnPropertySymbols) {
                  symbols = getOwnPropertySymbols(from);
                  for (var i = 0; i < symbols.length; i++) {
                      if (propIsEnumerable.call(from, symbols[i])) {
                          to[symbols[i]] = from[symbols[i]];
                      }
                  }
              }
          }

          return to;
      };

/** @license React v17.0.2
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var l = objectAssign,
    n$1 = 60103,
    p$1 = 60106;
react_production_min.Fragment = 60107;
react_production_min.StrictMode = 60108;
react_production_min.Profiler = 60114;
var q$1 = 60109,
    r$1 = 60110,
    t = 60112;
react_production_min.Suspense = 60113;
var u = 60115,
    v = 60116;
if ('function' === typeof Symbol && Symbol.for) {
    var w = Symbol.for;
    n$1 = w('react.element');
    p$1 = w('react.portal');
    react_production_min.Fragment = w('react.fragment');
    react_production_min.StrictMode = w('react.strict_mode');
    react_production_min.Profiler = w('react.profiler');
    q$1 = w('react.provider');
    r$1 = w('react.context');
    t = w('react.forward_ref');
    react_production_min.Suspense = w('react.suspense');
    u = w('react.memo');
    v = w('react.lazy');
}
var x = 'function' === typeof Symbol && Symbol.iterator;
function y$1(a) {
    if (null === a || 'object' !== typeof a) return null;
    a = (x && a[x]) || a['@@iterator'];
    return 'function' === typeof a ? a : null;
}
function z(a) {
    for (var b = 'https://reactjs.org/docs/error-decoder.html?invariant=' + a, c = 1; c < arguments.length; c++) b += '&args[]=' + encodeURIComponent(arguments[c]);
    return 'Minified React error #' + a + '; visit ' + b + ' for the full message or use the non-minified dev environment for full errors and additional helpful warnings.';
}
var A = {
        isMounted: function () {
            return !1;
        },
        enqueueForceUpdate: function () {},
        enqueueReplaceState: function () {},
        enqueueSetState: function () {},
    },
    B$1 = {};
function C(a, b, c) {
    this.props = a;
    this.context = b;
    this.refs = B$1;
    this.updater = c || A;
}
C.prototype.isReactComponent = {};
C.prototype.setState = function (a, b) {
    if ('object' !== typeof a && 'function' !== typeof a && null != a) throw Error(z(85));
    this.updater.enqueueSetState(this, a, b, 'setState');
};
C.prototype.forceUpdate = function (a) {
    this.updater.enqueueForceUpdate(this, a, 'forceUpdate');
};
function D$1() {}
D$1.prototype = C.prototype;
function E$1(a, b, c) {
    this.props = a;
    this.context = b;
    this.refs = B$1;
    this.updater = c || A;
}
var F$1 = (E$1.prototype = new D$1());
F$1.constructor = E$1;
l(F$1, C.prototype);
F$1.isPureReactComponent = !0;
var G$1 = { current: null },
    H$1 = Object.prototype.hasOwnProperty,
    I$1 = { key: !0, ref: !0, __self: !0, __source: !0 };
function J(a, b, c) {
    var e,
        d = {},
        k = null,
        h = null;
    if (null != b) for (e in (void 0 !== b.ref && (h = b.ref), void 0 !== b.key && (k = '' + b.key), b)) H$1.call(b, e) && !I$1.hasOwnProperty(e) && (d[e] = b[e]);
    var g = arguments.length - 2;
    if (1 === g) d.children = c;
    else if (1 < g) {
        for (var f = Array(g), m = 0; m < g; m++) f[m] = arguments[m + 2];
        d.children = f;
    }
    if (a && a.defaultProps) for (e in ((g = a.defaultProps), g)) void 0 === d[e] && (d[e] = g[e]);
    return { $$typeof: n$1, type: a, key: k, ref: h, props: d, _owner: G$1.current };
}
function K(a, b) {
    return { $$typeof: n$1, type: a.type, key: b, ref: a.ref, props: a.props, _owner: a._owner };
}
function L(a) {
    return 'object' === typeof a && null !== a && a.$$typeof === n$1;
}
function escape(a) {
    var b = { '=': '=0', ':': '=2' };
    return (
        '$' +
        a.replace(/[=:]/g, function (a) {
            return b[a];
        })
    );
}
var M$1 = /\/+/g;
function N$1(a, b) {
    return 'object' === typeof a && null !== a && null != a.key ? escape('' + a.key) : b.toString(36);
}
function O$1(a, b, c, e, d) {
    var k = typeof a;
    if ('undefined' === k || 'boolean' === k) a = null;
    var h = !1;
    if (null === a) h = !0;
    else
        switch (k) {
            case 'string':
            case 'number':
                h = !0;
                break;
            case 'object':
                switch (a.$$typeof) {
                    case n$1:
                    case p$1:
                        h = !0;
                }
        }
    if (h)
        return (
            (h = a),
            (d = d(h)),
            (a = '' === e ? '.' + N$1(h, 0) : e),
            Array.isArray(d)
                ? ((c = ''),
                  null != a && (c = a.replace(M$1, '$&/') + '/'),
                  O$1(d, b, c, '', function (a) {
                      return a;
                  }))
                : null != d && (L(d) && (d = K(d, c + (!d.key || (h && h.key === d.key) ? '' : ('' + d.key).replace(M$1, '$&/') + '/') + a)), b.push(d)),
            1
        );
    h = 0;
    e = '' === e ? '.' : e + ':';
    if (Array.isArray(a))
        for (var g = 0; g < a.length; g++) {
            k = a[g];
            var f = e + N$1(k, g);
            h += O$1(k, b, c, f, d);
        }
    else if (((f = y$1(a)), 'function' === typeof f)) for (a = f.call(a), g = 0; !(k = a.next()).done; ) (k = k.value), (f = e + N$1(k, g++)), (h += O$1(k, b, c, f, d));
    else if ('object' === k) throw ((b = '' + a), Error(z(31, '[object Object]' === b ? 'object with keys {' + Object.keys(a).join(', ') + '}' : b)));
    return h;
}
function P$1(a, b, c) {
    if (null == a) return a;
    var e = [],
        d = 0;
    O$1(a, e, '', '', function (a) {
        return b.call(c, a, d++);
    });
    return e;
}
function Q(a) {
    if (-1 === a._status) {
        var b = a._result;
        b = b();
        a._status = 0;
        a._result = b;
        b.then(
            function (b) {
                0 === a._status && ((b = b.default), (a._status = 1), (a._result = b));
            },
            function (b) {
                0 === a._status && ((a._status = 2), (a._result = b));
            }
        );
    }
    if (1 === a._status) return a._result;
    throw a._result;
}
var R$1 = { current: null };
function S$1() {
    var a = R$1.current;
    if (null === a) throw Error(z(321));
    return a;
}
var T$1 = { ReactCurrentDispatcher: R$1, ReactCurrentBatchConfig: { transition: 0 }, ReactCurrentOwner: G$1, IsSomeRendererActing: { current: !1 }, assign: l };
react_production_min.Children = {
    map: P$1,
    forEach: function (a, b, c) {
        P$1(
            a,
            function () {
                b.apply(this, arguments);
            },
            c
        );
    },
    count: function (a) {
        var b = 0;
        P$1(a, function () {
            b++;
        });
        return b;
    },
    toArray: function (a) {
        return (
            P$1(a, function (a) {
                return a;
            }) || []
        );
    },
    only: function (a) {
        if (!L(a)) throw Error(z(143));
        return a;
    },
};
react_production_min.Component = C;
react_production_min.PureComponent = E$1;
react_production_min.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = T$1;
react_production_min.cloneElement = function (a, b, c) {
    if (null === a || void 0 === a) throw Error(z(267, a));
    var e = l({}, a.props),
        d = a.key,
        k = a.ref,
        h = a._owner;
    if (null != b) {
        void 0 !== b.ref && ((k = b.ref), (h = G$1.current));
        void 0 !== b.key && (d = '' + b.key);
        if (a.type && a.type.defaultProps) var g = a.type.defaultProps;
        for (f in b) H$1.call(b, f) && !I$1.hasOwnProperty(f) && (e[f] = void 0 === b[f] && void 0 !== g ? g[f] : b[f]);
    }
    var f = arguments.length - 2;
    if (1 === f) e.children = c;
    else if (1 < f) {
        g = Array(f);
        for (var m = 0; m < f; m++) g[m] = arguments[m + 2];
        e.children = g;
    }
    return { $$typeof: n$1, type: a.type, key: d, ref: k, props: e, _owner: h };
};
react_production_min.createContext = function (a, b) {
    void 0 === b && (b = null);
    a = { $$typeof: r$1, _calculateChangedBits: b, _currentValue: a, _currentValue2: a, _threadCount: 0, Provider: null, Consumer: null };
    a.Provider = { $$typeof: q$1, _context: a };
    return (a.Consumer = a);
};
react_production_min.createElement = J;
react_production_min.createFactory = function (a) {
    var b = J.bind(null, a);
    b.type = a;
    return b;
};
react_production_min.createRef = function () {
    return { current: null };
};
react_production_min.forwardRef = function (a) {
    return { $$typeof: t, render: a };
};
react_production_min.isValidElement = L;
react_production_min.lazy = function (a) {
    return { $$typeof: v, _payload: { _status: -1, _result: a }, _init: Q };
};
react_production_min.memo = function (a, b) {
    return { $$typeof: u, type: a, compare: void 0 === b ? null : b };
};
react_production_min.useCallback = function (a, b) {
    return S$1().useCallback(a, b);
};
react_production_min.useContext = function (a, b) {
    return S$1().useContext(a, b);
};
react_production_min.useDebugValue = function () {};
react_production_min.useEffect = function (a, b) {
    return S$1().useEffect(a, b);
};
react_production_min.useImperativeHandle = function (a, b, c) {
    return S$1().useImperativeHandle(a, b, c);
};
react_production_min.useLayoutEffect = function (a, b) {
    return S$1().useLayoutEffect(a, b);
};
react_production_min.useMemo = function (a, b) {
    return S$1().useMemo(a, b);
};
react_production_min.useReducer = function (a, b, c) {
    return S$1().useReducer(a, b, c);
};
react_production_min.useRef = function (a) {
    return S$1().useRef(a);
};
react_production_min.useState = function (a) {
    return S$1().useState(a);
};
react_production_min.version = '17.0.2';

{
    react.exports = react_production_min;
}

var React = react.exports;

var scheduler = { exports: {} };

var scheduler_production_min = {};

/** @license React v0.20.2
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

(function (exports) {
    var f, g, h, k;
    if ('object' === typeof performance && 'function' === typeof performance.now) {
        var l = performance;
        exports.unstable_now = function () {
            return l.now();
        };
    } else {
        var p = Date,
            q = p.now();
        exports.unstable_now = function () {
            return p.now() - q;
        };
    }
    if ('undefined' === typeof window || 'function' !== typeof MessageChannel) {
        var t = null,
            u = null,
            w = function () {
                if (null !== t)
                    try {
                        var a = exports.unstable_now();
                        t(!0, a);
                        t = null;
                    } catch (b) {
                        throw (setTimeout(w, 0), b);
                    }
            };
        f = function (a) {
            null !== t ? setTimeout(f, 0, a) : ((t = a), setTimeout(w, 0));
        };
        g = function (a, b) {
            u = setTimeout(a, b);
        };
        h = function () {
            clearTimeout(u);
        };
        exports.unstable_shouldYield = function () {
            return !1;
        };
        k = exports.unstable_forceFrameRate = function () {};
    } else {
        var x = window.setTimeout,
            y = window.clearTimeout;
        if ('undefined' !== typeof console) {
            var z = window.cancelAnimationFrame;
            'function' !== typeof window.requestAnimationFrame && console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
            'function' !== typeof z && console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
        }
        var A = !1,
            B = null,
            C = -1,
            D = 5,
            E = 0;
        exports.unstable_shouldYield = function () {
            return exports.unstable_now() >= E;
        };
        k = function () {};
        exports.unstable_forceFrameRate = function (a) {
            0 > a || 125 < a ? console.error('forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported') : (D = 0 < a ? Math.floor(1e3 / a) : 5);
        };
        var F = new MessageChannel(),
            G = F.port2;
        F.port1.onmessage = function () {
            if (null !== B) {
                var a = exports.unstable_now();
                E = a + D;
                try {
                    B(!0, a) ? G.postMessage(null) : ((A = !1), (B = null));
                } catch (b) {
                    throw (G.postMessage(null), b);
                }
            } else A = !1;
        };
        f = function (a) {
            B = a;
            A || ((A = !0), G.postMessage(null));
        };
        g = function (a, b) {
            C = x(function () {
                a(exports.unstable_now());
            }, b);
        };
        h = function () {
            y(C);
            C = -1;
        };
    }
    function H(a, b) {
        var c = a.length;
        a.push(b);
        a: for (;;) {
            var d = (c - 1) >>> 1,
                e = a[d];
            if (void 0 !== e && 0 < I(e, b)) (a[d] = b), (a[c] = e), (c = d);
            else break a;
        }
    }
    function J(a) {
        a = a[0];
        return void 0 === a ? null : a;
    }
    function K(a) {
        var b = a[0];
        if (void 0 !== b) {
            var c = a.pop();
            if (c !== b) {
                a[0] = c;
                a: for (var d = 0, e = a.length; d < e; ) {
                    var m = 2 * (d + 1) - 1,
                        n = a[m],
                        v = m + 1,
                        r = a[v];
                    if (void 0 !== n && 0 > I(n, c)) void 0 !== r && 0 > I(r, n) ? ((a[d] = r), (a[v] = c), (d = v)) : ((a[d] = n), (a[m] = c), (d = m));
                    else if (void 0 !== r && 0 > I(r, c)) (a[d] = r), (a[v] = c), (d = v);
                    else break a;
                }
            }
            return b;
        }
        return null;
    }
    function I(a, b) {
        var c = a.sortIndex - b.sortIndex;
        return 0 !== c ? c : a.id - b.id;
    }
    var L = [],
        M = [],
        N = 1,
        O = null,
        P = 3,
        Q = !1,
        R = !1,
        S = !1;
    function T(a) {
        for (var b = J(M); null !== b; ) {
            if (null === b.callback) K(M);
            else if (b.startTime <= a) K(M), (b.sortIndex = b.expirationTime), H(L, b);
            else break;
            b = J(M);
        }
    }
    function U(a) {
        S = !1;
        T(a);
        if (!R)
            if (null !== J(L)) (R = !0), f(V);
            else {
                var b = J(M);
                null !== b && g(U, b.startTime - a);
            }
    }
    function V(a, b) {
        R = !1;
        S && ((S = !1), h());
        Q = !0;
        var c = P;
        try {
            T(b);
            for (O = J(L); null !== O && (!(O.expirationTime > b) || (a && !exports.unstable_shouldYield())); ) {
                var d = O.callback;
                if ('function' === typeof d) {
                    O.callback = null;
                    P = O.priorityLevel;
                    var e = d(O.expirationTime <= b);
                    b = exports.unstable_now();
                    'function' === typeof e ? (O.callback = e) : O === J(L) && K(L);
                    T(b);
                } else K(L);
                O = J(L);
            }
            if (null !== O) var m = !0;
            else {
                var n = J(M);
                null !== n && g(U, n.startTime - b);
                m = !1;
            }
            return m;
        } finally {
            (O = null), (P = c), (Q = !1);
        }
    }
    var W = k;
    exports.unstable_IdlePriority = 5;
    exports.unstable_ImmediatePriority = 1;
    exports.unstable_LowPriority = 4;
    exports.unstable_NormalPriority = 3;
    exports.unstable_Profiling = null;
    exports.unstable_UserBlockingPriority = 2;
    exports.unstable_cancelCallback = function (a) {
        a.callback = null;
    };
    exports.unstable_continueExecution = function () {
        R || Q || ((R = !0), f(V));
    };
    exports.unstable_getCurrentPriorityLevel = function () {
        return P;
    };
    exports.unstable_getFirstCallbackNode = function () {
        return J(L);
    };
    exports.unstable_next = function (a) {
        switch (P) {
            case 1:
            case 2:
            case 3:
                var b = 3;
                break;
            default:
                b = P;
        }
        var c = P;
        P = b;
        try {
            return a();
        } finally {
            P = c;
        }
    };
    exports.unstable_pauseExecution = function () {};
    exports.unstable_requestPaint = W;
    exports.unstable_runWithPriority = function (a, b) {
        switch (a) {
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
                break;
            default:
                a = 3;
        }
        var c = P;
        P = a;
        try {
            return b();
        } finally {
            P = c;
        }
    };
    exports.unstable_scheduleCallback = function (a, b, c) {
        var d = exports.unstable_now();
        'object' === typeof c && null !== c ? ((c = c.delay), (c = 'number' === typeof c && 0 < c ? d + c : d)) : (c = d);
        switch (a) {
            case 1:
                var e = -1;
                break;
            case 2:
                e = 250;
                break;
            case 5:
                e = 1073741823;
                break;
            case 4:
                e = 1e4;
                break;
            default:
                e = 5e3;
        }
        e = c + e;
        a = { id: N++, callback: b, priorityLevel: a, startTime: c, expirationTime: e, sortIndex: -1 };
        c > d ? ((a.sortIndex = c), H(M, a), null === J(L) && a === J(M) && (S ? h() : (S = !0), g(U, c - d))) : ((a.sortIndex = e), H(L, a), R || Q || ((R = !0), f(V)));
        return a;
    };
    exports.unstable_wrapCallback = function (a) {
        var b = P;
        return function () {
            var c = P;
            P = b;
            try {
                return a.apply(this, arguments);
            } finally {
                P = c;
            }
        };
    };
})(scheduler_production_min);

{
    scheduler.exports = scheduler_production_min;
}

/** @license React v17.0.2
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var aa = react.exports,
    m$1 = objectAssign,
    r = scheduler.exports;
function y(a) {
    for (var b = 'https://reactjs.org/docs/error-decoder.html?invariant=' + a, c = 1; c < arguments.length; c++) b += '&args[]=' + encodeURIComponent(arguments[c]);
    return 'Minified React error #' + a + '; visit ' + b + ' for the full message or use the non-minified dev environment for full errors and additional helpful warnings.';
}
if (!aa) throw Error(y(227));
var ba = new Set(),
    ca = {};
function da(a, b) {
    ea(a, b);
    ea(a + 'Capture', b);
}
function ea(a, b) {
    ca[a] = b;
    for (a = 0; a < b.length; a++) ba.add(b[a]);
}
var fa = !('undefined' === typeof window || 'undefined' === typeof window.document || 'undefined' === typeof window.document.createElement),
    ha =
        /^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,
    ia = Object.prototype.hasOwnProperty,
    ja = {},
    ka = {};
function la(a) {
    if (ia.call(ka, a)) return !0;
    if (ia.call(ja, a)) return !1;
    if (ha.test(a)) return (ka[a] = !0);
    ja[a] = !0;
    return !1;
}
function ma(a, b, c, d) {
    if (null !== c && 0 === c.type) return !1;
    switch (typeof b) {
        case 'function':
        case 'symbol':
            return !0;
        case 'boolean':
            if (d) return !1;
            if (null !== c) return !c.acceptsBooleans;
            a = a.toLowerCase().slice(0, 5);
            return 'data-' !== a && 'aria-' !== a;
        default:
            return !1;
    }
}
function na(a, b, c, d) {
    if (null === b || 'undefined' === typeof b || ma(a, b, c, d)) return !0;
    if (d) return !1;
    if (null !== c)
        switch (c.type) {
            case 3:
                return !b;
            case 4:
                return !1 === b;
            case 5:
                return isNaN(b);
            case 6:
                return isNaN(b) || 1 > b;
        }
    return !1;
}
function B(a, b, c, d, e, f, g) {
    this.acceptsBooleans = 2 === b || 3 === b || 4 === b;
    this.attributeName = d;
    this.attributeNamespace = e;
    this.mustUseProperty = c;
    this.propertyName = a;
    this.type = b;
    this.sanitizeURL = f;
    this.removeEmptyString = g;
}
var D = {};
'children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style'.split(' ').forEach(function (a) {
    D[a] = new B(a, 0, !1, a, null, !1, !1);
});
[
    ['acceptCharset', 'accept-charset'],
    ['className', 'class'],
    ['htmlFor', 'for'],
    ['httpEquiv', 'http-equiv'],
].forEach(function (a) {
    var b = a[0];
    D[b] = new B(b, 1, !1, a[1], null, !1, !1);
});
['contentEditable', 'draggable', 'spellCheck', 'value'].forEach(function (a) {
    D[a] = new B(a, 2, !1, a.toLowerCase(), null, !1, !1);
});
['autoReverse', 'externalResourcesRequired', 'focusable', 'preserveAlpha'].forEach(function (a) {
    D[a] = new B(a, 2, !1, a, null, !1, !1);
});
'allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope'.split(' ').forEach(function (a) {
    D[a] = new B(a, 3, !1, a.toLowerCase(), null, !1, !1);
});
['checked', 'multiple', 'muted', 'selected'].forEach(function (a) {
    D[a] = new B(a, 3, !0, a, null, !1, !1);
});
['capture', 'download'].forEach(function (a) {
    D[a] = new B(a, 4, !1, a, null, !1, !1);
});
['cols', 'rows', 'size', 'span'].forEach(function (a) {
    D[a] = new B(a, 6, !1, a, null, !1, !1);
});
['rowSpan', 'start'].forEach(function (a) {
    D[a] = new B(a, 5, !1, a.toLowerCase(), null, !1, !1);
});
var oa = /[\-:]([a-z])/g;
function pa(a) {
    return a[1].toUpperCase();
}
'accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height'
    .split(' ')
    .forEach(function (a) {
        var b = a.replace(oa, pa);
        D[b] = new B(b, 1, !1, a, null, !1, !1);
    });
'xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type'.split(' ').forEach(function (a) {
    var b = a.replace(oa, pa);
    D[b] = new B(b, 1, !1, a, 'http://www.w3.org/1999/xlink', !1, !1);
});
['xml:base', 'xml:lang', 'xml:space'].forEach(function (a) {
    var b = a.replace(oa, pa);
    D[b] = new B(b, 1, !1, a, 'http://www.w3.org/XML/1998/namespace', !1, !1);
});
['tabIndex', 'crossOrigin'].forEach(function (a) {
    D[a] = new B(a, 1, !1, a.toLowerCase(), null, !1, !1);
});
D.xlinkHref = new B('xlinkHref', 1, !1, 'xlink:href', 'http://www.w3.org/1999/xlink', !0, !1);
['src', 'href', 'action', 'formAction'].forEach(function (a) {
    D[a] = new B(a, 1, !1, a.toLowerCase(), null, !0, !0);
});
function qa(a, b, c, d) {
    var e = D.hasOwnProperty(b) ? D[b] : null;
    var f = null !== e ? 0 === e.type : d ? !1 : !(2 < b.length) || ('o' !== b[0] && 'O' !== b[0]) || ('n' !== b[1] && 'N' !== b[1]) ? !1 : !0;
    f ||
        (na(b, c, e, d) && (c = null),
        d || null === e
            ? la(b) && (null === c ? a.removeAttribute(b) : a.setAttribute(b, '' + c))
            : e.mustUseProperty
            ? (a[e.propertyName] = null === c ? (3 === e.type ? !1 : '') : c)
            : ((b = e.attributeName), (d = e.attributeNamespace), null === c ? a.removeAttribute(b) : ((e = e.type), (c = 3 === e || (4 === e && !0 === c) ? '' : '' + c), d ? a.setAttributeNS(d, b, c) : a.setAttribute(b, c))));
}
var ra = aa.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,
    sa = 60103,
    ta = 60106,
    ua = 60107,
    wa = 60108,
    xa = 60114,
    ya = 60109,
    za = 60110,
    Aa = 60112,
    Ba = 60113,
    Ca = 60120,
    Da = 60115,
    Ea = 60116,
    Fa = 60121,
    Ga = 60128,
    Ha = 60129,
    Ia = 60130,
    Ja = 60131;
if ('function' === typeof Symbol && Symbol.for) {
    var E = Symbol.for;
    sa = E('react.element');
    ta = E('react.portal');
    ua = E('react.fragment');
    wa = E('react.strict_mode');
    xa = E('react.profiler');
    ya = E('react.provider');
    za = E('react.context');
    Aa = E('react.forward_ref');
    Ba = E('react.suspense');
    Ca = E('react.suspense_list');
    Da = E('react.memo');
    Ea = E('react.lazy');
    Fa = E('react.block');
    E('react.scope');
    Ga = E('react.opaque.id');
    Ha = E('react.debug_trace_mode');
    Ia = E('react.offscreen');
    Ja = E('react.legacy_hidden');
}
var Ka = 'function' === typeof Symbol && Symbol.iterator;
function La(a) {
    if (null === a || 'object' !== typeof a) return null;
    a = (Ka && a[Ka]) || a['@@iterator'];
    return 'function' === typeof a ? a : null;
}
var Ma;
function Na(a) {
    if (void 0 === Ma)
        try {
            throw Error();
        } catch (c) {
            var b = c.stack.trim().match(/\n( *(at )?)/);
            Ma = (b && b[1]) || '';
        }
    return '\n' + Ma + a;
}
var Oa = !1;
function Pa(a, b) {
    if (!a || Oa) return '';
    Oa = !0;
    var c = Error.prepareStackTrace;
    Error.prepareStackTrace = void 0;
    try {
        if (b)
            if (
                ((b = function () {
                    throw Error();
                }),
                Object.defineProperty(b.prototype, 'props', {
                    set: function () {
                        throw Error();
                    },
                }),
                'object' === typeof Reflect && Reflect.construct)
            ) {
                try {
                    Reflect.construct(b, []);
                } catch (k) {
                    var d = k;
                }
                Reflect.construct(a, [], b);
            } else {
                try {
                    b.call();
                } catch (k) {
                    d = k;
                }
                a.call(b.prototype);
            }
        else {
            try {
                throw Error();
            } catch (k) {
                d = k;
            }
            a();
        }
    } catch (k) {
        if (k && d && 'string' === typeof k.stack) {
            for (var e = k.stack.split('\n'), f = d.stack.split('\n'), g = e.length - 1, h = f.length - 1; 1 <= g && 0 <= h && e[g] !== f[h]; ) h--;
            for (; 1 <= g && 0 <= h; g--, h--)
                if (e[g] !== f[h]) {
                    if (1 !== g || 1 !== h) {
                        do if ((g--, h--, 0 > h || e[g] !== f[h])) return '\n' + e[g].replace(' at new ', ' at ');
                        while (1 <= g && 0 <= h);
                    }
                    break;
                }
        }
    } finally {
        (Oa = !1), (Error.prepareStackTrace = c);
    }
    return (a = a ? a.displayName || a.name : '') ? Na(a) : '';
}
function Qa(a) {
    switch (a.tag) {
        case 5:
            return Na(a.type);
        case 16:
            return Na('Lazy');
        case 13:
            return Na('Suspense');
        case 19:
            return Na('SuspenseList');
        case 0:
        case 2:
        case 15:
            return (a = Pa(a.type, !1)), a;
        case 11:
            return (a = Pa(a.type.render, !1)), a;
        case 22:
            return (a = Pa(a.type._render, !1)), a;
        case 1:
            return (a = Pa(a.type, !0)), a;
        default:
            return '';
    }
}
function Ra(a) {
    if (null == a) return null;
    if ('function' === typeof a) return a.displayName || a.name || null;
    if ('string' === typeof a) return a;
    switch (a) {
        case ua:
            return 'Fragment';
        case ta:
            return 'Portal';
        case xa:
            return 'Profiler';
        case wa:
            return 'StrictMode';
        case Ba:
            return 'Suspense';
        case Ca:
            return 'SuspenseList';
    }
    if ('object' === typeof a)
        switch (a.$$typeof) {
            case za:
                return (a.displayName || 'Context') + '.Consumer';
            case ya:
                return (a._context.displayName || 'Context') + '.Provider';
            case Aa:
                var b = a.render;
                b = b.displayName || b.name || '';
                return a.displayName || ('' !== b ? 'ForwardRef(' + b + ')' : 'ForwardRef');
            case Da:
                return Ra(a.type);
            case Fa:
                return Ra(a._render);
            case Ea:
                b = a._payload;
                a = a._init;
                try {
                    return Ra(a(b));
                } catch (c) {}
        }
    return null;
}
function Sa(a) {
    switch (typeof a) {
        case 'boolean':
        case 'number':
        case 'object':
        case 'string':
        case 'undefined':
            return a;
        default:
            return '';
    }
}
function Ta(a) {
    var b = a.type;
    return (a = a.nodeName) && 'input' === a.toLowerCase() && ('checkbox' === b || 'radio' === b);
}
function Ua(a) {
    var b = Ta(a) ? 'checked' : 'value',
        c = Object.getOwnPropertyDescriptor(a.constructor.prototype, b),
        d = '' + a[b];
    if (!a.hasOwnProperty(b) && 'undefined' !== typeof c && 'function' === typeof c.get && 'function' === typeof c.set) {
        var e = c.get,
            f = c.set;
        Object.defineProperty(a, b, {
            configurable: !0,
            get: function () {
                return e.call(this);
            },
            set: function (a) {
                d = '' + a;
                f.call(this, a);
            },
        });
        Object.defineProperty(a, b, { enumerable: c.enumerable });
        return {
            getValue: function () {
                return d;
            },
            setValue: function (a) {
                d = '' + a;
            },
            stopTracking: function () {
                a._valueTracker = null;
                delete a[b];
            },
        };
    }
}
function Va(a) {
    a._valueTracker || (a._valueTracker = Ua(a));
}
function Wa(a) {
    if (!a) return !1;
    var b = a._valueTracker;
    if (!b) return !0;
    var c = b.getValue();
    var d = '';
    a && (d = Ta(a) ? (a.checked ? 'true' : 'false') : a.value);
    a = d;
    return a !== c ? (b.setValue(a), !0) : !1;
}
function Xa(a) {
    a = a || ('undefined' !== typeof document ? document : void 0);
    if ('undefined' === typeof a) return null;
    try {
        return a.activeElement || a.body;
    } catch (b) {
        return a.body;
    }
}
function Ya(a, b) {
    var c = b.checked;
    return m$1({}, b, { defaultChecked: void 0, defaultValue: void 0, value: void 0, checked: null != c ? c : a._wrapperState.initialChecked });
}
function Za(a, b) {
    var c = null == b.defaultValue ? '' : b.defaultValue,
        d = null != b.checked ? b.checked : b.defaultChecked;
    c = Sa(null != b.value ? b.value : c);
    a._wrapperState = { initialChecked: d, initialValue: c, controlled: 'checkbox' === b.type || 'radio' === b.type ? null != b.checked : null != b.value };
}
function $a(a, b) {
    b = b.checked;
    null != b && qa(a, 'checked', b, !1);
}
function ab(a, b) {
    $a(a, b);
    var c = Sa(b.value),
        d = b.type;
    if (null != c)
        if ('number' === d) {
            if ((0 === c && '' === a.value) || a.value != c) a.value = '' + c;
        } else a.value !== '' + c && (a.value = '' + c);
    else if ('submit' === d || 'reset' === d) {
        a.removeAttribute('value');
        return;
    }
    b.hasOwnProperty('value') ? bb(a, b.type, c) : b.hasOwnProperty('defaultValue') && bb(a, b.type, Sa(b.defaultValue));
    null == b.checked && null != b.defaultChecked && (a.defaultChecked = !!b.defaultChecked);
}
function cb(a, b, c) {
    if (b.hasOwnProperty('value') || b.hasOwnProperty('defaultValue')) {
        var d = b.type;
        if (!(('submit' !== d && 'reset' !== d) || (void 0 !== b.value && null !== b.value))) return;
        b = '' + a._wrapperState.initialValue;
        c || b === a.value || (a.value = b);
        a.defaultValue = b;
    }
    c = a.name;
    '' !== c && (a.name = '');
    a.defaultChecked = !!a._wrapperState.initialChecked;
    '' !== c && (a.name = c);
}
function bb(a, b, c) {
    if ('number' !== b || Xa(a.ownerDocument) !== a) null == c ? (a.defaultValue = '' + a._wrapperState.initialValue) : a.defaultValue !== '' + c && (a.defaultValue = '' + c);
}
function db(a) {
    var b = '';
    aa.Children.forEach(a, function (a) {
        null != a && (b += a);
    });
    return b;
}
function eb(a, b) {
    a = m$1({ children: void 0 }, b);
    if ((b = db(b.children))) a.children = b;
    return a;
}
function fb(a, b, c, d) {
    a = a.options;
    if (b) {
        b = {};
        for (var e = 0; e < c.length; e++) b['$' + c[e]] = !0;
        for (c = 0; c < a.length; c++) (e = b.hasOwnProperty('$' + a[c].value)), a[c].selected !== e && (a[c].selected = e), e && d && (a[c].defaultSelected = !0);
    } else {
        c = '' + Sa(c);
        b = null;
        for (e = 0; e < a.length; e++) {
            if (a[e].value === c) {
                a[e].selected = !0;
                d && (a[e].defaultSelected = !0);
                return;
            }
            null !== b || a[e].disabled || (b = a[e]);
        }
        null !== b && (b.selected = !0);
    }
}
function gb(a, b) {
    if (null != b.dangerouslySetInnerHTML) throw Error(y(91));
    return m$1({}, b, { value: void 0, defaultValue: void 0, children: '' + a._wrapperState.initialValue });
}
function hb(a, b) {
    var c = b.value;
    if (null == c) {
        c = b.children;
        b = b.defaultValue;
        if (null != c) {
            if (null != b) throw Error(y(92));
            if (Array.isArray(c)) {
                if (!(1 >= c.length)) throw Error(y(93));
                c = c[0];
            }
            b = c;
        }
        null == b && (b = '');
        c = b;
    }
    a._wrapperState = { initialValue: Sa(c) };
}
function ib(a, b) {
    var c = Sa(b.value),
        d = Sa(b.defaultValue);
    null != c && ((c = '' + c), c !== a.value && (a.value = c), null == b.defaultValue && a.defaultValue !== c && (a.defaultValue = c));
    null != d && (a.defaultValue = '' + d);
}
function jb(a) {
    var b = a.textContent;
    b === a._wrapperState.initialValue && '' !== b && null !== b && (a.value = b);
}
var kb = { html: 'http://www.w3.org/1999/xhtml', mathml: 'http://www.w3.org/1998/Math/MathML', svg: 'http://www.w3.org/2000/svg' };
function lb(a) {
    switch (a) {
        case 'svg':
            return 'http://www.w3.org/2000/svg';
        case 'math':
            return 'http://www.w3.org/1998/Math/MathML';
        default:
            return 'http://www.w3.org/1999/xhtml';
    }
}
function mb(a, b) {
    return null == a || 'http://www.w3.org/1999/xhtml' === a ? lb(b) : 'http://www.w3.org/2000/svg' === a && 'foreignObject' === b ? 'http://www.w3.org/1999/xhtml' : a;
}
var nb,
    ob = (function (a) {
        return 'undefined' !== typeof MSApp && MSApp.execUnsafeLocalFunction
            ? function (b, c, d, e) {
                  MSApp.execUnsafeLocalFunction(function () {
                      return a(b, c, d, e);
                  });
              }
            : a;
    })(function (a, b) {
        if (a.namespaceURI !== kb.svg || 'innerHTML' in a) a.innerHTML = b;
        else {
            nb = nb || document.createElement('div');
            nb.innerHTML = '<svg>' + b.valueOf().toString() + '</svg>';
            for (b = nb.firstChild; a.firstChild; ) a.removeChild(a.firstChild);
            for (; b.firstChild; ) a.appendChild(b.firstChild);
        }
    });
function pb(a, b) {
    if (b) {
        var c = a.firstChild;
        if (c && c === a.lastChild && 3 === c.nodeType) {
            c.nodeValue = b;
            return;
        }
    }
    a.textContent = b;
}
var qb = {
        animationIterationCount: !0,
        borderImageOutset: !0,
        borderImageSlice: !0,
        borderImageWidth: !0,
        boxFlex: !0,
        boxFlexGroup: !0,
        boxOrdinalGroup: !0,
        columnCount: !0,
        columns: !0,
        flex: !0,
        flexGrow: !0,
        flexPositive: !0,
        flexShrink: !0,
        flexNegative: !0,
        flexOrder: !0,
        gridArea: !0,
        gridRow: !0,
        gridRowEnd: !0,
        gridRowSpan: !0,
        gridRowStart: !0,
        gridColumn: !0,
        gridColumnEnd: !0,
        gridColumnSpan: !0,
        gridColumnStart: !0,
        fontWeight: !0,
        lineClamp: !0,
        lineHeight: !0,
        opacity: !0,
        order: !0,
        orphans: !0,
        tabSize: !0,
        widows: !0,
        zIndex: !0,
        zoom: !0,
        fillOpacity: !0,
        floodOpacity: !0,
        stopOpacity: !0,
        strokeDasharray: !0,
        strokeDashoffset: !0,
        strokeMiterlimit: !0,
        strokeOpacity: !0,
        strokeWidth: !0,
    },
    rb = ['Webkit', 'ms', 'Moz', 'O'];
Object.keys(qb).forEach(function (a) {
    rb.forEach(function (b) {
        b = b + a.charAt(0).toUpperCase() + a.substring(1);
        qb[b] = qb[a];
    });
});
function sb(a, b, c) {
    return null == b || 'boolean' === typeof b || '' === b ? '' : c || 'number' !== typeof b || 0 === b || (qb.hasOwnProperty(a) && qb[a]) ? ('' + b).trim() : b + 'px';
}
function tb(a, b) {
    a = a.style;
    for (var c in b)
        if (b.hasOwnProperty(c)) {
            var d = 0 === c.indexOf('--'),
                e = sb(c, b[c], d);
            'float' === c && (c = 'cssFloat');
            d ? a.setProperty(c, e) : (a[c] = e);
        }
}
var ub = m$1({ menuitem: !0 }, { area: !0, base: !0, br: !0, col: !0, embed: !0, hr: !0, img: !0, input: !0, keygen: !0, link: !0, meta: !0, param: !0, source: !0, track: !0, wbr: !0 });
function vb(a, b) {
    if (b) {
        if (ub[a] && (null != b.children || null != b.dangerouslySetInnerHTML)) throw Error(y(137, a));
        if (null != b.dangerouslySetInnerHTML) {
            if (null != b.children) throw Error(y(60));
            if (!('object' === typeof b.dangerouslySetInnerHTML && '__html' in b.dangerouslySetInnerHTML)) throw Error(y(61));
        }
        if (null != b.style && 'object' !== typeof b.style) throw Error(y(62));
    }
}
function wb(a, b) {
    if (-1 === a.indexOf('-')) return 'string' === typeof b.is;
    switch (a) {
        case 'annotation-xml':
        case 'color-profile':
        case 'font-face':
        case 'font-face-src':
        case 'font-face-uri':
        case 'font-face-format':
        case 'font-face-name':
        case 'missing-glyph':
            return !1;
        default:
            return !0;
    }
}
function xb(a) {
    a = a.target || a.srcElement || window;
    a.correspondingUseElement && (a = a.correspondingUseElement);
    return 3 === a.nodeType ? a.parentNode : a;
}
var yb = null,
    zb = null,
    Ab = null;
function Bb(a) {
    if ((a = Cb(a))) {
        if ('function' !== typeof yb) throw Error(y(280));
        var b = a.stateNode;
        b && ((b = Db(b)), yb(a.stateNode, a.type, b));
    }
}
function Eb(a) {
    zb ? (Ab ? Ab.push(a) : (Ab = [a])) : (zb = a);
}
function Fb() {
    if (zb) {
        var a = zb,
            b = Ab;
        Ab = zb = null;
        Bb(a);
        if (b) for (a = 0; a < b.length; a++) Bb(b[a]);
    }
}
function Gb(a, b) {
    return a(b);
}
function Hb(a, b, c, d, e) {
    return a(b, c, d, e);
}
function Ib() {}
var Jb = Gb,
    Kb = !1,
    Lb = !1;
function Mb() {
    if (null !== zb || null !== Ab) Ib(), Fb();
}
function Nb(a, b, c) {
    if (Lb) return a(b, c);
    Lb = !0;
    try {
        return Jb(a, b, c);
    } finally {
        (Lb = !1), Mb();
    }
}
function Ob(a, b) {
    var c = a.stateNode;
    if (null === c) return null;
    var d = Db(c);
    if (null === d) return null;
    c = d[b];
    a: switch (b) {
        case 'onClick':
        case 'onClickCapture':
        case 'onDoubleClick':
        case 'onDoubleClickCapture':
        case 'onMouseDown':
        case 'onMouseDownCapture':
        case 'onMouseMove':
        case 'onMouseMoveCapture':
        case 'onMouseUp':
        case 'onMouseUpCapture':
        case 'onMouseEnter':
            (d = !d.disabled) || ((a = a.type), (d = !('button' === a || 'input' === a || 'select' === a || 'textarea' === a)));
            a = !d;
            break a;
        default:
            a = !1;
    }
    if (a) return null;
    if (c && 'function' !== typeof c) throw Error(y(231, b, typeof c));
    return c;
}
var Pb = !1;
if (fa)
    try {
        var Qb = {};
        Object.defineProperty(Qb, 'passive', {
            get: function () {
                Pb = !0;
            },
        });
        window.addEventListener('test', Qb, Qb);
        window.removeEventListener('test', Qb, Qb);
    } catch (a) {
        Pb = !1;
    }
function Rb(a, b, c, d, e, f, g, h, k) {
    var l = Array.prototype.slice.call(arguments, 3);
    try {
        b.apply(c, l);
    } catch (n) {
        this.onError(n);
    }
}
var Sb = !1,
    Tb = null,
    Ub = !1,
    Vb = null,
    Wb = {
        onError: function (a) {
            Sb = !0;
            Tb = a;
        },
    };
function Xb(a, b, c, d, e, f, g, h, k) {
    Sb = !1;
    Tb = null;
    Rb.apply(Wb, arguments);
}
function Yb(a, b, c, d, e, f, g, h, k) {
    Xb.apply(this, arguments);
    if (Sb) {
        if (Sb) {
            var l = Tb;
            Sb = !1;
            Tb = null;
        } else throw Error(y(198));
        Ub || ((Ub = !0), (Vb = l));
    }
}
function Zb(a) {
    var b = a,
        c = a;
    if (a.alternate) for (; b.return; ) b = b.return;
    else {
        a = b;
        do (b = a), 0 !== (b.flags & 1026) && (c = b.return), (a = b.return);
        while (a);
    }
    return 3 === b.tag ? c : null;
}
function $b(a) {
    if (13 === a.tag) {
        var b = a.memoizedState;
        null === b && ((a = a.alternate), null !== a && (b = a.memoizedState));
        if (null !== b) return b.dehydrated;
    }
    return null;
}
function ac(a) {
    if (Zb(a) !== a) throw Error(y(188));
}
function bc(a) {
    var b = a.alternate;
    if (!b) {
        b = Zb(a);
        if (null === b) throw Error(y(188));
        return b !== a ? null : a;
    }
    for (var c = a, d = b; ; ) {
        var e = c.return;
        if (null === e) break;
        var f = e.alternate;
        if (null === f) {
            d = e.return;
            if (null !== d) {
                c = d;
                continue;
            }
            break;
        }
        if (e.child === f.child) {
            for (f = e.child; f; ) {
                if (f === c) return ac(e), a;
                if (f === d) return ac(e), b;
                f = f.sibling;
            }
            throw Error(y(188));
        }
        if (c.return !== d.return) (c = e), (d = f);
        else {
            for (var g = !1, h = e.child; h; ) {
                if (h === c) {
                    g = !0;
                    c = e;
                    d = f;
                    break;
                }
                if (h === d) {
                    g = !0;
                    d = e;
                    c = f;
                    break;
                }
                h = h.sibling;
            }
            if (!g) {
                for (h = f.child; h; ) {
                    if (h === c) {
                        g = !0;
                        c = f;
                        d = e;
                        break;
                    }
                    if (h === d) {
                        g = !0;
                        d = f;
                        c = e;
                        break;
                    }
                    h = h.sibling;
                }
                if (!g) throw Error(y(189));
            }
        }
        if (c.alternate !== d) throw Error(y(190));
    }
    if (3 !== c.tag) throw Error(y(188));
    return c.stateNode.current === c ? a : b;
}
function cc(a) {
    a = bc(a);
    if (!a) return null;
    for (var b = a; ; ) {
        if (5 === b.tag || 6 === b.tag) return b;
        if (b.child) (b.child.return = b), (b = b.child);
        else {
            if (b === a) break;
            for (; !b.sibling; ) {
                if (!b.return || b.return === a) return null;
                b = b.return;
            }
            b.sibling.return = b.return;
            b = b.sibling;
        }
    }
    return null;
}
function dc(a, b) {
    for (var c = a.alternate; null !== b; ) {
        if (b === a || b === c) return !0;
        b = b.return;
    }
    return !1;
}
var ec,
    fc,
    gc,
    hc,
    ic = !1,
    jc = [],
    kc = null,
    lc = null,
    mc = null,
    nc = new Map(),
    oc = new Map(),
    pc = [],
    qc = 'mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit'.split(' ');
function rc(a, b, c, d, e) {
    return { blockedOn: a, domEventName: b, eventSystemFlags: c | 16, nativeEvent: e, targetContainers: [d] };
}
function sc(a, b) {
    switch (a) {
        case 'focusin':
        case 'focusout':
            kc = null;
            break;
        case 'dragenter':
        case 'dragleave':
            lc = null;
            break;
        case 'mouseover':
        case 'mouseout':
            mc = null;
            break;
        case 'pointerover':
        case 'pointerout':
            nc.delete(b.pointerId);
            break;
        case 'gotpointercapture':
        case 'lostpointercapture':
            oc.delete(b.pointerId);
    }
}
function tc(a, b, c, d, e, f) {
    if (null === a || a.nativeEvent !== f) return (a = rc(b, c, d, e, f)), null !== b && ((b = Cb(b)), null !== b && fc(b)), a;
    a.eventSystemFlags |= d;
    b = a.targetContainers;
    null !== e && -1 === b.indexOf(e) && b.push(e);
    return a;
}
function uc(a, b, c, d, e) {
    switch (b) {
        case 'focusin':
            return (kc = tc(kc, a, b, c, d, e)), !0;
        case 'dragenter':
            return (lc = tc(lc, a, b, c, d, e)), !0;
        case 'mouseover':
            return (mc = tc(mc, a, b, c, d, e)), !0;
        case 'pointerover':
            var f = e.pointerId;
            nc.set(f, tc(nc.get(f) || null, a, b, c, d, e));
            return !0;
        case 'gotpointercapture':
            return (f = e.pointerId), oc.set(f, tc(oc.get(f) || null, a, b, c, d, e)), !0;
    }
    return !1;
}
function vc(a) {
    var b = wc(a.target);
    if (null !== b) {
        var c = Zb(b);
        if (null !== c)
            if (((b = c.tag), 13 === b)) {
                if (((b = $b(c)), null !== b)) {
                    a.blockedOn = b;
                    hc(a.lanePriority, function () {
                        r.unstable_runWithPriority(a.priority, function () {
                            gc(c);
                        });
                    });
                    return;
                }
            } else if (3 === b && c.stateNode.hydrate) {
                a.blockedOn = 3 === c.tag ? c.stateNode.containerInfo : null;
                return;
            }
    }
    a.blockedOn = null;
}
function xc(a) {
    if (null !== a.blockedOn) return !1;
    for (var b = a.targetContainers; 0 < b.length; ) {
        var c = yc(a.domEventName, a.eventSystemFlags, b[0], a.nativeEvent);
        if (null !== c) return (b = Cb(c)), null !== b && fc(b), (a.blockedOn = c), !1;
        b.shift();
    }
    return !0;
}
function zc(a, b, c) {
    xc(a) && c.delete(b);
}
function Ac() {
    for (ic = !1; 0 < jc.length; ) {
        var a = jc[0];
        if (null !== a.blockedOn) {
            a = Cb(a.blockedOn);
            null !== a && ec(a);
            break;
        }
        for (var b = a.targetContainers; 0 < b.length; ) {
            var c = yc(a.domEventName, a.eventSystemFlags, b[0], a.nativeEvent);
            if (null !== c) {
                a.blockedOn = c;
                break;
            }
            b.shift();
        }
        null === a.blockedOn && jc.shift();
    }
    null !== kc && xc(kc) && (kc = null);
    null !== lc && xc(lc) && (lc = null);
    null !== mc && xc(mc) && (mc = null);
    nc.forEach(zc);
    oc.forEach(zc);
}
function Bc(a, b) {
    a.blockedOn === b && ((a.blockedOn = null), ic || ((ic = !0), r.unstable_scheduleCallback(r.unstable_NormalPriority, Ac)));
}
function Cc(a) {
    function b(b) {
        return Bc(b, a);
    }
    if (0 < jc.length) {
        Bc(jc[0], a);
        for (var c = 1; c < jc.length; c++) {
            var d = jc[c];
            d.blockedOn === a && (d.blockedOn = null);
        }
    }
    null !== kc && Bc(kc, a);
    null !== lc && Bc(lc, a);
    null !== mc && Bc(mc, a);
    nc.forEach(b);
    oc.forEach(b);
    for (c = 0; c < pc.length; c++) (d = pc[c]), d.blockedOn === a && (d.blockedOn = null);
    for (; 0 < pc.length && ((c = pc[0]), null === c.blockedOn); ) vc(c), null === c.blockedOn && pc.shift();
}
function Dc(a, b) {
    var c = {};
    c[a.toLowerCase()] = b.toLowerCase();
    c['Webkit' + a] = 'webkit' + b;
    c['Moz' + a] = 'moz' + b;
    return c;
}
var Ec = { animationend: Dc('Animation', 'AnimationEnd'), animationiteration: Dc('Animation', 'AnimationIteration'), animationstart: Dc('Animation', 'AnimationStart'), transitionend: Dc('Transition', 'TransitionEnd') },
    Fc = {},
    Gc = {};
fa && ((Gc = document.createElement('div').style), 'AnimationEvent' in window || (delete Ec.animationend.animation, delete Ec.animationiteration.animation, delete Ec.animationstart.animation), 'TransitionEvent' in window || delete Ec.transitionend.transition);
function Hc(a) {
    if (Fc[a]) return Fc[a];
    if (!Ec[a]) return a;
    var b = Ec[a],
        c;
    for (c in b) if (b.hasOwnProperty(c) && c in Gc) return (Fc[a] = b[c]);
    return a;
}
var Ic = Hc('animationend'),
    Jc = Hc('animationiteration'),
    Kc = Hc('animationstart'),
    Lc = Hc('transitionend'),
    Mc = new Map(),
    Nc = new Map(),
    Oc = [
        'abort',
        'abort',
        Ic,
        'animationEnd',
        Jc,
        'animationIteration',
        Kc,
        'animationStart',
        'canplay',
        'canPlay',
        'canplaythrough',
        'canPlayThrough',
        'durationchange',
        'durationChange',
        'emptied',
        'emptied',
        'encrypted',
        'encrypted',
        'ended',
        'ended',
        'error',
        'error',
        'gotpointercapture',
        'gotPointerCapture',
        'load',
        'load',
        'loadeddata',
        'loadedData',
        'loadedmetadata',
        'loadedMetadata',
        'loadstart',
        'loadStart',
        'lostpointercapture',
        'lostPointerCapture',
        'playing',
        'playing',
        'progress',
        'progress',
        'seeking',
        'seeking',
        'stalled',
        'stalled',
        'suspend',
        'suspend',
        'timeupdate',
        'timeUpdate',
        Lc,
        'transitionEnd',
        'waiting',
        'waiting',
    ];
function Pc(a, b) {
    for (var c = 0; c < a.length; c += 2) {
        var d = a[c],
            e = a[c + 1];
        e = 'on' + (e[0].toUpperCase() + e.slice(1));
        Nc.set(d, b);
        Mc.set(d, e);
        da(e, [d]);
    }
}
var Qc = r.unstable_now;
Qc();
var F = 8;
function Rc(a) {
    if (0 !== (1 & a)) return (F = 15), 1;
    if (0 !== (2 & a)) return (F = 14), 2;
    if (0 !== (4 & a)) return (F = 13), 4;
    var b = 24 & a;
    if (0 !== b) return (F = 12), b;
    if (0 !== (a & 32)) return (F = 11), 32;
    b = 192 & a;
    if (0 !== b) return (F = 10), b;
    if (0 !== (a & 256)) return (F = 9), 256;
    b = 3584 & a;
    if (0 !== b) return (F = 8), b;
    if (0 !== (a & 4096)) return (F = 7), 4096;
    b = 4186112 & a;
    if (0 !== b) return (F = 6), b;
    b = 62914560 & a;
    if (0 !== b) return (F = 5), b;
    if (a & 67108864) return (F = 4), 67108864;
    if (0 !== (a & 134217728)) return (F = 3), 134217728;
    b = 805306368 & a;
    if (0 !== b) return (F = 2), b;
    if (0 !== (1073741824 & a)) return (F = 1), 1073741824;
    F = 8;
    return a;
}
function Sc(a) {
    switch (a) {
        case 99:
            return 15;
        case 98:
            return 10;
        case 97:
        case 96:
            return 8;
        case 95:
            return 2;
        default:
            return 0;
    }
}
function Tc(a) {
    switch (a) {
        case 15:
        case 14:
            return 99;
        case 13:
        case 12:
        case 11:
        case 10:
            return 98;
        case 9:
        case 8:
        case 7:
        case 6:
        case 4:
        case 5:
            return 97;
        case 3:
        case 2:
        case 1:
            return 95;
        case 0:
            return 90;
        default:
            throw Error(y(358, a));
    }
}
function Uc(a, b) {
    var c = a.pendingLanes;
    if (0 === c) return (F = 0);
    var d = 0,
        e = 0,
        f = a.expiredLanes,
        g = a.suspendedLanes,
        h = a.pingedLanes;
    if (0 !== f) (d = f), (e = F = 15);
    else if (((f = c & 134217727), 0 !== f)) {
        var k = f & ~g;
        0 !== k ? ((d = Rc(k)), (e = F)) : ((h &= f), 0 !== h && ((d = Rc(h)), (e = F)));
    } else (f = c & ~g), 0 !== f ? ((d = Rc(f)), (e = F)) : 0 !== h && ((d = Rc(h)), (e = F));
    if (0 === d) return 0;
    d = 31 - Vc(d);
    d = c & (((0 > d ? 0 : 1 << d) << 1) - 1);
    if (0 !== b && b !== d && 0 === (b & g)) {
        Rc(b);
        if (e <= F) return b;
        F = e;
    }
    b = a.entangledLanes;
    if (0 !== b) for (a = a.entanglements, b &= d; 0 < b; ) (c = 31 - Vc(b)), (e = 1 << c), (d |= a[c]), (b &= ~e);
    return d;
}
function Wc(a) {
    a = a.pendingLanes & -1073741825;
    return 0 !== a ? a : a & 1073741824 ? 1073741824 : 0;
}
function Xc(a, b) {
    switch (a) {
        case 15:
            return 1;
        case 14:
            return 2;
        case 12:
            return (a = Yc(24 & ~b)), 0 === a ? Xc(10, b) : a;
        case 10:
            return (a = Yc(192 & ~b)), 0 === a ? Xc(8, b) : a;
        case 8:
            return (a = Yc(3584 & ~b)), 0 === a && ((a = Yc(4186112 & ~b)), 0 === a && (a = 512)), a;
        case 2:
            return (b = Yc(805306368 & ~b)), 0 === b && (b = 268435456), b;
    }
    throw Error(y(358, a));
}
function Yc(a) {
    return a & -a;
}
function Zc(a) {
    for (var b = [], c = 0; 31 > c; c++) b.push(a);
    return b;
}
function $c(a, b, c) {
    a.pendingLanes |= b;
    var d = b - 1;
    a.suspendedLanes &= d;
    a.pingedLanes &= d;
    a = a.eventTimes;
    b = 31 - Vc(b);
    a[b] = c;
}
var Vc = Math.clz32 ? Math.clz32 : ad,
    bd = Math.log,
    cd = Math.LN2;
function ad(a) {
    return 0 === a ? 32 : (31 - ((bd(a) / cd) | 0)) | 0;
}
var dd = r.unstable_UserBlockingPriority,
    ed = r.unstable_runWithPriority,
    fd = !0;
function gd(a, b, c, d) {
    Kb || Ib();
    var e = hd,
        f = Kb;
    Kb = !0;
    try {
        Hb(e, a, b, c, d);
    } finally {
        (Kb = f) || Mb();
    }
}
function id(a, b, c, d) {
    ed(dd, hd.bind(null, a, b, c, d));
}
function hd(a, b, c, d) {
    if (fd) {
        var e;
        if ((e = 0 === (b & 4)) && 0 < jc.length && -1 < qc.indexOf(a)) (a = rc(null, a, b, c, d)), jc.push(a);
        else {
            var f = yc(a, b, c, d);
            if (null === f) e && sc(a, d);
            else {
                if (e) {
                    if (-1 < qc.indexOf(a)) {
                        a = rc(f, a, b, c, d);
                        jc.push(a);
                        return;
                    }
                    if (uc(f, a, b, c, d)) return;
                    sc(a, d);
                }
                jd(a, b, d, null, c);
            }
        }
    }
}
function yc(a, b, c, d) {
    var e = xb(d);
    e = wc(e);
    if (null !== e) {
        var f = Zb(e);
        if (null === f) e = null;
        else {
            var g = f.tag;
            if (13 === g) {
                e = $b(f);
                if (null !== e) return e;
                e = null;
            } else if (3 === g) {
                if (f.stateNode.hydrate) return 3 === f.tag ? f.stateNode.containerInfo : null;
                e = null;
            } else f !== e && (e = null);
        }
    }
    jd(a, b, d, e, c);
    return null;
}
var kd = null,
    ld = null,
    md = null;
function nd() {
    if (md) return md;
    var a,
        b = ld,
        c = b.length,
        d,
        e = 'value' in kd ? kd.value : kd.textContent,
        f = e.length;
    for (a = 0; a < c && b[a] === e[a]; a++);
    var g = c - a;
    for (d = 1; d <= g && b[c - d] === e[f - d]; d++);
    return (md = e.slice(a, 1 < d ? 1 - d : void 0));
}
function od(a) {
    var b = a.keyCode;
    'charCode' in a ? ((a = a.charCode), 0 === a && 13 === b && (a = 13)) : (a = b);
    10 === a && (a = 13);
    return 32 <= a || 13 === a ? a : 0;
}
function pd() {
    return !0;
}
function qd() {
    return !1;
}
function rd(a) {
    function b(b, d, e, f, g) {
        this._reactName = b;
        this._targetInst = e;
        this.type = d;
        this.nativeEvent = f;
        this.target = g;
        this.currentTarget = null;
        for (var c in a) a.hasOwnProperty(c) && ((b = a[c]), (this[c] = b ? b(f) : f[c]));
        this.isDefaultPrevented = (null != f.defaultPrevented ? f.defaultPrevented : !1 === f.returnValue) ? pd : qd;
        this.isPropagationStopped = qd;
        return this;
    }
    m$1(b.prototype, {
        preventDefault: function () {
            this.defaultPrevented = !0;
            var a = this.nativeEvent;
            a && (a.preventDefault ? a.preventDefault() : 'unknown' !== typeof a.returnValue && (a.returnValue = !1), (this.isDefaultPrevented = pd));
        },
        stopPropagation: function () {
            var a = this.nativeEvent;
            a && (a.stopPropagation ? a.stopPropagation() : 'unknown' !== typeof a.cancelBubble && (a.cancelBubble = !0), (this.isPropagationStopped = pd));
        },
        persist: function () {},
        isPersistent: pd,
    });
    return b;
}
var sd = {
        eventPhase: 0,
        bubbles: 0,
        cancelable: 0,
        timeStamp: function (a) {
            return a.timeStamp || Date.now();
        },
        defaultPrevented: 0,
        isTrusted: 0,
    },
    td = rd(sd),
    ud = m$1({}, sd, { view: 0, detail: 0 }),
    vd = rd(ud),
    wd,
    xd,
    yd,
    Ad = m$1({}, ud, {
        screenX: 0,
        screenY: 0,
        clientX: 0,
        clientY: 0,
        pageX: 0,
        pageY: 0,
        ctrlKey: 0,
        shiftKey: 0,
        altKey: 0,
        metaKey: 0,
        getModifierState: zd,
        button: 0,
        buttons: 0,
        relatedTarget: function (a) {
            return void 0 === a.relatedTarget ? (a.fromElement === a.srcElement ? a.toElement : a.fromElement) : a.relatedTarget;
        },
        movementX: function (a) {
            if ('movementX' in a) return a.movementX;
            a !== yd && (yd && 'mousemove' === a.type ? ((wd = a.screenX - yd.screenX), (xd = a.screenY - yd.screenY)) : (xd = wd = 0), (yd = a));
            return wd;
        },
        movementY: function (a) {
            return 'movementY' in a ? a.movementY : xd;
        },
    }),
    Bd = rd(Ad),
    Cd = m$1({}, Ad, { dataTransfer: 0 }),
    Dd = rd(Cd),
    Ed = m$1({}, ud, { relatedTarget: 0 }),
    Fd = rd(Ed),
    Gd = m$1({}, sd, { animationName: 0, elapsedTime: 0, pseudoElement: 0 }),
    Hd = rd(Gd),
    Id = m$1({}, sd, {
        clipboardData: function (a) {
            return 'clipboardData' in a ? a.clipboardData : window.clipboardData;
        },
    }),
    Jd = rd(Id),
    Kd = m$1({}, sd, { data: 0 }),
    Ld = rd(Kd),
    Md = { Esc: 'Escape', Spacebar: ' ', Left: 'ArrowLeft', Up: 'ArrowUp', Right: 'ArrowRight', Down: 'ArrowDown', Del: 'Delete', Win: 'OS', Menu: 'ContextMenu', Apps: 'ContextMenu', Scroll: 'ScrollLock', MozPrintableKey: 'Unidentified' },
    Nd = {
        8: 'Backspace',
        9: 'Tab',
        12: 'Clear',
        13: 'Enter',
        16: 'Shift',
        17: 'Control',
        18: 'Alt',
        19: 'Pause',
        20: 'CapsLock',
        27: 'Escape',
        32: ' ',
        33: 'PageUp',
        34: 'PageDown',
        35: 'End',
        36: 'Home',
        37: 'ArrowLeft',
        38: 'ArrowUp',
        39: 'ArrowRight',
        40: 'ArrowDown',
        45: 'Insert',
        46: 'Delete',
        112: 'F1',
        113: 'F2',
        114: 'F3',
        115: 'F4',
        116: 'F5',
        117: 'F6',
        118: 'F7',
        119: 'F8',
        120: 'F9',
        121: 'F10',
        122: 'F11',
        123: 'F12',
        144: 'NumLock',
        145: 'ScrollLock',
        224: 'Meta',
    },
    Od = { Alt: 'altKey', Control: 'ctrlKey', Meta: 'metaKey', Shift: 'shiftKey' };
function Pd(a) {
    var b = this.nativeEvent;
    return b.getModifierState ? b.getModifierState(a) : (a = Od[a]) ? !!b[a] : !1;
}
function zd() {
    return Pd;
}
var Qd = m$1({}, ud, {
        key: function (a) {
            if (a.key) {
                var b = Md[a.key] || a.key;
                if ('Unidentified' !== b) return b;
            }
            return 'keypress' === a.type ? ((a = od(a)), 13 === a ? 'Enter' : String.fromCharCode(a)) : 'keydown' === a.type || 'keyup' === a.type ? Nd[a.keyCode] || 'Unidentified' : '';
        },
        code: 0,
        location: 0,
        ctrlKey: 0,
        shiftKey: 0,
        altKey: 0,
        metaKey: 0,
        repeat: 0,
        locale: 0,
        getModifierState: zd,
        charCode: function (a) {
            return 'keypress' === a.type ? od(a) : 0;
        },
        keyCode: function (a) {
            return 'keydown' === a.type || 'keyup' === a.type ? a.keyCode : 0;
        },
        which: function (a) {
            return 'keypress' === a.type ? od(a) : 'keydown' === a.type || 'keyup' === a.type ? a.keyCode : 0;
        },
    }),
    Rd = rd(Qd),
    Sd = m$1({}, Ad, { pointerId: 0, width: 0, height: 0, pressure: 0, tangentialPressure: 0, tiltX: 0, tiltY: 0, twist: 0, pointerType: 0, isPrimary: 0 }),
    Td = rd(Sd),
    Ud = m$1({}, ud, { touches: 0, targetTouches: 0, changedTouches: 0, altKey: 0, metaKey: 0, ctrlKey: 0, shiftKey: 0, getModifierState: zd }),
    Vd = rd(Ud),
    Wd = m$1({}, sd, { propertyName: 0, elapsedTime: 0, pseudoElement: 0 }),
    Xd = rd(Wd),
    Yd = m$1({}, Ad, {
        deltaX: function (a) {
            return 'deltaX' in a ? a.deltaX : 'wheelDeltaX' in a ? -a.wheelDeltaX : 0;
        },
        deltaY: function (a) {
            return 'deltaY' in a ? a.deltaY : 'wheelDeltaY' in a ? -a.wheelDeltaY : 'wheelDelta' in a ? -a.wheelDelta : 0;
        },
        deltaZ: 0,
        deltaMode: 0,
    }),
    Zd = rd(Yd),
    $d = [9, 13, 27, 32],
    ae = fa && 'CompositionEvent' in window,
    be = null;
fa && 'documentMode' in document && (be = document.documentMode);
var ce = fa && 'TextEvent' in window && !be,
    de = fa && (!ae || (be && 8 < be && 11 >= be)),
    ee = String.fromCharCode(32),
    fe = !1;
function ge(a, b) {
    switch (a) {
        case 'keyup':
            return -1 !== $d.indexOf(b.keyCode);
        case 'keydown':
            return 229 !== b.keyCode;
        case 'keypress':
        case 'mousedown':
        case 'focusout':
            return !0;
        default:
            return !1;
    }
}
function he(a) {
    a = a.detail;
    return 'object' === typeof a && 'data' in a ? a.data : null;
}
var ie = !1;
function je(a, b) {
    switch (a) {
        case 'compositionend':
            return he(b);
        case 'keypress':
            if (32 !== b.which) return null;
            fe = !0;
            return ee;
        case 'textInput':
            return (a = b.data), a === ee && fe ? null : a;
        default:
            return null;
    }
}
function ke(a, b) {
    if (ie) return 'compositionend' === a || (!ae && ge(a, b)) ? ((a = nd()), (md = ld = kd = null), (ie = !1), a) : null;
    switch (a) {
        case 'paste':
            return null;
        case 'keypress':
            if (!(b.ctrlKey || b.altKey || b.metaKey) || (b.ctrlKey && b.altKey)) {
                if (b.char && 1 < b.char.length) return b.char;
                if (b.which) return String.fromCharCode(b.which);
            }
            return null;
        case 'compositionend':
            return de && 'ko' !== b.locale ? null : b.data;
        default:
            return null;
    }
}
var le = { color: !0, date: !0, datetime: !0, 'datetime-local': !0, email: !0, month: !0, number: !0, password: !0, range: !0, search: !0, tel: !0, text: !0, time: !0, url: !0, week: !0 };
function me(a) {
    var b = a && a.nodeName && a.nodeName.toLowerCase();
    return 'input' === b ? !!le[a.type] : 'textarea' === b ? !0 : !1;
}
function ne(a, b, c, d) {
    Eb(d);
    b = oe(b, 'onChange');
    0 < b.length && ((c = new td('onChange', 'change', null, c, d)), a.push({ event: c, listeners: b }));
}
var pe = null,
    qe = null;
function re(a) {
    se(a, 0);
}
function te(a) {
    var b = ue(a);
    if (Wa(b)) return a;
}
function ve(a, b) {
    if ('change' === a) return b;
}
var we = !1;
if (fa) {
    var xe;
    if (fa) {
        var ye = 'oninput' in document;
        if (!ye) {
            var ze = document.createElement('div');
            ze.setAttribute('oninput', 'return;');
            ye = 'function' === typeof ze.oninput;
        }
        xe = ye;
    } else xe = !1;
    we = xe && (!document.documentMode || 9 < document.documentMode);
}
function Ae() {
    pe && (pe.detachEvent('onpropertychange', Be), (qe = pe = null));
}
function Be(a) {
    if ('value' === a.propertyName && te(qe)) {
        var b = [];
        ne(b, qe, a, xb(a));
        a = re;
        if (Kb) a(b);
        else {
            Kb = !0;
            try {
                Gb(a, b);
            } finally {
                (Kb = !1), Mb();
            }
        }
    }
}
function Ce(a, b, c) {
    'focusin' === a ? (Ae(), (pe = b), (qe = c), pe.attachEvent('onpropertychange', Be)) : 'focusout' === a && Ae();
}
function De(a) {
    if ('selectionchange' === a || 'keyup' === a || 'keydown' === a) return te(qe);
}
function Ee(a, b) {
    if ('click' === a) return te(b);
}
function Fe(a, b) {
    if ('input' === a || 'change' === a) return te(b);
}
function Ge(a, b) {
    return (a === b && (0 !== a || 1 / a === 1 / b)) || (a !== a && b !== b);
}
var He = 'function' === typeof Object.is ? Object.is : Ge,
    Ie = Object.prototype.hasOwnProperty;
function Je(a, b) {
    if (He(a, b)) return !0;
    if ('object' !== typeof a || null === a || 'object' !== typeof b || null === b) return !1;
    var c = Object.keys(a),
        d = Object.keys(b);
    if (c.length !== d.length) return !1;
    for (d = 0; d < c.length; d++) if (!Ie.call(b, c[d]) || !He(a[c[d]], b[c[d]])) return !1;
    return !0;
}
function Ke(a) {
    for (; a && a.firstChild; ) a = a.firstChild;
    return a;
}
function Le(a, b) {
    var c = Ke(a);
    a = 0;
    for (var d; c; ) {
        if (3 === c.nodeType) {
            d = a + c.textContent.length;
            if (a <= b && d >= b) return { node: c, offset: b - a };
            a = d;
        }
        a: {
            for (; c; ) {
                if (c.nextSibling) {
                    c = c.nextSibling;
                    break a;
                }
                c = c.parentNode;
            }
            c = void 0;
        }
        c = Ke(c);
    }
}
function Me(a, b) {
    return a && b ? (a === b ? !0 : a && 3 === a.nodeType ? !1 : b && 3 === b.nodeType ? Me(a, b.parentNode) : 'contains' in a ? a.contains(b) : a.compareDocumentPosition ? !!(a.compareDocumentPosition(b) & 16) : !1) : !1;
}
function Ne() {
    for (var a = window, b = Xa(); b instanceof a.HTMLIFrameElement; ) {
        try {
            var c = 'string' === typeof b.contentWindow.location.href;
        } catch (d) {
            c = !1;
        }
        if (c) a = b.contentWindow;
        else break;
        b = Xa(a.document);
    }
    return b;
}
function Oe(a) {
    var b = a && a.nodeName && a.nodeName.toLowerCase();
    return b && (('input' === b && ('text' === a.type || 'search' === a.type || 'tel' === a.type || 'url' === a.type || 'password' === a.type)) || 'textarea' === b || 'true' === a.contentEditable);
}
var Pe = fa && 'documentMode' in document && 11 >= document.documentMode,
    Qe = null,
    Re = null,
    Se = null,
    Te = !1;
function Ue(a, b, c) {
    var d = c.window === c ? c.document : 9 === c.nodeType ? c : c.ownerDocument;
    Te ||
        null == Qe ||
        Qe !== Xa(d) ||
        ((d = Qe),
        'selectionStart' in d && Oe(d) ? (d = { start: d.selectionStart, end: d.selectionEnd }) : ((d = ((d.ownerDocument && d.ownerDocument.defaultView) || window).getSelection()), (d = { anchorNode: d.anchorNode, anchorOffset: d.anchorOffset, focusNode: d.focusNode, focusOffset: d.focusOffset })),
        (Se && Je(Se, d)) || ((Se = d), (d = oe(Re, 'onSelect')), 0 < d.length && ((b = new td('onSelect', 'select', null, b, c)), a.push({ event: b, listeners: d }), (b.target = Qe))));
}
Pc(
    'cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focusin focus focusout blur input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange'.split(
        ' '
    ),
    0
);
Pc('drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel'.split(' '), 1);
Pc(Oc, 2);
for (var Ve = 'change selectionchange textInput compositionstart compositionend compositionupdate'.split(' '), We = 0; We < Ve.length; We++) Nc.set(Ve[We], 0);
ea('onMouseEnter', ['mouseout', 'mouseover']);
ea('onMouseLeave', ['mouseout', 'mouseover']);
ea('onPointerEnter', ['pointerout', 'pointerover']);
ea('onPointerLeave', ['pointerout', 'pointerover']);
da('onChange', 'change click focusin focusout input keydown keyup selectionchange'.split(' '));
da('onSelect', 'focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange'.split(' '));
da('onBeforeInput', ['compositionend', 'keypress', 'textInput', 'paste']);
da('onCompositionEnd', 'compositionend focusout keydown keypress keyup mousedown'.split(' '));
da('onCompositionStart', 'compositionstart focusout keydown keypress keyup mousedown'.split(' '));
da('onCompositionUpdate', 'compositionupdate focusout keydown keypress keyup mousedown'.split(' '));
var Xe = 'abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting'.split(' '),
    Ye = new Set('cancel close invalid load scroll toggle'.split(' ').concat(Xe));
function Ze(a, b, c) {
    var d = a.type || 'unknown-event';
    a.currentTarget = c;
    Yb(d, b, void 0, a);
    a.currentTarget = null;
}
function se(a, b) {
    b = 0 !== (b & 4);
    for (var c = 0; c < a.length; c++) {
        var d = a[c],
            e = d.event;
        d = d.listeners;
        a: {
            var f = void 0;
            if (b)
                for (var g = d.length - 1; 0 <= g; g--) {
                    var h = d[g],
                        k = h.instance,
                        l = h.currentTarget;
                    h = h.listener;
                    if (k !== f && e.isPropagationStopped()) break a;
                    Ze(e, h, l);
                    f = k;
                }
            else
                for (g = 0; g < d.length; g++) {
                    h = d[g];
                    k = h.instance;
                    l = h.currentTarget;
                    h = h.listener;
                    if (k !== f && e.isPropagationStopped()) break a;
                    Ze(e, h, l);
                    f = k;
                }
        }
    }
    if (Ub) throw ((a = Vb), (Ub = !1), (Vb = null), a);
}
function G(a, b) {
    var c = $e(b),
        d = a + '__bubble';
    c.has(d) || (af(b, a, 2, !1), c.add(d));
}
var bf = '_reactListening' + Math.random().toString(36).slice(2);
function cf(a) {
    a[bf] ||
        ((a[bf] = !0),
        ba.forEach(function (b) {
            Ye.has(b) || df(b, !1, a, null);
            df(b, !0, a, null);
        }));
}
function df(a, b, c, d) {
    var e = 4 < arguments.length && void 0 !== arguments[4] ? arguments[4] : 0,
        f = c;
    'selectionchange' === a && 9 !== c.nodeType && (f = c.ownerDocument);
    if (null !== d && !b && Ye.has(a)) {
        if ('scroll' !== a) return;
        e |= 2;
        f = d;
    }
    var g = $e(f),
        h = a + '__' + (b ? 'capture' : 'bubble');
    g.has(h) || (b && (e |= 4), af(f, a, e, b), g.add(h));
}
function af(a, b, c, d) {
    var e = Nc.get(b);
    switch (void 0 === e ? 2 : e) {
        case 0:
            e = gd;
            break;
        case 1:
            e = id;
            break;
        default:
            e = hd;
    }
    c = e.bind(null, b, c, a);
    e = void 0;
    !Pb || ('touchstart' !== b && 'touchmove' !== b && 'wheel' !== b) || (e = !0);
    d ? (void 0 !== e ? a.addEventListener(b, c, { capture: !0, passive: e }) : a.addEventListener(b, c, !0)) : void 0 !== e ? a.addEventListener(b, c, { passive: e }) : a.addEventListener(b, c, !1);
}
function jd(a, b, c, d, e) {
    var f = d;
    if (0 === (b & 1) && 0 === (b & 2) && null !== d)
        a: for (;;) {
            if (null === d) return;
            var g = d.tag;
            if (3 === g || 4 === g) {
                var h = d.stateNode.containerInfo;
                if (h === e || (8 === h.nodeType && h.parentNode === e)) break;
                if (4 === g)
                    for (g = d.return; null !== g; ) {
                        var k = g.tag;
                        if (3 === k || 4 === k) if (((k = g.stateNode.containerInfo), k === e || (8 === k.nodeType && k.parentNode === e))) return;
                        g = g.return;
                    }
                for (; null !== h; ) {
                    g = wc(h);
                    if (null === g) return;
                    k = g.tag;
                    if (5 === k || 6 === k) {
                        d = f = g;
                        continue a;
                    }
                    h = h.parentNode;
                }
            }
            d = d.return;
        }
    Nb(function () {
        var d = f,
            e = xb(c),
            g = [];
        a: {
            var h = Mc.get(a);
            if (void 0 !== h) {
                var k = td,
                    x = a;
                switch (a) {
                    case 'keypress':
                        if (0 === od(c)) break a;
                    case 'keydown':
                    case 'keyup':
                        k = Rd;
                        break;
                    case 'focusin':
                        x = 'focus';
                        k = Fd;
                        break;
                    case 'focusout':
                        x = 'blur';
                        k = Fd;
                        break;
                    case 'beforeblur':
                    case 'afterblur':
                        k = Fd;
                        break;
                    case 'click':
                        if (2 === c.button) break a;
                    case 'auxclick':
                    case 'dblclick':
                    case 'mousedown':
                    case 'mousemove':
                    case 'mouseup':
                    case 'mouseout':
                    case 'mouseover':
                    case 'contextmenu':
                        k = Bd;
                        break;
                    case 'drag':
                    case 'dragend':
                    case 'dragenter':
                    case 'dragexit':
                    case 'dragleave':
                    case 'dragover':
                    case 'dragstart':
                    case 'drop':
                        k = Dd;
                        break;
                    case 'touchcancel':
                    case 'touchend':
                    case 'touchmove':
                    case 'touchstart':
                        k = Vd;
                        break;
                    case Ic:
                    case Jc:
                    case Kc:
                        k = Hd;
                        break;
                    case Lc:
                        k = Xd;
                        break;
                    case 'scroll':
                        k = vd;
                        break;
                    case 'wheel':
                        k = Zd;
                        break;
                    case 'copy':
                    case 'cut':
                    case 'paste':
                        k = Jd;
                        break;
                    case 'gotpointercapture':
                    case 'lostpointercapture':
                    case 'pointercancel':
                    case 'pointerdown':
                    case 'pointermove':
                    case 'pointerout':
                    case 'pointerover':
                    case 'pointerup':
                        k = Td;
                }
                var w = 0 !== (b & 4),
                    z = !w && 'scroll' === a,
                    u = w ? (null !== h ? h + 'Capture' : null) : h;
                w = [];
                for (var t = d, q; null !== t; ) {
                    q = t;
                    var v = q.stateNode;
                    5 === q.tag && null !== v && ((q = v), null !== u && ((v = Ob(t, u)), null != v && w.push(ef(t, v, q))));
                    if (z) break;
                    t = t.return;
                }
                0 < w.length && ((h = new k(h, x, null, c, e)), g.push({ event: h, listeners: w }));
            }
        }
        if (0 === (b & 7)) {
            a: {
                h = 'mouseover' === a || 'pointerover' === a;
                k = 'mouseout' === a || 'pointerout' === a;
                if (h && 0 === (b & 16) && (x = c.relatedTarget || c.fromElement) && (wc(x) || x[ff])) break a;
                if (k || h) {
                    h = e.window === e ? e : (h = e.ownerDocument) ? h.defaultView || h.parentWindow : window;
                    if (k) {
                        if (((x = c.relatedTarget || c.toElement), (k = d), (x = x ? wc(x) : null), null !== x && ((z = Zb(x)), x !== z || (5 !== x.tag && 6 !== x.tag)))) x = null;
                    } else (k = null), (x = d);
                    if (k !== x) {
                        w = Bd;
                        v = 'onMouseLeave';
                        u = 'onMouseEnter';
                        t = 'mouse';
                        if ('pointerout' === a || 'pointerover' === a) (w = Td), (v = 'onPointerLeave'), (u = 'onPointerEnter'), (t = 'pointer');
                        z = null == k ? h : ue(k);
                        q = null == x ? h : ue(x);
                        h = new w(v, t + 'leave', k, c, e);
                        h.target = z;
                        h.relatedTarget = q;
                        v = null;
                        wc(e) === d && ((w = new w(u, t + 'enter', x, c, e)), (w.target = q), (w.relatedTarget = z), (v = w));
                        z = v;
                        if (k && x)
                            b: {
                                w = k;
                                u = x;
                                t = 0;
                                for (q = w; q; q = gf(q)) t++;
                                q = 0;
                                for (v = u; v; v = gf(v)) q++;
                                for (; 0 < t - q; ) (w = gf(w)), t--;
                                for (; 0 < q - t; ) (u = gf(u)), q--;
                                for (; t--; ) {
                                    if (w === u || (null !== u && w === u.alternate)) break b;
                                    w = gf(w);
                                    u = gf(u);
                                }
                                w = null;
                            }
                        else w = null;
                        null !== k && hf(g, h, k, w, !1);
                        null !== x && null !== z && hf(g, z, x, w, !0);
                    }
                }
            }
            a: {
                h = d ? ue(d) : window;
                k = h.nodeName && h.nodeName.toLowerCase();
                if ('select' === k || ('input' === k && 'file' === h.type)) var J = ve;
                else if (me(h))
                    if (we) J = Fe;
                    else {
                        J = De;
                        var K = Ce;
                    }
                else (k = h.nodeName) && 'input' === k.toLowerCase() && ('checkbox' === h.type || 'radio' === h.type) && (J = Ee);
                if (J && (J = J(a, d))) {
                    ne(g, J, c, e);
                    break a;
                }
                K && K(a, h, d);
                'focusout' === a && (K = h._wrapperState) && K.controlled && 'number' === h.type && bb(h, 'number', h.value);
            }
            K = d ? ue(d) : window;
            switch (a) {
                case 'focusin':
                    if (me(K) || 'true' === K.contentEditable) (Qe = K), (Re = d), (Se = null);
                    break;
                case 'focusout':
                    Se = Re = Qe = null;
                    break;
                case 'mousedown':
                    Te = !0;
                    break;
                case 'contextmenu':
                case 'mouseup':
                case 'dragend':
                    Te = !1;
                    Ue(g, c, e);
                    break;
                case 'selectionchange':
                    if (Pe) break;
                case 'keydown':
                case 'keyup':
                    Ue(g, c, e);
            }
            var Q;
            if (ae)
                b: {
                    switch (a) {
                        case 'compositionstart':
                            var L = 'onCompositionStart';
                            break b;
                        case 'compositionend':
                            L = 'onCompositionEnd';
                            break b;
                        case 'compositionupdate':
                            L = 'onCompositionUpdate';
                            break b;
                    }
                    L = void 0;
                }
            else ie ? ge(a, c) && (L = 'onCompositionEnd') : 'keydown' === a && 229 === c.keyCode && (L = 'onCompositionStart');
            L &&
                (de && 'ko' !== c.locale && (ie || 'onCompositionStart' !== L ? 'onCompositionEnd' === L && ie && (Q = nd()) : ((kd = e), (ld = 'value' in kd ? kd.value : kd.textContent), (ie = !0))),
                (K = oe(d, L)),
                0 < K.length && ((L = new Ld(L, a, null, c, e)), g.push({ event: L, listeners: K }), Q ? (L.data = Q) : ((Q = he(c)), null !== Q && (L.data = Q))));
            if ((Q = ce ? je(a, c) : ke(a, c))) (d = oe(d, 'onBeforeInput')), 0 < d.length && ((e = new Ld('onBeforeInput', 'beforeinput', null, c, e)), g.push({ event: e, listeners: d }), (e.data = Q));
        }
        se(g, b);
    });
}
function ef(a, b, c) {
    return { instance: a, listener: b, currentTarget: c };
}
function oe(a, b) {
    for (var c = b + 'Capture', d = []; null !== a; ) {
        var e = a,
            f = e.stateNode;
        5 === e.tag && null !== f && ((e = f), (f = Ob(a, c)), null != f && d.unshift(ef(a, f, e)), (f = Ob(a, b)), null != f && d.push(ef(a, f, e)));
        a = a.return;
    }
    return d;
}
function gf(a) {
    if (null === a) return null;
    do a = a.return;
    while (a && 5 !== a.tag);
    return a ? a : null;
}
function hf(a, b, c, d, e) {
    for (var f = b._reactName, g = []; null !== c && c !== d; ) {
        var h = c,
            k = h.alternate,
            l = h.stateNode;
        if (null !== k && k === d) break;
        5 === h.tag && null !== l && ((h = l), e ? ((k = Ob(c, f)), null != k && g.unshift(ef(c, k, h))) : e || ((k = Ob(c, f)), null != k && g.push(ef(c, k, h))));
        c = c.return;
    }
    0 !== g.length && a.push({ event: b, listeners: g });
}
function jf() {}
var kf = null,
    lf = null;
function mf(a, b) {
    switch (a) {
        case 'button':
        case 'input':
        case 'select':
        case 'textarea':
            return !!b.autoFocus;
    }
    return !1;
}
function nf(a, b) {
    return 'textarea' === a || 'option' === a || 'noscript' === a || 'string' === typeof b.children || 'number' === typeof b.children || ('object' === typeof b.dangerouslySetInnerHTML && null !== b.dangerouslySetInnerHTML && null != b.dangerouslySetInnerHTML.__html);
}
var of = 'function' === typeof setTimeout ? setTimeout : void 0,
    pf = 'function' === typeof clearTimeout ? clearTimeout : void 0;
function qf(a) {
    1 === a.nodeType ? (a.textContent = '') : 9 === a.nodeType && ((a = a.body), null != a && (a.textContent = ''));
}
function rf(a) {
    for (; null != a; a = a.nextSibling) {
        var b = a.nodeType;
        if (1 === b || 3 === b) break;
    }
    return a;
}
function sf(a) {
    a = a.previousSibling;
    for (var b = 0; a; ) {
        if (8 === a.nodeType) {
            var c = a.data;
            if ('$' === c || '$!' === c || '$?' === c) {
                if (0 === b) return a;
                b--;
            } else '/$' === c && b++;
        }
        a = a.previousSibling;
    }
    return null;
}
var tf = 0;
function uf(a) {
    return { $$typeof: Ga, toString: a, valueOf: a };
}
var vf = Math.random().toString(36).slice(2),
    wf = '__reactFiber$' + vf,
    xf = '__reactProps$' + vf,
    ff = '__reactContainer$' + vf,
    yf = '__reactEvents$' + vf;
function wc(a) {
    var b = a[wf];
    if (b) return b;
    for (var c = a.parentNode; c; ) {
        if ((b = c[ff] || c[wf])) {
            c = b.alternate;
            if (null !== b.child || (null !== c && null !== c.child))
                for (a = sf(a); null !== a; ) {
                    if ((c = a[wf])) return c;
                    a = sf(a);
                }
            return b;
        }
        a = c;
        c = a.parentNode;
    }
    return null;
}
function Cb(a) {
    a = a[wf] || a[ff];
    return !a || (5 !== a.tag && 6 !== a.tag && 13 !== a.tag && 3 !== a.tag) ? null : a;
}
function ue(a) {
    if (5 === a.tag || 6 === a.tag) return a.stateNode;
    throw Error(y(33));
}
function Db(a) {
    return a[xf] || null;
}
function $e(a) {
    var b = a[yf];
    void 0 === b && (b = a[yf] = new Set());
    return b;
}
var zf = [],
    Af = -1;
function Bf(a) {
    return { current: a };
}
function H(a) {
    0 > Af || ((a.current = zf[Af]), (zf[Af] = null), Af--);
}
function I(a, b) {
    Af++;
    zf[Af] = a.current;
    a.current = b;
}
var Cf = {},
    M = Bf(Cf),
    N = Bf(!1),
    Df = Cf;
function Ef(a, b) {
    var c = a.type.contextTypes;
    if (!c) return Cf;
    var d = a.stateNode;
    if (d && d.__reactInternalMemoizedUnmaskedChildContext === b) return d.__reactInternalMemoizedMaskedChildContext;
    var e = {},
        f;
    for (f in c) e[f] = b[f];
    d && ((a = a.stateNode), (a.__reactInternalMemoizedUnmaskedChildContext = b), (a.__reactInternalMemoizedMaskedChildContext = e));
    return e;
}
function Ff(a) {
    a = a.childContextTypes;
    return null !== a && void 0 !== a;
}
function Gf() {
    H(N);
    H(M);
}
function Hf(a, b, c) {
    if (M.current !== Cf) throw Error(y(168));
    I(M, b);
    I(N, c);
}
function If(a, b, c) {
    var d = a.stateNode;
    a = b.childContextTypes;
    if ('function' !== typeof d.getChildContext) return c;
    d = d.getChildContext();
    for (var e in d) if (!(e in a)) throw Error(y(108, Ra(b) || 'Unknown', e));
    return m$1({}, c, d);
}
function Jf(a) {
    a = ((a = a.stateNode) && a.__reactInternalMemoizedMergedChildContext) || Cf;
    Df = M.current;
    I(M, a);
    I(N, N.current);
    return !0;
}
function Kf(a, b, c) {
    var d = a.stateNode;
    if (!d) throw Error(y(169));
    c ? ((a = If(a, b, Df)), (d.__reactInternalMemoizedMergedChildContext = a), H(N), H(M), I(M, a)) : H(N);
    I(N, c);
}
var Lf = null,
    Mf = null,
    Nf = r.unstable_runWithPriority,
    Of = r.unstable_scheduleCallback,
    Pf = r.unstable_cancelCallback,
    Qf = r.unstable_shouldYield,
    Rf = r.unstable_requestPaint,
    Sf = r.unstable_now,
    Tf = r.unstable_getCurrentPriorityLevel,
    Uf = r.unstable_ImmediatePriority,
    Vf = r.unstable_UserBlockingPriority,
    Wf = r.unstable_NormalPriority,
    Xf = r.unstable_LowPriority,
    Yf = r.unstable_IdlePriority,
    Zf = {},
    $f = void 0 !== Rf ? Rf : function () {},
    ag = null,
    bg = null,
    cg = !1,
    dg = Sf(),
    O =
        1e4 > dg
            ? Sf
            : function () {
                  return Sf() - dg;
              };
function eg() {
    switch (Tf()) {
        case Uf:
            return 99;
        case Vf:
            return 98;
        case Wf:
            return 97;
        case Xf:
            return 96;
        case Yf:
            return 95;
        default:
            throw Error(y(332));
    }
}
function fg(a) {
    switch (a) {
        case 99:
            return Uf;
        case 98:
            return Vf;
        case 97:
            return Wf;
        case 96:
            return Xf;
        case 95:
            return Yf;
        default:
            throw Error(y(332));
    }
}
function gg(a, b) {
    a = fg(a);
    return Nf(a, b);
}
function hg(a, b, c) {
    a = fg(a);
    return Of(a, b, c);
}
function ig() {
    if (null !== bg) {
        var a = bg;
        bg = null;
        Pf(a);
    }
    jg();
}
function jg() {
    if (!cg && null !== ag) {
        cg = !0;
        var a = 0;
        try {
            var b = ag;
            gg(99, function () {
                for (; a < b.length; a++) {
                    var c = b[a];
                    do c = c(!0);
                    while (null !== c);
                }
            });
            ag = null;
        } catch (c) {
            throw (null !== ag && (ag = ag.slice(a + 1)), Of(Uf, ig), c);
        } finally {
            cg = !1;
        }
    }
}
var kg = ra.ReactCurrentBatchConfig;
function lg(a, b) {
    if (a && a.defaultProps) {
        b = m$1({}, b);
        a = a.defaultProps;
        for (var c in a) void 0 === b[c] && (b[c] = a[c]);
        return b;
    }
    return b;
}
var mg = Bf(null),
    ng = null,
    og = null,
    pg = null;
function qg() {
    pg = og = ng = null;
}
function rg(a) {
    var b = mg.current;
    H(mg);
    a.type._context._currentValue = b;
}
function sg(a, b) {
    for (; null !== a; ) {
        var c = a.alternate;
        if ((a.childLanes & b) === b)
            if (null === c || (c.childLanes & b) === b) break;
            else c.childLanes |= b;
        else (a.childLanes |= b), null !== c && (c.childLanes |= b);
        a = a.return;
    }
}
function tg(a, b) {
    ng = a;
    pg = og = null;
    a = a.dependencies;
    null !== a && null !== a.firstContext && (0 !== (a.lanes & b) && (ug = !0), (a.firstContext = null));
}
function vg(a, b) {
    if (pg !== a && !1 !== b && 0 !== b) {
        if ('number' !== typeof b || 1073741823 === b) (pg = a), (b = 1073741823);
        b = { context: a, observedBits: b, next: null };
        if (null === og) {
            if (null === ng) throw Error(y(308));
            og = b;
            ng.dependencies = { lanes: 0, firstContext: b, responders: null };
        } else og = og.next = b;
    }
    return a._currentValue;
}
var wg = !1;
function xg(a) {
    a.updateQueue = { baseState: a.memoizedState, firstBaseUpdate: null, lastBaseUpdate: null, shared: { pending: null }, effects: null };
}
function yg(a, b) {
    a = a.updateQueue;
    b.updateQueue === a && (b.updateQueue = { baseState: a.baseState, firstBaseUpdate: a.firstBaseUpdate, lastBaseUpdate: a.lastBaseUpdate, shared: a.shared, effects: a.effects });
}
function zg(a, b) {
    return { eventTime: a, lane: b, tag: 0, payload: null, callback: null, next: null };
}
function Ag(a, b) {
    a = a.updateQueue;
    if (null !== a) {
        a = a.shared;
        var c = a.pending;
        null === c ? (b.next = b) : ((b.next = c.next), (c.next = b));
        a.pending = b;
    }
}
function Bg(a, b) {
    var c = a.updateQueue,
        d = a.alternate;
    if (null !== d && ((d = d.updateQueue), c === d)) {
        var e = null,
            f = null;
        c = c.firstBaseUpdate;
        if (null !== c) {
            do {
                var g = { eventTime: c.eventTime, lane: c.lane, tag: c.tag, payload: c.payload, callback: c.callback, next: null };
                null === f ? (e = f = g) : (f = f.next = g);
                c = c.next;
            } while (null !== c);
            null === f ? (e = f = b) : (f = f.next = b);
        } else e = f = b;
        c = { baseState: d.baseState, firstBaseUpdate: e, lastBaseUpdate: f, shared: d.shared, effects: d.effects };
        a.updateQueue = c;
        return;
    }
    a = c.lastBaseUpdate;
    null === a ? (c.firstBaseUpdate = b) : (a.next = b);
    c.lastBaseUpdate = b;
}
function Cg(a, b, c, d) {
    var e = a.updateQueue;
    wg = !1;
    var f = e.firstBaseUpdate,
        g = e.lastBaseUpdate,
        h = e.shared.pending;
    if (null !== h) {
        e.shared.pending = null;
        var k = h,
            l = k.next;
        k.next = null;
        null === g ? (f = l) : (g.next = l);
        g = k;
        var n = a.alternate;
        if (null !== n) {
            n = n.updateQueue;
            var A = n.lastBaseUpdate;
            A !== g && (null === A ? (n.firstBaseUpdate = l) : (A.next = l), (n.lastBaseUpdate = k));
        }
    }
    if (null !== f) {
        A = e.baseState;
        g = 0;
        n = l = k = null;
        do {
            h = f.lane;
            var p = f.eventTime;
            if ((d & h) === h) {
                null !== n && (n = n.next = { eventTime: p, lane: 0, tag: f.tag, payload: f.payload, callback: f.callback, next: null });
                a: {
                    var C = a,
                        x = f;
                    h = b;
                    p = c;
                    switch (x.tag) {
                        case 1:
                            C = x.payload;
                            if ('function' === typeof C) {
                                A = C.call(p, A, h);
                                break a;
                            }
                            A = C;
                            break a;
                        case 3:
                            C.flags = (C.flags & -4097) | 64;
                        case 0:
                            C = x.payload;
                            h = 'function' === typeof C ? C.call(p, A, h) : C;
                            if (null === h || void 0 === h) break a;
                            A = m$1({}, A, h);
                            break a;
                        case 2:
                            wg = !0;
                    }
                }
                null !== f.callback && ((a.flags |= 32), (h = e.effects), null === h ? (e.effects = [f]) : h.push(f));
            } else (p = { eventTime: p, lane: h, tag: f.tag, payload: f.payload, callback: f.callback, next: null }), null === n ? ((l = n = p), (k = A)) : (n = n.next = p), (g |= h);
            f = f.next;
            if (null === f)
                if (((h = e.shared.pending), null === h)) break;
                else (f = h.next), (h.next = null), (e.lastBaseUpdate = h), (e.shared.pending = null);
        } while (1);
        null === n && (k = A);
        e.baseState = k;
        e.firstBaseUpdate = l;
        e.lastBaseUpdate = n;
        Dg |= g;
        a.lanes = g;
        a.memoizedState = A;
    }
}
function Eg(a, b, c) {
    a = b.effects;
    b.effects = null;
    if (null !== a)
        for (b = 0; b < a.length; b++) {
            var d = a[b],
                e = d.callback;
            if (null !== e) {
                d.callback = null;
                d = c;
                if ('function' !== typeof e) throw Error(y(191, e));
                e.call(d);
            }
        }
}
var Fg = new aa.Component().refs;
function Gg(a, b, c, d) {
    b = a.memoizedState;
    c = c(d, b);
    c = null === c || void 0 === c ? b : m$1({}, b, c);
    a.memoizedState = c;
    0 === a.lanes && (a.updateQueue.baseState = c);
}
var Kg = {
    isMounted: function (a) {
        return (a = a._reactInternals) ? Zb(a) === a : !1;
    },
    enqueueSetState: function (a, b, c) {
        a = a._reactInternals;
        var d = Hg(),
            e = Ig(a),
            f = zg(d, e);
        f.payload = b;
        void 0 !== c && null !== c && (f.callback = c);
        Ag(a, f);
        Jg(a, e, d);
    },
    enqueueReplaceState: function (a, b, c) {
        a = a._reactInternals;
        var d = Hg(),
            e = Ig(a),
            f = zg(d, e);
        f.tag = 1;
        f.payload = b;
        void 0 !== c && null !== c && (f.callback = c);
        Ag(a, f);
        Jg(a, e, d);
    },
    enqueueForceUpdate: function (a, b) {
        a = a._reactInternals;
        var c = Hg(),
            d = Ig(a),
            e = zg(c, d);
        e.tag = 2;
        void 0 !== b && null !== b && (e.callback = b);
        Ag(a, e);
        Jg(a, d, c);
    },
};
function Lg(a, b, c, d, e, f, g) {
    a = a.stateNode;
    return 'function' === typeof a.shouldComponentUpdate ? a.shouldComponentUpdate(d, f, g) : b.prototype && b.prototype.isPureReactComponent ? !Je(c, d) || !Je(e, f) : !0;
}
function Mg(a, b, c) {
    var d = !1,
        e = Cf;
    var f = b.contextType;
    'object' === typeof f && null !== f ? (f = vg(f)) : ((e = Ff(b) ? Df : M.current), (d = b.contextTypes), (f = (d = null !== d && void 0 !== d) ? Ef(a, e) : Cf));
    b = new b(c, f);
    a.memoizedState = null !== b.state && void 0 !== b.state ? b.state : null;
    b.updater = Kg;
    a.stateNode = b;
    b._reactInternals = a;
    d && ((a = a.stateNode), (a.__reactInternalMemoizedUnmaskedChildContext = e), (a.__reactInternalMemoizedMaskedChildContext = f));
    return b;
}
function Ng(a, b, c, d) {
    a = b.state;
    'function' === typeof b.componentWillReceiveProps && b.componentWillReceiveProps(c, d);
    'function' === typeof b.UNSAFE_componentWillReceiveProps && b.UNSAFE_componentWillReceiveProps(c, d);
    b.state !== a && Kg.enqueueReplaceState(b, b.state, null);
}
function Og(a, b, c, d) {
    var e = a.stateNode;
    e.props = c;
    e.state = a.memoizedState;
    e.refs = Fg;
    xg(a);
    var f = b.contextType;
    'object' === typeof f && null !== f ? (e.context = vg(f)) : ((f = Ff(b) ? Df : M.current), (e.context = Ef(a, f)));
    Cg(a, c, e, d);
    e.state = a.memoizedState;
    f = b.getDerivedStateFromProps;
    'function' === typeof f && (Gg(a, b, f, c), (e.state = a.memoizedState));
    'function' === typeof b.getDerivedStateFromProps ||
        'function' === typeof e.getSnapshotBeforeUpdate ||
        ('function' !== typeof e.UNSAFE_componentWillMount && 'function' !== typeof e.componentWillMount) ||
        ((b = e.state), 'function' === typeof e.componentWillMount && e.componentWillMount(), 'function' === typeof e.UNSAFE_componentWillMount && e.UNSAFE_componentWillMount(), b !== e.state && Kg.enqueueReplaceState(e, e.state, null), Cg(a, c, e, d), (e.state = a.memoizedState));
    'function' === typeof e.componentDidMount && (a.flags |= 4);
}
var Pg = Array.isArray;
function Qg(a, b, c) {
    a = c.ref;
    if (null !== a && 'function' !== typeof a && 'object' !== typeof a) {
        if (c._owner) {
            c = c._owner;
            if (c) {
                if (1 !== c.tag) throw Error(y(309));
                var d = c.stateNode;
            }
            if (!d) throw Error(y(147, a));
            var e = '' + a;
            if (null !== b && null !== b.ref && 'function' === typeof b.ref && b.ref._stringRef === e) return b.ref;
            b = function (a) {
                var b = d.refs;
                b === Fg && (b = d.refs = {});
                null === a ? delete b[e] : (b[e] = a);
            };
            b._stringRef = e;
            return b;
        }
        if ('string' !== typeof a) throw Error(y(284));
        if (!c._owner) throw Error(y(290, a));
    }
    return a;
}
function Rg(a, b) {
    if ('textarea' !== a.type) throw Error(y(31, '[object Object]' === Object.prototype.toString.call(b) ? 'object with keys {' + Object.keys(b).join(', ') + '}' : b));
}
function Sg(a) {
    function b(b, c) {
        if (a) {
            var d = b.lastEffect;
            null !== d ? ((d.nextEffect = c), (b.lastEffect = c)) : (b.firstEffect = b.lastEffect = c);
            c.nextEffect = null;
            c.flags = 8;
        }
    }
    function c(c, d) {
        if (!a) return null;
        for (; null !== d; ) b(c, d), (d = d.sibling);
        return null;
    }
    function d(a, b) {
        for (a = new Map(); null !== b; ) null !== b.key ? a.set(b.key, b) : a.set(b.index, b), (b = b.sibling);
        return a;
    }
    function e(a, b) {
        a = Tg(a, b);
        a.index = 0;
        a.sibling = null;
        return a;
    }
    function f(b, c, d) {
        b.index = d;
        if (!a) return c;
        d = b.alternate;
        if (null !== d) return (d = d.index), d < c ? ((b.flags = 2), c) : d;
        b.flags = 2;
        return c;
    }
    function g(b) {
        a && null === b.alternate && (b.flags = 2);
        return b;
    }
    function h(a, b, c, d) {
        if (null === b || 6 !== b.tag) return (b = Ug(c, a.mode, d)), (b.return = a), b;
        b = e(b, c);
        b.return = a;
        return b;
    }
    function k(a, b, c, d) {
        if (null !== b && b.elementType === c.type) return (d = e(b, c.props)), (d.ref = Qg(a, b, c)), (d.return = a), d;
        d = Vg(c.type, c.key, c.props, null, a.mode, d);
        d.ref = Qg(a, b, c);
        d.return = a;
        return d;
    }
    function l(a, b, c, d) {
        if (null === b || 4 !== b.tag || b.stateNode.containerInfo !== c.containerInfo || b.stateNode.implementation !== c.implementation) return (b = Wg(c, a.mode, d)), (b.return = a), b;
        b = e(b, c.children || []);
        b.return = a;
        return b;
    }
    function n(a, b, c, d, f) {
        if (null === b || 7 !== b.tag) return (b = Xg(c, a.mode, d, f)), (b.return = a), b;
        b = e(b, c);
        b.return = a;
        return b;
    }
    function A(a, b, c) {
        if ('string' === typeof b || 'number' === typeof b) return (b = Ug('' + b, a.mode, c)), (b.return = a), b;
        if ('object' === typeof b && null !== b) {
            switch (b.$$typeof) {
                case sa:
                    return (c = Vg(b.type, b.key, b.props, null, a.mode, c)), (c.ref = Qg(a, null, b)), (c.return = a), c;
                case ta:
                    return (b = Wg(b, a.mode, c)), (b.return = a), b;
            }
            if (Pg(b) || La(b)) return (b = Xg(b, a.mode, c, null)), (b.return = a), b;
            Rg(a, b);
        }
        return null;
    }
    function p(a, b, c, d) {
        var e = null !== b ? b.key : null;
        if ('string' === typeof c || 'number' === typeof c) return null !== e ? null : h(a, b, '' + c, d);
        if ('object' === typeof c && null !== c) {
            switch (c.$$typeof) {
                case sa:
                    return c.key === e ? (c.type === ua ? n(a, b, c.props.children, d, e) : k(a, b, c, d)) : null;
                case ta:
                    return c.key === e ? l(a, b, c, d) : null;
            }
            if (Pg(c) || La(c)) return null !== e ? null : n(a, b, c, d, null);
            Rg(a, c);
        }
        return null;
    }
    function C(a, b, c, d, e) {
        if ('string' === typeof d || 'number' === typeof d) return (a = a.get(c) || null), h(b, a, '' + d, e);
        if ('object' === typeof d && null !== d) {
            switch (d.$$typeof) {
                case sa:
                    return (a = a.get(null === d.key ? c : d.key) || null), d.type === ua ? n(b, a, d.props.children, e, d.key) : k(b, a, d, e);
                case ta:
                    return (a = a.get(null === d.key ? c : d.key) || null), l(b, a, d, e);
            }
            if (Pg(d) || La(d)) return (a = a.get(c) || null), n(b, a, d, e, null);
            Rg(b, d);
        }
        return null;
    }
    function x(e, g, h, k) {
        for (var l = null, t = null, u = g, z = (g = 0), q = null; null !== u && z < h.length; z++) {
            u.index > z ? ((q = u), (u = null)) : (q = u.sibling);
            var n = p(e, u, h[z], k);
            if (null === n) {
                null === u && (u = q);
                break;
            }
            a && u && null === n.alternate && b(e, u);
            g = f(n, g, z);
            null === t ? (l = n) : (t.sibling = n);
            t = n;
            u = q;
        }
        if (z === h.length) return c(e, u), l;
        if (null === u) {
            for (; z < h.length; z++) (u = A(e, h[z], k)), null !== u && ((g = f(u, g, z)), null === t ? (l = u) : (t.sibling = u), (t = u));
            return l;
        }
        for (u = d(e, u); z < h.length; z++) (q = C(u, e, z, h[z], k)), null !== q && (a && null !== q.alternate && u.delete(null === q.key ? z : q.key), (g = f(q, g, z)), null === t ? (l = q) : (t.sibling = q), (t = q));
        a &&
            u.forEach(function (a) {
                return b(e, a);
            });
        return l;
    }
    function w(e, g, h, k) {
        var l = La(h);
        if ('function' !== typeof l) throw Error(y(150));
        h = l.call(h);
        if (null == h) throw Error(y(151));
        for (var t = (l = null), u = g, z = (g = 0), q = null, n = h.next(); null !== u && !n.done; z++, n = h.next()) {
            u.index > z ? ((q = u), (u = null)) : (q = u.sibling);
            var w = p(e, u, n.value, k);
            if (null === w) {
                null === u && (u = q);
                break;
            }
            a && u && null === w.alternate && b(e, u);
            g = f(w, g, z);
            null === t ? (l = w) : (t.sibling = w);
            t = w;
            u = q;
        }
        if (n.done) return c(e, u), l;
        if (null === u) {
            for (; !n.done; z++, n = h.next()) (n = A(e, n.value, k)), null !== n && ((g = f(n, g, z)), null === t ? (l = n) : (t.sibling = n), (t = n));
            return l;
        }
        for (u = d(e, u); !n.done; z++, n = h.next()) (n = C(u, e, z, n.value, k)), null !== n && (a && null !== n.alternate && u.delete(null === n.key ? z : n.key), (g = f(n, g, z)), null === t ? (l = n) : (t.sibling = n), (t = n));
        a &&
            u.forEach(function (a) {
                return b(e, a);
            });
        return l;
    }
    return function (a, d, f, h) {
        var k = 'object' === typeof f && null !== f && f.type === ua && null === f.key;
        k && (f = f.props.children);
        var l = 'object' === typeof f && null !== f;
        if (l)
            switch (f.$$typeof) {
                case sa:
                    a: {
                        l = f.key;
                        for (k = d; null !== k; ) {
                            if (k.key === l) {
                                switch (k.tag) {
                                    case 7:
                                        if (f.type === ua) {
                                            c(a, k.sibling);
                                            d = e(k, f.props.children);
                                            d.return = a;
                                            a = d;
                                            break a;
                                        }
                                        break;
                                    default:
                                        if (k.elementType === f.type) {
                                            c(a, k.sibling);
                                            d = e(k, f.props);
                                            d.ref = Qg(a, k, f);
                                            d.return = a;
                                            a = d;
                                            break a;
                                        }
                                }
                                c(a, k);
                                break;
                            } else b(a, k);
                            k = k.sibling;
                        }
                        f.type === ua ? ((d = Xg(f.props.children, a.mode, h, f.key)), (d.return = a), (a = d)) : ((h = Vg(f.type, f.key, f.props, null, a.mode, h)), (h.ref = Qg(a, d, f)), (h.return = a), (a = h));
                    }
                    return g(a);
                case ta:
                    a: {
                        for (k = f.key; null !== d; ) {
                            if (d.key === k)
                                if (4 === d.tag && d.stateNode.containerInfo === f.containerInfo && d.stateNode.implementation === f.implementation) {
                                    c(a, d.sibling);
                                    d = e(d, f.children || []);
                                    d.return = a;
                                    a = d;
                                    break a;
                                } else {
                                    c(a, d);
                                    break;
                                }
                            else b(a, d);
                            d = d.sibling;
                        }
                        d = Wg(f, a.mode, h);
                        d.return = a;
                        a = d;
                    }
                    return g(a);
            }
        if ('string' === typeof f || 'number' === typeof f) return (f = '' + f), null !== d && 6 === d.tag ? (c(a, d.sibling), (d = e(d, f)), (d.return = a), (a = d)) : (c(a, d), (d = Ug(f, a.mode, h)), (d.return = a), (a = d)), g(a);
        if (Pg(f)) return x(a, d, f, h);
        if (La(f)) return w(a, d, f, h);
        l && Rg(a, f);
        if ('undefined' === typeof f && !k)
            switch (a.tag) {
                case 1:
                case 22:
                case 0:
                case 11:
                case 15:
                    throw Error(y(152, Ra(a.type) || 'Component'));
            }
        return c(a, d);
    };
}
var Yg = Sg(!0),
    Zg = Sg(!1),
    $g = {},
    ah = Bf($g),
    bh = Bf($g),
    ch = Bf($g);
function dh(a) {
    if (a === $g) throw Error(y(174));
    return a;
}
function eh(a, b) {
    I(ch, b);
    I(bh, a);
    I(ah, $g);
    a = b.nodeType;
    switch (a) {
        case 9:
        case 11:
            b = (b = b.documentElement) ? b.namespaceURI : mb(null, '');
            break;
        default:
            (a = 8 === a ? b.parentNode : b), (b = a.namespaceURI || null), (a = a.tagName), (b = mb(b, a));
    }
    H(ah);
    I(ah, b);
}
function fh() {
    H(ah);
    H(bh);
    H(ch);
}
function gh(a) {
    dh(ch.current);
    var b = dh(ah.current);
    var c = mb(b, a.type);
    b !== c && (I(bh, a), I(ah, c));
}
function hh(a) {
    bh.current === a && (H(ah), H(bh));
}
var P = Bf(0);
function ih(a) {
    for (var b = a; null !== b; ) {
        if (13 === b.tag) {
            var c = b.memoizedState;
            if (null !== c && ((c = c.dehydrated), null === c || '$?' === c.data || '$!' === c.data)) return b;
        } else if (19 === b.tag && void 0 !== b.memoizedProps.revealOrder) {
            if (0 !== (b.flags & 64)) return b;
        } else if (null !== b.child) {
            b.child.return = b;
            b = b.child;
            continue;
        }
        if (b === a) break;
        for (; null === b.sibling; ) {
            if (null === b.return || b.return === a) return null;
            b = b.return;
        }
        b.sibling.return = b.return;
        b = b.sibling;
    }
    return null;
}
var jh = null,
    kh = null,
    lh = !1;
function mh(a, b) {
    var c = nh(5, null, null, 0);
    c.elementType = 'DELETED';
    c.type = 'DELETED';
    c.stateNode = b;
    c.return = a;
    c.flags = 8;
    null !== a.lastEffect ? ((a.lastEffect.nextEffect = c), (a.lastEffect = c)) : (a.firstEffect = a.lastEffect = c);
}
function oh(a, b) {
    switch (a.tag) {
        case 5:
            var c = a.type;
            b = 1 !== b.nodeType || c.toLowerCase() !== b.nodeName.toLowerCase() ? null : b;
            return null !== b ? ((a.stateNode = b), !0) : !1;
        case 6:
            return (b = '' === a.pendingProps || 3 !== b.nodeType ? null : b), null !== b ? ((a.stateNode = b), !0) : !1;
        case 13:
            return !1;
        default:
            return !1;
    }
}
function ph(a) {
    if (lh) {
        var b = kh;
        if (b) {
            var c = b;
            if (!oh(a, b)) {
                b = rf(c.nextSibling);
                if (!b || !oh(a, b)) {
                    a.flags = (a.flags & -1025) | 2;
                    lh = !1;
                    jh = a;
                    return;
                }
                mh(jh, c);
            }
            jh = a;
            kh = rf(b.firstChild);
        } else (a.flags = (a.flags & -1025) | 2), (lh = !1), (jh = a);
    }
}
function qh(a) {
    for (a = a.return; null !== a && 5 !== a.tag && 3 !== a.tag && 13 !== a.tag; ) a = a.return;
    jh = a;
}
function rh(a) {
    if (a !== jh) return !1;
    if (!lh) return qh(a), (lh = !0), !1;
    var b = a.type;
    if (5 !== a.tag || ('head' !== b && 'body' !== b && !nf(b, a.memoizedProps))) for (b = kh; b; ) mh(a, b), (b = rf(b.nextSibling));
    qh(a);
    if (13 === a.tag) {
        a = a.memoizedState;
        a = null !== a ? a.dehydrated : null;
        if (!a) throw Error(y(317));
        a: {
            a = a.nextSibling;
            for (b = 0; a; ) {
                if (8 === a.nodeType) {
                    var c = a.data;
                    if ('/$' === c) {
                        if (0 === b) {
                            kh = rf(a.nextSibling);
                            break a;
                        }
                        b--;
                    } else ('$' !== c && '$!' !== c && '$?' !== c) || b++;
                }
                a = a.nextSibling;
            }
            kh = null;
        }
    } else kh = jh ? rf(a.stateNode.nextSibling) : null;
    return !0;
}
function sh() {
    kh = jh = null;
    lh = !1;
}
var th = [];
function uh() {
    for (var a = 0; a < th.length; a++) th[a]._workInProgressVersionPrimary = null;
    th.length = 0;
}
var vh = ra.ReactCurrentDispatcher,
    wh = ra.ReactCurrentBatchConfig,
    xh = 0,
    R = null,
    S = null,
    T = null,
    yh = !1,
    zh = !1;
function Ah() {
    throw Error(y(321));
}
function Bh(a, b) {
    if (null === b) return !1;
    for (var c = 0; c < b.length && c < a.length; c++) if (!He(a[c], b[c])) return !1;
    return !0;
}
function Ch(a, b, c, d, e, f) {
    xh = f;
    R = b;
    b.memoizedState = null;
    b.updateQueue = null;
    b.lanes = 0;
    vh.current = null === a || null === a.memoizedState ? Dh : Eh;
    a = c(d, e);
    if (zh) {
        f = 0;
        do {
            zh = !1;
            if (!(25 > f)) throw Error(y(301));
            f += 1;
            T = S = null;
            b.updateQueue = null;
            vh.current = Fh;
            a = c(d, e);
        } while (zh);
    }
    vh.current = Gh;
    b = null !== S && null !== S.next;
    xh = 0;
    T = S = R = null;
    yh = !1;
    if (b) throw Error(y(300));
    return a;
}
function Hh() {
    var a = { memoizedState: null, baseState: null, baseQueue: null, queue: null, next: null };
    null === T ? (R.memoizedState = T = a) : (T = T.next = a);
    return T;
}
function Ih() {
    if (null === S) {
        var a = R.alternate;
        a = null !== a ? a.memoizedState : null;
    } else a = S.next;
    var b = null === T ? R.memoizedState : T.next;
    if (null !== b) (T = b), (S = a);
    else {
        if (null === a) throw Error(y(310));
        S = a;
        a = { memoizedState: S.memoizedState, baseState: S.baseState, baseQueue: S.baseQueue, queue: S.queue, next: null };
        null === T ? (R.memoizedState = T = a) : (T = T.next = a);
    }
    return T;
}
function Jh(a, b) {
    return 'function' === typeof b ? b(a) : b;
}
function Kh(a) {
    var b = Ih(),
        c = b.queue;
    if (null === c) throw Error(y(311));
    c.lastRenderedReducer = a;
    var d = S,
        e = d.baseQueue,
        f = c.pending;
    if (null !== f) {
        if (null !== e) {
            var g = e.next;
            e.next = f.next;
            f.next = g;
        }
        d.baseQueue = e = f;
        c.pending = null;
    }
    if (null !== e) {
        e = e.next;
        d = d.baseState;
        var h = (g = f = null),
            k = e;
        do {
            var l = k.lane;
            if ((xh & l) === l) null !== h && (h = h.next = { lane: 0, action: k.action, eagerReducer: k.eagerReducer, eagerState: k.eagerState, next: null }), (d = k.eagerReducer === a ? k.eagerState : a(d, k.action));
            else {
                var n = { lane: l, action: k.action, eagerReducer: k.eagerReducer, eagerState: k.eagerState, next: null };
                null === h ? ((g = h = n), (f = d)) : (h = h.next = n);
                R.lanes |= l;
                Dg |= l;
            }
            k = k.next;
        } while (null !== k && k !== e);
        null === h ? (f = d) : (h.next = g);
        He(d, b.memoizedState) || (ug = !0);
        b.memoizedState = d;
        b.baseState = f;
        b.baseQueue = h;
        c.lastRenderedState = d;
    }
    return [b.memoizedState, c.dispatch];
}
function Lh(a) {
    var b = Ih(),
        c = b.queue;
    if (null === c) throw Error(y(311));
    c.lastRenderedReducer = a;
    var d = c.dispatch,
        e = c.pending,
        f = b.memoizedState;
    if (null !== e) {
        c.pending = null;
        var g = (e = e.next);
        do (f = a(f, g.action)), (g = g.next);
        while (g !== e);
        He(f, b.memoizedState) || (ug = !0);
        b.memoizedState = f;
        null === b.baseQueue && (b.baseState = f);
        c.lastRenderedState = f;
    }
    return [f, d];
}
function Mh(a, b, c) {
    var d = b._getVersion;
    d = d(b._source);
    var e = b._workInProgressVersionPrimary;
    if (null !== e) a = e === d;
    else if (((a = a.mutableReadLanes), (a = (xh & a) === a))) (b._workInProgressVersionPrimary = d), th.push(b);
    if (a) return c(b._source);
    th.push(b);
    throw Error(y(350));
}
function Nh(a, b, c, d) {
    var e = U;
    if (null === e) throw Error(y(349));
    var f = b._getVersion,
        g = f(b._source),
        h = vh.current,
        k = h.useState(function () {
            return Mh(e, b, c);
        }),
        l = k[1],
        n = k[0];
    k = T;
    var A = a.memoizedState,
        p = A.refs,
        C = p.getSnapshot,
        x = A.source;
    A = A.subscribe;
    var w = R;
    a.memoizedState = { refs: p, source: b, subscribe: d };
    h.useEffect(
        function () {
            p.getSnapshot = c;
            p.setSnapshot = l;
            var a = f(b._source);
            if (!He(g, a)) {
                a = c(b._source);
                He(n, a) || (l(a), (a = Ig(w)), (e.mutableReadLanes |= a & e.pendingLanes));
                a = e.mutableReadLanes;
                e.entangledLanes |= a;
                for (var d = e.entanglements, h = a; 0 < h; ) {
                    var k = 31 - Vc(h),
                        v = 1 << k;
                    d[k] |= a;
                    h &= ~v;
                }
            }
        },
        [c, b, d]
    );
    h.useEffect(
        function () {
            return d(b._source, function () {
                var a = p.getSnapshot,
                    c = p.setSnapshot;
                try {
                    c(a(b._source));
                    var d = Ig(w);
                    e.mutableReadLanes |= d & e.pendingLanes;
                } catch (q) {
                    c(function () {
                        throw q;
                    });
                }
            });
        },
        [b, d]
    );
    (He(C, c) && He(x, b) && He(A, d)) || ((a = { pending: null, dispatch: null, lastRenderedReducer: Jh, lastRenderedState: n }), (a.dispatch = l = Oh.bind(null, R, a)), (k.queue = a), (k.baseQueue = null), (n = Mh(e, b, c)), (k.memoizedState = k.baseState = n));
    return n;
}
function Ph(a, b, c) {
    var d = Ih();
    return Nh(d, a, b, c);
}
function Qh(a) {
    var b = Hh();
    'function' === typeof a && (a = a());
    b.memoizedState = b.baseState = a;
    a = b.queue = { pending: null, dispatch: null, lastRenderedReducer: Jh, lastRenderedState: a };
    a = a.dispatch = Oh.bind(null, R, a);
    return [b.memoizedState, a];
}
function Rh(a, b, c, d) {
    a = { tag: a, create: b, destroy: c, deps: d, next: null };
    b = R.updateQueue;
    null === b ? ((b = { lastEffect: null }), (R.updateQueue = b), (b.lastEffect = a.next = a)) : ((c = b.lastEffect), null === c ? (b.lastEffect = a.next = a) : ((d = c.next), (c.next = a), (a.next = d), (b.lastEffect = a)));
    return a;
}
function Sh(a) {
    var b = Hh();
    a = { current: a };
    return (b.memoizedState = a);
}
function Th() {
    return Ih().memoizedState;
}
function Uh(a, b, c, d) {
    var e = Hh();
    R.flags |= a;
    e.memoizedState = Rh(1 | b, c, void 0, void 0 === d ? null : d);
}
function Vh(a, b, c, d) {
    var e = Ih();
    d = void 0 === d ? null : d;
    var f = void 0;
    if (null !== S) {
        var g = S.memoizedState;
        f = g.destroy;
        if (null !== d && Bh(d, g.deps)) {
            Rh(b, c, f, d);
            return;
        }
    }
    R.flags |= a;
    e.memoizedState = Rh(1 | b, c, f, d);
}
function Wh(a, b) {
    return Uh(516, 4, a, b);
}
function Xh(a, b) {
    return Vh(516, 4, a, b);
}
function Yh(a, b) {
    return Vh(4, 2, a, b);
}
function Zh(a, b) {
    if ('function' === typeof b)
        return (
            (a = a()),
            b(a),
            function () {
                b(null);
            }
        );
    if (null !== b && void 0 !== b)
        return (
            (a = a()),
            (b.current = a),
            function () {
                b.current = null;
            }
        );
}
function $h(a, b, c) {
    c = null !== c && void 0 !== c ? c.concat([a]) : null;
    return Vh(4, 2, Zh.bind(null, b, a), c);
}
function ai() {}
function bi(a, b) {
    var c = Ih();
    b = void 0 === b ? null : b;
    var d = c.memoizedState;
    if (null !== d && null !== b && Bh(b, d[1])) return d[0];
    c.memoizedState = [a, b];
    return a;
}
function ci(a, b) {
    var c = Ih();
    b = void 0 === b ? null : b;
    var d = c.memoizedState;
    if (null !== d && null !== b && Bh(b, d[1])) return d[0];
    a = a();
    c.memoizedState = [a, b];
    return a;
}
function di(a, b) {
    var c = eg();
    gg(98 > c ? 98 : c, function () {
        a(!0);
    });
    gg(97 < c ? 97 : c, function () {
        var c = wh.transition;
        wh.transition = 1;
        try {
            a(!1), b();
        } finally {
            wh.transition = c;
        }
    });
}
function Oh(a, b, c) {
    var d = Hg(),
        e = Ig(a),
        f = { lane: e, action: c, eagerReducer: null, eagerState: null, next: null },
        g = b.pending;
    null === g ? (f.next = f) : ((f.next = g.next), (g.next = f));
    b.pending = f;
    g = a.alternate;
    if (a === R || (null !== g && g === R)) zh = yh = !0;
    else {
        if (0 === a.lanes && (null === g || 0 === g.lanes) && ((g = b.lastRenderedReducer), null !== g))
            try {
                var h = b.lastRenderedState,
                    k = g(h, c);
                f.eagerReducer = g;
                f.eagerState = k;
                if (He(k, h)) return;
            } catch (l) {
            } finally {
            }
        Jg(a, e, d);
    }
}
var Gh = {
        readContext: vg,
        useCallback: Ah,
        useContext: Ah,
        useEffect: Ah,
        useImperativeHandle: Ah,
        useLayoutEffect: Ah,
        useMemo: Ah,
        useReducer: Ah,
        useRef: Ah,
        useState: Ah,
        useDebugValue: Ah,
        useDeferredValue: Ah,
        useTransition: Ah,
        useMutableSource: Ah,
        useOpaqueIdentifier: Ah,
        unstable_isNewReconciler: !1,
    },
    Dh = {
        readContext: vg,
        useCallback: function (a, b) {
            Hh().memoizedState = [a, void 0 === b ? null : b];
            return a;
        },
        useContext: vg,
        useEffect: Wh,
        useImperativeHandle: function (a, b, c) {
            c = null !== c && void 0 !== c ? c.concat([a]) : null;
            return Uh(4, 2, Zh.bind(null, b, a), c);
        },
        useLayoutEffect: function (a, b) {
            return Uh(4, 2, a, b);
        },
        useMemo: function (a, b) {
            var c = Hh();
            b = void 0 === b ? null : b;
            a = a();
            c.memoizedState = [a, b];
            return a;
        },
        useReducer: function (a, b, c) {
            var d = Hh();
            b = void 0 !== c ? c(b) : b;
            d.memoizedState = d.baseState = b;
            a = d.queue = { pending: null, dispatch: null, lastRenderedReducer: a, lastRenderedState: b };
            a = a.dispatch = Oh.bind(null, R, a);
            return [d.memoizedState, a];
        },
        useRef: Sh,
        useState: Qh,
        useDebugValue: ai,
        useDeferredValue: function (a) {
            var b = Qh(a),
                c = b[0],
                d = b[1];
            Wh(
                function () {
                    var b = wh.transition;
                    wh.transition = 1;
                    try {
                        d(a);
                    } finally {
                        wh.transition = b;
                    }
                },
                [a]
            );
            return c;
        },
        useTransition: function () {
            var a = Qh(!1),
                b = a[0];
            a = di.bind(null, a[1]);
            Sh(a);
            return [a, b];
        },
        useMutableSource: function (a, b, c) {
            var d = Hh();
            d.memoizedState = { refs: { getSnapshot: b, setSnapshot: null }, source: a, subscribe: c };
            return Nh(d, a, b, c);
        },
        useOpaqueIdentifier: function () {
            if (lh) {
                var a = !1,
                    b = uf(function () {
                        a || ((a = !0), c('r:' + (tf++).toString(36)));
                        throw Error(y(355));
                    }),
                    c = Qh(b)[1];
                0 === (R.mode & 2) &&
                    ((R.flags |= 516),
                    Rh(
                        5,
                        function () {
                            c('r:' + (tf++).toString(36));
                        },
                        void 0,
                        null
                    ));
                return b;
            }
            b = 'r:' + (tf++).toString(36);
            Qh(b);
            return b;
        },
        unstable_isNewReconciler: !1,
    },
    Eh = {
        readContext: vg,
        useCallback: bi,
        useContext: vg,
        useEffect: Xh,
        useImperativeHandle: $h,
        useLayoutEffect: Yh,
        useMemo: ci,
        useReducer: Kh,
        useRef: Th,
        useState: function () {
            return Kh(Jh);
        },
        useDebugValue: ai,
        useDeferredValue: function (a) {
            var b = Kh(Jh),
                c = b[0],
                d = b[1];
            Xh(
                function () {
                    var b = wh.transition;
                    wh.transition = 1;
                    try {
                        d(a);
                    } finally {
                        wh.transition = b;
                    }
                },
                [a]
            );
            return c;
        },
        useTransition: function () {
            var a = Kh(Jh)[0];
            return [Th().current, a];
        },
        useMutableSource: Ph,
        useOpaqueIdentifier: function () {
            return Kh(Jh)[0];
        },
        unstable_isNewReconciler: !1,
    },
    Fh = {
        readContext: vg,
        useCallback: bi,
        useContext: vg,
        useEffect: Xh,
        useImperativeHandle: $h,
        useLayoutEffect: Yh,
        useMemo: ci,
        useReducer: Lh,
        useRef: Th,
        useState: function () {
            return Lh(Jh);
        },
        useDebugValue: ai,
        useDeferredValue: function (a) {
            var b = Lh(Jh),
                c = b[0],
                d = b[1];
            Xh(
                function () {
                    var b = wh.transition;
                    wh.transition = 1;
                    try {
                        d(a);
                    } finally {
                        wh.transition = b;
                    }
                },
                [a]
            );
            return c;
        },
        useTransition: function () {
            var a = Lh(Jh)[0];
            return [Th().current, a];
        },
        useMutableSource: Ph,
        useOpaqueIdentifier: function () {
            return Lh(Jh)[0];
        },
        unstable_isNewReconciler: !1,
    },
    ei = ra.ReactCurrentOwner,
    ug = !1;
function fi(a, b, c, d) {
    b.child = null === a ? Zg(b, null, c, d) : Yg(b, a.child, c, d);
}
function gi(a, b, c, d, e) {
    c = c.render;
    var f = b.ref;
    tg(b, e);
    d = Ch(a, b, c, d, f, e);
    if (null !== a && !ug) return (b.updateQueue = a.updateQueue), (b.flags &= -517), (a.lanes &= ~e), hi(a, b, e);
    b.flags |= 1;
    fi(a, b, d, e);
    return b.child;
}
function ii(a, b, c, d, e, f) {
    if (null === a) {
        var g = c.type;
        if ('function' === typeof g && !ji(g) && void 0 === g.defaultProps && null === c.compare && void 0 === c.defaultProps) return (b.tag = 15), (b.type = g), ki(a, b, g, d, e, f);
        a = Vg(c.type, null, d, b, b.mode, f);
        a.ref = b.ref;
        a.return = b;
        return (b.child = a);
    }
    g = a.child;
    if (0 === (e & f) && ((e = g.memoizedProps), (c = c.compare), (c = null !== c ? c : Je), c(e, d) && a.ref === b.ref)) return hi(a, b, f);
    b.flags |= 1;
    a = Tg(g, d);
    a.ref = b.ref;
    a.return = b;
    return (b.child = a);
}
function ki(a, b, c, d, e, f) {
    if (null !== a && Je(a.memoizedProps, d) && a.ref === b.ref)
        if (((ug = !1), 0 !== (f & e))) 0 !== (a.flags & 16384) && (ug = !0);
        else return (b.lanes = a.lanes), hi(a, b, f);
    return li(a, b, c, d, f);
}
function mi(a, b, c) {
    var d = b.pendingProps,
        e = d.children,
        f = null !== a ? a.memoizedState : null;
    if ('hidden' === d.mode || 'unstable-defer-without-hiding' === d.mode)
        if (0 === (b.mode & 4)) (b.memoizedState = { baseLanes: 0 }), ni(b, c);
        else if (0 !== (c & 1073741824)) (b.memoizedState = { baseLanes: 0 }), ni(b, null !== f ? f.baseLanes : c);
        else return (a = null !== f ? f.baseLanes | c : c), (b.lanes = b.childLanes = 1073741824), (b.memoizedState = { baseLanes: a }), ni(b, a), null;
    else null !== f ? ((d = f.baseLanes | c), (b.memoizedState = null)) : (d = c), ni(b, d);
    fi(a, b, e, c);
    return b.child;
}
function oi(a, b) {
    var c = b.ref;
    if ((null === a && null !== c) || (null !== a && a.ref !== c)) b.flags |= 128;
}
function li(a, b, c, d, e) {
    var f = Ff(c) ? Df : M.current;
    f = Ef(b, f);
    tg(b, e);
    c = Ch(a, b, c, d, f, e);
    if (null !== a && !ug) return (b.updateQueue = a.updateQueue), (b.flags &= -517), (a.lanes &= ~e), hi(a, b, e);
    b.flags |= 1;
    fi(a, b, c, e);
    return b.child;
}
function pi(a, b, c, d, e) {
    if (Ff(c)) {
        var f = !0;
        Jf(b);
    } else f = !1;
    tg(b, e);
    if (null === b.stateNode) null !== a && ((a.alternate = null), (b.alternate = null), (b.flags |= 2)), Mg(b, c, d), Og(b, c, d, e), (d = !0);
    else if (null === a) {
        var g = b.stateNode,
            h = b.memoizedProps;
        g.props = h;
        var k = g.context,
            l = c.contextType;
        'object' === typeof l && null !== l ? (l = vg(l)) : ((l = Ff(c) ? Df : M.current), (l = Ef(b, l)));
        var n = c.getDerivedStateFromProps,
            A = 'function' === typeof n || 'function' === typeof g.getSnapshotBeforeUpdate;
        A || ('function' !== typeof g.UNSAFE_componentWillReceiveProps && 'function' !== typeof g.componentWillReceiveProps) || ((h !== d || k !== l) && Ng(b, g, d, l));
        wg = !1;
        var p = b.memoizedState;
        g.state = p;
        Cg(b, d, g, e);
        k = b.memoizedState;
        h !== d || p !== k || N.current || wg
            ? ('function' === typeof n && (Gg(b, c, n, d), (k = b.memoizedState)),
              (h = wg || Lg(b, c, h, d, p, k, l))
                  ? (A || ('function' !== typeof g.UNSAFE_componentWillMount && 'function' !== typeof g.componentWillMount) || ('function' === typeof g.componentWillMount && g.componentWillMount(), 'function' === typeof g.UNSAFE_componentWillMount && g.UNSAFE_componentWillMount()),
                    'function' === typeof g.componentDidMount && (b.flags |= 4))
                  : ('function' === typeof g.componentDidMount && (b.flags |= 4), (b.memoizedProps = d), (b.memoizedState = k)),
              (g.props = d),
              (g.state = k),
              (g.context = l),
              (d = h))
            : ('function' === typeof g.componentDidMount && (b.flags |= 4), (d = !1));
    } else {
        g = b.stateNode;
        yg(a, b);
        h = b.memoizedProps;
        l = b.type === b.elementType ? h : lg(b.type, h);
        g.props = l;
        A = b.pendingProps;
        p = g.context;
        k = c.contextType;
        'object' === typeof k && null !== k ? (k = vg(k)) : ((k = Ff(c) ? Df : M.current), (k = Ef(b, k)));
        var C = c.getDerivedStateFromProps;
        (n = 'function' === typeof C || 'function' === typeof g.getSnapshotBeforeUpdate) || ('function' !== typeof g.UNSAFE_componentWillReceiveProps && 'function' !== typeof g.componentWillReceiveProps) || ((h !== A || p !== k) && Ng(b, g, d, k));
        wg = !1;
        p = b.memoizedState;
        g.state = p;
        Cg(b, d, g, e);
        var x = b.memoizedState;
        h !== A || p !== x || N.current || wg
            ? ('function' === typeof C && (Gg(b, c, C, d), (x = b.memoizedState)),
              (l = wg || Lg(b, c, l, d, p, x, k))
                  ? (n ||
                        ('function' !== typeof g.UNSAFE_componentWillUpdate && 'function' !== typeof g.componentWillUpdate) ||
                        ('function' === typeof g.componentWillUpdate && g.componentWillUpdate(d, x, k), 'function' === typeof g.UNSAFE_componentWillUpdate && g.UNSAFE_componentWillUpdate(d, x, k)),
                    'function' === typeof g.componentDidUpdate && (b.flags |= 4),
                    'function' === typeof g.getSnapshotBeforeUpdate && (b.flags |= 256))
                  : ('function' !== typeof g.componentDidUpdate || (h === a.memoizedProps && p === a.memoizedState) || (b.flags |= 4),
                    'function' !== typeof g.getSnapshotBeforeUpdate || (h === a.memoizedProps && p === a.memoizedState) || (b.flags |= 256),
                    (b.memoizedProps = d),
                    (b.memoizedState = x)),
              (g.props = d),
              (g.state = x),
              (g.context = k),
              (d = l))
            : ('function' !== typeof g.componentDidUpdate || (h === a.memoizedProps && p === a.memoizedState) || (b.flags |= 4), 'function' !== typeof g.getSnapshotBeforeUpdate || (h === a.memoizedProps && p === a.memoizedState) || (b.flags |= 256), (d = !1));
    }
    return qi(a, b, c, d, f, e);
}
function qi(a, b, c, d, e, f) {
    oi(a, b);
    var g = 0 !== (b.flags & 64);
    if (!d && !g) return e && Kf(b, c, !1), hi(a, b, f);
    d = b.stateNode;
    ei.current = b;
    var h = g && 'function' !== typeof c.getDerivedStateFromError ? null : d.render();
    b.flags |= 1;
    null !== a && g ? ((b.child = Yg(b, a.child, null, f)), (b.child = Yg(b, null, h, f))) : fi(a, b, h, f);
    b.memoizedState = d.state;
    e && Kf(b, c, !0);
    return b.child;
}
function ri(a) {
    var b = a.stateNode;
    b.pendingContext ? Hf(a, b.pendingContext, b.pendingContext !== b.context) : b.context && Hf(a, b.context, !1);
    eh(a, b.containerInfo);
}
var si = { dehydrated: null, retryLane: 0 };
function ti(a, b, c) {
    var d = b.pendingProps,
        e = P.current,
        f = !1,
        g;
    (g = 0 !== (b.flags & 64)) || (g = null !== a && null === a.memoizedState ? !1 : 0 !== (e & 2));
    g ? ((f = !0), (b.flags &= -65)) : (null !== a && null === a.memoizedState) || void 0 === d.fallback || !0 === d.unstable_avoidThisFallback || (e |= 1);
    I(P, e & 1);
    if (null === a) {
        void 0 !== d.fallback && ph(b);
        a = d.children;
        e = d.fallback;
        if (f) return (a = ui(b, a, e, c)), (b.child.memoizedState = { baseLanes: c }), (b.memoizedState = si), a;
        if ('number' === typeof d.unstable_expectedLoadTime) return (a = ui(b, a, e, c)), (b.child.memoizedState = { baseLanes: c }), (b.memoizedState = si), (b.lanes = 33554432), a;
        c = vi({ mode: 'visible', children: a }, b.mode, c, null);
        c.return = b;
        return (b.child = c);
    }
    if (null !== a.memoizedState) {
        if (f) return (d = wi(a, b, d.children, d.fallback, c)), (f = b.child), (e = a.child.memoizedState), (f.memoizedState = null === e ? { baseLanes: c } : { baseLanes: e.baseLanes | c }), (f.childLanes = a.childLanes & ~c), (b.memoizedState = si), d;
        c = xi(a, b, d.children, c);
        b.memoizedState = null;
        return c;
    }
    if (f) return (d = wi(a, b, d.children, d.fallback, c)), (f = b.child), (e = a.child.memoizedState), (f.memoizedState = null === e ? { baseLanes: c } : { baseLanes: e.baseLanes | c }), (f.childLanes = a.childLanes & ~c), (b.memoizedState = si), d;
    c = xi(a, b, d.children, c);
    b.memoizedState = null;
    return c;
}
function ui(a, b, c, d) {
    var e = a.mode,
        f = a.child;
    b = { mode: 'hidden', children: b };
    0 === (e & 2) && null !== f ? ((f.childLanes = 0), (f.pendingProps = b)) : (f = vi(b, e, 0, null));
    c = Xg(c, e, d, null);
    f.return = a;
    c.return = a;
    f.sibling = c;
    a.child = f;
    return c;
}
function xi(a, b, c, d) {
    var e = a.child;
    a = e.sibling;
    c = Tg(e, { mode: 'visible', children: c });
    0 === (b.mode & 2) && (c.lanes = d);
    c.return = b;
    c.sibling = null;
    null !== a && ((a.nextEffect = null), (a.flags = 8), (b.firstEffect = b.lastEffect = a));
    return (b.child = c);
}
function wi(a, b, c, d, e) {
    var f = b.mode,
        g = a.child;
    a = g.sibling;
    var h = { mode: 'hidden', children: c };
    0 === (f & 2) && b.child !== g ? ((c = b.child), (c.childLanes = 0), (c.pendingProps = h), (g = c.lastEffect), null !== g ? ((b.firstEffect = c.firstEffect), (b.lastEffect = g), (g.nextEffect = null)) : (b.firstEffect = b.lastEffect = null)) : (c = Tg(g, h));
    null !== a ? (d = Tg(a, d)) : ((d = Xg(d, f, e, null)), (d.flags |= 2));
    d.return = b;
    c.return = b;
    c.sibling = d;
    b.child = c;
    return d;
}
function yi(a, b) {
    a.lanes |= b;
    var c = a.alternate;
    null !== c && (c.lanes |= b);
    sg(a.return, b);
}
function zi(a, b, c, d, e, f) {
    var g = a.memoizedState;
    null === g ? (a.memoizedState = { isBackwards: b, rendering: null, renderingStartTime: 0, last: d, tail: c, tailMode: e, lastEffect: f }) : ((g.isBackwards = b), (g.rendering = null), (g.renderingStartTime = 0), (g.last = d), (g.tail = c), (g.tailMode = e), (g.lastEffect = f));
}
function Ai(a, b, c) {
    var d = b.pendingProps,
        e = d.revealOrder,
        f = d.tail;
    fi(a, b, d.children, c);
    d = P.current;
    if (0 !== (d & 2)) (d = (d & 1) | 2), (b.flags |= 64);
    else {
        if (null !== a && 0 !== (a.flags & 64))
            a: for (a = b.child; null !== a; ) {
                if (13 === a.tag) null !== a.memoizedState && yi(a, c);
                else if (19 === a.tag) yi(a, c);
                else if (null !== a.child) {
                    a.child.return = a;
                    a = a.child;
                    continue;
                }
                if (a === b) break a;
                for (; null === a.sibling; ) {
                    if (null === a.return || a.return === b) break a;
                    a = a.return;
                }
                a.sibling.return = a.return;
                a = a.sibling;
            }
        d &= 1;
    }
    I(P, d);
    if (0 === (b.mode & 2)) b.memoizedState = null;
    else
        switch (e) {
            case 'forwards':
                c = b.child;
                for (e = null; null !== c; ) (a = c.alternate), null !== a && null === ih(a) && (e = c), (c = c.sibling);
                c = e;
                null === c ? ((e = b.child), (b.child = null)) : ((e = c.sibling), (c.sibling = null));
                zi(b, !1, e, c, f, b.lastEffect);
                break;
            case 'backwards':
                c = null;
                e = b.child;
                for (b.child = null; null !== e; ) {
                    a = e.alternate;
                    if (null !== a && null === ih(a)) {
                        b.child = e;
                        break;
                    }
                    a = e.sibling;
                    e.sibling = c;
                    c = e;
                    e = a;
                }
                zi(b, !0, c, null, f, b.lastEffect);
                break;
            case 'together':
                zi(b, !1, null, null, void 0, b.lastEffect);
                break;
            default:
                b.memoizedState = null;
        }
    return b.child;
}
function hi(a, b, c) {
    null !== a && (b.dependencies = a.dependencies);
    Dg |= b.lanes;
    if (0 !== (c & b.childLanes)) {
        if (null !== a && b.child !== a.child) throw Error(y(153));
        if (null !== b.child) {
            a = b.child;
            c = Tg(a, a.pendingProps);
            b.child = c;
            for (c.return = b; null !== a.sibling; ) (a = a.sibling), (c = c.sibling = Tg(a, a.pendingProps)), (c.return = b);
            c.sibling = null;
        }
        return b.child;
    }
    return null;
}
var Bi, Ci, Di, Ei;
Bi = function (a, b) {
    for (var c = b.child; null !== c; ) {
        if (5 === c.tag || 6 === c.tag) a.appendChild(c.stateNode);
        else if (4 !== c.tag && null !== c.child) {
            c.child.return = c;
            c = c.child;
            continue;
        }
        if (c === b) break;
        for (; null === c.sibling; ) {
            if (null === c.return || c.return === b) return;
            c = c.return;
        }
        c.sibling.return = c.return;
        c = c.sibling;
    }
};
Ci = function () {};
Di = function (a, b, c, d) {
    var e = a.memoizedProps;
    if (e !== d) {
        a = b.stateNode;
        dh(ah.current);
        var f = null;
        switch (c) {
            case 'input':
                e = Ya(a, e);
                d = Ya(a, d);
                f = [];
                break;
            case 'option':
                e = eb(a, e);
                d = eb(a, d);
                f = [];
                break;
            case 'select':
                e = m$1({}, e, { value: void 0 });
                d = m$1({}, d, { value: void 0 });
                f = [];
                break;
            case 'textarea':
                e = gb(a, e);
                d = gb(a, d);
                f = [];
                break;
            default:
                'function' !== typeof e.onClick && 'function' === typeof d.onClick && (a.onclick = jf);
        }
        vb(c, d);
        var g;
        c = null;
        for (l in e)
            if (!d.hasOwnProperty(l) && e.hasOwnProperty(l) && null != e[l])
                if ('style' === l) {
                    var h = e[l];
                    for (g in h) h.hasOwnProperty(g) && (c || (c = {}), (c[g] = ''));
                } else 'dangerouslySetInnerHTML' !== l && 'children' !== l && 'suppressContentEditableWarning' !== l && 'suppressHydrationWarning' !== l && 'autoFocus' !== l && (ca.hasOwnProperty(l) ? f || (f = []) : (f = f || []).push(l, null));
        for (l in d) {
            var k = d[l];
            h = null != e ? e[l] : void 0;
            if (d.hasOwnProperty(l) && k !== h && (null != k || null != h))
                if ('style' === l)
                    if (h) {
                        for (g in h) !h.hasOwnProperty(g) || (k && k.hasOwnProperty(g)) || (c || (c = {}), (c[g] = ''));
                        for (g in k) k.hasOwnProperty(g) && h[g] !== k[g] && (c || (c = {}), (c[g] = k[g]));
                    } else c || (f || (f = []), f.push(l, c)), (c = k);
                else
                    'dangerouslySetInnerHTML' === l
                        ? ((k = k ? k.__html : void 0), (h = h ? h.__html : void 0), null != k && h !== k && (f = f || []).push(l, k))
                        : 'children' === l
                        ? ('string' !== typeof k && 'number' !== typeof k) || (f = f || []).push(l, '' + k)
                        : 'suppressContentEditableWarning' !== l &&
                          'suppressHydrationWarning' !== l &&
                          (ca.hasOwnProperty(l) ? (null != k && 'onScroll' === l && G('scroll', a), f || h === k || (f = [])) : 'object' === typeof k && null !== k && k.$$typeof === Ga ? k.toString() : (f = f || []).push(l, k));
        }
        c && (f = f || []).push('style', c);
        var l = f;
        if ((b.updateQueue = l)) b.flags |= 4;
    }
};
Ei = function (a, b, c, d) {
    c !== d && (b.flags |= 4);
};
function Fi(a, b) {
    if (!lh)
        switch (a.tailMode) {
            case 'hidden':
                b = a.tail;
                for (var c = null; null !== b; ) null !== b.alternate && (c = b), (b = b.sibling);
                null === c ? (a.tail = null) : (c.sibling = null);
                break;
            case 'collapsed':
                c = a.tail;
                for (var d = null; null !== c; ) null !== c.alternate && (d = c), (c = c.sibling);
                null === d ? (b || null === a.tail ? (a.tail = null) : (a.tail.sibling = null)) : (d.sibling = null);
        }
}
function Gi(a, b, c) {
    var d = b.pendingProps;
    switch (b.tag) {
        case 2:
        case 16:
        case 15:
        case 0:
        case 11:
        case 7:
        case 8:
        case 12:
        case 9:
        case 14:
            return null;
        case 1:
            return Ff(b.type) && Gf(), null;
        case 3:
            fh();
            H(N);
            H(M);
            uh();
            d = b.stateNode;
            d.pendingContext && ((d.context = d.pendingContext), (d.pendingContext = null));
            if (null === a || null === a.child) rh(b) ? (b.flags |= 4) : d.hydrate || (b.flags |= 256);
            Ci(b);
            return null;
        case 5:
            hh(b);
            var e = dh(ch.current);
            c = b.type;
            if (null !== a && null != b.stateNode) Di(a, b, c, d, e), a.ref !== b.ref && (b.flags |= 128);
            else {
                if (!d) {
                    if (null === b.stateNode) throw Error(y(166));
                    return null;
                }
                a = dh(ah.current);
                if (rh(b)) {
                    d = b.stateNode;
                    c = b.type;
                    var f = b.memoizedProps;
                    d[wf] = b;
                    d[xf] = f;
                    switch (c) {
                        case 'dialog':
                            G('cancel', d);
                            G('close', d);
                            break;
                        case 'iframe':
                        case 'object':
                        case 'embed':
                            G('load', d);
                            break;
                        case 'video':
                        case 'audio':
                            for (a = 0; a < Xe.length; a++) G(Xe[a], d);
                            break;
                        case 'source':
                            G('error', d);
                            break;
                        case 'img':
                        case 'image':
                        case 'link':
                            G('error', d);
                            G('load', d);
                            break;
                        case 'details':
                            G('toggle', d);
                            break;
                        case 'input':
                            Za(d, f);
                            G('invalid', d);
                            break;
                        case 'select':
                            d._wrapperState = { wasMultiple: !!f.multiple };
                            G('invalid', d);
                            break;
                        case 'textarea':
                            hb(d, f), G('invalid', d);
                    }
                    vb(c, f);
                    a = null;
                    for (var g in f)
                        f.hasOwnProperty(g) &&
                            ((e = f[g]), 'children' === g ? ('string' === typeof e ? d.textContent !== e && (a = ['children', e]) : 'number' === typeof e && d.textContent !== '' + e && (a = ['children', '' + e])) : ca.hasOwnProperty(g) && null != e && 'onScroll' === g && G('scroll', d));
                    switch (c) {
                        case 'input':
                            Va(d);
                            cb(d, f, !0);
                            break;
                        case 'textarea':
                            Va(d);
                            jb(d);
                            break;
                        case 'select':
                        case 'option':
                            break;
                        default:
                            'function' === typeof f.onClick && (d.onclick = jf);
                    }
                    d = a;
                    b.updateQueue = d;
                    null !== d && (b.flags |= 4);
                } else {
                    g = 9 === e.nodeType ? e : e.ownerDocument;
                    a === kb.html && (a = lb(c));
                    a === kb.html
                        ? 'script' === c
                            ? ((a = g.createElement('div')), (a.innerHTML = '<script>\x3c/script>'), (a = a.removeChild(a.firstChild)))
                            : 'string' === typeof d.is
                            ? (a = g.createElement(c, { is: d.is }))
                            : ((a = g.createElement(c)), 'select' === c && ((g = a), d.multiple ? (g.multiple = !0) : d.size && (g.size = d.size)))
                        : (a = g.createElementNS(a, c));
                    a[wf] = b;
                    a[xf] = d;
                    Bi(a, b, !1, !1);
                    b.stateNode = a;
                    g = wb(c, d);
                    switch (c) {
                        case 'dialog':
                            G('cancel', a);
                            G('close', a);
                            e = d;
                            break;
                        case 'iframe':
                        case 'object':
                        case 'embed':
                            G('load', a);
                            e = d;
                            break;
                        case 'video':
                        case 'audio':
                            for (e = 0; e < Xe.length; e++) G(Xe[e], a);
                            e = d;
                            break;
                        case 'source':
                            G('error', a);
                            e = d;
                            break;
                        case 'img':
                        case 'image':
                        case 'link':
                            G('error', a);
                            G('load', a);
                            e = d;
                            break;
                        case 'details':
                            G('toggle', a);
                            e = d;
                            break;
                        case 'input':
                            Za(a, d);
                            e = Ya(a, d);
                            G('invalid', a);
                            break;
                        case 'option':
                            e = eb(a, d);
                            break;
                        case 'select':
                            a._wrapperState = { wasMultiple: !!d.multiple };
                            e = m$1({}, d, { value: void 0 });
                            G('invalid', a);
                            break;
                        case 'textarea':
                            hb(a, d);
                            e = gb(a, d);
                            G('invalid', a);
                            break;
                        default:
                            e = d;
                    }
                    vb(c, e);
                    var h = e;
                    for (f in h)
                        if (h.hasOwnProperty(f)) {
                            var k = h[f];
                            'style' === f
                                ? tb(a, k)
                                : 'dangerouslySetInnerHTML' === f
                                ? ((k = k ? k.__html : void 0), null != k && ob(a, k))
                                : 'children' === f
                                ? 'string' === typeof k
                                    ? ('textarea' !== c || '' !== k) && pb(a, k)
                                    : 'number' === typeof k && pb(a, '' + k)
                                : 'suppressContentEditableWarning' !== f && 'suppressHydrationWarning' !== f && 'autoFocus' !== f && (ca.hasOwnProperty(f) ? null != k && 'onScroll' === f && G('scroll', a) : null != k && qa(a, f, k, g));
                        }
                    switch (c) {
                        case 'input':
                            Va(a);
                            cb(a, d, !1);
                            break;
                        case 'textarea':
                            Va(a);
                            jb(a);
                            break;
                        case 'option':
                            null != d.value && a.setAttribute('value', '' + Sa(d.value));
                            break;
                        case 'select':
                            a.multiple = !!d.multiple;
                            f = d.value;
                            null != f ? fb(a, !!d.multiple, f, !1) : null != d.defaultValue && fb(a, !!d.multiple, d.defaultValue, !0);
                            break;
                        default:
                            'function' === typeof e.onClick && (a.onclick = jf);
                    }
                    mf(c, d) && (b.flags |= 4);
                }
                null !== b.ref && (b.flags |= 128);
            }
            return null;
        case 6:
            if (a && null != b.stateNode) Ei(a, b, a.memoizedProps, d);
            else {
                if ('string' !== typeof d && null === b.stateNode) throw Error(y(166));
                c = dh(ch.current);
                dh(ah.current);
                rh(b) ? ((d = b.stateNode), (c = b.memoizedProps), (d[wf] = b), d.nodeValue !== c && (b.flags |= 4)) : ((d = (9 === c.nodeType ? c : c.ownerDocument).createTextNode(d)), (d[wf] = b), (b.stateNode = d));
            }
            return null;
        case 13:
            H(P);
            d = b.memoizedState;
            if (0 !== (b.flags & 64)) return (b.lanes = c), b;
            d = null !== d;
            c = !1;
            null === a ? void 0 !== b.memoizedProps.fallback && rh(b) : (c = null !== a.memoizedState);
            if (d && !c && 0 !== (b.mode & 2))
                if ((null === a && !0 !== b.memoizedProps.unstable_avoidThisFallback) || 0 !== (P.current & 1)) 0 === V && (V = 3);
                else {
                    if (0 === V || 3 === V) V = 4;
                    null === U || (0 === (Dg & 134217727) && 0 === (Hi & 134217727)) || Ii(U, W);
                }
            if (d || c) b.flags |= 4;
            return null;
        case 4:
            return fh(), Ci(b), null === a && cf(b.stateNode.containerInfo), null;
        case 10:
            return rg(b), null;
        case 17:
            return Ff(b.type) && Gf(), null;
        case 19:
            H(P);
            d = b.memoizedState;
            if (null === d) return null;
            f = 0 !== (b.flags & 64);
            g = d.rendering;
            if (null === g)
                if (f) Fi(d, !1);
                else {
                    if (0 !== V || (null !== a && 0 !== (a.flags & 64)))
                        for (a = b.child; null !== a; ) {
                            g = ih(a);
                            if (null !== g) {
                                b.flags |= 64;
                                Fi(d, !1);
                                f = g.updateQueue;
                                null !== f && ((b.updateQueue = f), (b.flags |= 4));
                                null === d.lastEffect && (b.firstEffect = null);
                                b.lastEffect = d.lastEffect;
                                d = c;
                                for (c = b.child; null !== c; )
                                    (f = c),
                                        (a = d),
                                        (f.flags &= 2),
                                        (f.nextEffect = null),
                                        (f.firstEffect = null),
                                        (f.lastEffect = null),
                                        (g = f.alternate),
                                        null === g
                                            ? ((f.childLanes = 0), (f.lanes = a), (f.child = null), (f.memoizedProps = null), (f.memoizedState = null), (f.updateQueue = null), (f.dependencies = null), (f.stateNode = null))
                                            : ((f.childLanes = g.childLanes),
                                              (f.lanes = g.lanes),
                                              (f.child = g.child),
                                              (f.memoizedProps = g.memoizedProps),
                                              (f.memoizedState = g.memoizedState),
                                              (f.updateQueue = g.updateQueue),
                                              (f.type = g.type),
                                              (a = g.dependencies),
                                              (f.dependencies = null === a ? null : { lanes: a.lanes, firstContext: a.firstContext })),
                                        (c = c.sibling);
                                I(P, (P.current & 1) | 2);
                                return b.child;
                            }
                            a = a.sibling;
                        }
                    null !== d.tail && O() > Ji && ((b.flags |= 64), (f = !0), Fi(d, !1), (b.lanes = 33554432));
                }
            else {
                if (!f)
                    if (((a = ih(g)), null !== a)) {
                        if (((b.flags |= 64), (f = !0), (c = a.updateQueue), null !== c && ((b.updateQueue = c), (b.flags |= 4)), Fi(d, !0), null === d.tail && 'hidden' === d.tailMode && !g.alternate && !lh)) return (b = b.lastEffect = d.lastEffect), null !== b && (b.nextEffect = null), null;
                    } else 2 * O() - d.renderingStartTime > Ji && 1073741824 !== c && ((b.flags |= 64), (f = !0), Fi(d, !1), (b.lanes = 33554432));
                d.isBackwards ? ((g.sibling = b.child), (b.child = g)) : ((c = d.last), null !== c ? (c.sibling = g) : (b.child = g), (d.last = g));
            }
            return null !== d.tail ? ((c = d.tail), (d.rendering = c), (d.tail = c.sibling), (d.lastEffect = b.lastEffect), (d.renderingStartTime = O()), (c.sibling = null), (b = P.current), I(P, f ? (b & 1) | 2 : b & 1), c) : null;
        case 23:
        case 24:
            return Ki(), null !== a && (null !== a.memoizedState) !== (null !== b.memoizedState) && 'unstable-defer-without-hiding' !== d.mode && (b.flags |= 4), null;
    }
    throw Error(y(156, b.tag));
}
function Li(a) {
    switch (a.tag) {
        case 1:
            Ff(a.type) && Gf();
            var b = a.flags;
            return b & 4096 ? ((a.flags = (b & -4097) | 64), a) : null;
        case 3:
            fh();
            H(N);
            H(M);
            uh();
            b = a.flags;
            if (0 !== (b & 64)) throw Error(y(285));
            a.flags = (b & -4097) | 64;
            return a;
        case 5:
            return hh(a), null;
        case 13:
            return H(P), (b = a.flags), b & 4096 ? ((a.flags = (b & -4097) | 64), a) : null;
        case 19:
            return H(P), null;
        case 4:
            return fh(), null;
        case 10:
            return rg(a), null;
        case 23:
        case 24:
            return Ki(), null;
        default:
            return null;
    }
}
function Mi(a, b) {
    try {
        var c = '',
            d = b;
        do (c += Qa(d)), (d = d.return);
        while (d);
        var e = c;
    } catch (f) {
        e = '\nError generating stack: ' + f.message + '\n' + f.stack;
    }
    return { value: a, source: b, stack: e };
}
function Ni(a, b) {
    try {
        console.error(b.value);
    } catch (c) {
        setTimeout(function () {
            throw c;
        });
    }
}
var Oi = 'function' === typeof WeakMap ? WeakMap : Map;
function Pi(a, b, c) {
    c = zg(-1, c);
    c.tag = 3;
    c.payload = { element: null };
    var d = b.value;
    c.callback = function () {
        Qi || ((Qi = !0), (Ri = d));
        Ni(a, b);
    };
    return c;
}
function Si(a, b, c) {
    c = zg(-1, c);
    c.tag = 3;
    var d = a.type.getDerivedStateFromError;
    if ('function' === typeof d) {
        var e = b.value;
        c.payload = function () {
            Ni(a, b);
            return d(e);
        };
    }
    var f = a.stateNode;
    null !== f &&
        'function' === typeof f.componentDidCatch &&
        (c.callback = function () {
            'function' !== typeof d && (null === Ti ? (Ti = new Set([this])) : Ti.add(this), Ni(a, b));
            var c = b.stack;
            this.componentDidCatch(b.value, { componentStack: null !== c ? c : '' });
        });
    return c;
}
var Ui = 'function' === typeof WeakSet ? WeakSet : Set;
function Vi(a) {
    var b = a.ref;
    if (null !== b)
        if ('function' === typeof b)
            try {
                b(null);
            } catch (c) {
                Wi(a, c);
            }
        else b.current = null;
}
function Xi(a, b) {
    switch (b.tag) {
        case 0:
        case 11:
        case 15:
        case 22:
            return;
        case 1:
            if (b.flags & 256 && null !== a) {
                var c = a.memoizedProps,
                    d = a.memoizedState;
                a = b.stateNode;
                b = a.getSnapshotBeforeUpdate(b.elementType === b.type ? c : lg(b.type, c), d);
                a.__reactInternalSnapshotBeforeUpdate = b;
            }
            return;
        case 3:
            b.flags & 256 && qf(b.stateNode.containerInfo);
            return;
        case 5:
        case 6:
        case 4:
        case 17:
            return;
    }
    throw Error(y(163));
}
function Yi(a, b, c) {
    switch (c.tag) {
        case 0:
        case 11:
        case 15:
        case 22:
            b = c.updateQueue;
            b = null !== b ? b.lastEffect : null;
            if (null !== b) {
                a = b = b.next;
                do {
                    if (3 === (a.tag & 3)) {
                        var d = a.create;
                        a.destroy = d();
                    }
                    a = a.next;
                } while (a !== b);
            }
            b = c.updateQueue;
            b = null !== b ? b.lastEffect : null;
            if (null !== b) {
                a = b = b.next;
                do {
                    var e = a;
                    d = e.next;
                    e = e.tag;
                    0 !== (e & 4) && 0 !== (e & 1) && (Zi(c, a), $i(c, a));
                    a = d;
                } while (a !== b);
            }
            return;
        case 1:
            a = c.stateNode;
            c.flags & 4 && (null === b ? a.componentDidMount() : ((d = c.elementType === c.type ? b.memoizedProps : lg(c.type, b.memoizedProps)), a.componentDidUpdate(d, b.memoizedState, a.__reactInternalSnapshotBeforeUpdate)));
            b = c.updateQueue;
            null !== b && Eg(c, b, a);
            return;
        case 3:
            b = c.updateQueue;
            if (null !== b) {
                a = null;
                if (null !== c.child)
                    switch (c.child.tag) {
                        case 5:
                            a = c.child.stateNode;
                            break;
                        case 1:
                            a = c.child.stateNode;
                    }
                Eg(c, b, a);
            }
            return;
        case 5:
            a = c.stateNode;
            null === b && c.flags & 4 && mf(c.type, c.memoizedProps) && a.focus();
            return;
        case 6:
            return;
        case 4:
            return;
        case 12:
            return;
        case 13:
            null === c.memoizedState && ((c = c.alternate), null !== c && ((c = c.memoizedState), null !== c && ((c = c.dehydrated), null !== c && Cc(c))));
            return;
        case 19:
        case 17:
        case 20:
        case 21:
        case 23:
        case 24:
            return;
    }
    throw Error(y(163));
}
function aj(a, b) {
    for (var c = a; ; ) {
        if (5 === c.tag) {
            var d = c.stateNode;
            if (b) (d = d.style), 'function' === typeof d.setProperty ? d.setProperty('display', 'none', 'important') : (d.display = 'none');
            else {
                d = c.stateNode;
                var e = c.memoizedProps.style;
                e = void 0 !== e && null !== e && e.hasOwnProperty('display') ? e.display : null;
                d.style.display = sb('display', e);
            }
        } else if (6 === c.tag) c.stateNode.nodeValue = b ? '' : c.memoizedProps;
        else if (((23 !== c.tag && 24 !== c.tag) || null === c.memoizedState || c === a) && null !== c.child) {
            c.child.return = c;
            c = c.child;
            continue;
        }
        if (c === a) break;
        for (; null === c.sibling; ) {
            if (null === c.return || c.return === a) return;
            c = c.return;
        }
        c.sibling.return = c.return;
        c = c.sibling;
    }
}
function bj(a, b) {
    if (Mf && 'function' === typeof Mf.onCommitFiberUnmount)
        try {
            Mf.onCommitFiberUnmount(Lf, b);
        } catch (f) {}
    switch (b.tag) {
        case 0:
        case 11:
        case 14:
        case 15:
        case 22:
            a = b.updateQueue;
            if (null !== a && ((a = a.lastEffect), null !== a)) {
                var c = (a = a.next);
                do {
                    var d = c,
                        e = d.destroy;
                    d = d.tag;
                    if (void 0 !== e)
                        if (0 !== (d & 4)) Zi(b, c);
                        else {
                            d = b;
                            try {
                                e();
                            } catch (f) {
                                Wi(d, f);
                            }
                        }
                    c = c.next;
                } while (c !== a);
            }
            break;
        case 1:
            Vi(b);
            a = b.stateNode;
            if ('function' === typeof a.componentWillUnmount)
                try {
                    (a.props = b.memoizedProps), (a.state = b.memoizedState), a.componentWillUnmount();
                } catch (f) {
                    Wi(b, f);
                }
            break;
        case 5:
            Vi(b);
            break;
        case 4:
            cj(a, b);
    }
}
function dj(a) {
    a.alternate = null;
    a.child = null;
    a.dependencies = null;
    a.firstEffect = null;
    a.lastEffect = null;
    a.memoizedProps = null;
    a.memoizedState = null;
    a.pendingProps = null;
    a.return = null;
    a.updateQueue = null;
}
function ej(a) {
    return 5 === a.tag || 3 === a.tag || 4 === a.tag;
}
function fj(a) {
    a: {
        for (var b = a.return; null !== b; ) {
            if (ej(b)) break a;
            b = b.return;
        }
        throw Error(y(160));
    }
    var c = b;
    b = c.stateNode;
    switch (c.tag) {
        case 5:
            var d = !1;
            break;
        case 3:
            b = b.containerInfo;
            d = !0;
            break;
        case 4:
            b = b.containerInfo;
            d = !0;
            break;
        default:
            throw Error(y(161));
    }
    c.flags & 16 && (pb(b, ''), (c.flags &= -17));
    a: b: for (c = a; ; ) {
        for (; null === c.sibling; ) {
            if (null === c.return || ej(c.return)) {
                c = null;
                break a;
            }
            c = c.return;
        }
        c.sibling.return = c.return;
        for (c = c.sibling; 5 !== c.tag && 6 !== c.tag && 18 !== c.tag; ) {
            if (c.flags & 2) continue b;
            if (null === c.child || 4 === c.tag) continue b;
            else (c.child.return = c), (c = c.child);
        }
        if (!(c.flags & 2)) {
            c = c.stateNode;
            break a;
        }
    }
    d ? gj(a, c, b) : hj(a, c, b);
}
function gj(a, b, c) {
    var d = a.tag,
        e = 5 === d || 6 === d;
    if (e)
        (a = e ? a.stateNode : a.stateNode.instance),
            b ? (8 === c.nodeType ? c.parentNode.insertBefore(a, b) : c.insertBefore(a, b)) : (8 === c.nodeType ? ((b = c.parentNode), b.insertBefore(a, c)) : ((b = c), b.appendChild(a)), (c = c._reactRootContainer), (null !== c && void 0 !== c) || null !== b.onclick || (b.onclick = jf));
    else if (4 !== d && ((a = a.child), null !== a)) for (gj(a, b, c), a = a.sibling; null !== a; ) gj(a, b, c), (a = a.sibling);
}
function hj(a, b, c) {
    var d = a.tag,
        e = 5 === d || 6 === d;
    if (e) (a = e ? a.stateNode : a.stateNode.instance), b ? c.insertBefore(a, b) : c.appendChild(a);
    else if (4 !== d && ((a = a.child), null !== a)) for (hj(a, b, c), a = a.sibling; null !== a; ) hj(a, b, c), (a = a.sibling);
}
function cj(a, b) {
    for (var c = b, d = !1, e, f; ; ) {
        if (!d) {
            d = c.return;
            a: for (;;) {
                if (null === d) throw Error(y(160));
                e = d.stateNode;
                switch (d.tag) {
                    case 5:
                        f = !1;
                        break a;
                    case 3:
                        e = e.containerInfo;
                        f = !0;
                        break a;
                    case 4:
                        e = e.containerInfo;
                        f = !0;
                        break a;
                }
                d = d.return;
            }
            d = !0;
        }
        if (5 === c.tag || 6 === c.tag) {
            a: for (var g = a, h = c, k = h; ; )
                if ((bj(g, k), null !== k.child && 4 !== k.tag)) (k.child.return = k), (k = k.child);
                else {
                    if (k === h) break a;
                    for (; null === k.sibling; ) {
                        if (null === k.return || k.return === h) break a;
                        k = k.return;
                    }
                    k.sibling.return = k.return;
                    k = k.sibling;
                }
            f ? ((g = e), (h = c.stateNode), 8 === g.nodeType ? g.parentNode.removeChild(h) : g.removeChild(h)) : e.removeChild(c.stateNode);
        } else if (4 === c.tag) {
            if (null !== c.child) {
                e = c.stateNode.containerInfo;
                f = !0;
                c.child.return = c;
                c = c.child;
                continue;
            }
        } else if ((bj(a, c), null !== c.child)) {
            c.child.return = c;
            c = c.child;
            continue;
        }
        if (c === b) break;
        for (; null === c.sibling; ) {
            if (null === c.return || c.return === b) return;
            c = c.return;
            4 === c.tag && (d = !1);
        }
        c.sibling.return = c.return;
        c = c.sibling;
    }
}
function ij(a, b) {
    switch (b.tag) {
        case 0:
        case 11:
        case 14:
        case 15:
        case 22:
            var c = b.updateQueue;
            c = null !== c ? c.lastEffect : null;
            if (null !== c) {
                var d = (c = c.next);
                do 3 === (d.tag & 3) && ((a = d.destroy), (d.destroy = void 0), void 0 !== a && a()), (d = d.next);
                while (d !== c);
            }
            return;
        case 1:
            return;
        case 5:
            c = b.stateNode;
            if (null != c) {
                d = b.memoizedProps;
                var e = null !== a ? a.memoizedProps : d;
                a = b.type;
                var f = b.updateQueue;
                b.updateQueue = null;
                if (null !== f) {
                    c[xf] = d;
                    'input' === a && 'radio' === d.type && null != d.name && $a(c, d);
                    wb(a, e);
                    b = wb(a, d);
                    for (e = 0; e < f.length; e += 2) {
                        var g = f[e],
                            h = f[e + 1];
                        'style' === g ? tb(c, h) : 'dangerouslySetInnerHTML' === g ? ob(c, h) : 'children' === g ? pb(c, h) : qa(c, g, h, b);
                    }
                    switch (a) {
                        case 'input':
                            ab(c, d);
                            break;
                        case 'textarea':
                            ib(c, d);
                            break;
                        case 'select':
                            (a = c._wrapperState.wasMultiple),
                                (c._wrapperState.wasMultiple = !!d.multiple),
                                (f = d.value),
                                null != f ? fb(c, !!d.multiple, f, !1) : a !== !!d.multiple && (null != d.defaultValue ? fb(c, !!d.multiple, d.defaultValue, !0) : fb(c, !!d.multiple, d.multiple ? [] : '', !1));
                    }
                }
            }
            return;
        case 6:
            if (null === b.stateNode) throw Error(y(162));
            b.stateNode.nodeValue = b.memoizedProps;
            return;
        case 3:
            c = b.stateNode;
            c.hydrate && ((c.hydrate = !1), Cc(c.containerInfo));
            return;
        case 12:
            return;
        case 13:
            null !== b.memoizedState && ((jj = O()), aj(b.child, !0));
            kj(b);
            return;
        case 19:
            kj(b);
            return;
        case 17:
            return;
        case 23:
        case 24:
            aj(b, null !== b.memoizedState);
            return;
    }
    throw Error(y(163));
}
function kj(a) {
    var b = a.updateQueue;
    if (null !== b) {
        a.updateQueue = null;
        var c = a.stateNode;
        null === c && (c = a.stateNode = new Ui());
        b.forEach(function (b) {
            var d = lj.bind(null, a, b);
            c.has(b) || (c.add(b), b.then(d, d));
        });
    }
}
function mj(a, b) {
    return null !== a && ((a = a.memoizedState), null === a || null !== a.dehydrated) ? ((b = b.memoizedState), null !== b && null === b.dehydrated) : !1;
}
var nj = Math.ceil,
    oj = ra.ReactCurrentDispatcher,
    pj = ra.ReactCurrentOwner,
    X = 0,
    U = null,
    Y = null,
    W = 0,
    qj = 0,
    rj = Bf(0),
    V = 0,
    sj = null,
    tj = 0,
    Dg = 0,
    Hi = 0,
    uj = 0,
    vj = null,
    jj = 0,
    Ji = Infinity;
function wj() {
    Ji = O() + 500;
}
var Z = null,
    Qi = !1,
    Ri = null,
    Ti = null,
    xj = !1,
    yj = null,
    zj = 90,
    Aj = [],
    Bj = [],
    Cj = null,
    Dj = 0,
    Ej = null,
    Fj = -1,
    Gj = 0,
    Hj = 0,
    Ij = null,
    Jj = !1;
function Hg() {
    return 0 !== (X & 48) ? O() : -1 !== Fj ? Fj : (Fj = O());
}
function Ig(a) {
    a = a.mode;
    if (0 === (a & 2)) return 1;
    if (0 === (a & 4)) return 99 === eg() ? 1 : 2;
    0 === Gj && (Gj = tj);
    if (0 !== kg.transition) {
        0 !== Hj && (Hj = null !== vj ? vj.pendingLanes : 0);
        a = Gj;
        var b = 4186112 & ~Hj;
        b &= -b;
        0 === b && ((a = 4186112 & ~a), (b = a & -a), 0 === b && (b = 8192));
        return b;
    }
    a = eg();
    0 !== (X & 4) && 98 === a ? (a = Xc(12, Gj)) : ((a = Sc(a)), (a = Xc(a, Gj)));
    return a;
}
function Jg(a, b, c) {
    if (50 < Dj) throw ((Dj = 0), (Ej = null), Error(y(185)));
    a = Kj(a, b);
    if (null === a) return null;
    $c(a, b, c);
    a === U && ((Hi |= b), 4 === V && Ii(a, W));
    var d = eg();
    1 === b ? (0 !== (X & 8) && 0 === (X & 48) ? Lj(a) : (Mj(a, c), 0 === X && (wj(), ig()))) : (0 === (X & 4) || (98 !== d && 99 !== d) || (null === Cj ? (Cj = new Set([a])) : Cj.add(a)), Mj(a, c));
    vj = a;
}
function Kj(a, b) {
    a.lanes |= b;
    var c = a.alternate;
    null !== c && (c.lanes |= b);
    c = a;
    for (a = a.return; null !== a; ) (a.childLanes |= b), (c = a.alternate), null !== c && (c.childLanes |= b), (c = a), (a = a.return);
    return 3 === c.tag ? c.stateNode : null;
}
function Mj(a, b) {
    for (var c = a.callbackNode, d = a.suspendedLanes, e = a.pingedLanes, f = a.expirationTimes, g = a.pendingLanes; 0 < g; ) {
        var h = 31 - Vc(g),
            k = 1 << h,
            l = f[h];
        if (-1 === l) {
            if (0 === (k & d) || 0 !== (k & e)) {
                l = b;
                Rc(k);
                var n = F;
                f[h] = 10 <= n ? l + 250 : 6 <= n ? l + 5e3 : -1;
            }
        } else l <= b && (a.expiredLanes |= k);
        g &= ~k;
    }
    d = Uc(a, a === U ? W : 0);
    b = F;
    if (0 === d) null !== c && (c !== Zf && Pf(c), (a.callbackNode = null), (a.callbackPriority = 0));
    else {
        if (null !== c) {
            if (a.callbackPriority === b) return;
            c !== Zf && Pf(c);
        }
        15 === b ? ((c = Lj.bind(null, a)), null === ag ? ((ag = [c]), (bg = Of(Uf, jg))) : ag.push(c), (c = Zf)) : 14 === b ? (c = hg(99, Lj.bind(null, a))) : ((c = Tc(b)), (c = hg(c, Nj.bind(null, a))));
        a.callbackPriority = b;
        a.callbackNode = c;
    }
}
function Nj(a) {
    Fj = -1;
    Hj = Gj = 0;
    if (0 !== (X & 48)) throw Error(y(327));
    var b = a.callbackNode;
    if (Oj() && a.callbackNode !== b) return null;
    var c = Uc(a, a === U ? W : 0);
    if (0 === c) return null;
    var d = c;
    var e = X;
    X |= 16;
    var f = Pj();
    if (U !== a || W !== d) wj(), Qj(a, d);
    do
        try {
            Rj();
            break;
        } catch (h) {
            Sj(a, h);
        }
    while (1);
    qg();
    oj.current = f;
    X = e;
    null !== Y ? (d = 0) : ((U = null), (W = 0), (d = V));
    if (0 !== (tj & Hi)) Qj(a, 0);
    else if (0 !== d) {
        2 === d && ((X |= 64), a.hydrate && ((a.hydrate = !1), qf(a.containerInfo)), (c = Wc(a)), 0 !== c && (d = Tj(a, c)));
        if (1 === d) throw ((b = sj), Qj(a, 0), Ii(a, c), Mj(a, O()), b);
        a.finishedWork = a.current.alternate;
        a.finishedLanes = c;
        switch (d) {
            case 0:
            case 1:
                throw Error(y(345));
            case 2:
                Uj(a);
                break;
            case 3:
                Ii(a, c);
                if ((c & 62914560) === c && ((d = jj + 500 - O()), 10 < d)) {
                    if (0 !== Uc(a, 0)) break;
                    e = a.suspendedLanes;
                    if ((e & c) !== c) {
                        Hg();
                        a.pingedLanes |= a.suspendedLanes & e;
                        break;
                    }
                    a.timeoutHandle = of(Uj.bind(null, a), d);
                    break;
                }
                Uj(a);
                break;
            case 4:
                Ii(a, c);
                if ((c & 4186112) === c) break;
                d = a.eventTimes;
                for (e = -1; 0 < c; ) {
                    var g = 31 - Vc(c);
                    f = 1 << g;
                    g = d[g];
                    g > e && (e = g);
                    c &= ~f;
                }
                c = e;
                c = O() - c;
                c = (120 > c ? 120 : 480 > c ? 480 : 1080 > c ? 1080 : 1920 > c ? 1920 : 3e3 > c ? 3e3 : 4320 > c ? 4320 : 1960 * nj(c / 1960)) - c;
                if (10 < c) {
                    a.timeoutHandle = of(Uj.bind(null, a), c);
                    break;
                }
                Uj(a);
                break;
            case 5:
                Uj(a);
                break;
            default:
                throw Error(y(329));
        }
    }
    Mj(a, O());
    return a.callbackNode === b ? Nj.bind(null, a) : null;
}
function Ii(a, b) {
    b &= ~uj;
    b &= ~Hi;
    a.suspendedLanes |= b;
    a.pingedLanes &= ~b;
    for (a = a.expirationTimes; 0 < b; ) {
        var c = 31 - Vc(b),
            d = 1 << c;
        a[c] = -1;
        b &= ~d;
    }
}
function Lj(a) {
    if (0 !== (X & 48)) throw Error(y(327));
    Oj();
    if (a === U && 0 !== (a.expiredLanes & W)) {
        var b = W;
        var c = Tj(a, b);
        0 !== (tj & Hi) && ((b = Uc(a, b)), (c = Tj(a, b)));
    } else (b = Uc(a, 0)), (c = Tj(a, b));
    0 !== a.tag && 2 === c && ((X |= 64), a.hydrate && ((a.hydrate = !1), qf(a.containerInfo)), (b = Wc(a)), 0 !== b && (c = Tj(a, b)));
    if (1 === c) throw ((c = sj), Qj(a, 0), Ii(a, b), Mj(a, O()), c);
    a.finishedWork = a.current.alternate;
    a.finishedLanes = b;
    Uj(a);
    Mj(a, O());
    return null;
}
function Vj() {
    if (null !== Cj) {
        var a = Cj;
        Cj = null;
        a.forEach(function (a) {
            a.expiredLanes |= 24 & a.pendingLanes;
            Mj(a, O());
        });
    }
    ig();
}
function Wj(a, b) {
    var c = X;
    X |= 1;
    try {
        return a(b);
    } finally {
        (X = c), 0 === X && (wj(), ig());
    }
}
function Xj(a, b) {
    var c = X;
    X &= -2;
    X |= 8;
    try {
        return a(b);
    } finally {
        (X = c), 0 === X && (wj(), ig());
    }
}
function ni(a, b) {
    I(rj, qj);
    qj |= b;
    tj |= b;
}
function Ki() {
    qj = rj.current;
    H(rj);
}
function Qj(a, b) {
    a.finishedWork = null;
    a.finishedLanes = 0;
    var c = a.timeoutHandle;
    -1 !== c && ((a.timeoutHandle = -1), pf(c));
    if (null !== Y)
        for (c = Y.return; null !== c; ) {
            var d = c;
            switch (d.tag) {
                case 1:
                    d = d.type.childContextTypes;
                    null !== d && void 0 !== d && Gf();
                    break;
                case 3:
                    fh();
                    H(N);
                    H(M);
                    uh();
                    break;
                case 5:
                    hh(d);
                    break;
                case 4:
                    fh();
                    break;
                case 13:
                    H(P);
                    break;
                case 19:
                    H(P);
                    break;
                case 10:
                    rg(d);
                    break;
                case 23:
                case 24:
                    Ki();
            }
            c = c.return;
        }
    U = a;
    Y = Tg(a.current, null);
    W = qj = tj = b;
    V = 0;
    sj = null;
    uj = Hi = Dg = 0;
}
function Sj(a, b) {
    do {
        var c = Y;
        try {
            qg();
            vh.current = Gh;
            if (yh) {
                for (var d = R.memoizedState; null !== d; ) {
                    var e = d.queue;
                    null !== e && (e.pending = null);
                    d = d.next;
                }
                yh = !1;
            }
            xh = 0;
            T = S = R = null;
            zh = !1;
            pj.current = null;
            if (null === c || null === c.return) {
                V = 1;
                sj = b;
                Y = null;
                break;
            }
            a: {
                var f = a,
                    g = c.return,
                    h = c,
                    k = b;
                b = W;
                h.flags |= 2048;
                h.firstEffect = h.lastEffect = null;
                if (null !== k && 'object' === typeof k && 'function' === typeof k.then) {
                    var l = k;
                    if (0 === (h.mode & 2)) {
                        var n = h.alternate;
                        n ? ((h.updateQueue = n.updateQueue), (h.memoizedState = n.memoizedState), (h.lanes = n.lanes)) : ((h.updateQueue = null), (h.memoizedState = null));
                    }
                    var A = 0 !== (P.current & 1),
                        p = g;
                    do {
                        var C;
                        if ((C = 13 === p.tag)) {
                            var x = p.memoizedState;
                            if (null !== x) C = null !== x.dehydrated ? !0 : !1;
                            else {
                                var w = p.memoizedProps;
                                C = void 0 === w.fallback ? !1 : !0 !== w.unstable_avoidThisFallback ? !0 : A ? !1 : !0;
                            }
                        }
                        if (C) {
                            var z = p.updateQueue;
                            if (null === z) {
                                var u = new Set();
                                u.add(l);
                                p.updateQueue = u;
                            } else z.add(l);
                            if (0 === (p.mode & 2)) {
                                p.flags |= 64;
                                h.flags |= 16384;
                                h.flags &= -2981;
                                if (1 === h.tag)
                                    if (null === h.alternate) h.tag = 17;
                                    else {
                                        var t = zg(-1, 1);
                                        t.tag = 2;
                                        Ag(h, t);
                                    }
                                h.lanes |= 1;
                                break a;
                            }
                            k = void 0;
                            h = b;
                            var q = f.pingCache;
                            null === q ? ((q = f.pingCache = new Oi()), (k = new Set()), q.set(l, k)) : ((k = q.get(l)), void 0 === k && ((k = new Set()), q.set(l, k)));
                            if (!k.has(h)) {
                                k.add(h);
                                var v = Yj.bind(null, f, l, h);
                                l.then(v, v);
                            }
                            p.flags |= 4096;
                            p.lanes = b;
                            break a;
                        }
                        p = p.return;
                    } while (null !== p);
                    k = Error((Ra(h.type) || 'A React component') + ' suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.');
                }
                5 !== V && (V = 2);
                k = Mi(k, h);
                p = g;
                do {
                    switch (p.tag) {
                        case 3:
                            f = k;
                            p.flags |= 4096;
                            b &= -b;
                            p.lanes |= b;
                            var J = Pi(p, f, b);
                            Bg(p, J);
                            break a;
                        case 1:
                            f = k;
                            var K = p.type,
                                Q = p.stateNode;
                            if (0 === (p.flags & 64) && ('function' === typeof K.getDerivedStateFromError || (null !== Q && 'function' === typeof Q.componentDidCatch && (null === Ti || !Ti.has(Q))))) {
                                p.flags |= 4096;
                                b &= -b;
                                p.lanes |= b;
                                var L = Si(p, f, b);
                                Bg(p, L);
                                break a;
                            }
                    }
                    p = p.return;
                } while (null !== p);
            }
            Zj(c);
        } catch (va) {
            b = va;
            Y === c && null !== c && (Y = c = c.return);
            continue;
        }
        break;
    } while (1);
}
function Pj() {
    var a = oj.current;
    oj.current = Gh;
    return null === a ? Gh : a;
}
function Tj(a, b) {
    var c = X;
    X |= 16;
    var d = Pj();
    (U === a && W === b) || Qj(a, b);
    do
        try {
            ak();
            break;
        } catch (e) {
            Sj(a, e);
        }
    while (1);
    qg();
    X = c;
    oj.current = d;
    if (null !== Y) throw Error(y(261));
    U = null;
    W = 0;
    return V;
}
function ak() {
    for (; null !== Y; ) bk(Y);
}
function Rj() {
    for (; null !== Y && !Qf(); ) bk(Y);
}
function bk(a) {
    var b = ck(a.alternate, a, qj);
    a.memoizedProps = a.pendingProps;
    null === b ? Zj(a) : (Y = b);
    pj.current = null;
}
function Zj(a) {
    var b = a;
    do {
        var c = b.alternate;
        a = b.return;
        if (0 === (b.flags & 2048)) {
            c = Gi(c, b, qj);
            if (null !== c) {
                Y = c;
                return;
            }
            c = b;
            if ((24 !== c.tag && 23 !== c.tag) || null === c.memoizedState || 0 !== (qj & 1073741824) || 0 === (c.mode & 4)) {
                for (var d = 0, e = c.child; null !== e; ) (d |= e.lanes | e.childLanes), (e = e.sibling);
                c.childLanes = d;
            }
            null !== a &&
                0 === (a.flags & 2048) &&
                (null === a.firstEffect && (a.firstEffect = b.firstEffect),
                null !== b.lastEffect && (null !== a.lastEffect && (a.lastEffect.nextEffect = b.firstEffect), (a.lastEffect = b.lastEffect)),
                1 < b.flags && (null !== a.lastEffect ? (a.lastEffect.nextEffect = b) : (a.firstEffect = b), (a.lastEffect = b)));
        } else {
            c = Li(b);
            if (null !== c) {
                c.flags &= 2047;
                Y = c;
                return;
            }
            null !== a && ((a.firstEffect = a.lastEffect = null), (a.flags |= 2048));
        }
        b = b.sibling;
        if (null !== b) {
            Y = b;
            return;
        }
        Y = b = a;
    } while (null !== b);
    0 === V && (V = 5);
}
function Uj(a) {
    var b = eg();
    gg(99, dk.bind(null, a, b));
    return null;
}
function dk(a, b) {
    do Oj();
    while (null !== yj);
    if (0 !== (X & 48)) throw Error(y(327));
    var c = a.finishedWork;
    if (null === c) return null;
    a.finishedWork = null;
    a.finishedLanes = 0;
    if (c === a.current) throw Error(y(177));
    a.callbackNode = null;
    var d = c.lanes | c.childLanes,
        e = d,
        f = a.pendingLanes & ~e;
    a.pendingLanes = e;
    a.suspendedLanes = 0;
    a.pingedLanes = 0;
    a.expiredLanes &= e;
    a.mutableReadLanes &= e;
    a.entangledLanes &= e;
    e = a.entanglements;
    for (var g = a.eventTimes, h = a.expirationTimes; 0 < f; ) {
        var k = 31 - Vc(f),
            l = 1 << k;
        e[k] = 0;
        g[k] = -1;
        h[k] = -1;
        f &= ~l;
    }
    null !== Cj && 0 === (d & 24) && Cj.has(a) && Cj.delete(a);
    a === U && ((Y = U = null), (W = 0));
    1 < c.flags ? (null !== c.lastEffect ? ((c.lastEffect.nextEffect = c), (d = c.firstEffect)) : (d = c)) : (d = c.firstEffect);
    if (null !== d) {
        e = X;
        X |= 32;
        pj.current = null;
        kf = fd;
        g = Ne();
        if (Oe(g)) {
            if ('selectionStart' in g) h = { start: g.selectionStart, end: g.selectionEnd };
            else
                a: if (((h = ((h = g.ownerDocument) && h.defaultView) || window), (l = h.getSelection && h.getSelection()) && 0 !== l.rangeCount)) {
                    h = l.anchorNode;
                    f = l.anchorOffset;
                    k = l.focusNode;
                    l = l.focusOffset;
                    try {
                        h.nodeType, k.nodeType;
                    } catch (va) {
                        h = null;
                        break a;
                    }
                    var n = 0,
                        A = -1,
                        p = -1,
                        C = 0,
                        x = 0,
                        w = g,
                        z = null;
                    b: for (;;) {
                        for (var u; ; ) {
                            w !== h || (0 !== f && 3 !== w.nodeType) || (A = n + f);
                            w !== k || (0 !== l && 3 !== w.nodeType) || (p = n + l);
                            3 === w.nodeType && (n += w.nodeValue.length);
                            if (null === (u = w.firstChild)) break;
                            z = w;
                            w = u;
                        }
                        for (;;) {
                            if (w === g) break b;
                            z === h && ++C === f && (A = n);
                            z === k && ++x === l && (p = n);
                            if (null !== (u = w.nextSibling)) break;
                            w = z;
                            z = w.parentNode;
                        }
                        w = u;
                    }
                    h = -1 === A || -1 === p ? null : { start: A, end: p };
                } else h = null;
            h = h || { start: 0, end: 0 };
        } else h = null;
        lf = { focusedElem: g, selectionRange: h };
        fd = !1;
        Ij = null;
        Jj = !1;
        Z = d;
        do
            try {
                ek();
            } catch (va) {
                if (null === Z) throw Error(y(330));
                Wi(Z, va);
                Z = Z.nextEffect;
            }
        while (null !== Z);
        Ij = null;
        Z = d;
        do
            try {
                for (g = a; null !== Z; ) {
                    var t = Z.flags;
                    t & 16 && pb(Z.stateNode, '');
                    if (t & 128) {
                        var q = Z.alternate;
                        if (null !== q) {
                            var v = q.ref;
                            null !== v && ('function' === typeof v ? v(null) : (v.current = null));
                        }
                    }
                    switch (t & 1038) {
                        case 2:
                            fj(Z);
                            Z.flags &= -3;
                            break;
                        case 6:
                            fj(Z);
                            Z.flags &= -3;
                            ij(Z.alternate, Z);
                            break;
                        case 1024:
                            Z.flags &= -1025;
                            break;
                        case 1028:
                            Z.flags &= -1025;
                            ij(Z.alternate, Z);
                            break;
                        case 4:
                            ij(Z.alternate, Z);
                            break;
                        case 8:
                            h = Z;
                            cj(g, h);
                            var J = h.alternate;
                            dj(h);
                            null !== J && dj(J);
                    }
                    Z = Z.nextEffect;
                }
            } catch (va) {
                if (null === Z) throw Error(y(330));
                Wi(Z, va);
                Z = Z.nextEffect;
            }
        while (null !== Z);
        v = lf;
        q = Ne();
        t = v.focusedElem;
        g = v.selectionRange;
        if (q !== t && t && t.ownerDocument && Me(t.ownerDocument.documentElement, t)) {
            null !== g &&
                Oe(t) &&
                ((q = g.start),
                (v = g.end),
                void 0 === v && (v = q),
                'selectionStart' in t
                    ? ((t.selectionStart = q), (t.selectionEnd = Math.min(v, t.value.length)))
                    : ((v = ((q = t.ownerDocument || document) && q.defaultView) || window),
                      v.getSelection &&
                          ((v = v.getSelection()),
                          (h = t.textContent.length),
                          (J = Math.min(g.start, h)),
                          (g = void 0 === g.end ? J : Math.min(g.end, h)),
                          !v.extend && J > g && ((h = g), (g = J), (J = h)),
                          (h = Le(t, J)),
                          (f = Le(t, g)),
                          h &&
                              f &&
                              (1 !== v.rangeCount || v.anchorNode !== h.node || v.anchorOffset !== h.offset || v.focusNode !== f.node || v.focusOffset !== f.offset) &&
                              ((q = q.createRange()), q.setStart(h.node, h.offset), v.removeAllRanges(), J > g ? (v.addRange(q), v.extend(f.node, f.offset)) : (q.setEnd(f.node, f.offset), v.addRange(q))))));
            q = [];
            for (v = t; (v = v.parentNode); ) 1 === v.nodeType && q.push({ element: v, left: v.scrollLeft, top: v.scrollTop });
            'function' === typeof t.focus && t.focus();
            for (t = 0; t < q.length; t++) (v = q[t]), (v.element.scrollLeft = v.left), (v.element.scrollTop = v.top);
        }
        fd = !!kf;
        lf = kf = null;
        a.current = c;
        Z = d;
        do
            try {
                for (t = a; null !== Z; ) {
                    var K = Z.flags;
                    K & 36 && Yi(t, Z.alternate, Z);
                    if (K & 128) {
                        q = void 0;
                        var Q = Z.ref;
                        if (null !== Q) {
                            var L = Z.stateNode;
                            switch (Z.tag) {
                                case 5:
                                    q = L;
                                    break;
                                default:
                                    q = L;
                            }
                            'function' === typeof Q ? Q(q) : (Q.current = q);
                        }
                    }
                    Z = Z.nextEffect;
                }
            } catch (va) {
                if (null === Z) throw Error(y(330));
                Wi(Z, va);
                Z = Z.nextEffect;
            }
        while (null !== Z);
        Z = null;
        $f();
        X = e;
    } else a.current = c;
    if (xj) (xj = !1), (yj = a), (zj = b);
    else for (Z = d; null !== Z; ) (b = Z.nextEffect), (Z.nextEffect = null), Z.flags & 8 && ((K = Z), (K.sibling = null), (K.stateNode = null)), (Z = b);
    d = a.pendingLanes;
    0 === d && (Ti = null);
    1 === d ? (a === Ej ? Dj++ : ((Dj = 0), (Ej = a))) : (Dj = 0);
    c = c.stateNode;
    if (Mf && 'function' === typeof Mf.onCommitFiberRoot)
        try {
            Mf.onCommitFiberRoot(Lf, c, void 0, 64 === (c.current.flags & 64));
        } catch (va) {}
    Mj(a, O());
    if (Qi) throw ((Qi = !1), (a = Ri), (Ri = null), a);
    if (0 !== (X & 8)) return null;
    ig();
    return null;
}
function ek() {
    for (; null !== Z; ) {
        var a = Z.alternate;
        Jj || null === Ij || (0 !== (Z.flags & 8) ? dc(Z, Ij) && (Jj = !0) : 13 === Z.tag && mj(a, Z) && dc(Z, Ij) && (Jj = !0));
        var b = Z.flags;
        0 !== (b & 256) && Xi(a, Z);
        0 === (b & 512) ||
            xj ||
            ((xj = !0),
            hg(97, function () {
                Oj();
                return null;
            }));
        Z = Z.nextEffect;
    }
}
function Oj() {
    if (90 !== zj) {
        var a = 97 < zj ? 97 : zj;
        zj = 90;
        return gg(a, fk);
    }
    return !1;
}
function $i(a, b) {
    Aj.push(b, a);
    xj ||
        ((xj = !0),
        hg(97, function () {
            Oj();
            return null;
        }));
}
function Zi(a, b) {
    Bj.push(b, a);
    xj ||
        ((xj = !0),
        hg(97, function () {
            Oj();
            return null;
        }));
}
function fk() {
    if (null === yj) return !1;
    var a = yj;
    yj = null;
    if (0 !== (X & 48)) throw Error(y(331));
    var b = X;
    X |= 32;
    var c = Bj;
    Bj = [];
    for (var d = 0; d < c.length; d += 2) {
        var e = c[d],
            f = c[d + 1],
            g = e.destroy;
        e.destroy = void 0;
        if ('function' === typeof g)
            try {
                g();
            } catch (k) {
                if (null === f) throw Error(y(330));
                Wi(f, k);
            }
    }
    c = Aj;
    Aj = [];
    for (d = 0; d < c.length; d += 2) {
        e = c[d];
        f = c[d + 1];
        try {
            var h = e.create;
            e.destroy = h();
        } catch (k) {
            if (null === f) throw Error(y(330));
            Wi(f, k);
        }
    }
    for (h = a.current.firstEffect; null !== h; ) (a = h.nextEffect), (h.nextEffect = null), h.flags & 8 && ((h.sibling = null), (h.stateNode = null)), (h = a);
    X = b;
    ig();
    return !0;
}
function gk(a, b, c) {
    b = Mi(c, b);
    b = Pi(a, b, 1);
    Ag(a, b);
    b = Hg();
    a = Kj(a, 1);
    null !== a && ($c(a, 1, b), Mj(a, b));
}
function Wi(a, b) {
    if (3 === a.tag) gk(a, a, b);
    else
        for (var c = a.return; null !== c; ) {
            if (3 === c.tag) {
                gk(c, a, b);
                break;
            } else if (1 === c.tag) {
                var d = c.stateNode;
                if ('function' === typeof c.type.getDerivedStateFromError || ('function' === typeof d.componentDidCatch && (null === Ti || !Ti.has(d)))) {
                    a = Mi(b, a);
                    var e = Si(c, a, 1);
                    Ag(c, e);
                    e = Hg();
                    c = Kj(c, 1);
                    if (null !== c) $c(c, 1, e), Mj(c, e);
                    else if ('function' === typeof d.componentDidCatch && (null === Ti || !Ti.has(d)))
                        try {
                            d.componentDidCatch(b, a);
                        } catch (f) {}
                    break;
                }
            }
            c = c.return;
        }
}
function Yj(a, b, c) {
    var d = a.pingCache;
    null !== d && d.delete(b);
    b = Hg();
    a.pingedLanes |= a.suspendedLanes & c;
    U === a && (W & c) === c && (4 === V || (3 === V && (W & 62914560) === W && 500 > O() - jj) ? Qj(a, 0) : (uj |= c));
    Mj(a, b);
}
function lj(a, b) {
    var c = a.stateNode;
    null !== c && c.delete(b);
    b = 0;
    0 === b && ((b = a.mode), 0 === (b & 2) ? (b = 1) : 0 === (b & 4) ? (b = 99 === eg() ? 1 : 2) : (0 === Gj && (Gj = tj), (b = Yc(62914560 & ~Gj)), 0 === b && (b = 4194304)));
    c = Hg();
    a = Kj(a, b);
    null !== a && ($c(a, b, c), Mj(a, c));
}
var ck;
ck = function (a, b, c) {
    var d = b.lanes;
    if (null !== a)
        if (a.memoizedProps !== b.pendingProps || N.current) ug = !0;
        else if (0 !== (c & d)) ug = 0 !== (a.flags & 16384) ? !0 : !1;
        else {
            ug = !1;
            switch (b.tag) {
                case 3:
                    ri(b);
                    sh();
                    break;
                case 5:
                    gh(b);
                    break;
                case 1:
                    Ff(b.type) && Jf(b);
                    break;
                case 4:
                    eh(b, b.stateNode.containerInfo);
                    break;
                case 10:
                    d = b.memoizedProps.value;
                    var e = b.type._context;
                    I(mg, e._currentValue);
                    e._currentValue = d;
                    break;
                case 13:
                    if (null !== b.memoizedState) {
                        if (0 !== (c & b.child.childLanes)) return ti(a, b, c);
                        I(P, P.current & 1);
                        b = hi(a, b, c);
                        return null !== b ? b.sibling : null;
                    }
                    I(P, P.current & 1);
                    break;
                case 19:
                    d = 0 !== (c & b.childLanes);
                    if (0 !== (a.flags & 64)) {
                        if (d) return Ai(a, b, c);
                        b.flags |= 64;
                    }
                    e = b.memoizedState;
                    null !== e && ((e.rendering = null), (e.tail = null), (e.lastEffect = null));
                    I(P, P.current);
                    if (d) break;
                    else return null;
                case 23:
                case 24:
                    return (b.lanes = 0), mi(a, b, c);
            }
            return hi(a, b, c);
        }
    else ug = !1;
    b.lanes = 0;
    switch (b.tag) {
        case 2:
            d = b.type;
            null !== a && ((a.alternate = null), (b.alternate = null), (b.flags |= 2));
            a = b.pendingProps;
            e = Ef(b, M.current);
            tg(b, c);
            e = Ch(null, b, d, a, e, c);
            b.flags |= 1;
            if ('object' === typeof e && null !== e && 'function' === typeof e.render && void 0 === e.$$typeof) {
                b.tag = 1;
                b.memoizedState = null;
                b.updateQueue = null;
                if (Ff(d)) {
                    var f = !0;
                    Jf(b);
                } else f = !1;
                b.memoizedState = null !== e.state && void 0 !== e.state ? e.state : null;
                xg(b);
                var g = d.getDerivedStateFromProps;
                'function' === typeof g && Gg(b, d, g, a);
                e.updater = Kg;
                b.stateNode = e;
                e._reactInternals = b;
                Og(b, d, a, c);
                b = qi(null, b, d, !0, f, c);
            } else (b.tag = 0), fi(null, b, e, c), (b = b.child);
            return b;
        case 16:
            e = b.elementType;
            a: {
                null !== a && ((a.alternate = null), (b.alternate = null), (b.flags |= 2));
                a = b.pendingProps;
                f = e._init;
                e = f(e._payload);
                b.type = e;
                f = b.tag = hk(e);
                a = lg(e, a);
                switch (f) {
                    case 0:
                        b = li(null, b, e, a, c);
                        break a;
                    case 1:
                        b = pi(null, b, e, a, c);
                        break a;
                    case 11:
                        b = gi(null, b, e, a, c);
                        break a;
                    case 14:
                        b = ii(null, b, e, lg(e.type, a), d, c);
                        break a;
                }
                throw Error(y(306, e, ''));
            }
            return b;
        case 0:
            return (d = b.type), (e = b.pendingProps), (e = b.elementType === d ? e : lg(d, e)), li(a, b, d, e, c);
        case 1:
            return (d = b.type), (e = b.pendingProps), (e = b.elementType === d ? e : lg(d, e)), pi(a, b, d, e, c);
        case 3:
            ri(b);
            d = b.updateQueue;
            if (null === a || null === d) throw Error(y(282));
            d = b.pendingProps;
            e = b.memoizedState;
            e = null !== e ? e.element : null;
            yg(a, b);
            Cg(b, d, null, c);
            d = b.memoizedState.element;
            if (d === e) sh(), (b = hi(a, b, c));
            else {
                e = b.stateNode;
                if ((f = e.hydrate)) (kh = rf(b.stateNode.containerInfo.firstChild)), (jh = b), (f = lh = !0);
                if (f) {
                    a = e.mutableSourceEagerHydrationData;
                    if (null != a) for (e = 0; e < a.length; e += 2) (f = a[e]), (f._workInProgressVersionPrimary = a[e + 1]), th.push(f);
                    c = Zg(b, null, d, c);
                    for (b.child = c; c; ) (c.flags = (c.flags & -3) | 1024), (c = c.sibling);
                } else fi(a, b, d, c), sh();
                b = b.child;
            }
            return b;
        case 5:
            return gh(b), null === a && ph(b), (d = b.type), (e = b.pendingProps), (f = null !== a ? a.memoizedProps : null), (g = e.children), nf(d, e) ? (g = null) : null !== f && nf(d, f) && (b.flags |= 16), oi(a, b), fi(a, b, g, c), b.child;
        case 6:
            return null === a && ph(b), null;
        case 13:
            return ti(a, b, c);
        case 4:
            return eh(b, b.stateNode.containerInfo), (d = b.pendingProps), null === a ? (b.child = Yg(b, null, d, c)) : fi(a, b, d, c), b.child;
        case 11:
            return (d = b.type), (e = b.pendingProps), (e = b.elementType === d ? e : lg(d, e)), gi(a, b, d, e, c);
        case 7:
            return fi(a, b, b.pendingProps, c), b.child;
        case 8:
            return fi(a, b, b.pendingProps.children, c), b.child;
        case 12:
            return fi(a, b, b.pendingProps.children, c), b.child;
        case 10:
            a: {
                d = b.type._context;
                e = b.pendingProps;
                g = b.memoizedProps;
                f = e.value;
                var h = b.type._context;
                I(mg, h._currentValue);
                h._currentValue = f;
                if (null !== g)
                    if (((h = g.value), (f = He(h, f) ? 0 : ('function' === typeof d._calculateChangedBits ? d._calculateChangedBits(h, f) : 1073741823) | 0), 0 === f)) {
                        if (g.children === e.children && !N.current) {
                            b = hi(a, b, c);
                            break a;
                        }
                    } else
                        for (h = b.child, null !== h && (h.return = b); null !== h; ) {
                            var k = h.dependencies;
                            if (null !== k) {
                                g = h.child;
                                for (var l = k.firstContext; null !== l; ) {
                                    if (l.context === d && 0 !== (l.observedBits & f)) {
                                        1 === h.tag && ((l = zg(-1, c & -c)), (l.tag = 2), Ag(h, l));
                                        h.lanes |= c;
                                        l = h.alternate;
                                        null !== l && (l.lanes |= c);
                                        sg(h.return, c);
                                        k.lanes |= c;
                                        break;
                                    }
                                    l = l.next;
                                }
                            } else g = 10 === h.tag ? (h.type === b.type ? null : h.child) : h.child;
                            if (null !== g) g.return = h;
                            else
                                for (g = h; null !== g; ) {
                                    if (g === b) {
                                        g = null;
                                        break;
                                    }
                                    h = g.sibling;
                                    if (null !== h) {
                                        h.return = g.return;
                                        g = h;
                                        break;
                                    }
                                    g = g.return;
                                }
                            h = g;
                        }
                fi(a, b, e.children, c);
                b = b.child;
            }
            return b;
        case 9:
            return (e = b.type), (f = b.pendingProps), (d = f.children), tg(b, c), (e = vg(e, f.unstable_observedBits)), (d = d(e)), (b.flags |= 1), fi(a, b, d, c), b.child;
        case 14:
            return (e = b.type), (f = lg(e, b.pendingProps)), (f = lg(e.type, f)), ii(a, b, e, f, d, c);
        case 15:
            return ki(a, b, b.type, b.pendingProps, d, c);
        case 17:
            return (d = b.type), (e = b.pendingProps), (e = b.elementType === d ? e : lg(d, e)), null !== a && ((a.alternate = null), (b.alternate = null), (b.flags |= 2)), (b.tag = 1), Ff(d) ? ((a = !0), Jf(b)) : (a = !1), tg(b, c), Mg(b, d, e), Og(b, d, e, c), qi(null, b, d, !0, a, c);
        case 19:
            return Ai(a, b, c);
        case 23:
            return mi(a, b, c);
        case 24:
            return mi(a, b, c);
    }
    throw Error(y(156, b.tag));
};
function ik(a, b, c, d) {
    this.tag = a;
    this.key = c;
    this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null;
    this.index = 0;
    this.ref = null;
    this.pendingProps = b;
    this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null;
    this.mode = d;
    this.flags = 0;
    this.lastEffect = this.firstEffect = this.nextEffect = null;
    this.childLanes = this.lanes = 0;
    this.alternate = null;
}
function nh(a, b, c, d) {
    return new ik(a, b, c, d);
}
function ji(a) {
    a = a.prototype;
    return !(!a || !a.isReactComponent);
}
function hk(a) {
    if ('function' === typeof a) return ji(a) ? 1 : 0;
    if (void 0 !== a && null !== a) {
        a = a.$$typeof;
        if (a === Aa) return 11;
        if (a === Da) return 14;
    }
    return 2;
}
function Tg(a, b) {
    var c = a.alternate;
    null === c
        ? ((c = nh(a.tag, b, a.key, a.mode)), (c.elementType = a.elementType), (c.type = a.type), (c.stateNode = a.stateNode), (c.alternate = a), (a.alternate = c))
        : ((c.pendingProps = b), (c.type = a.type), (c.flags = 0), (c.nextEffect = null), (c.firstEffect = null), (c.lastEffect = null));
    c.childLanes = a.childLanes;
    c.lanes = a.lanes;
    c.child = a.child;
    c.memoizedProps = a.memoizedProps;
    c.memoizedState = a.memoizedState;
    c.updateQueue = a.updateQueue;
    b = a.dependencies;
    c.dependencies = null === b ? null : { lanes: b.lanes, firstContext: b.firstContext };
    c.sibling = a.sibling;
    c.index = a.index;
    c.ref = a.ref;
    return c;
}
function Vg(a, b, c, d, e, f) {
    var g = 2;
    d = a;
    if ('function' === typeof a) ji(a) && (g = 1);
    else if ('string' === typeof a) g = 5;
    else
        a: switch (a) {
            case ua:
                return Xg(c.children, e, f, b);
            case Ha:
                g = 8;
                e |= 16;
                break;
            case wa:
                g = 8;
                e |= 1;
                break;
            case xa:
                return (a = nh(12, c, b, e | 8)), (a.elementType = xa), (a.type = xa), (a.lanes = f), a;
            case Ba:
                return (a = nh(13, c, b, e)), (a.type = Ba), (a.elementType = Ba), (a.lanes = f), a;
            case Ca:
                return (a = nh(19, c, b, e)), (a.elementType = Ca), (a.lanes = f), a;
            case Ia:
                return vi(c, e, f, b);
            case Ja:
                return (a = nh(24, c, b, e)), (a.elementType = Ja), (a.lanes = f), a;
            default:
                if ('object' === typeof a && null !== a)
                    switch (a.$$typeof) {
                        case ya:
                            g = 10;
                            break a;
                        case za:
                            g = 9;
                            break a;
                        case Aa:
                            g = 11;
                            break a;
                        case Da:
                            g = 14;
                            break a;
                        case Ea:
                            g = 16;
                            d = null;
                            break a;
                        case Fa:
                            g = 22;
                            break a;
                    }
                throw Error(y(130, null == a ? a : typeof a, ''));
        }
    b = nh(g, c, b, e);
    b.elementType = a;
    b.type = d;
    b.lanes = f;
    return b;
}
function Xg(a, b, c, d) {
    a = nh(7, a, d, b);
    a.lanes = c;
    return a;
}
function vi(a, b, c, d) {
    a = nh(23, a, d, b);
    a.elementType = Ia;
    a.lanes = c;
    return a;
}
function Ug(a, b, c) {
    a = nh(6, a, null, b);
    a.lanes = c;
    return a;
}
function Wg(a, b, c) {
    b = nh(4, null !== a.children ? a.children : [], a.key, b);
    b.lanes = c;
    b.stateNode = { containerInfo: a.containerInfo, pendingChildren: null, implementation: a.implementation };
    return b;
}
function jk(a, b, c) {
    this.tag = b;
    this.containerInfo = a;
    this.finishedWork = this.pingCache = this.current = this.pendingChildren = null;
    this.timeoutHandle = -1;
    this.pendingContext = this.context = null;
    this.hydrate = c;
    this.callbackNode = null;
    this.callbackPriority = 0;
    this.eventTimes = Zc(0);
    this.expirationTimes = Zc(-1);
    this.entangledLanes = this.finishedLanes = this.mutableReadLanes = this.expiredLanes = this.pingedLanes = this.suspendedLanes = this.pendingLanes = 0;
    this.entanglements = Zc(0);
    this.mutableSourceEagerHydrationData = null;
}
function kk(a, b, c) {
    var d = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null;
    return { $$typeof: ta, key: null == d ? null : '' + d, children: a, containerInfo: b, implementation: c };
}
function lk(a, b, c, d) {
    var e = b.current,
        f = Hg(),
        g = Ig(e);
    a: if (c) {
        c = c._reactInternals;
        b: {
            if (Zb(c) !== c || 1 !== c.tag) throw Error(y(170));
            var h = c;
            do {
                switch (h.tag) {
                    case 3:
                        h = h.stateNode.context;
                        break b;
                    case 1:
                        if (Ff(h.type)) {
                            h = h.stateNode.__reactInternalMemoizedMergedChildContext;
                            break b;
                        }
                }
                h = h.return;
            } while (null !== h);
            throw Error(y(171));
        }
        if (1 === c.tag) {
            var k = c.type;
            if (Ff(k)) {
                c = If(c, k, h);
                break a;
            }
        }
        c = h;
    } else c = Cf;
    null === b.context ? (b.context = c) : (b.pendingContext = c);
    b = zg(f, g);
    b.payload = { element: a };
    d = void 0 === d ? null : d;
    null !== d && (b.callback = d);
    Ag(e, b);
    Jg(e, g, f);
    return g;
}
function mk(a) {
    a = a.current;
    if (!a.child) return null;
    switch (a.child.tag) {
        case 5:
            return a.child.stateNode;
        default:
            return a.child.stateNode;
    }
}
function nk(a, b) {
    a = a.memoizedState;
    if (null !== a && null !== a.dehydrated) {
        var c = a.retryLane;
        a.retryLane = 0 !== c && c < b ? c : b;
    }
}
function ok(a, b) {
    nk(a, b);
    (a = a.alternate) && nk(a, b);
}
function pk() {
    return null;
}
function qk(a, b, c) {
    var d = (null != c && null != c.hydrationOptions && c.hydrationOptions.mutableSources) || null;
    c = new jk(a, b, null != c && !0 === c.hydrate);
    b = nh(3, null, null, 2 === b ? 7 : 1 === b ? 3 : 0);
    c.current = b;
    b.stateNode = c;
    xg(b);
    a[ff] = c.current;
    cf(8 === a.nodeType ? a.parentNode : a);
    if (d)
        for (a = 0; a < d.length; a++) {
            b = d[a];
            var e = b._getVersion;
            e = e(b._source);
            null == c.mutableSourceEagerHydrationData ? (c.mutableSourceEagerHydrationData = [b, e]) : c.mutableSourceEagerHydrationData.push(b, e);
        }
    this._internalRoot = c;
}
qk.prototype.render = function (a) {
    lk(a, this._internalRoot, null, null);
};
qk.prototype.unmount = function () {
    var a = this._internalRoot,
        b = a.containerInfo;
    lk(null, a, null, function () {
        b[ff] = null;
    });
};
function rk(a) {
    return !(!a || (1 !== a.nodeType && 9 !== a.nodeType && 11 !== a.nodeType && (8 !== a.nodeType || ' react-mount-point-unstable ' !== a.nodeValue)));
}
function sk(a, b) {
    b || ((b = a ? (9 === a.nodeType ? a.documentElement : a.firstChild) : null), (b = !(!b || 1 !== b.nodeType || !b.hasAttribute('data-reactroot'))));
    if (!b) for (var c; (c = a.lastChild); ) a.removeChild(c);
    return new qk(a, 0, b ? { hydrate: !0 } : void 0);
}
function tk(a, b, c, d, e) {
    var f = c._reactRootContainer;
    if (f) {
        var g = f._internalRoot;
        if ('function' === typeof e) {
            var h = e;
            e = function () {
                var a = mk(g);
                h.call(a);
            };
        }
        lk(b, g, a, e);
    } else {
        f = c._reactRootContainer = sk(c, d);
        g = f._internalRoot;
        if ('function' === typeof e) {
            var k = e;
            e = function () {
                var a = mk(g);
                k.call(a);
            };
        }
        Xj(function () {
            lk(b, g, a, e);
        });
    }
    return mk(g);
}
ec = function (a) {
    if (13 === a.tag) {
        var b = Hg();
        Jg(a, 4, b);
        ok(a, 4);
    }
};
fc = function (a) {
    if (13 === a.tag) {
        var b = Hg();
        Jg(a, 67108864, b);
        ok(a, 67108864);
    }
};
gc = function (a) {
    if (13 === a.tag) {
        var b = Hg(),
            c = Ig(a);
        Jg(a, c, b);
        ok(a, c);
    }
};
hc = function (a, b) {
    return b();
};
yb = function (a, b, c) {
    switch (b) {
        case 'input':
            ab(a, c);
            b = c.name;
            if ('radio' === c.type && null != b) {
                for (c = a; c.parentNode; ) c = c.parentNode;
                c = c.querySelectorAll('input[name=' + JSON.stringify('' + b) + '][type="radio"]');
                for (b = 0; b < c.length; b++) {
                    var d = c[b];
                    if (d !== a && d.form === a.form) {
                        var e = Db(d);
                        if (!e) throw Error(y(90));
                        Wa(d);
                        ab(d, e);
                    }
                }
            }
            break;
        case 'textarea':
            ib(a, c);
            break;
        case 'select':
            (b = c.value), null != b && fb(a, !!c.multiple, b, !1);
    }
};
Gb = Wj;
Hb = function (a, b, c, d, e) {
    var f = X;
    X |= 4;
    try {
        return gg(98, a.bind(null, b, c, d, e));
    } finally {
        (X = f), 0 === X && (wj(), ig());
    }
};
Ib = function () {
    0 === (X & 49) && (Vj(), Oj());
};
Jb = function (a, b) {
    var c = X;
    X |= 2;
    try {
        return a(b);
    } finally {
        (X = c), 0 === X && (wj(), ig());
    }
};
function uk(a, b) {
    var c = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null;
    if (!rk(b)) throw Error(y(200));
    return kk(a, b, null, c);
}
var vk = { Events: [Cb, ue, Db, Eb, Fb, Oj, { current: !1 }] },
    wk = { findFiberByHostInstance: wc, bundleType: 0, version: '17.0.2', rendererPackageName: 'react-dom' };
var xk = {
    bundleType: wk.bundleType,
    version: wk.version,
    rendererPackageName: wk.rendererPackageName,
    rendererConfig: wk.rendererConfig,
    overrideHookState: null,
    overrideHookStateDeletePath: null,
    overrideHookStateRenamePath: null,
    overrideProps: null,
    overridePropsDeletePath: null,
    overridePropsRenamePath: null,
    setSuspenseHandler: null,
    scheduleUpdate: null,
    currentDispatcherRef: ra.ReactCurrentDispatcher,
    findHostInstanceByFiber: function (a) {
        a = cc(a);
        return null === a ? null : a.stateNode;
    },
    findFiberByHostInstance: wk.findFiberByHostInstance || pk,
    findHostInstancesForRefresh: null,
    scheduleRefresh: null,
    scheduleRoot: null,
    setRefreshHandler: null,
    getCurrentFiber: null,
};
if ('undefined' !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) {
    var yk = __REACT_DEVTOOLS_GLOBAL_HOOK__;
    if (!yk.isDisabled && yk.supportsFiber)
        try {
            (Lf = yk.inject(xk)), (Mf = yk);
        } catch (a) {}
}
reactDom_production_min.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = vk;
reactDom_production_min.createPortal = uk;
reactDom_production_min.findDOMNode = function (a) {
    if (null == a) return null;
    if (1 === a.nodeType) return a;
    var b = a._reactInternals;
    if (void 0 === b) {
        if ('function' === typeof a.render) throw Error(y(188));
        throw Error(y(268, Object.keys(a)));
    }
    a = cc(b);
    a = null === a ? null : a.stateNode;
    return a;
};
reactDom_production_min.flushSync = function (a, b) {
    var c = X;
    if (0 !== (c & 48)) return a(b);
    X |= 1;
    try {
        if (a) return gg(99, a.bind(null, b));
    } finally {
        (X = c), ig();
    }
};
reactDom_production_min.hydrate = function (a, b, c) {
    if (!rk(b)) throw Error(y(200));
    return tk(null, a, b, !0, c);
};
reactDom_production_min.render = function (a, b, c) {
    if (!rk(b)) throw Error(y(200));
    return tk(null, a, b, !1, c);
};
reactDom_production_min.unmountComponentAtNode = function (a) {
    if (!rk(a)) throw Error(y(40));
    return a._reactRootContainer
        ? (Xj(function () {
              tk(null, null, a, !1, function () {
                  a._reactRootContainer = null;
                  a[ff] = null;
              });
          }),
          !0)
        : !1;
};
reactDom_production_min.unstable_batchedUpdates = Wj;
reactDom_production_min.unstable_createPortal = function (a, b) {
    return uk(a, b, 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null);
};
reactDom_production_min.unstable_renderSubtreeIntoContainer = function (a, b, c, d) {
    if (!rk(c)) throw Error(y(200));
    if (null == a || void 0 === a._reactInternals) throw Error(y(38));
    return tk(a, b, c, !1, d);
};
reactDom_production_min.version = '17.0.2';

function checkDCE() {
    /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function') {
        return;
    }
    try {
        // Verify that the code above has been dead code eliminated (DCE'd).
        __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
    } catch (err) {
        // DevTools shouldn't crash React, no matter what.
        // We should still report in case we break this code.
        console.error(err);
    }
}

{
    // DCE check should happen before ReactDOM bundle executes so that
    // DevTools can report bad minification during injection.
    checkDCE();
    reactDom.exports = reactDom_production_min;
}

var ReactDOM = reactDom.exports;

var appBridgeReact = {};

var components = {};

var ContextualSaveBar$4 = {};

var ContextualSaveBar$3 = {};

var actions$2 = {};

var AuthCode$1 = {};

var helper = {};

var constants = {};

Object.defineProperty(constants, '__esModule', { value: true });
constants.SEPARATOR = constants.PREFIX = void 0;
constants.PREFIX = 'APP';
constants.SEPARATOR = '::';

var merge$1 = {};

Object.defineProperty(merge$1, '__esModule', { value: true });
/**
 * Returns a deeply merged object with properties from the 2 provided objects
 * @remarks - Only deeply merge objects. The second argument overrides the
 * first if it is provided as `null`, `undefined` or an array.
 * @public
 * */
function mergeProps(obj, newObj) {
    if (newObj == null) {
        return newObj;
    }
    // If setting to a different prototype or a non-object or non-array, don't merge any props
    if (typeof obj === 'undefined' || !Object.prototype.isPrototypeOf.call(Object.getPrototypeOf(obj), newObj) || (newObj.constructor.name !== 'Object' && newObj.constructor.name !== 'Array')) {
        return newObj;
    }
    var clone = {};
    Object.keys(newObj).forEach(function (key) {
        var exists = Object.prototype.hasOwnProperty.call(obj, key);
        if (!exists) {
            clone[key] = newObj[key];
        } else if (typeof obj[key] === 'object' && !Array.isArray(obj[key])) {
            clone[key] = mergeProps(obj[key], newObj[key]);
        } else {
            clone[key] = newObj[key];
        }
    });
    // Copy old props that are not present in new object only if this is a simple object
    Object.keys(obj).forEach(function (key) {
        var exists = Object.prototype.hasOwnProperty.call(newObj, key);
        if (!exists) {
            clone[key] = obj[key];
        }
    });
    // Set prototype of cloned object to match original
    Object.setPrototypeOf(clone, Object.getPrototypeOf(obj));
    return clone;
}
merge$1.default = mergeProps;

var types$4 = {};

(function (exports) {
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ComponentType = exports.Group = void 0;
    (function (Group) {
        Group['AuthCode'] = 'AuthCode';
        Group['Button'] = 'Button';
        Group['ButtonGroup'] = 'ButtonGroup';
        Group['Cart'] = 'Cart';
        Group['Client'] = 'Client';
        Group['ContextualSaveBar'] = 'ContextualSaveBar';
        Group['Error'] = 'Error';
        Group['Features'] = 'Features';
        Group['FeedbackModal'] = 'FeedbackModal';
        Group['Fullscreen'] = 'Fullscreen';
        Group['LeaveConfirmation'] = 'LeaveConfirmation';
        Group['Link'] = 'Link';
        Group['Loading'] = 'Loading';
        Group['Menu'] = 'Menu';
        Group['Modal'] = 'Modal';
        Group['Navigation'] = 'Navigation';
        Group['Performance'] = 'Performance';
        Group['Pos'] = 'Pos';
        Group['Print'] = 'Print';
        Group['ResourcePicker'] = 'Resource_Picker';
        Group['Scanner'] = 'Scanner';
        Group['SessionToken'] = 'SessionToken';
        Group['Share'] = 'Share';
        Group['TitleBar'] = 'TitleBar';
        Group['Toast'] = 'Toast';
        Group['MarketingExternalActivityTopBar'] = 'MarketingExternalActivityTopBar';
    })(exports.Group || (exports.Group = {}));
    (function (ComponentType) {
        ComponentType['Button'] = 'Button';
        ComponentType['ButtonGroup'] = 'ButtonGroup';
    })(exports.ComponentType || (exports.ComponentType = {}));
})(types$4);

const name$1 = '@shopify/app-bridge';
const version$1 = '2.0.24';
const types$3 = 'index.d.ts';
const main$2 = 'index.js';
const unpkg$1 = 'umd/index.js';
const jsdelivr$1 = 'umd/index.js';
const files$1 = ['/actions/', '/client/', '/umd/', '/util/', '/validate/', '/development.d.ts', '/development.js', '/index.d.ts', '/index.js', '/MessageTransport.d.ts', '/MessageTransport.js', '/production.d.ts', '/production.js'];
const publishConfig$1 = {
    access: 'public',
    '@shopify:registry': 'https://registry.npmjs.org',
};
const repository$1 = 'git@github.com:Shopify/app-bridge.git';
const homepage$1 = 'https://shopify.dev/tools/app-bridge';
const author$1 = 'Shopify Inc.';
const license$1 = 'MIT';
const scripts$1 = {
    build: 'yarn build:tsc && yarn build:npm && yarn build:umd',
    'build:tsc': 'NODE_ENV=production tsc',
    'build:umd': 'NODE_ENV=production webpack -p',
    'build:npm': 'shx cp -r ./npm/index.js ./index.js',
    check: 'tsc',
    clean: "cat package.json | node -pe \"JSON.parse(require('fs').readFileSync('/dev/stdin').toString()).files.map(f => './'+f).join(' ')\" | xargs rm -rf",
    pack: 'yarn pack',
    size: 'size-limit',
};
const sideEffects$1 = false;
const dependencies$1 = {
    base64url: '^3.0.1',
};
const devDependencies$1 = {
    '@types/node': '^10.12.5',
    shx: '^0.3.3',
};
const gitHead$1 = '0c3aa24d39c86120c8823bd43f439cda0ab7df5e';
var require$$3$1 = {
    name: name$1,
    version: version$1,
    types: types$3,
    main: main$2,
    unpkg: unpkg$1,
    jsdelivr: jsdelivr$1,
    files: files$1,
    private: false,
    publishConfig: publishConfig$1,
    repository: repository$1,
    homepage: homepage$1,
    author: author$1,
    license: license$1,
    scripts: scripts$1,
    sideEffects: sideEffects$1,
    'size-limit': [
        {
            limit: '17 KB',
            path: 'production.js',
        },
    ],
    dependencies: dependencies$1,
    devDependencies: devDependencies$1,
    gitHead: gitHead$1,
};

(function (exports) {
    var __assign =
        (commonjsGlobal && commonjsGlobal.__assign) ||
        function () {
            __assign =
                Object.assign ||
                function (t) {
                    for (var s, i = 1, n = arguments.length; i < n; i++) {
                        s = arguments[i];
                        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
                    }
                    return t;
                };
            return __assign.apply(this, arguments);
        };
    var __importDefault =
        (commonjsGlobal && commonjsGlobal.__importDefault) ||
        function (mod) {
            return mod && mod.__esModule ? mod : { default: mod };
        };
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.NonSnakeCaseGroup = exports.findMatchInEnum = exports.forEachInEnum = exports.getMergedProps = exports.updateActionFromPayload = exports.isValidOptionalString = exports.isValidOptionalNumber = exports.getEventNameSpace = exports.getVersion = exports.actionWrapper = void 0;
    var constants_1 = constants;
    var merge_1 = __importDefault(merge$1);
    var types_1 = types$4;
    // eslint-disable-next-line @typescript-eslint/no-var-requires
    var packageJson = require$$3$1;
    function actionWrapper(action) {
        return __assign(__assign({}, action), {
            version: getVersion(),
            clientInterface: {
                name: packageJson.name,
                version: getVersion(),
            },
        });
    }
    exports.actionWrapper = actionWrapper;
    function getVersion() {
        return packageJson.version;
    }
    exports.getVersion = getVersion;
    /**
     * Returns full event name with prefix, group, subgroups and type formatted with separators
     * @internal
     * */
    function getEventNameSpace(group, eventName, component) {
        if (eventName.startsWith('' + constants_1.PREFIX + constants_1.SEPARATOR)) {
            return eventName;
        }
        var eventNameSpace = groupToEventNameSpace(group);
        if (component) {
            var subgroups_1 = component.subgroups,
                type = component.type;
            if (subgroups_1 && subgroups_1.length > 0) {
                eventNameSpace += eventNameSpace.length > 0 ? constants_1.SEPARATOR : '';
                subgroups_1.forEach(function (subgroup, index) {
                    eventNameSpace += '' + subgroup.toUpperCase() + (index < subgroups_1.length - 1 ? constants_1.SEPARATOR : '');
                });
            }
            if (type !== group && type) {
                eventNameSpace += '' + (eventNameSpace.length > 0 ? constants_1.SEPARATOR : '') + type.toUpperCase();
            }
        }
        if (eventNameSpace) {
            eventNameSpace += '' + (eventNameSpace.length > 0 ? constants_1.SEPARATOR : '') + eventName.toUpperCase();
        }
        return '' + constants_1.PREFIX + constants_1.SEPARATOR + eventNameSpace;
    }
    exports.getEventNameSpace = getEventNameSpace;
    function isValidOptionalNumber(value) {
        return value === null || value === undefined || typeof value === 'number';
    }
    exports.isValidOptionalNumber = isValidOptionalNumber;
    function isValidOptionalString(value) {
        return value === null || value === undefined || typeof value === 'string';
    }
    exports.isValidOptionalString = isValidOptionalString;
    function updateActionFromPayload(action, newProps) {
        var id = action.id;
        if (id === newProps.id) {
            // Merge new properties
            Object.assign(action, getMergedProps(action, newProps));
            return true;
        }
        return false;
    }
    exports.updateActionFromPayload = updateActionFromPayload;
    function getMergedProps(props, newProps) {
        var merged = merge_1.default(props, newProps);
        if (!merged) {
            // tslint:disable-next-line:prefer-object-spread
            var cloned = Object.assign(props, newProps);
            return cloned;
        }
        return merged;
    }
    exports.getMergedProps = getMergedProps;
    function forEachInEnum(types, callback) {
        Object.keys(types).forEach(function (key) {
            callback(types[key]);
        });
    }
    exports.forEachInEnum = forEachInEnum;
    function findMatchInEnum(types, lookup) {
        var match = Object.keys(types).find(function (key) {
            return lookup === types[key];
        });
        return match ? types[match] : undefined;
    }
    exports.findMatchInEnum = findMatchInEnum;
    function camelCaseToSnakeCase(value) {
        return value.replace(/([A-Z])/g, function (matcher, _val, index) {
            return '' + (index === 0 ? '' : '_') + matcher[0].toLowerCase();
        });
    }
    exports.NonSnakeCaseGroup = [
        types_1.Group.AuthCode,
        types_1.Group.Button,
        types_1.Group.ButtonGroup,
        types_1.Group.Cart,
        types_1.Group.Error,
        types_1.Group.Features,
        types_1.Group.Fullscreen,
        types_1.Group.Link,
        types_1.Group.Loading,
        types_1.Group.Menu,
        types_1.Group.Modal,
        types_1.Group.Navigation,
        types_1.Group.Pos,
        types_1.Group.Print,
        types_1.Group.ResourcePicker,
        types_1.Group.Scanner,
        types_1.Group.SessionToken,
        types_1.Group.Share,
        types_1.Group.TitleBar,
        types_1.Group.Toast,
    ];
    /**
     * Maps the group name to its event name
     * @internal
     * @remarks - This method is necessary for the new pattern of using snake case
     * which makes it more readable and easier to reconstruct the group from an event name.
     * Example: `ContextualSaveBar` becomes `CONTEXTUAL_SAVE_BAR`
     * */
    function groupToEventNameSpace(group) {
        if (exports.NonSnakeCaseGroup.includes(group)) {
            return group.toUpperCase();
        }
        return camelCaseToSnakeCase(group).toUpperCase();
    }
})(helper);

(function (exports) {
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.respond = exports.request = exports.Action = void 0;
    var helper_1 = helper;
    var types_1 = types$4;
    var Action;
    (function (Action) {
        Action['REQUEST'] = 'APP::AUTH_CODE::REQUEST';
        Action['RESPOND'] = 'APP::AUTH_CODE::RESPOND';
    })((Action = exports.Action || (exports.Action = {})));
    function request(id) {
        return helper_1.actionWrapper({
            group: types_1.Group.AuthCode,
            type: Action.REQUEST,
            payload: { id: id },
        });
    }
    exports.request = request;
    function respond(payload) {
        return helper_1.actionWrapper({
            payload: payload,
            group: types_1.Group.AuthCode,
            type: Action.RESPOND,
        });
    }
    exports.respond = respond;
})(AuthCode$1);

var Button$1 = {};

var ActionSet$1 = {};

var types$2 = {};

(function (exports) {
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.LifecycleHook = exports.MessageType = exports.PermissionType = exports.isV1Config = void 0;
    /**
     * @internal
     * @param config
     */
    function isV1Config(config) {
        return config.shopOrigin !== undefined;
    }
    exports.isV1Config = isV1Config;
    (function (PermissionType) {
        PermissionType['Dispatch'] = 'Dispatch';
        PermissionType['Subscribe'] = 'Subscribe';
    })(exports.PermissionType || (exports.PermissionType = {}));
    (function (MessageType) {
        MessageType['GetState'] = 'getState';
        MessageType['Dispatch'] = 'dispatch';
        MessageType['Subscribe'] = 'subscribe';
        MessageType['Unsubscribe'] = 'unsubscribe';
    })(exports.MessageType || (exports.MessageType = {}));
    (function (LifecycleHook) {
        LifecycleHook['UpdateAction'] = 'UpdateAction';
        LifecycleHook['DispatchAction'] = 'DispatchAction';
    })(exports.LifecycleHook || (exports.LifecycleHook = {}));
})(types$2);

var collection = {};

Object.defineProperty(collection, '__esModule', { value: true });
collection.removeFromCollection = collection.addAndRemoveFromCollection = void 0;
/**
 * Add an item to a collection, return a function that can then be used to
 * remove the item from the collection. Optionally accepting a callback that is
 * invoked when the item is removed from the collection.
 *
 * @internal
 */
function addAndRemoveFromCollection(collection, item, then) {
    collection.push(item);
    return function () {
        return removeFromCollection(collection, item, then);
    };
}
collection.addAndRemoveFromCollection = addAndRemoveFromCollection;
/**
 * Remove the item from the collection. Optionally accepting a callback that is
 * invoked when the item is removed from the collection.
 *
 * @internal
 */
function removeFromCollection(collection, item, then) {
    var idx = collection.findIndex(function (i) {
        return i === item;
    });
    if (idx >= 0) {
        collection.splice(idx, 1);
        if (then) {
            then(item);
        }
        return true;
    }
    return false;
}
collection.removeFromCollection = removeFromCollection;

var _Error = {};

(function (exports) {
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.throwError =
        exports.fromAction =
        exports.AppBridgeError =
        exports.invalidOriginAction =
        exports.isErrorEventName =
        exports.permissionAction =
        exports.networkAction =
        exports.persistenceAction =
        exports.unsupportedOperationAction =
        exports.unexpectedAction =
        exports.invalidAction =
        exports.invalidActionType =
        exports.invalidPayload =
        exports.Message =
        exports.AppActionType =
        exports.Action =
            void 0;
    var helper_1 = helper;
    var types_1 = types$4;
    // Errors triggered in response to an action
    var Action;
    (function (Action) {
        Action['INVALID_ACTION'] = 'APP::ERROR::INVALID_ACTION';
        Action['INVALID_ACTION_TYPE'] = 'APP::ERROR::INVALID_ACTION_TYPE';
        Action['INVALID_PAYLOAD'] = 'APP::ERROR::INVALID_PAYLOAD';
        Action['INVALID_OPTIONS'] = 'APP::ERROR::INVALID_OPTIONS';
        Action['UNEXPECTED_ACTION'] = 'APP::ERROR::UNEXPECTED_ACTION';
        Action['PERSISTENCE'] = 'APP::ERROR::PERSISTENCE';
        Action['UNSUPPORTED_OPERATION'] = 'APP::ERROR::UNSUPPORTED_OPERATION';
        Action['NETWORK'] = 'APP::ERROR::NETWORK';
        Action['PERMISSION'] = 'APP::ERROR::PERMISSION';
        Action['FAILED_AUTHENTICATION'] = 'APP::ERROR::FAILED_AUTHENTICATION';
        Action['INVALID_ORIGIN'] = 'APP::ERROR::INVALID_ORIGIN';
    })((Action = exports.Action || (exports.Action = {})));
    (function (AppActionType) {
        AppActionType['INVALID_CONFIG'] = 'APP::ERROR::INVALID_CONFIG';
        AppActionType['MISSING_CONFIG'] = 'APP::APP_ERROR::MISSING_CONFIG';
        AppActionType['MISSING_APP_BRIDGE_MIDDLEWARE'] = 'APP::APP_ERROR::MISSING_APP_BRIDGE_MIDDLEWARE';
        AppActionType['WINDOW_UNDEFINED'] = 'APP::APP_ERROR::WINDOW_UNDEFINED';
        AppActionType['REDUX_REINSTANTIATED'] = 'APP::APP_ERROR::REDUX_REINSTANTIATED';
        AppActionType['MISSING_LOCAL_ORIGIN'] = 'APP::APP_ERROR::MISSING_LOCAL_ORIGIN';
        AppActionType['MISSING_HOST_PROVIDER'] = 'APP::APP_ERROR::MISSING_HOST_PROVIDER';
        AppActionType['MISSING_ROUTER_CONTEXT'] = 'APP::APP_ERROR::MISSING_ROUTER_CONTEXT';
        AppActionType['MISSING_HISTORY_BLOCK'] = 'APP::APP_ERROR::MISSING_HISTORY_BLOCK';
    })(exports.AppActionType || (exports.AppActionType = {}));
    function errorActionWrapperWithId(type, action, message) {
        var castPayload = action.payload;
        return helper_1.actionWrapper({
            type: type,
            group: types_1.Group.Error,
            payload: {
                action: action,
                message: message,
                type: type,
                id: castPayload && castPayload.id ? castPayload.id : undefined,
            },
        });
    }
    (function (Message) {
        Message['MISSING_PAYLOAD'] = 'Missing payload';
        Message['INVALID_PAYLOAD_ID'] = 'Id in payload is missing or invalid';
    })(exports.Message || (exports.Message = {}));
    function invalidPayload(action, message) {
        return errorActionWrapperWithId(Action.INVALID_PAYLOAD, action, message || "The action's payload is missing required properties or has invalid properties");
    }
    exports.invalidPayload = invalidPayload;
    function invalidActionType(action, message) {
        return helper_1.actionWrapper({
            group: types_1.Group.Error,
            payload: {
                action: action,
                message: message || 'The action type is invalid or unsupported',
                type: Action.INVALID_ACTION_TYPE,
            },
            type: Action.INVALID_ACTION_TYPE,
        });
    }
    exports.invalidActionType = invalidActionType;
    function invalidAction(action, message) {
        return helper_1.actionWrapper({
            group: types_1.Group.Error,
            payload: {
                action: action,
                message: message || "The action's has missing/invalid values for `group`, `type` or `version`",
                type: Action.INVALID_ACTION,
            },
            type: Action.INVALID_ACTION,
        });
    }
    exports.invalidAction = invalidAction;
    function unexpectedAction(action, message) {
        return helper_1.actionWrapper({
            group: types_1.Group.Error,
            payload: {
                action: action,
                message: message || 'Action cannot be called at this time',
                type: Action.UNEXPECTED_ACTION,
            },
            type: Action.UNEXPECTED_ACTION,
        });
    }
    exports.unexpectedAction = unexpectedAction;
    function unsupportedOperationAction(action, message) {
        return errorActionWrapperWithId(Action.UNSUPPORTED_OPERATION, action, message || 'The action type is unsupported');
    }
    exports.unsupportedOperationAction = unsupportedOperationAction;
    function persistenceAction(action, message) {
        return errorActionWrapperWithId(Action.PERSISTENCE, action, message || 'Action cannot be persisted on server');
    }
    exports.persistenceAction = persistenceAction;
    function networkAction(action, message) {
        return errorActionWrapperWithId(Action.NETWORK, action, message || 'Network error');
    }
    exports.networkAction = networkAction;
    function permissionAction(action, message) {
        return errorActionWrapperWithId(Action.PERMISSION, action, message || 'Action is not permitted');
    }
    exports.permissionAction = permissionAction;
    function isErrorEventName(eventName) {
        var match = helper_1.findMatchInEnum(Action, eventName);
        return typeof match === 'string';
    }
    exports.isErrorEventName = isErrorEventName;
    function invalidOriginAction(message) {
        return helper_1.actionWrapper({
            group: types_1.Group.Error,
            payload: {
                message: message,
                type: Action.INVALID_ORIGIN,
            },
            type: Action.INVALID_ORIGIN,
        });
    }
    exports.invalidOriginAction = invalidOriginAction;
    var AppBridgeError = /** @class */ (function () {
        function AppBridgeError(message) {
            this.name = 'AppBridgeError';
            this.message = message;
            if (typeof Error.captureStackTrace === 'function') {
                Error.captureStackTrace(this, this.constructor);
            } else {
                this.stack = new Error(this.message).stack;
            }
        }
        return AppBridgeError;
    })();
    exports.AppBridgeError = AppBridgeError;
    AppBridgeError.prototype = Object.create(Error.prototype);
    function fromAction(message, type, action) {
        var errorMessage = message ? type + ': ' + message : type;
        var error = new AppBridgeError(errorMessage);
        error.action = action;
        error.type = type;
        return error;
    }
    exports.fromAction = fromAction;
    function throwError() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var type = args[0];
        var message;
        var action;
        if (typeof args[1] === 'string') {
            message = args[1];
        } else {
            action = args[1];
            message = args[2] || '';
        }
        throw fromAction(message, type, action);
    }
    exports.throwError = throwError;
})(_Error);

var uuid = {};

Object.defineProperty(uuid, '__esModule', { value: true });
uuid.generateUuid = void 0;
/**
 * Convert a number or array of integers to a string of padded hex octets.
 */
function asHex(value) {
    return Array.from(value)
        .map(function (i) {
            return ('00' + i.toString(16)).slice(-2);
        })
        .join('');
}
/**
 * Attempt to securely generate random bytes/
 */
function getRandomBytes(size) {
    // SPRNG
    if (typeof Uint8Array === 'function' && typeof window === 'object' && window.crypto) {
        var buffer = new Uint8Array(size);
        var randomValues = window.crypto.getRandomValues(buffer);
        if (randomValues) {
            return randomValues;
        }
    }
    // Insecure random
    return Array.from(new Array(size), function () {
        return (Math.random() * 255) | 0;
    });
}
/**
 * Generate a RFC4122-compliant v4 UUID.
 *
 * @see http://www.ietf.org/rfc/rfc4122.txt
 */
function generateUuid() {
    var version = 64;
    var clockSeqHiAndReserved = getRandomBytes(1);
    var timeHiAndVersion = getRandomBytes(2);
    clockSeqHiAndReserved[0] &= 63 | 128;
    // tslint:disable-next-line:binary-expression-operand-order
    timeHiAndVersion[0] &= 15 | version;
    return [
        // time-low
        asHex(getRandomBytes(4)),
        '-',
        // time-mid
        asHex(getRandomBytes(2)),
        '-',
        // time-high-and-version
        asHex(timeHiAndVersion),
        '-',
        // clock-seq-and-reserved
        asHex(clockSeqHiAndReserved),
        // clock-seq-loq
        asHex(getRandomBytes(1)),
        '-',
        // node
        asHex(getRandomBytes(6)),
    ].join('');
}
uuid.generateUuid = generateUuid;
// Default
uuid.default = generateUuid;

var __extends$8 =
    (commonjsGlobal && commonjsGlobal.__extends) ||
    (function () {
        var extendStatics = function (d, b) {
            extendStatics =
                Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array &&
                    function (d, b) {
                        d.__proto__ = b;
                    }) ||
                function (d, b) {
                    for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
                };
            return extendStatics(d, b);
        };
        return function (d, b) {
            if (typeof b !== 'function' && b !== null) throw new TypeError('Class extends value ' + String(b) + ' is not a constructor or null');
            extendStatics(d, b);
            function __() {
                this.constructor = d;
            }
            d.prototype = b === null ? Object.create(b) : ((__.prototype = b.prototype), new __());
        };
    })();
var __assign$5 =
    (commonjsGlobal && commonjsGlobal.__assign) ||
    function () {
        __assign$5 =
            Object.assign ||
            function (t) {
                for (var s, i = 1, n = arguments.length; i < n; i++) {
                    s = arguments[i];
                    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
                }
                return t;
            };
        return __assign$5.apply(this, arguments);
    };
var __spreadArray$1 =
    (commonjsGlobal && commonjsGlobal.__spreadArray) ||
    function (to, from) {
        for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) to[j] = from[i];
        return to;
    };
var __importDefault$g =
    (commonjsGlobal && commonjsGlobal.__importDefault) ||
    function (mod) {
        return mod && mod.__esModule ? mod : { default: mod };
    };
Object.defineProperty(ActionSet$1, '__esModule', { value: true });
ActionSet$1.ActionSetWithChildren = ActionSet$1.ActionSet = void 0;
var types_1$2 = types$2;
var collection_1$1 = collection;
var Error_1$3 = _Error;
var types_2$1 = types$4;
var uuid_1$1 = __importDefault$g(uuid);
var helper_1$2 = helper;
var ActionSet = /** @class */ (function () {
    function ActionSet(app, type, group, id) {
        var _this = this;
        this.app = app;
        this.type = type;
        this.group = group;
        this.subgroups = [];
        this.subscriptions = [];
        if (!app) {
            Error_1$3.throwError(Error_1$3.Action.INVALID_ACTION, 'Missing required `app`');
        }
        this.id = id || uuid_1$1.default();
        this.defaultGroup = group;
        var defaultSet = this.set;
        this.set = function () {
            var _a;
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            if (!_this.app.hooks) {
                return defaultSet.apply(_this, args);
            }
            return (_a = _this.app.hooks).run.apply(_a, __spreadArray$1([types_1$2.LifecycleHook.UpdateAction, defaultSet, _this], args));
        };
    }
    ActionSet.prototype.set = function () {
        var _ = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            _[_i] = arguments[_i];
        }
    };
    Object.defineProperty(ActionSet.prototype, 'component', {
        get: function () {
            return {
                id: this.id,
                subgroups: this.subgroups,
                type: this.type,
            };
        },
        enumerable: false,
        configurable: true,
    });
    ActionSet.prototype.updateSubscription = function (subscriptionToRemove, group, subgroups) {
        var eventType = subscriptionToRemove.eventType,
            callback = subscriptionToRemove.callback,
            component = subscriptionToRemove.component;
        var currentIndex;
        currentIndex = this.subscriptions.findIndex(function (subscription) {
            return subscription === subscriptionToRemove;
        });
        if (currentIndex >= 0) {
            this.subscriptions[currentIndex].unsubscribe();
        } else {
            currentIndex = undefined;
        }
        this.group = group;
        this.subgroups = subgroups;
        Object.assign(component, { subgroups: this.subgroups });
        return this.subscribe(eventType, callback, component, currentIndex);
    };
    ActionSet.prototype.error = function (callback) {
        var _this = this;
        var subscriptionIndices = [];
        helper_1$2.forEachInEnum(Error_1$3.Action, function (eventNameSpace) {
            // Keep track of subscription index so we can call unsubscribe later
            // This ensure it will continue to work even when the subscription has been updated
            subscriptionIndices.push(_this.subscriptions.length);
            _this.subscribe(eventNameSpace, callback);
        });
        return function () {
            var subscriptionsToRemove = subscriptionIndices.map(function (index) {
                return _this.subscriptions[index];
            });
            subscriptionsToRemove.forEach(function (toRemove) {
                collection_1$1.removeFromCollection(_this.subscriptions, toRemove, function (removed) {
                    removed.unsubscribe();
                });
            });
        };
    };
    ActionSet.prototype.subscribe = function (eventName, callback, component, currentIndex) {
        var _this = this;
        var eventComponent = component || this.component;
        var eventType = eventName.toUpperCase();
        var boundedCallback = typeof currentIndex === 'number' ? callback : callback.bind(this);
        var eventNameSpace;
        if (Error_1$3.isErrorEventName(eventName)) {
            eventNameSpace = helper_1$2.getEventNameSpace(types_2$1.Group.Error, eventName, __assign$5(__assign$5({}, eventComponent), { type: '' }));
        } else {
            eventNameSpace = helper_1$2.getEventNameSpace(this.group, eventName, eventComponent);
        }
        var unsubscribe = this.app.subscribe(eventNameSpace, boundedCallback, component ? component.id : this.id);
        var subscription = {
            eventType: eventType,
            unsubscribe: unsubscribe,
            callback: boundedCallback,
            component: eventComponent,
            updateSubscribe: function (group, subgroups) {
                return _this.updateSubscription(subscription, group, subgroups);
            },
        };
        if (typeof currentIndex === 'number' && currentIndex >= 0 && currentIndex < this.subscriptions.length) {
            this.subscriptions[currentIndex] = subscription;
        } else {
            this.subscriptions.push(subscription);
        }
        return unsubscribe;
    };
    ActionSet.prototype.unsubscribe = function (resetOnly) {
        if (resetOnly === void 0) {
            resetOnly = false;
        }
        unsubscribeActions(this.subscriptions, this.defaultGroup, resetOnly);
        return this;
    };
    return ActionSet;
})();
ActionSet$1.ActionSet = ActionSet;
var ActionSetWithChildren = /** @class */ (function (_super) {
    __extends$8(ActionSetWithChildren, _super);
    function ActionSetWithChildren() {
        var _this = (_super !== null && _super.apply(this, arguments)) || this;
        _this.children = [];
        return _this;
    }
    ActionSetWithChildren.prototype.unsubscribe = function (unsubscribeChildren, resetParentOnly) {
        if (unsubscribeChildren === void 0) {
            unsubscribeChildren = true;
        }
        if (resetParentOnly === void 0) {
            resetParentOnly = false;
        }
        unsubscribeActions(this.subscriptions, this.defaultGroup, resetParentOnly);
        this.children.forEach(function (child) {
            if (child instanceof ActionSetWithChildren) {
                child.unsubscribe(unsubscribeChildren, !unsubscribeChildren);
            } else {
                child.unsubscribe(!unsubscribeChildren);
            }
        });
        return this;
    };
    ActionSetWithChildren.prototype.getChild = function (id) {
        var childIndex = this.children.findIndex(function (child) {
            return child.id === id;
        });
        return childIndex >= 0 ? this.children[childIndex] : undefined;
    };
    ActionSetWithChildren.prototype.getChildIndex = function (id) {
        return this.children.findIndex(function (child) {
            return child.id === id;
        });
    };
    ActionSetWithChildren.prototype.getChildSubscriptions = function (id, eventType) {
        return this.subscriptions.filter(function (sub) {
            return sub.component.id === id && (!eventType || eventType === sub.eventType);
        });
    };
    ActionSetWithChildren.prototype.addChild = function (child, group, subgroups) {
        var _this = this;
        var subscriptions = child.subscriptions;
        var existingChild = this.getChild(child.id);
        // Add child if it doesn't already exist
        if (!existingChild) {
            this.children.push(child);
        }
        if (!subscriptions || (group === child.group && subgroups === child.subgroups)) {
            return this;
        }
        subscriptions.forEach(function (subscription) {
            var updateSubscribe = subscription.updateSubscribe;
            updateSubscribe(group, subgroups);
        });
        // Update child's group and subgroups
        Object.assign(child, { group: group, subgroups: subgroups });
        // Update child's children subscriptions
        if (child instanceof ActionSetWithChildren) {
            child.children.forEach(function (childIter) {
                return _this.addChild(childIter, group, subgroups);
            });
        }
        return this;
    };
    ActionSetWithChildren.prototype.removeChild = function (id) {
        var _this = this;
        collection_1$1.removeFromCollection(this.children, this.getChild(id), function () {
            var toBeRemoved = _this.subscriptions.filter(function (subs) {
                return subs.component.id === id;
            });
            toBeRemoved.forEach(function (toRemove) {
                collection_1$1.removeFromCollection(_this.subscriptions, toRemove, function (removed) {
                    removed.unsubscribe();
                });
            });
        });
        return this;
    };
    ActionSetWithChildren.prototype.subscribeToChild = function (child, eventName, callback) {
        var _this = this;
        var boundedCallback = callback.bind(this);
        if (eventName instanceof Array) {
            eventName.forEach(function (eventNameIter) {
                return _this.subscribeToChild(child, eventNameIter, callback);
            });
            return this;
        }
        if (typeof eventName !== 'string') {
            return this;
        }
        var eventType = eventName.toUpperCase();
        var currentSubscriptions = this.getChildSubscriptions(child.id, eventType);
        if (currentSubscriptions.length > 0) {
            // Subscription is already there, simply update it
            currentSubscriptions.forEach(function (subs) {
                return subs.updateSubscribe(_this.group, child.subgroups);
            });
        } else {
            var childComponent = {
                id: child.id,
                subgroups: child.subgroups,
                type: child.type,
            };
            this.subscribe(eventType, boundedCallback, childComponent);
        }
        return this;
    };
    ActionSetWithChildren.prototype.getUpdatedChildActions = function (newActions, currentActions) {
        if (newActions.length === 0) {
            while (currentActions.length > 0) {
                var action = currentActions.pop();
                if (!action) {
                    break;
                }
                this.removeChild(action.id);
            }
            return undefined;
        }
        // Only allow unique actions
        var uniqueActions = newActions.filter(function (action, index, actionsArr) {
            return index === actionsArr.indexOf(action);
        });
        var newActionIds = uniqueActions.map(function (action) {
            return action.id;
        });
        // Remove unused actions
        var unusedActions = currentActions.filter(function (action) {
            return newActionIds.indexOf(action.id) < 0;
        });
        while (unusedActions.length > 0) {
            var action = unusedActions.pop();
            if (!action) {
                break;
            }
            this.removeChild(action.id);
        }
        return uniqueActions;
    };
    return ActionSetWithChildren;
})(ActionSet);
ActionSet$1.ActionSetWithChildren = ActionSetWithChildren;
function unsubscribeActions(subscriptions, defaultGroup, reassign) {
    if (reassign === void 0) {
        reassign = false;
    }
    subscriptions.forEach(function (subscription) {
        if (reassign) {
            var updateSubscribe = subscription.updateSubscribe;
            // eslint-disable-next-line no-warning-comments
            // TODO: Support cases where we don't wipe out group and subgroups to defaults
            updateSubscribe(defaultGroup, []);
        } else {
            var unsubscribe = subscription.unsubscribe;
            unsubscribe();
        }
    });
    if (!reassign) {
        subscriptions.length = 0;
    }
}

(function (exports) {
    var __extends =
        (commonjsGlobal && commonjsGlobal.__extends) ||
        (function () {
            var extendStatics = function (d, b) {
                extendStatics =
                    Object.setPrototypeOf ||
                    ({ __proto__: [] } instanceof Array &&
                        function (d, b) {
                            d.__proto__ = b;
                        }) ||
                    function (d, b) {
                        for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
                    };
                return extendStatics(d, b);
            };
            return function (d, b) {
                if (typeof b !== 'function' && b !== null) throw new TypeError('Class extends value ' + String(b) + ' is not a constructor or null');
                extendStatics(d, b);
                function __() {
                    this.constructor = d;
                }
                d.prototype = b === null ? Object.create(b) : ((__.prototype = b.prototype), new __());
            };
        })();
    var __assign =
        (commonjsGlobal && commonjsGlobal.__assign) ||
        function () {
            __assign =
                Object.assign ||
                function (t) {
                    for (var s, i = 1, n = arguments.length; i < n; i++) {
                        s = arguments[i];
                        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
                    }
                    return t;
                };
            return __assign.apply(this, arguments);
        };
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.create = exports.Button = exports.isValidButtonProps = exports.update = exports.clickButton = exports.Style = exports.Icon = exports.Action = void 0;
    var helper_1 = helper;
    var ActionSet_1 = ActionSet$1;
    var types_1 = types$4;
    var Action;
    (function (Action) {
        Action['CLICK'] = 'CLICK';
        Action['UPDATE'] = 'UPDATE';
    })((Action = exports.Action || (exports.Action = {})));
    (function (Icon) {
        Icon['Print'] = 'print';
    })(exports.Icon || (exports.Icon = {}));
    (function (Style) {
        Style['Danger'] = 'danger';
    })(exports.Style || (exports.Style = {}));
    function clickButton(group, component, payload) {
        var id = component.id;
        var action = helper_1.getEventNameSpace(group, Action.CLICK, component);
        var buttonPayload = {
            id: id,
            payload: payload,
        };
        return helper_1.actionWrapper({ type: action, group: group, payload: buttonPayload });
    }
    exports.clickButton = clickButton;
    function update(group, component, props) {
        var id = component.id;
        var label = props.label;
        var action = helper_1.getEventNameSpace(group, Action.UPDATE, component);
        var buttonPayload = __assign(__assign({}, props), { id: id, label: label });
        return helper_1.actionWrapper({ type: action, group: group, payload: buttonPayload });
    }
    exports.update = update;
    function isValidButtonProps(button) {
        return typeof button.id === 'string' && typeof button.label === 'string';
    }
    exports.isValidButtonProps = isValidButtonProps;
    var Button = /** @class */ (function (_super) {
        __extends(Button, _super);
        function Button(app, options) {
            var _this = _super.call(this, app, types_1.ComponentType.Button, types_1.Group.Button) || this;
            _this.disabled = false;
            _this.loading = false;
            _this.plain = false;
            _this.set(options, false);
            return _this;
        }
        Object.defineProperty(Button.prototype, 'options', {
            get: function () {
                return {
                    disabled: this.disabled,
                    icon: this.icon,
                    label: this.label,
                    style: this.style,
                    loading: this.loading,
                    plain: this.plain,
                };
            },
            enumerable: false,
            configurable: true,
        });
        Object.defineProperty(Button.prototype, 'payload', {
            get: function () {
                return __assign(__assign({}, this.options), { id: this.id });
            },
            enumerable: false,
            configurable: true,
        });
        Button.prototype.set = function (options, shouldUpdate) {
            if (shouldUpdate === void 0) {
                shouldUpdate = true;
            }
            var mergedOptions = helper_1.getMergedProps(this.options, options);
            var label = mergedOptions.label,
                disabled = mergedOptions.disabled,
                icon = mergedOptions.icon,
                style = mergedOptions.style,
                loading = mergedOptions.loading,
                plain = mergedOptions.plain;
            this.label = label;
            this.disabled = Boolean(disabled);
            this.icon = icon;
            this.style = style;
            this.loading = Boolean(loading);
            this.plain = Boolean(plain);
            if (shouldUpdate) {
                this.dispatch(Action.UPDATE);
            }
            return this;
        };
        Button.prototype.dispatch = function (action, payload) {
            switch (action) {
                case Action.CLICK:
                    this.app.dispatch(clickButton(this.group, this.component, payload));
                    break;
                case Action.UPDATE: {
                    var updateAction = update(this.group, this.component, this.payload);
                    this.app.dispatch(updateAction);
                    break;
                }
            }
            return this;
        };
        return Button;
    })(ActionSet_1.ActionSet);
    exports.Button = Button;
    function create(app, options) {
        return new Button(app, options);
    }
    exports.create = create;
})(Button$1);

var ButtonGroup$1 = {};

var buttonHelper = {};

Object.defineProperty(buttonHelper, '__esModule', { value: true });
buttonHelper.getSingleButton = void 0;
var Button_1 = Button$1;
function getSingleButton(action, button, subgroups, updateCb) {
    action.addChild(button, action.group, subgroups);
    action.subscribeToChild(button, Button_1.Action.UPDATE, updateCb);
    return button.payload;
}
buttonHelper.getSingleButton = getSingleButton;

(function (exports) {
    var __extends =
        (commonjsGlobal && commonjsGlobal.__extends) ||
        (function () {
            var extendStatics = function (d, b) {
                extendStatics =
                    Object.setPrototypeOf ||
                    ({ __proto__: [] } instanceof Array &&
                        function (d, b) {
                            d.__proto__ = b;
                        }) ||
                    function (d, b) {
                        for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
                    };
                return extendStatics(d, b);
            };
            return function (d, b) {
                if (typeof b !== 'function' && b !== null) throw new TypeError('Class extends value ' + String(b) + ' is not a constructor or null');
                extendStatics(d, b);
                function __() {
                    this.constructor = d;
                }
                d.prototype = b === null ? Object.create(b) : ((__.prototype = b.prototype), new __());
            };
        })();
    var __assign =
        (commonjsGlobal && commonjsGlobal.__assign) ||
        function () {
            __assign =
                Object.assign ||
                function (t) {
                    for (var s, i = 1, n = arguments.length; i < n; i++) {
                        s = arguments[i];
                        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
                    }
                    return t;
                };
            return __assign.apply(this, arguments);
        };
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.create = exports.ButtonGroup = exports.isGroupedButtonPayload = exports.isGroupedButton = exports.update = exports.Action = void 0;
    var buttonHelper_1 = buttonHelper;
    var helper_1 = helper;
    var ActionSet_1 = ActionSet$1;
    var types_1 = types$4;
    var Action;
    (function (Action) {
        Action['UPDATE'] = 'UPDATE';
    })((Action = exports.Action || (exports.Action = {})));
    function update(group, component, props) {
        return buttonActionWrapper(group, component, Action.UPDATE, props);
    }
    exports.update = update;
    function isGroupedButton(options) {
        var castOptions = options;
        return castOptions.buttons && castOptions.buttons.length > 0 && castOptions.label !== undefined;
    }
    exports.isGroupedButton = isGroupedButton;
    function isGroupedButtonPayload(payload) {
        var castOptions = payload;
        return Array.isArray(castOptions.buttons) && typeof castOptions.id === 'string' && typeof castOptions.label === 'string';
    }
    exports.isGroupedButtonPayload = isGroupedButtonPayload;
    var ButtonGroup = /** @class */ (function (_super) {
        __extends(ButtonGroup, _super);
        function ButtonGroup(app, options) {
            var _this = _super.call(this, app, types_1.ComponentType.ButtonGroup, types_1.Group.ButtonGroup) || this;
            _this.disabled = false;
            _this.plain = false;
            _this.buttonsOptions = [];
            _this.buttons = [];
            _this.set(options, false);
            return _this;
        }
        Object.defineProperty(ButtonGroup.prototype, 'options', {
            get: function () {
                return {
                    buttons: this.buttonsOptions,
                    disabled: this.disabled,
                    label: this.label,
                    plain: this.plain,
                };
            },
            enumerable: false,
            configurable: true,
        });
        Object.defineProperty(ButtonGroup.prototype, 'payload', {
            get: function () {
                return __assign(__assign({}, this.options), { buttons: this.buttons, id: this.id });
            },
            enumerable: false,
            configurable: true,
        });
        ButtonGroup.prototype.set = function (options, shouldUpdate) {
            if (shouldUpdate === void 0) {
                shouldUpdate = true;
            }
            var mergedOptions = helper_1.getMergedProps(this.options, options);
            var label = mergedOptions.label,
                disabled = mergedOptions.disabled,
                buttons = mergedOptions.buttons,
                plain = mergedOptions.plain;
            this.label = label;
            this.disabled = Boolean(disabled);
            this.buttons = this.getButtons(buttons);
            this.plain = Boolean(plain);
            if (shouldUpdate) {
                this.dispatch(Action.UPDATE);
            }
            return this;
        };
        ButtonGroup.prototype.dispatch = function (action) {
            switch (action) {
                case Action.UPDATE: {
                    var updateAction = update(this.group, this.component, this.payload);
                    this.app.dispatch(updateAction);
                    break;
                }
            }
            return this;
        };
        ButtonGroup.prototype.updateButtons = function (newPayload) {
            if (!this.buttons || this.buttons.length === 0) {
                return;
            }
            var updated;
            for (var _i = 0, _a = this.buttons; _i < _a.length; _i++) {
                var action = _a[_i];
                updated = helper_1.updateActionFromPayload(action, newPayload);
                if (updated) {
                    break;
                }
            }
            if (updated) {
                this.dispatch(Action.UPDATE);
            }
        };
        ButtonGroup.prototype.getSingleButton = function (button) {
            return buttonHelper_1.getSingleButton(this, button, this.subgroups, this.updateButtons);
        };
        ButtonGroup.prototype.getButtons = function (buttonOptions) {
            var _this = this;
            var buttons = [];
            if (!buttonOptions) {
                return [];
            }
            buttonOptions.forEach(function (button) {
                var singleButton = buttonHelper_1.getSingleButton(_this, button, _this.subgroups, _this.updateButtons);
                buttons.push(singleButton);
            });
            this.buttonsOptions = buttonOptions;
            return buttons;
        };
        return ButtonGroup;
    })(ActionSet_1.ActionSetWithChildren);
    exports.ButtonGroup = ButtonGroup;
    function create(app, options) {
        return new ButtonGroup(app, options);
    }
    exports.create = create;
    function buttonActionWrapper(group, component, eventName, props, payload) {
        var id = component.id;
        var label = props.label;
        var action = helper_1.getEventNameSpace(group, eventName, component);
        var buttonPayload = __assign(__assign({}, props), { id: id, label: label, payload: payload });
        return helper_1.actionWrapper({ type: action, group: group, payload: buttonPayload });
    }
})(ButtonGroup$1);

var Cart = {};

(function (exports) {
    var __extends =
        (commonjsGlobal && commonjsGlobal.__extends) ||
        (function () {
            var extendStatics = function (d, b) {
                extendStatics =
                    Object.setPrototypeOf ||
                    ({ __proto__: [] } instanceof Array &&
                        function (d, b) {
                            d.__proto__ = b;
                        }) ||
                    function (d, b) {
                        for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
                    };
                return extendStatics(d, b);
            };
            return function (d, b) {
                if (typeof b !== 'function' && b !== null) throw new TypeError('Class extends value ' + String(b) + ' is not a constructor or null');
                extendStatics(d, b);
                function __() {
                    this.constructor = d;
                }
                d.prototype = b === null ? Object.create(b) : ((__.prototype = b.prototype), new __());
            };
        })();
    var __assign =
        (commonjsGlobal && commonjsGlobal.__assign) ||
        function () {
            __assign =
                Object.assign ||
                function (t) {
                    for (var s, i = 1, n = arguments.length; i < n; i++) {
                        s = arguments[i];
                        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
                    }
                    return t;
                };
            return __assign.apply(this, arguments);
        };
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.create =
        exports.Cart =
        exports.setLineItemProperties =
        exports.removeLineItemDiscount =
        exports.setLineItemDiscount =
        exports.removeLineItem =
        exports.updateLineItem =
        exports.addLineItem =
        exports.removeProperties =
        exports.setProperties =
        exports.setDiscount =
        exports.updateCustomerAddress =
        exports.addCustomerAddress =
        exports.setCustomer =
        exports.update =
        exports.fetch =
        exports.Action =
            void 0;
    var helper_1 = helper;
    var ActionSet_1 = ActionSet$1;
    var types_1 = types$4;
    var Action;
    (function (Action) {
        Action['FETCH'] = 'APP::CART::FETCH';
        Action['UPDATE'] = 'APP::CART::UPDATE';
        Action['SET_CUSTOMER'] = 'APP::CART::SET_CUSTOMER';
        Action['REMOVE_CUSTOMER'] = 'APP::CART::REMOVE_CUSTOMER';
        Action['ADD_CUSTOMER_ADDRESS'] = 'APP::CART::ADD_CUSTOMER_ADDRESS';
        Action['UPDATE_CUSTOMER_ADDRESS'] = 'APP::CART::UPDATE_CUSTOMER_ADDRESS';
        Action['SET_DISCOUNT'] = 'APP::CART::SET_DISCOUNT';
        Action['REMOVE_DISCOUNT'] = 'APP::CART::REMOVE_DISCOUNT';
        Action['SET_PROPERTIES'] = 'APP::CART::SET_PROPERTIES';
        Action['REMOVE_PROPERTIES'] = 'APP::CART::REMOVE_PROPERTIES';
        Action['CLEAR'] = 'APP::CART::CLEAR';
        Action['ADD_LINE_ITEM'] = 'APP::CART::ADD_LINE_ITEM';
        Action['UPDATE_LINE_ITEM'] = 'APP::CART::UPDATE_LINE_ITEM';
        Action['REMOVE_LINE_ITEM'] = 'APP::CART::REMOVE_LINE_ITEM';
        Action['SET_LINE_ITEM_DISCOUNT'] = 'APP::CART::SET_LINE_ITEM_DISCOUNT';
        Action['REMOVE_LINE_ITEM_DISCOUNT'] = 'APP::CART::REMOVE_LINE_ITEM_DISCOUNT';
        Action['SET_LINE_ITEM_PROPERTIES'] = 'APP::CART::SET_LINE_ITEM_PROPERTIES';
        Action['REMOVE_LINE_ITEM_PROPERTIES'] = 'APP::CART::REMOVE_LINE_ITEM_PROPERTIES';
    })((Action = exports.Action || (exports.Action = {})));
    /**
     * Cart action
     * @internal
     */
    function createCartAction(type, payload) {
        if (payload === void 0) {
            payload = {};
        }
        return helper_1.actionWrapper({
            group: types_1.Group.Cart,
            type: type,
            payload: payload,
        });
    }
    function fetch() {
        return createCartAction(Action.FETCH);
    }
    exports.fetch = fetch;
    function update(payload) {
        return createCartAction(Action.UPDATE, payload);
    }
    exports.update = update;
    function setCustomer(payload) {
        return createCartAction(Action.SET_CUSTOMER, payload);
    }
    exports.setCustomer = setCustomer;
    function addCustomerAddress(payload) {
        return createCartAction(Action.ADD_CUSTOMER_ADDRESS, payload);
    }
    exports.addCustomerAddress = addCustomerAddress;
    function updateCustomerAddress(payload) {
        return createCartAction(Action.UPDATE_CUSTOMER_ADDRESS, payload);
    }
    exports.updateCustomerAddress = updateCustomerAddress;
    function setDiscount(payload) {
        return createCartAction(Action.SET_DISCOUNT, payload);
    }
    exports.setDiscount = setDiscount;
    function setProperties(payload) {
        return createCartAction(Action.SET_PROPERTIES, payload);
    }
    exports.setProperties = setProperties;
    function removeProperties(payload) {
        return createCartAction(Action.REMOVE_PROPERTIES, payload);
    }
    exports.removeProperties = removeProperties;
    function addLineItem(payload) {
        return createCartAction(Action.ADD_LINE_ITEM, payload);
    }
    exports.addLineItem = addLineItem;
    function updateLineItem(payload) {
        return createCartAction(Action.UPDATE_LINE_ITEM, payload);
    }
    exports.updateLineItem = updateLineItem;
    function removeLineItem(payload) {
        return createCartAction(Action.REMOVE_LINE_ITEM, payload);
    }
    exports.removeLineItem = removeLineItem;
    function setLineItemDiscount(payload) {
        return createCartAction(Action.SET_LINE_ITEM_DISCOUNT, payload);
    }
    exports.setLineItemDiscount = setLineItemDiscount;
    function removeLineItemDiscount(payload) {
        return createCartAction(Action.REMOVE_LINE_ITEM_DISCOUNT, payload);
    }
    exports.removeLineItemDiscount = removeLineItemDiscount;
    function setLineItemProperties(payload) {
        return createCartAction(Action.SET_LINE_ITEM_PROPERTIES, payload);
    }
    exports.setLineItemProperties = setLineItemProperties;
    /**
     * Cart
     */
    var Cart = /** @class */ (function (_super) {
        __extends(Cart, _super);
        function Cart(app, options) {
            return _super.call(this, app, types_1.Group.Cart, types_1.Group.Cart, options ? options.id : undefined) || this;
        }
        Cart.prototype.dispatch = function (action, payload) {
            switch (action) {
                case Action.FETCH:
                    this.dispatchCartAction(Action.FETCH);
                    break;
                case Action.UPDATE:
                    this.dispatchCartAction(Action.UPDATE, payload);
                    break;
                case Action.SET_CUSTOMER:
                    this.dispatchCartAction(Action.SET_CUSTOMER, payload);
                    break;
                case Action.REMOVE_CUSTOMER:
                    this.dispatchCartAction(Action.REMOVE_CUSTOMER, payload);
                    break;
                case Action.ADD_CUSTOMER_ADDRESS:
                    this.dispatchCartAction(Action.ADD_CUSTOMER_ADDRESS, payload);
                    break;
                case Action.UPDATE_CUSTOMER_ADDRESS:
                    this.dispatchCartAction(Action.UPDATE_CUSTOMER_ADDRESS, payload);
                    break;
                case Action.SET_DISCOUNT:
                    this.dispatchCartAction(Action.SET_DISCOUNT, payload);
                    break;
                case Action.REMOVE_DISCOUNT:
                    this.dispatchCartAction(Action.REMOVE_DISCOUNT, payload);
                    break;
                case Action.SET_PROPERTIES:
                    this.dispatchCartAction(Action.SET_PROPERTIES, payload);
                    break;
                case Action.REMOVE_PROPERTIES:
                    this.dispatchCartAction(Action.REMOVE_PROPERTIES, payload);
                    break;
                case Action.CLEAR:
                    this.dispatchCartAction(Action.CLEAR, payload);
                    break;
                case Action.ADD_LINE_ITEM:
                    this.dispatchCartAction(Action.ADD_LINE_ITEM, payload);
                    break;
                case Action.UPDATE_LINE_ITEM:
                    this.dispatchCartAction(Action.UPDATE_LINE_ITEM, payload);
                    break;
                case Action.REMOVE_LINE_ITEM:
                    this.dispatchCartAction(Action.REMOVE_LINE_ITEM, payload);
                    break;
                case Action.SET_LINE_ITEM_DISCOUNT:
                    this.dispatchCartAction(Action.SET_LINE_ITEM_DISCOUNT, payload);
                    break;
                case Action.REMOVE_LINE_ITEM_DISCOUNT:
                    this.dispatchCartAction(Action.REMOVE_LINE_ITEM_DISCOUNT, payload);
                    break;
                case Action.SET_LINE_ITEM_PROPERTIES:
                    this.dispatchCartAction(Action.SET_LINE_ITEM_PROPERTIES, payload);
                    break;
                case Action.REMOVE_LINE_ITEM_PROPERTIES:
                    this.dispatchCartAction(Action.REMOVE_LINE_ITEM_PROPERTIES, payload);
                    break;
            }
            return this;
        };
        Cart.prototype.dispatchCartAction = function (type, payload) {
            this.app.dispatch(createCartAction(type, __assign(__assign({}, payload), { id: this.id })));
        };
        return Cart;
    })(ActionSet_1.ActionSet);
    exports.Cart = Cart;
    function create(app, options) {
        return new Cart(app, options);
    }
    exports.create = create;
})(Cart);

var Client$1 = {};

(function (exports) {
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.initialize = exports.Action = void 0;
    var types_1 = types$4;
    var helper_1 = helper;
    var Action;
    (function (Action) {
        Action['INITIALIZE'] = 'APP::CLIENT::INITIALIZE';
    })((Action = exports.Action || (exports.Action = {})));
    function initialize() {
        return helper_1.actionWrapper({
            group: types_1.Group.Client,
            type: Action.INITIALIZE,
        });
    }
    exports.initialize = initialize;
})(Client$1);

var Flash = {};

var actions$1 = {};

var Toast$4 = {};

(function (exports) {
    var __extends =
        (commonjsGlobal && commonjsGlobal.__extends) ||
        (function () {
            var extendStatics = function (d, b) {
                extendStatics =
                    Object.setPrototypeOf ||
                    ({ __proto__: [] } instanceof Array &&
                        function (d, b) {
                            d.__proto__ = b;
                        }) ||
                    function (d, b) {
                        for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
                    };
                return extendStatics(d, b);
            };
            return function (d, b) {
                if (typeof b !== 'function' && b !== null) throw new TypeError('Class extends value ' + String(b) + ' is not a constructor or null');
                extendStatics(d, b);
                function __() {
                    this.constructor = d;
                }
                d.prototype = b === null ? Object.create(b) : ((__.prototype = b.prototype), new __());
            };
        })();
    var __assign =
        (commonjsGlobal && commonjsGlobal.__assign) ||
        function () {
            __assign =
                Object.assign ||
                function (t) {
                    for (var s, i = 1, n = arguments.length; i < n; i++) {
                        s = arguments[i];
                        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
                    }
                    return t;
                };
            return __assign.apply(this, arguments);
        };
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.create = exports.Toast = exports.clear = exports.show = exports.Action = void 0;
    var helper_1 = helper;
    var ActionSet_1 = ActionSet$1;
    var types_1 = types$4;
    var Action;
    (function (Action) {
        Action['SHOW'] = 'APP::TOAST::SHOW';
        Action['CLEAR'] = 'APP::TOAST::CLEAR';
    })((Action = exports.Action || (exports.Action = {})));
    function show(toastMessage) {
        return helper_1.actionWrapper({
            group: types_1.Group.Toast,
            payload: toastMessage,
            type: Action.SHOW,
        });
    }
    exports.show = show;
    function clear(payload) {
        return helper_1.actionWrapper({
            payload: payload,
            group: types_1.Group.Toast,
            type: Action.CLEAR,
        });
    }
    exports.clear = clear;
    var Toast = /** @class */ (function (_super) {
        __extends(Toast, _super);
        function Toast(app, options) {
            var _this = _super.call(this, app, types_1.Group.Toast, types_1.Group.Toast) || this;
            _this.message = '';
            _this.duration = 5000;
            _this.set(options);
            return _this;
        }
        Object.defineProperty(Toast.prototype, 'options', {
            get: function () {
                return {
                    duration: this.duration,
                    isError: this.isError,
                    message: this.message,
                };
            },
            enumerable: false,
            configurable: true,
        });
        Object.defineProperty(Toast.prototype, 'payload', {
            get: function () {
                return __assign({ id: this.id }, this.options);
            },
            enumerable: false,
            configurable: true,
        });
        Toast.prototype.set = function (options) {
            var mergedOptions = helper_1.getMergedProps(this.options, options);
            var message = mergedOptions.message,
                duration = mergedOptions.duration,
                isError = mergedOptions.isError;
            this.message = message;
            this.duration = duration;
            this.isError = isError;
            return this;
        };
        Toast.prototype.dispatch = function (action) {
            switch (action) {
                case Action.SHOW: {
                    var openAction = show(this.payload);
                    this.app.dispatch(openAction);
                    break;
                }
                case Action.CLEAR:
                    this.app.dispatch(clear({ id: this.id }));
                    break;
            }
            return this;
        };
        return Toast;
    })(ActionSet_1.ActionSet);
    exports.Toast = Toast;
    function create(app, options) {
        return new Toast(app, options);
    }
    exports.create = create;
})(Toast$4);

(function (exports) {
    var __extends =
        (commonjsGlobal && commonjsGlobal.__extends) ||
        (function () {
            var extendStatics = function (d, b) {
                extendStatics =
                    Object.setPrototypeOf ||
                    ({ __proto__: [] } instanceof Array &&
                        function (d, b) {
                            d.__proto__ = b;
                        }) ||
                    function (d, b) {
                        for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
                    };
                return extendStatics(d, b);
            };
            return function (d, b) {
                if (typeof b !== 'function' && b !== null) throw new TypeError('Class extends value ' + String(b) + ' is not a constructor or null');
                extendStatics(d, b);
                function __() {
                    this.constructor = d;
                }
                d.prototype = b === null ? Object.create(b) : ((__.prototype = b.prototype), new __());
            };
        })();
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.create = exports.Flash = exports.show = exports.clear = void 0;
    var Toast_1 = Toast$4;
    var Toast_2 = Toast$4;
    Object.defineProperty(exports, 'clear', {
        enumerable: true,
        get: function () {
            return Toast_2.clear;
        },
    });
    Object.defineProperty(exports, 'show', {
        enumerable: true,
        get: function () {
            return Toast_2.show;
        },
    });
    var Flash = /** @class */ (function (_super) {
        __extends(Flash, _super);
        function Flash() {
            return (_super !== null && _super.apply(this, arguments)) || this;
        }
        return Flash;
    })(Toast_1.Toast);
    exports.Flash = Flash;
    function create(app, options) {
        return new Flash(app, options);
    }
    exports.create = create;
})(actions$1);

(function (exports) {
    var __createBinding =
        (commonjsGlobal && commonjsGlobal.__createBinding) ||
        (Object.create
            ? function (o, m, k, k2) {
                  if (k2 === undefined) k2 = k;
                  Object.defineProperty(o, k2, {
                      enumerable: true,
                      get: function () {
                          return m[k];
                      },
                  });
              }
            : function (o, m, k, k2) {
                  if (k2 === undefined) k2 = k;
                  o[k2] = m[k];
              });
    var __exportStar =
        (commonjsGlobal && commonjsGlobal.__exportStar) ||
        function (m, exports) {
            for (var p in m) if (p !== 'default' && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
        };
    Object.defineProperty(exports, '__esModule', { value: true });
    __exportStar(actions$1, exports);
})(Flash);

var Features$1 = {};

var actions = {};

var types$1 = {};

(function (exports) {
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.Action = void 0;
    (function (Action) {
        Action['UPDATE'] = 'APP::FEATURES::UPDATE';
        Action['REQUEST'] = 'APP::FEATURES::REQUEST';
        Action['REQUEST_UPDATE'] = 'APP::FEATURES::REQUEST::UPDATE';
    })(exports.Action || (exports.Action = {}));
})(types$1);

var __extends$7 =
    (commonjsGlobal && commonjsGlobal.__extends) ||
    (function () {
        var extendStatics = function (d, b) {
            extendStatics =
                Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array &&
                    function (d, b) {
                        d.__proto__ = b;
                    }) ||
                function (d, b) {
                    for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
                };
            return extendStatics(d, b);
        };
        return function (d, b) {
            if (typeof b !== 'function' && b !== null) throw new TypeError('Class extends value ' + String(b) + ' is not a constructor or null');
            extendStatics(d, b);
            function __() {
                this.constructor = d;
            }
            d.prototype = b === null ? Object.create(b) : ((__.prototype = b.prototype), new __());
        };
    })();
var __assign$4 =
    (commonjsGlobal && commonjsGlobal.__assign) ||
    function () {
        __assign$4 =
            Object.assign ||
            function (t) {
                for (var s, i = 1, n = arguments.length; i < n; i++) {
                    s = arguments[i];
                    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
                }
                return t;
            };
        return __assign$4.apply(this, arguments);
    };
Object.defineProperty(actions, '__esModule', { value: true });
actions.create = actions.Features = void 0;
var helper_1$1 = helper;
var ActionSet_1 = ActionSet$1;
var types_1$1 = types$4;
var types_2 = types$1;
/**
 * A set of Actions for Updating, Requesting Features of AppBridge
 * @public
 */
var Features = /** @class */ (function (_super) {
    __extends$7(Features, _super);
    function Features(app, options) {
        return _super.call(this, app, types_1$1.Group.Features, types_1$1.Group.Features, options ? options.id : undefined) || this;
    }
    /**
     * @public
     */
    Features.prototype.dispatch = function (action, payload) {
        switch (action) {
            case types_2.Action.REQUEST:
                this.dispatchFeaturesAction(types_2.Action.REQUEST, payload);
                break;
        }
        return this;
    };
    /**
     * @internal
     */
    Features.prototype.dispatchFeaturesAction = function (type, payload) {
        this.app.dispatch(
            helper_1$1.actionWrapper({
                group: types_1$1.Group.Features,
                type: type,
                payload: __assign$4(__assign$4({}, payload || {}), { id: this.id }),
            })
        );
    };
    return Features;
})(ActionSet_1.ActionSet);
actions.Features = Features;
/**
 * @public
 */
function create$1(app, options) {
    return new Features(app, options);
}
actions.create = create$1;

(function (exports) {
    var __createBinding =
        (commonjsGlobal && commonjsGlobal.__createBinding) ||
        (Object.create
            ? function (o, m, k, k2) {
                  if (k2 === undefined) k2 = k;
                  Object.defineProperty(o, k2, {
                      enumerable: true,
                      get: function () {
                          return m[k];
                      },
                  });
              }
            : function (o, m, k, k2) {
                  if (k2 === undefined) k2 = k;
                  o[k2] = m[k];
              });
    var __exportStar =
        (commonjsGlobal && commonjsGlobal.__exportStar) ||
        function (m, exports) {
            for (var p in m) if (p !== 'default' && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
        };
    Object.defineProperty(exports, '__esModule', { value: true });
    __exportStar(actions, exports);
    __exportStar(types$1, exports);
})(Features$1);

var FeedbackModal = {};

(function (exports) {
    var __extends =
        (commonjsGlobal && commonjsGlobal.__extends) ||
        (function () {
            var extendStatics = function (d, b) {
                extendStatics =
                    Object.setPrototypeOf ||
                    ({ __proto__: [] } instanceof Array &&
                        function (d, b) {
                            d.__proto__ = b;
                        }) ||
                    function (d, b) {
                        for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
                    };
                return extendStatics(d, b);
            };
            return function (d, b) {
                if (typeof b !== 'function' && b !== null) throw new TypeError('Class extends value ' + String(b) + ' is not a constructor or null');
                extendStatics(d, b);
                function __() {
                    this.constructor = d;
                }
                d.prototype = b === null ? Object.create(b) : ((__.prototype = b.prototype), new __());
            };
        })();
    var __assign =
        (commonjsGlobal && commonjsGlobal.__assign) ||
        function () {
            __assign =
                Object.assign ||
                function (t) {
                    for (var s, i = 1, n = arguments.length; i < n; i++) {
                        s = arguments[i];
                        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
                    }
                    return t;
                };
            return __assign.apply(this, arguments);
        };
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.create = exports.FeedbackModal = exports.close = exports.open = exports.Action = void 0;
    var helper_1 = helper;
    var ActionSet_1 = ActionSet$1;
    var types_1 = types$4;
    /**
     * Action for the Feedback Modal group
     * @public
     */
    var Action;
    (function (Action) {
        Action['OPEN'] = 'APP::FEEDBACK_MODAL::OPEN';
        Action['CLOSE'] = 'APP::FEEDBACK_MODAL::CLOSE';
    })((Action = exports.Action || (exports.Action = {})));
    function open(payload) {
        return helper_1.actionWrapper({
            group: types_1.Group.FeedbackModal,
            payload: payload,
            type: Action.OPEN,
        });
    }
    exports.open = open;
    function close(payload) {
        return helper_1.actionWrapper({
            group: types_1.Group.FeedbackModal,
            payload: payload,
            type: Action.CLOSE,
        });
    }
    exports.close = close;
    /**
     * FeedbackModal action set
     */
    var FeedbackModal = /** @class */ (function (_super) {
        __extends(FeedbackModal, _super);
        /**
         * Returns a new instance of a FeedbackModal action set
         * @param app the client application
         */
        function FeedbackModal(app, options) {
            var _this = _super.call(this, app, types_1.Group.FeedbackModal, types_1.Group.FeedbackModal) || this;
            _this.options = options;
            _this.set(options);
            return _this;
        }
        Object.defineProperty(FeedbackModal.prototype, 'payload', {
            /**
             * Returns the action set payload
             */
            get: function () {
                return __assign({ id: this.id }, this.options);
            },
            enumerable: false,
            configurable: true,
        });
        FeedbackModal.prototype.set = function (options) {
            this.options = helper_1.getMergedProps(this.options, options);
            return this;
        };
        /**
         * Dispatches a given action with the action set payload
         * @param action the action enum
         * @returns the action set instance
         */
        FeedbackModal.prototype.dispatch = function (action) {
            switch (action) {
                case Action.OPEN: {
                    var openAction = open(this.payload);
                    this.app.dispatch(openAction);
                    break;
                }
                case Action.CLOSE: {
                    var closeAction = close(this.payload);
                    this.app.dispatch(closeAction);
                    break;
                }
            }
            return this;
        };
        return FeedbackModal;
    })(ActionSet_1.ActionSet);
    exports.FeedbackModal = FeedbackModal;
    /**
     * Returns a new instance of a FeedbackModal action set
     * @param app the client application
     */
    function create(app, options) {
        return new FeedbackModal(app, options);
    }
    exports.create = create;
})(FeedbackModal);

var Fullscreen = {};

(function (exports) {
    var __extends =
        (commonjsGlobal && commonjsGlobal.__extends) ||
        (function () {
            var extendStatics = function (d, b) {
                extendStatics =
                    Object.setPrototypeOf ||
                    ({ __proto__: [] } instanceof Array &&
                        function (d, b) {
                            d.__proto__ = b;
                        }) ||
                    function (d, b) {
                        for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
                    };
                return extendStatics(d, b);
            };
            return function (d, b) {
                if (typeof b !== 'function' && b !== null) throw new TypeError('Class extends value ' + String(b) + ' is not a constructor or null');
                extendStatics(d, b);
                function __() {
                    this.constructor = d;
                }
                d.prototype = b === null ? Object.create(b) : ((__.prototype = b.prototype), new __());
            };
        })();
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.create = exports.Fullscreen = exports.exit = exports.enter = exports.Action = void 0;
    var helper_1 = helper;
    var ActionSet_1 = ActionSet$1;
    var types_1 = types$4;
    /**
     * Fullscreen action type enum
     * @remarks includes the action prefix and group
     *
     * @beta
     */
    var Action;
    (function (Action) {
        Action['ENTER'] = 'APP::FULLSCREEN::ENTER';
        Action['EXIT'] = 'APP::FULLSCREEN::EXIT';
    })((Action = exports.Action || (exports.Action = {})));
    function enter() {
        return helper_1.actionWrapper({
            group: types_1.Group.Fullscreen,
            type: Action.ENTER,
        });
    }
    exports.enter = enter;
    function exit() {
        return helper_1.actionWrapper({
            group: types_1.Group.Fullscreen,
            type: Action.EXIT,
        });
    }
    exports.exit = exit;
    /**
     * Fullscreen action set
     * @beta
     */
    var Fullscreen = /** @class */ (function (_super) {
        __extends(Fullscreen, _super);
        /**
         * Returns a new instance of a Fullscreen action set
         * @param app the client application
         */
        function Fullscreen(app) {
            return _super.call(this, app, types_1.Group.Fullscreen, types_1.Group.Fullscreen) || this;
        }
        Object.defineProperty(Fullscreen.prototype, 'payload', {
            /**
             * Returns the action set payload
             */
            get: function () {
                return { id: this.id };
            },
            enumerable: false,
            configurable: true,
        });
        /**
         * Dispatches a given action with the action set payload
         * @param action the action enum
         * @returns the action set instance
         */
        Fullscreen.prototype.dispatch = function (action) {
            this.app.dispatch(
                helper_1.actionWrapper({
                    group: this.group,
                    type: action,
                    payload: this.payload,
                })
            );
            return this;
        };
        return Fullscreen;
    })(ActionSet_1.ActionSet);
    exports.Fullscreen = Fullscreen;
    /**
     * Returns a new instance of a Fullscreen action set
     * @param app the client application
     *
     * @beta
     */
    function create(app) {
        return new Fullscreen(app);
    }
    exports.create = create;
})(Fullscreen);

var LeaveConfirmation = {};

(function (exports) {
    var __extends =
        (commonjsGlobal && commonjsGlobal.__extends) ||
        (function () {
            var extendStatics = function (d, b) {
                extendStatics =
                    Object.setPrototypeOf ||
                    ({ __proto__: [] } instanceof Array &&
                        function (d, b) {
                            d.__proto__ = b;
                        }) ||
                    function (d, b) {
                        for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
                    };
                return extendStatics(d, b);
            };
            return function (d, b) {
                if (typeof b !== 'function' && b !== null) throw new TypeError('Class extends value ' + String(b) + ' is not a constructor or null');
                extendStatics(d, b);
                function __() {
                    this.constructor = d;
                }
                d.prototype = b === null ? Object.create(b) : ((__.prototype = b.prototype), new __());
            };
        })();
    var __assign =
        (commonjsGlobal && commonjsGlobal.__assign) ||
        function () {
            __assign =
                Object.assign ||
                function (t) {
                    for (var s, i = 1, n = arguments.length; i < n; i++) {
                        s = arguments[i];
                        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
                    }
                    return t;
                };
            return __assign.apply(this, arguments);
        };
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.create = exports.LeaveConfirmation = exports.confirm = exports.disable = exports.enable = exports.Action = void 0;
    var helper_1 = helper;
    var ActionSet_1 = ActionSet$1;
    var types_1 = types$4;
    /**
     * Action for the Leave Confirmation group
     * @public
     */
    var Action;
    (function (Action) {
        Action['ENABLE'] = 'APP::LEAVE_CONFIRMATION::ENABLE';
        Action['DISABLE'] = 'APP::LEAVE_CONFIRMATION::DISABLE';
        Action['CONFIRM'] = 'APP::LEAVE_CONFIRMATION::CONFIRM';
    })((Action = exports.Action || (exports.Action = {})));
    function enable(payload) {
        if (payload === void 0) {
            payload = {};
        }
        return helper_1.actionWrapper({
            group: types_1.Group.LeaveConfirmation,
            payload: payload,
            type: Action.ENABLE,
        });
    }
    exports.enable = enable;
    function disable(payload) {
        if (payload === void 0) {
            payload = {};
        }
        return helper_1.actionWrapper({
            group: types_1.Group.LeaveConfirmation,
            payload: payload,
            type: Action.DISABLE,
        });
    }
    exports.disable = disable;
    function confirm(payload) {
        if (payload === void 0) {
            payload = {};
        }
        return helper_1.actionWrapper({
            group: types_1.Group.LeaveConfirmation,
            payload: payload,
            type: Action.CONFIRM,
        });
    }
    exports.confirm = confirm;
    /**
     * Leave Confirmation action set
     */
    var LeaveConfirmation = /** @class */ (function (_super) {
        __extends(LeaveConfirmation, _super);
        /**
         * Returns a new instance of a Leave Confirmation action set
         * @param app the client application
         */
        function LeaveConfirmation(app, options) {
            if (options === void 0) {
                options = {};
            }
            var _this = _super.call(this, app, types_1.Group.LeaveConfirmation, types_1.Group.LeaveConfirmation) || this;
            _this.options = options;
            _this.set(options);
            return _this;
        }
        Object.defineProperty(LeaveConfirmation.prototype, 'payload', {
            /**
             * Returns the action set payload
             */
            get: function () {
                return __assign({ id: this.id }, this.options);
            },
            enumerable: false,
            configurable: true,
        });
        LeaveConfirmation.prototype.set = function (options) {
            this.options = helper_1.getMergedProps(this.options, options);
            return this;
        };
        /**
         * Dispatches a given action with the action set payload
         * @param action the action enum
         * @returns the action set instance
         */
        LeaveConfirmation.prototype.dispatch = function (action) {
            switch (action) {
                case Action.ENABLE: {
                    var enableAction = enable(this.payload);
                    this.app.dispatch(enableAction);
                    break;
                }
                case Action.DISABLE: {
                    var disableAction = disable(this.payload);
                    this.app.dispatch(disableAction);
                    break;
                }
                case Action.CONFIRM: {
                    var confirmAction = confirm(this.payload);
                    this.app.dispatch(confirmAction);
                    break;
                }
            }
            return this;
        };
        return LeaveConfirmation;
    })(ActionSet_1.ActionSet);
    exports.LeaveConfirmation = LeaveConfirmation;
    /**
     * Returns a new instance of a Leave Confirmation action set
     * @param app the client application
     */
    function create(app, options) {
        if (options === void 0) {
            options = {};
        }
        return new LeaveConfirmation(app, options);
    }
    exports.create = create;
})(LeaveConfirmation);

var Loading$5 = {};

(function (exports) {
    var __extends =
        (commonjsGlobal && commonjsGlobal.__extends) ||
        (function () {
            var extendStatics = function (d, b) {
                extendStatics =
                    Object.setPrototypeOf ||
                    ({ __proto__: [] } instanceof Array &&
                        function (d, b) {
                            d.__proto__ = b;
                        }) ||
                    function (d, b) {
                        for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
                    };
                return extendStatics(d, b);
            };
            return function (d, b) {
                if (typeof b !== 'function' && b !== null) throw new TypeError('Class extends value ' + String(b) + ' is not a constructor or null');
                extendStatics(d, b);
                function __() {
                    this.constructor = d;
                }
                d.prototype = b === null ? Object.create(b) : ((__.prototype = b.prototype), new __());
            };
        })();
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.create = exports.Loading = exports.stop = exports.start = exports.Action = void 0;
    var helper_1 = helper;
    var ActionSet_1 = ActionSet$1;
    var types_1 = types$4;
    var Action;
    (function (Action) {
        Action['START'] = 'APP::LOADING::START';
        Action['STOP'] = 'APP::LOADING::STOP';
    })((Action = exports.Action || (exports.Action = {})));
    function start(payload) {
        return helper_1.actionWrapper({
            payload: payload,
            group: types_1.Group.Loading,
            type: Action.START,
        });
    }
    exports.start = start;
    function stop(payload) {
        return helper_1.actionWrapper({
            payload: payload,
            group: types_1.Group.Loading,
            type: Action.STOP,
        });
    }
    exports.stop = stop;
    var Loading = /** @class */ (function (_super) {
        __extends(Loading, _super);
        function Loading(app) {
            return _super.call(this, app, types_1.Group.Loading, types_1.Group.Loading) || this;
        }
        Object.defineProperty(Loading.prototype, 'payload', {
            get: function () {
                return { id: this.id };
            },
            enumerable: false,
            configurable: true,
        });
        Loading.prototype.dispatch = function (action) {
            switch (action) {
                case Action.START:
                    this.app.dispatch(start(this.payload));
                    break;
                case Action.STOP:
                    this.app.dispatch(stop(this.payload));
                    break;
            }
            return this;
        };
        return Loading;
    })(ActionSet_1.ActionSet);
    exports.Loading = Loading;
    function create(app) {
        return new Loading(app);
    }
    exports.create = create;
})(Loading$5);

var Modal$4 = {};

(function (exports) {
    var __extends =
        (commonjsGlobal && commonjsGlobal.__extends) ||
        (function () {
            var extendStatics = function (d, b) {
                extendStatics =
                    Object.setPrototypeOf ||
                    ({ __proto__: [] } instanceof Array &&
                        function (d, b) {
                            d.__proto__ = b;
                        }) ||
                    function (d, b) {
                        for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
                    };
                return extendStatics(d, b);
            };
            return function (d, b) {
                if (typeof b !== 'function' && b !== null) throw new TypeError('Class extends value ' + String(b) + ' is not a constructor or null');
                extendStatics(d, b);
                function __() {
                    this.constructor = d;
                }
                d.prototype = b === null ? Object.create(b) : ((__.prototype = b.prototype), new __());
            };
        })();
    var __assign =
        (commonjsGlobal && commonjsGlobal.__assign) ||
        function () {
            __assign =
                Object.assign ||
                function (t) {
                    for (var s, i = 1, n = arguments.length; i < n; i++) {
                        s = arguments[i];
                        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
                    }
                    return t;
                };
            return __assign.apply(this, arguments);
        };
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.create = exports.ModalIframe = exports.ModalMessage = exports.Modal = exports.isMessageModal = exports.isIframeModal = exports.data = exports.update = exports.clickFooterButton = exports.updateModalSize = exports.closeModal = exports.openModal = exports.Size = exports.Action = void 0;
    var buttonHelper_1 = buttonHelper;
    var helper_1 = helper;
    var ActionSet_1 = ActionSet$1;
    var types_1 = types$4;
    var Button_1 = Button$1;
    var Action;
    (function (Action) {
        Action['OPEN'] = 'APP::MODAL::OPEN';
        Action['CLOSE'] = 'APP::MODAL::CLOSE';
        Action['UPDATE'] = 'APP::MODAL::UPDATE';
        Action['UPDATE_CONTENT'] = 'APP::MODAL::CONTENT::UPDATE';
        Action['FOOTER_BUTTON_CLICK'] = 'APP::MODAL::FOOTER::BUTTON::CLICK';
        Action['FOOTER_BUTTON_UPDATE'] = 'APP::MODAL::FOOTER::BUTTON::UPDATE';
        Action['UPDATE_SIZE'] = 'APP::MODAL::UPDATE_SIZE';
        Action['DATA'] = 'APP::MODAL::DATA';
    })((Action = exports.Action || (exports.Action = {})));
    /**
     * Options available to the Modal `size` param
     * @public
     */
    var Size;
    (function (Size) {
        /** Small modal size */
        Size['Small'] = 'small';
        /** Medium modal size */
        Size['Medium'] = 'medium';
        /** Large modal size (wider than medium) */
        Size['Large'] = 'large';
        /** @deprecated as of 1.6.5 */
        Size['Full'] = 'full';
        /**
         * @deprecated as of 1.12.x
         * @remarks
         * This option has been removed in favour of the `setUpModalAutoSizing` utility.
         * See `app-bridge-utils` package for more information
         */
        Size['Auto'] = 'auto';
    })((Size = exports.Size || (exports.Size = {})));
    var FOOTER_BUTTON_PROPS = {
        group: types_1.Group.Modal,
        subgroups: ['Footer'],
        type: types_1.ComponentType.Button,
    };
    function openModal(modalPayload) {
        return helper_1.actionWrapper({
            group: types_1.Group.Modal,
            payload: modalPayload,
            type: Action.OPEN,
        });
    }
    exports.openModal = openModal;
    function closeModal(modalClosePayload) {
        return helper_1.actionWrapper({
            group: types_1.Group.Modal,
            payload: modalClosePayload,
            type: Action.CLOSE,
        });
    }
    exports.closeModal = closeModal;
    /**
     * Action creator for modal update size action
     * @internal
     */
    function updateModalSize(updateSizePayload) {
        return helper_1.actionWrapper({
            group: types_1.Group.Modal,
            payload: updateSizePayload,
            type: Action.UPDATE_SIZE,
        });
    }
    exports.updateModalSize = updateModalSize;
    function clickFooterButton(id, payload) {
        var component = __assign({ id: id }, FOOTER_BUTTON_PROPS);
        return Button_1.clickButton(types_1.Group.Modal, component, payload);
    }
    exports.clickFooterButton = clickFooterButton;
    function update(payload) {
        return helper_1.actionWrapper({
            payload: payload,
            group: types_1.Group.Modal,
            type: Action.UPDATE,
        });
    }
    exports.update = update;
    function data(payload) {
        return helper_1.actionWrapper({
            payload: payload,
            group: types_1.Group.Modal,
            type: Action.DATA,
        });
    }
    exports.data = data;
    function isIframeModal(options) {
        return typeof options.url === 'string' || typeof options.path === 'string';
    }
    exports.isIframeModal = isIframeModal;
    function isMessageModal(options) {
        return typeof options.message === 'string';
    }
    exports.isMessageModal = isMessageModal;
    var Modal = /** @class */ (function (_super) {
        __extends(Modal, _super);
        function Modal() {
            var _this = (_super !== null && _super.apply(this, arguments)) || this;
            _this.size = Size.Small;
            return _this;
        }
        Object.defineProperty(Modal.prototype, 'footer', {
            get: function () {
                if (!this.footerPrimary && !this.footerSecondary) {
                    return undefined;
                }
                return {
                    buttons: {
                        primary: this.footerPrimary,
                        secondary: this.footerSecondary,
                    },
                };
            },
            enumerable: false,
            configurable: true,
        });
        Object.defineProperty(Modal.prototype, 'footerOptions', {
            get: function () {
                if (!this.footerPrimaryOptions && !this.footerSecondaryOptions) {
                    return undefined;
                }
                return {
                    buttons: {
                        primary: this.footerPrimaryOptions,
                        secondary: this.footerSecondaryOptions,
                    },
                };
            },
            enumerable: false,
            configurable: true,
        });
        Modal.prototype.close = function () {
            this.app.dispatch(closeModal({ id: this.id }));
        };
        Modal.prototype.setFooterPrimaryButton = function (newOptions, updateCb) {
            var _this = this;
            var subgroups = FOOTER_BUTTON_PROPS.subgroups;
            this.footerPrimaryOptions = this.getChildButton(newOptions, this.footerPrimaryOptions);
            this.footerPrimary = this.footerPrimaryOptions
                ? buttonHelper_1.getSingleButton(this, this.footerPrimaryOptions, subgroups, function (newPayload) {
                      _this.updatePrimaryFooterButton(newPayload, updateCb);
                  })
                : undefined;
        };
        Modal.prototype.setFooterSecondaryButtons = function (newOptions, updateCb) {
            var _this = this;
            var subgroups = FOOTER_BUTTON_PROPS.subgroups;
            var newButtons = newOptions || [];
            var currentOptions = (this.footerOptions && this.footerOptions.buttons.secondary) || [];
            this.footerSecondaryOptions = this.getUpdatedChildActions(newButtons, currentOptions);
            this.footerSecondary = this.footerSecondaryOptions
                ? this.footerSecondaryOptions.map(function (action) {
                      return buttonHelper_1.getSingleButton(_this, action, subgroups, function (newPayload) {
                          _this.updateSecondaryFooterButton(newPayload, updateCb);
                      });
                  })
                : undefined;
        };
        Modal.prototype.getChildButton = function (newAction, currentAction) {
            var newButtons = newAction ? [newAction] : [];
            var currentButtons = currentAction ? [currentAction] : [];
            var updatedButton = this.getUpdatedChildActions(newButtons, currentButtons);
            return updatedButton ? updatedButton[0] : undefined;
        };
        Modal.prototype.updatePrimaryFooterButton = function (newPayload, updateCb) {
            if (!this.footer || !this.footer.buttons.primary) {
                return;
            }
            if (helper_1.updateActionFromPayload(this.footer.buttons.primary, newPayload)) {
                updateCb();
            }
        };
        Modal.prototype.updateSecondaryFooterButton = function (newPayload, updateCb) {
            if (!this.footer || !this.footer.buttons || !this.footer.buttons.secondary) {
                return;
            }
            var updated;
            for (var _i = 0, _a = this.footer.buttons.secondary; _i < _a.length; _i++) {
                var action = _a[_i];
                updated = helper_1.updateActionFromPayload(action, newPayload);
                if (updated) {
                    break;
                }
            }
            if (updated) {
                updateCb();
            }
        };
        return Modal;
    })(ActionSet_1.ActionSetWithChildren);
    exports.Modal = Modal;
    var ModalMessage = /** @class */ (function (_super) {
        __extends(ModalMessage, _super);
        function ModalMessage(app, options) {
            var _this = _super.call(this, app, types_1.Group.Modal, types_1.Group.Modal) || this;
            _this.set(options, false);
            return _this;
        }
        Object.defineProperty(ModalMessage.prototype, 'payload', {
            get: function () {
                return __assign(__assign({}, this.options), { footer: this.footer, id: this.id });
            },
            enumerable: false,
            configurable: true,
        });
        Object.defineProperty(ModalMessage.prototype, 'options', {
            get: function () {
                return {
                    footer: this.footerOptions,
                    message: this.message,
                    size: this.size,
                    title: this.title,
                };
            },
            enumerable: false,
            configurable: true,
        });
        ModalMessage.prototype.set = function (options, shouldUpdate) {
            var _this = this;
            if (shouldUpdate === void 0) {
                shouldUpdate = true;
            }
            var mergedOptions = helper_1.getMergedProps(this.options, options);
            var title = mergedOptions.title,
                footer = mergedOptions.footer,
                message = mergedOptions.message,
                size = mergedOptions.size;
            this.title = title;
            this.message = message;
            this.size = size;
            this.setFooterPrimaryButton(footer ? footer.buttons.primary : undefined, function () {
                _this.dispatch(Action.UPDATE);
            });
            this.setFooterSecondaryButtons(footer ? footer.buttons.secondary : undefined, function () {
                _this.dispatch(Action.UPDATE);
            });
            if (shouldUpdate) {
                this.dispatch(Action.UPDATE);
            }
            return this;
        };
        ModalMessage.prototype.dispatch = function (action) {
            switch (action) {
                case Action.OPEN:
                    this.app.dispatch(openModal(this.payload));
                    break;
                case Action.CLOSE:
                    this.close();
                    break;
                case Action.UPDATE:
                    this.app.dispatch(update(this.payload));
                    break;
            }
            return this;
        };
        return ModalMessage;
    })(Modal);
    exports.ModalMessage = ModalMessage;
    var ModalIframe = /** @class */ (function (_super) {
        __extends(ModalIframe, _super);
        function ModalIframe(app, options) {
            var _this = _super.call(this, app, types_1.Group.Modal, types_1.Group.Modal) || this;
            _this.set(options, false);
            return _this;
        }
        Object.defineProperty(ModalIframe.prototype, 'payload', {
            get: function () {
                return __assign(__assign({}, this.options), { footer: this.footer, id: this.id });
            },
            enumerable: false,
            configurable: true,
        });
        Object.defineProperty(ModalIframe.prototype, 'options', {
            get: function () {
                return {
                    footer: this.footerOptions,
                    path: this.path,
                    size: this.size,
                    title: this.title,
                    url: this.url,
                    loading: this.loading,
                };
            },
            enumerable: false,
            configurable: true,
        });
        ModalIframe.prototype.set = function (options, shouldUpdate) {
            var _this = this;
            if (shouldUpdate === void 0) {
                shouldUpdate = true;
            }
            var mergedOptions = helper_1.getMergedProps(this.options, options);
            var title = mergedOptions.title,
                footer = mergedOptions.footer,
                path = mergedOptions.path,
                url = mergedOptions.url,
                size = mergedOptions.size,
                loading = mergedOptions.loading;
            this.title = title;
            this.url = url;
            this.path = path;
            this.size = size;
            this.loading = loading;
            this.setFooterPrimaryButton(footer ? footer.buttons.primary : undefined, function () {
                _this.dispatch(Action.UPDATE);
            });
            this.setFooterSecondaryButtons(footer ? footer.buttons.secondary : undefined, function () {
                _this.dispatch(Action.UPDATE);
            });
            if (shouldUpdate) {
                this.dispatch(Action.UPDATE);
            }
            return this;
        };
        ModalIframe.prototype.dispatch = function (action, payload) {
            switch (action) {
                case Action.OPEN:
                    this.app.dispatch(openModal(this.payload));
                    break;
                case Action.CLOSE:
                    this.close();
                    break;
                case Action.UPDATE:
                    this.app.dispatch(update(this.payload));
                    break;
                case Action.DATA:
                    this.app.dispatch(data(payload || {}));
                    break;
            }
            return this;
        };
        return ModalIframe;
    })(Modal);
    exports.ModalIframe = ModalIframe;
    var create = function (app, options) {
        if (isIframeModal(options)) {
            return new ModalIframe(app, options);
        }
        return new ModalMessage(app, options);
    };
    exports.create = create;
})(Modal$4);

var ModalContent$3 = {};

(function (exports) {
    var __extends =
        (commonjsGlobal && commonjsGlobal.__extends) ||
        (function () {
            var extendStatics = function (d, b) {
                extendStatics =
                    Object.setPrototypeOf ||
                    ({ __proto__: [] } instanceof Array &&
                        function (d, b) {
                            d.__proto__ = b;
                        }) ||
                    function (d, b) {
                        for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
                    };
                return extendStatics(d, b);
            };
            return function (d, b) {
                if (typeof b !== 'function' && b !== null) throw new TypeError('Class extends value ' + String(b) + ' is not a constructor or null');
                extendStatics(d, b);
                function __() {
                    this.constructor = d;
                }
                d.prototype = b === null ? Object.create(b) : ((__.prototype = b.prototype), new __());
            };
        })();
    var __assign =
        (commonjsGlobal && commonjsGlobal.__assign) ||
        function () {
            __assign =
                Object.assign ||
                function (t) {
                    for (var s, i = 1, n = arguments.length; i < n; i++) {
                        s = arguments[i];
                        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
                    }
                    return t;
                };
            return __assign.apply(this, arguments);
        };
    var __awaiter =
        (commonjsGlobal && commonjsGlobal.__awaiter) ||
        function (thisArg, _arguments, P, generator) {
            function adopt(value) {
                return value instanceof P
                    ? value
                    : new P(function (resolve) {
                          resolve(value);
                      });
            }
            return new (P || (P = Promise))(function (resolve, reject) {
                function fulfilled(value) {
                    try {
                        step(generator.next(value));
                    } catch (e) {
                        reject(e);
                    }
                }
                function rejected(value) {
                    try {
                        step(generator['throw'](value));
                    } catch (e) {
                        reject(e);
                    }
                }
                function step(result) {
                    result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
                }
                step((generator = generator.apply(thisArg, _arguments || [])).next());
            });
        };
    var __generator =
        (commonjsGlobal && commonjsGlobal.__generator) ||
        function (thisArg, body) {
            var _ = {
                    label: 0,
                    sent: function () {
                        if (t[0] & 1) throw t[1];
                        return t[1];
                    },
                    trys: [],
                    ops: [],
                },
                f,
                y,
                t,
                g;
            return (
                (g = { next: verb(0), throw: verb(1), return: verb(2) }),
                typeof Symbol === 'function' &&
                    (g[Symbol.iterator] = function () {
                        return this;
                    }),
                g
            );
            function verb(n) {
                return function (v) {
                    return step([n, v]);
                };
            }
            function step(op) {
                if (f) throw new TypeError('Generator is already executing.');
                while (_)
                    try {
                        if (((f = 1), y && (t = op[0] & 2 ? y['return'] : op[0] ? y['throw'] || ((t = y['return']) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)) return t;
                        if (((y = 0), t)) op = [op[0] & 2, t.value];
                        switch (op[0]) {
                            case 0:
                            case 1:
                                t = op;
                                break;
                            case 4:
                                _.label++;
                                return { value: op[1], done: false };
                            case 5:
                                _.label++;
                                y = op[1];
                                op = [0];
                                continue;
                            case 7:
                                op = _.ops.pop();
                                _.trys.pop();
                                continue;
                            default:
                                if (!((t = _.trys), (t = t.length > 0 && t[t.length - 1])) && (op[0] === 6 || op[0] === 2)) {
                                    _ = 0;
                                    continue;
                                }
                                if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                    _.label = op[1];
                                    break;
                                }
                                if (op[0] === 6 && _.label < t[1]) {
                                    _.label = t[1];
                                    t = op;
                                    break;
                                }
                                if (t && _.label < t[2]) {
                                    _.label = t[2];
                                    _.ops.push(op);
                                    break;
                                }
                                if (t[2]) _.ops.pop();
                                _.trys.pop();
                                continue;
                        }
                        op = body.call(thisArg, _);
                    } catch (e) {
                        op = [6, e];
                        y = 0;
                    } finally {
                        f = t = 0;
                    }
                if (op[0] & 5) throw op[1];
                return { value: op[0] ? op[1] : void 0, done: true };
            }
        };
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.create = exports.ModalContent = exports.Action = void 0;
    var helper_1 = helper;
    var ActionSet_1 = ActionSet$1;
    var types_1 = types$4;
    var index_1 = Modal$4;
    var Action;
    (function (Action) {
        Action['LOADING'] = 'LOADING';
        Action['LOADED'] = 'LOADED';
    })((Action = exports.Action || (exports.Action = {})));
    /**
     * A set of Actions for updating the modal component
     * @public
     */
    var ModalContent = /** @class */ (function (_super) {
        __extends(ModalContent, _super);
        function ModalContent(app, options) {
            return _super.call(this, app, types_1.Group.Modal, types_1.Group.Modal, options ? options.id : undefined) || this;
        }
        ModalContent.prototype.loaded = function () {
            this.dispatch(Action.LOADED);
        };
        ModalContent.prototype.loading = function () {
            this.dispatch(Action.LOADING);
        };
        /**
         * @private
         */
        ModalContent.prototype.dispatch = function (action) {
            switch (action) {
                case Action.LOADED:
                    this.dispatchModalAction(index_1.Action.UPDATE_CONTENT, { loading: false });
                    break;
                case Action.LOADING:
                    this.dispatchModalAction(index_1.Action.UPDATE_CONTENT, { loading: true });
                    break;
            }
            return this;
        };
        /**
         * @internal
         */
        ModalContent.prototype.dispatchModalAction = function (type, payload) {
            return __awaiter(this, void 0, void 0, function () {
                var updateAction;
                return __generator(this, function (_a) {
                    updateAction = helper_1.actionWrapper({
                        type: type,
                        group: types_1.Group.Modal,
                        payload: __assign({}, payload),
                    });
                    this.app.dispatch(updateAction);
                    return [2 /*return*/];
                });
            });
        };
        return ModalContent;
    })(ActionSet_1.ActionSet);
    exports.ModalContent = ModalContent;
    /**
     * @public
     */
    function create(app, options) {
        return new ModalContent(app, options);
    }
    exports.create = create;
})(ModalContent$3);

var History = {};

(function (exports) {
    var __extends =
        (commonjsGlobal && commonjsGlobal.__extends) ||
        (function () {
            var extendStatics = function (d, b) {
                extendStatics =
                    Object.setPrototypeOf ||
                    ({ __proto__: [] } instanceof Array &&
                        function (d, b) {
                            d.__proto__ = b;
                        }) ||
                    function (d, b) {
                        for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
                    };
                return extendStatics(d, b);
            };
            return function (d, b) {
                if (typeof b !== 'function' && b !== null) throw new TypeError('Class extends value ' + String(b) + ' is not a constructor or null');
                extendStatics(d, b);
                function __() {
                    this.constructor = d;
                }
                d.prototype = b === null ? Object.create(b) : ((__.prototype = b.prototype), new __());
            };
        })();
    var __assign =
        (commonjsGlobal && commonjsGlobal.__assign) ||
        function () {
            __assign =
                Object.assign ||
                function (t) {
                    for (var s, i = 1, n = arguments.length; i < n; i++) {
                        s = arguments[i];
                        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
                    }
                    return t;
                };
            return __assign.apply(this, arguments);
        };
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.create = exports.History = exports.replace = exports.push = exports.Action = void 0;
    var helper_1 = helper;
    var ActionSet_1 = ActionSet$1;
    var types_1 = types$4;
    var Action;
    (function (Action) {
        Action['PUSH'] = 'APP::NAVIGATION::HISTORY::PUSH';
        Action['REPLACE'] = 'APP::NAVIGATION::HISTORY::REPLACE';
    })((Action = exports.Action || (exports.Action = {})));
    function push(payload) {
        return helper_1.actionWrapper({
            payload: payload,
            group: types_1.Group.Navigation,
            type: Action.PUSH,
        });
    }
    exports.push = push;
    function replace(payload) {
        return helper_1.actionWrapper({
            payload: payload,
            group: types_1.Group.Navigation,
            type: Action.REPLACE,
        });
    }
    exports.replace = replace;
    var History = /** @class */ (function (_super) {
        __extends(History, _super);
        function History(app) {
            return _super.call(this, app, 'History', types_1.Group.Navigation) || this;
        }
        Object.defineProperty(History.prototype, 'payload', {
            get: function () {
                return { id: this.id };
            },
            enumerable: false,
            configurable: true,
        });
        History.prototype.dispatch = function (type, path) {
            var payload = __assign(__assign({}, this.payload), { path: path });
            switch (type) {
                case Action.PUSH:
                    this.app.dispatch(push(payload));
                    break;
                case Action.REPLACE:
                    this.app.dispatch(replace(payload));
                    break;
            }
            return this;
        };
        return History;
    })(ActionSet_1.ActionSet);
    exports.History = History;
    function create(app) {
        return new History(app);
    }
    exports.create = create;
})(History);

var Redirect$1 = {};

(function (exports) {
    var __extends =
        (commonjsGlobal && commonjsGlobal.__extends) ||
        (function () {
            var extendStatics = function (d, b) {
                extendStatics =
                    Object.setPrototypeOf ||
                    ({ __proto__: [] } instanceof Array &&
                        function (d, b) {
                            d.__proto__ = b;
                        }) ||
                    function (d, b) {
                        for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
                    };
                return extendStatics(d, b);
            };
            return function (d, b) {
                if (typeof b !== 'function' && b !== null) throw new TypeError('Class extends value ' + String(b) + ' is not a constructor or null');
                extendStatics(d, b);
                function __() {
                    this.constructor = d;
                }
                d.prototype = b === null ? Object.create(b) : ((__.prototype = b.prototype), new __());
            };
        })();
    var __assign =
        (commonjsGlobal && commonjsGlobal.__assign) ||
        function () {
            __assign =
                Object.assign ||
                function (t) {
                    for (var s, i = 1, n = arguments.length; i < n; i++) {
                        s = arguments[i];
                        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
                    }
                    return t;
                };
            return __assign.apply(this, arguments);
        };
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.create =
        exports.Redirect =
        exports.isRemotePayload =
        exports.isAdminSectionPayload =
        exports.isAdminPathPayload =
        exports.isAppPayload =
        exports.toDestination =
        exports.toApp =
        exports.toRemote =
        exports.toAdminSection =
        exports.toAdminPath =
        exports.isProductVariantCreateResourcePayload =
        exports.isProductVariantResourcePayload =
        exports.isCreateResourcePayload =
        exports.isResourcePayload =
        exports.ResourceType =
        exports.Action =
            void 0;
    var helper_1 = helper;
    var ActionSet_1 = ActionSet$1;
    var types_1 = types$4;
    var Action;
    (function (Action) {
        Action['ADMIN_SECTION'] = 'APP::NAVIGATION::REDIRECT::ADMIN::SECTION';
        Action['ADMIN_PATH'] = 'APP::NAVIGATION::REDIRECT::ADMIN::PATH';
        Action['REMOTE'] = 'APP::NAVIGATION::REDIRECT::REMOTE';
        Action['APP'] = 'APP::NAVIGATION::REDIRECT::APP';
    })((Action = exports.Action || (exports.Action = {})));
    (function (ResourceType) {
        ResourceType['Product'] = 'products';
        ResourceType['Collection'] = 'collections';
        ResourceType['Order'] = 'orders';
        ResourceType['Customer'] = 'customers';
        ResourceType['Discount'] = 'discounts';
    })(exports.ResourceType || (exports.ResourceType = {}));
    function isResourcePayload(resource) {
        // tslint:disable-next-line:no-boolean-literal-compare
        return typeof resource.id === 'string';
    }
    exports.isResourcePayload = isResourcePayload;
    function isCreateResourcePayload(resource) {
        // tslint:disable-next-line:no-boolean-literal-compare
        return resource.create === true;
    }
    exports.isCreateResourcePayload = isCreateResourcePayload;
    function isProductVariantResourcePayload(resource) {
        var castResource = resource;
        // tslint:disable-next-line:no-boolean-literal-compare
        return castResource.id !== undefined && castResource.variant !== undefined;
    }
    exports.isProductVariantResourcePayload = isProductVariantResourcePayload;
    function isProductVariantCreateResourcePayload(resource) {
        if (!isProductVariantResourcePayload(resource)) {
            return false;
        }
        return isCreateResourcePayload(resource.variant);
    }
    exports.isProductVariantCreateResourcePayload = isProductVariantCreateResourcePayload;
    function toAdminPath(payload) {
        return helper_1.actionWrapper({
            payload: payload,
            group: types_1.Group.Navigation,
            type: Action.ADMIN_PATH,
        });
    }
    exports.toAdminPath = toAdminPath;
    function toAdminSection(payload) {
        return helper_1.actionWrapper({
            payload: payload,
            group: types_1.Group.Navigation,
            type: Action.ADMIN_SECTION,
        });
    }
    exports.toAdminSection = toAdminSection;
    function toRemote(payload) {
        return helper_1.actionWrapper({
            payload: payload,
            group: types_1.Group.Navigation,
            type: Action.REMOTE,
        });
    }
    exports.toRemote = toRemote;
    function toApp(payload) {
        return helper_1.actionWrapper({
            payload: payload,
            group: types_1.Group.Navigation,
            type: Action.APP,
        });
    }
    exports.toApp = toApp;
    function toDestination(action, payload, id) {
        switch (action) {
            case Action.APP: {
                var appPayload = isAppPayload(payload) ? payload : { path: payload };
                return toApp(__assign({ id: id }, appPayload));
            }
            case Action.ADMIN_PATH: {
                var adminPathPayload = isAdminPathPayload(payload) ? payload : { path: payload };
                return toAdminPath(__assign({ id: id }, adminPathPayload));
            }
            case Action.ADMIN_SECTION: {
                var adminSectionPayload = isAdminSectionPayload(payload) ? payload : { section: payload };
                return toAdminSection(__assign({ id: id }, adminSectionPayload));
            }
            case Action.REMOTE: {
                var remotePayload = isRemotePayload(payload) ? payload : { url: payload };
                return toRemote(__assign({ id: id }, remotePayload));
            }
        }
    }
    exports.toDestination = toDestination;
    function isAppPayload(payload) {
        return typeof payload === 'object' && Object.prototype.hasOwnProperty.call(payload, 'path');
    }
    exports.isAppPayload = isAppPayload;
    function isAdminPathPayload(payload) {
        return typeof payload === 'object' && Object.prototype.hasOwnProperty.call(payload, 'path');
    }
    exports.isAdminPathPayload = isAdminPathPayload;
    function isAdminSectionPayload(payload) {
        return typeof payload === 'object' && typeof payload.section === 'object' && Object.prototype.hasOwnProperty.call(payload.section, 'name');
    }
    exports.isAdminSectionPayload = isAdminSectionPayload;
    function isRemotePayload(payload) {
        return typeof payload === 'object' && Object.prototype.hasOwnProperty.call(payload, 'url');
    }
    exports.isRemotePayload = isRemotePayload;
    var Redirect = /** @class */ (function (_super) {
        __extends(Redirect, _super);
        function Redirect(app) {
            return _super.call(this, app, 'Redirect', types_1.Group.Navigation) || this;
        }
        Object.defineProperty(Redirect.prototype, 'payload', {
            get: function () {
                return { id: this.id };
            },
            enumerable: false,
            configurable: true,
        });
        Redirect.prototype.dispatch = function (action, payload) {
            var redirectAction = toDestination(action, payload, this.payload.id);
            this.app.dispatch(redirectAction);
            return this;
        };
        return Redirect;
    })(ActionSet_1.ActionSet);
    exports.Redirect = Redirect;
    function create(app) {
        return new Redirect(app);
    }
    exports.create = create;
})(Redirect$1);

var Print = {};

(function (exports) {
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.app = exports.Action = void 0;
    var helper_1 = helper;
    var types_1 = types$4;
    var Action;
    (function (Action) {
        Action['APP'] = 'APP::PRINT::APP';
    })((Action = exports.Action || (exports.Action = {})));
    function app() {
        return helper_1.actionWrapper({
            group: types_1.Group.Print,
            type: Action.APP,
        });
    }
    exports.app = app;
})(Print);

var ResourcePicker$3 = {};

(function (exports) {
    var __extends =
        (commonjsGlobal && commonjsGlobal.__extends) ||
        (function () {
            var extendStatics = function (d, b) {
                extendStatics =
                    Object.setPrototypeOf ||
                    ({ __proto__: [] } instanceof Array &&
                        function (d, b) {
                            d.__proto__ = b;
                        }) ||
                    function (d, b) {
                        for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
                    };
                return extendStatics(d, b);
            };
            return function (d, b) {
                if (typeof b !== 'function' && b !== null) throw new TypeError('Class extends value ' + String(b) + ' is not a constructor or null');
                extendStatics(d, b);
                function __() {
                    this.constructor = d;
                }
                d.prototype = b === null ? Object.create(b) : ((__.prototype = b.prototype), new __());
            };
        })();
    var __assign =
        (commonjsGlobal && commonjsGlobal.__assign) ||
        function () {
            __assign =
                Object.assign ||
                function (t) {
                    for (var s, i = 1, n = arguments.length; i < n; i++) {
                        s = arguments[i];
                        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
                    }
                    return t;
                };
            return __assign.apply(this, arguments);
        };
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.create =
        exports.ResourcePicker =
        exports.update =
        exports.close =
        exports.cancel =
        exports.open =
        exports.select =
        exports.ActionVerb =
        exports.ResourceType =
        exports.ProductStatus =
        exports.ProductVariantInventoryManagement =
        exports.ProductVariantInventoryPolicy =
        exports.WeightUnit =
        exports.FulfillmentServiceType =
        exports.CollectionSortOrder =
        exports.Action =
            void 0;
    var helper_1 = helper;
    var ActionSet_1 = ActionSet$1;
    var types_1 = types$4;
    var Action;
    (function (Action) {
        Action['OPEN'] = 'APP::RESOURCE_PICKER::OPEN';
        Action['SELECT'] = 'APP::RESOURCE_PICKER::SELECT';
        // Deprecated in 0.5.0
        Action['CLOSE'] = 'APP::RESOURCE_PICKER::CLOSE';
        Action['UPDATE'] = 'APP::RESOURCE_PICKER::UPDATE';
        Action['CANCEL'] = 'APP::RESOURCE_PICKER::CANCEL';
    })((Action = exports.Action || (exports.Action = {})));
    (function (CollectionSortOrder) {
        CollectionSortOrder['Manual'] = 'MANUAL';
        CollectionSortOrder['BestSelling'] = 'BEST_SELLING';
        CollectionSortOrder['AlphaAsc'] = 'ALPHA_ASC';
        CollectionSortOrder['AlphaDesc'] = 'ALPHA_DESC';
        CollectionSortOrder['PriceDesc'] = 'PRICE_DESC';
        CollectionSortOrder['PriceAsc'] = 'PRICE_ASC';
        CollectionSortOrder['CreatedDesc'] = 'CREATED_DESC';
        CollectionSortOrder['Created'] = 'CREATED';
    })(exports.CollectionSortOrder || (exports.CollectionSortOrder = {}));
    (function (FulfillmentServiceType) {
        FulfillmentServiceType['GiftCard'] = 'GIFT_CARD';
        FulfillmentServiceType['Manual'] = 'MANUAL';
        FulfillmentServiceType['ThirdParty'] = 'THIRD_PARTY';
    })(exports.FulfillmentServiceType || (exports.FulfillmentServiceType = {}));
    (function (WeightUnit) {
        WeightUnit['Kilograms'] = 'KILOGRAMS';
        WeightUnit['Grams'] = 'GRAMS';
        WeightUnit['Pounds'] = 'POUNDS';
        WeightUnit['Ounces'] = 'OUNCES';
    })(exports.WeightUnit || (exports.WeightUnit = {}));
    (function (ProductVariantInventoryPolicy) {
        ProductVariantInventoryPolicy['Deny'] = 'DENY';
        ProductVariantInventoryPolicy['Continue'] = 'CONTINUE';
    })(exports.ProductVariantInventoryPolicy || (exports.ProductVariantInventoryPolicy = {}));
    (function (ProductVariantInventoryManagement) {
        ProductVariantInventoryManagement['Shopify'] = 'SHOPIFY';
        ProductVariantInventoryManagement['NotManaged'] = 'NOT_MANAGED';
        ProductVariantInventoryManagement['FulfillmentService'] = 'FULFILLMENT_SERVICE';
    })(exports.ProductVariantInventoryManagement || (exports.ProductVariantInventoryManagement = {}));
    (function (ProductStatus) {
        ProductStatus['Active'] = 'ACTIVE';
        ProductStatus['Archived'] = 'ARCHIVED';
        ProductStatus['Draft'] = 'DRAFT';
    })(exports.ProductStatus || (exports.ProductStatus = {}));
    var ResourceType;
    (function (ResourceType) {
        ResourceType['Product'] = 'product';
        ResourceType['ProductVariant'] = 'variant';
        ResourceType['Collection'] = 'collection';
    })((ResourceType = exports.ResourceType || (exports.ResourceType = {})));
    var ActionVerb;
    (function (ActionVerb) {
        ActionVerb['Add'] = 'add';
        ActionVerb['Select'] = 'select';
    })((ActionVerb = exports.ActionVerb || (exports.ActionVerb = {})));
    function select(payload) {
        return helper_1.actionWrapper({
            payload: payload,
            group: types_1.Group.ResourcePicker,
            type: Action.SELECT,
        });
    }
    exports.select = select;
    function open(payload) {
        return helper_1.actionWrapper({
            payload: payload,
            group: types_1.Group.ResourcePicker,
            type: Action.OPEN,
        });
    }
    exports.open = open;
    function cancel(payload) {
        return helper_1.actionWrapper({
            payload: payload,
            group: types_1.Group.ResourcePicker,
            type: Action.CANCEL,
        });
    }
    exports.cancel = cancel;
    function close(payload) {
        return helper_1.actionWrapper({
            payload: payload,
            group: types_1.Group.ResourcePicker,
            type: Action.CANCEL,
        });
    }
    exports.close = close;
    function update(payload) {
        return helper_1.actionWrapper({
            payload: payload,
            group: types_1.Group.ResourcePicker,
            type: Action.UPDATE,
        });
    }
    exports.update = update;
    var ResourcePicker = /** @class */ (function (_super) {
        __extends(ResourcePicker, _super);
        function ResourcePicker(app, options, resourceType) {
            var _this = _super.call(this, app, types_1.Group.ResourcePicker, types_1.Group.ResourcePicker) || this;
            _this.initialSelectionIds = [];
            _this.selection = [];
            _this.resourceType = resourceType;
            _this.set(options, false);
            return _this;
        }
        Object.defineProperty(ResourcePicker.prototype, 'payload', {
            get: function () {
                return __assign(__assign({}, this.options), { id: this.id, resourceType: this.resourceType });
            },
            enumerable: false,
            configurable: true,
        });
        Object.defineProperty(ResourcePicker.prototype, 'options', {
            get: function () {
                var options = {
                    initialQuery: this.initialQuery,
                    selectMultiple: this.selectMultiple,
                    initialSelectionIds: this.initialSelectionIds,
                    showHidden: this.showHidden,
                    actionVerb: this.actionVerb,
                };
                if (this.resourceType === ResourceType.Product) {
                    var productOptions = __assign(__assign({}, options), { showVariants: this.showVariants, showDraft: this.showDraft, showArchived: this.showArchived, showDraftBadge: this.showDraftBadge, showArchivedBadge: this.showArchivedBadge });
                    return productOptions;
                }
                return options;
            },
            enumerable: false,
            configurable: true,
        });
        ResourcePicker.prototype.set = function (options, shouldUpdate) {
            if (shouldUpdate === void 0) {
                shouldUpdate = true;
            }
            var mergedOptions = helper_1.getMergedProps(this.options, options);
            var initialQuery = mergedOptions.initialQuery,
                _a = mergedOptions.initialSelectionIds,
                initialSelectionIds = _a === void 0 ? [] : _a,
                _b = mergedOptions.showHidden,
                showHidden = _b === void 0 ? true : _b,
                _c = mergedOptions.showVariants,
                showVariants = _c === void 0 ? true : _c,
                _d = mergedOptions.showDraft,
                showDraft = _d === void 0 ? true : _d,
                _e = mergedOptions.showArchived,
                showArchived = _e === void 0 ? true : _e,
                _f = mergedOptions.showDraftBadge,
                showDraftBadge = _f === void 0 ? false : _f,
                _g = mergedOptions.showArchivedBadge,
                showArchivedBadge = _g === void 0 ? false : _g,
                _h = mergedOptions.selectMultiple,
                selectMultiple = _h === void 0 ? true : _h,
                _j = mergedOptions.actionVerb,
                actionVerb = _j === void 0 ? ActionVerb.Add : _j;
            this.initialQuery = initialQuery;
            this.initialSelectionIds = initialSelectionIds;
            this.showHidden = showHidden;
            this.showVariants = showVariants;
            this.showDraft = showDraft;
            this.showArchived = showArchived;
            this.showDraftBadge = showDraftBadge;
            this.showArchivedBadge = showArchivedBadge;
            this.selectMultiple = selectMultiple;
            this.actionVerb = actionVerb;
            if (shouldUpdate) {
                this.update();
            }
            return this;
        };
        ResourcePicker.prototype.dispatch = function (action, selection) {
            if (action === Action.OPEN) {
                this.open();
            } else if (action === Action.UPDATE) {
                this.update();
            } else if (action === Action.CLOSE || action === Action.CANCEL) {
                this.cancel();
            } else if (action === Action.SELECT) {
                this.selection = selection;
                this.app.dispatch(select({ id: this.id, selection: this.selection }));
            }
            return this;
        };
        ResourcePicker.prototype.update = function () {
            this.app.dispatch(update(this.payload));
        };
        ResourcePicker.prototype.open = function () {
            this.app.dispatch(open(this.payload));
        };
        ResourcePicker.prototype.cancel = function () {
            this.app.dispatch(cancel({ id: this.id }));
        };
        ResourcePicker.prototype.close = function () {
            this.cancel();
        };
        return ResourcePicker;
    })(ActionSet_1.ActionSet);
    exports.ResourcePicker = ResourcePicker;
    var create = function (app, baseOptions) {
        var resourceType = baseOptions.resourceType,
            _a = baseOptions.options,
            options = _a === void 0 ? {} : _a;
        return new ResourcePicker(app, options, resourceType);
    };
    exports.create = create;
})(ResourcePicker$3);

var Scanner = {};

(function (exports) {
    var __extends =
        (commonjsGlobal && commonjsGlobal.__extends) ||
        (function () {
            var extendStatics = function (d, b) {
                extendStatics =
                    Object.setPrototypeOf ||
                    ({ __proto__: [] } instanceof Array &&
                        function (d, b) {
                            d.__proto__ = b;
                        }) ||
                    function (d, b) {
                        for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
                    };
                return extendStatics(d, b);
            };
            return function (d, b) {
                if (typeof b !== 'function' && b !== null) throw new TypeError('Class extends value ' + String(b) + ' is not a constructor or null');
                extendStatics(d, b);
                function __() {
                    this.constructor = d;
                }
                d.prototype = b === null ? Object.create(b) : ((__.prototype = b.prototype), new __());
            };
        })();
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.capture = exports.openCamera = exports.create = exports.Scanner = exports.Action = void 0;
    var helper_1 = helper;
    var ActionSet_1 = ActionSet$1;
    var types_1 = types$4;
    /**
     * Action Types for the Features group
     * @public
     */
    var Action;
    (function (Action) {
        Action['OPEN_CAMERA'] = 'APP::SCANNER::OPEN::CAMERA';
        Action['CAPTURE'] = 'APP::SCANNER::CAPTURE';
    })((Action = exports.Action || (exports.Action = {})));
    /**
     * A set of Actions for displaying a Camera Scanner component
     * @public
     */
    var Scanner = /** @class */ (function (_super) {
        __extends(Scanner, _super);
        function Scanner(app, options) {
            return _super.call(this, app, types_1.Group.Scanner, types_1.Group.Scanner, options ? options.id : undefined) || this;
        }
        /**
         * @public
         */
        Scanner.prototype.dispatch = function (action) {
            switch (action) {
                case Action.OPEN_CAMERA:
                    this.dispatchScannerAction(Action.OPEN_CAMERA);
                    break;
            }
            return this;
        };
        /**
         * @internal
         */
        Scanner.prototype.dispatchScannerAction = function (type) {
            this.app.dispatch(
                helper_1.actionWrapper({
                    type: type,
                    group: types_1.Group.Scanner,
                    payload: {
                        id: this.id,
                    },
                })
            );
        };
        return Scanner;
    })(ActionSet_1.ActionSet);
    exports.Scanner = Scanner;
    /**
     * @public
     */
    function create(app, options) {
        return new Scanner(app, options);
    }
    exports.create = create;
    function openCamera() {
        return helper_1.actionWrapper({
            group: types_1.Group.Scanner,
            type: Action.OPEN_CAMERA,
        });
    }
    exports.openCamera = openCamera;
    function capture(payload) {
        return helper_1.actionWrapper({
            group: types_1.Group.Scanner,
            type: Action.CAPTURE,
            payload: payload,
        });
    }
    exports.capture = capture;
})(Scanner);

var SessionToken$1 = {};

(function (exports) {
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.respond = exports.request = exports.Action = void 0;
    var helper_1 = helper;
    var types_1 = types$4;
    var Action;
    (function (Action) {
        Action['REQUEST'] = 'APP::SESSION_TOKEN::REQUEST';
        Action['RESPOND'] = 'APP::SESSION_TOKEN::RESPOND';
    })((Action = exports.Action || (exports.Action = {})));
    function request() {
        return helper_1.actionWrapper({
            group: types_1.Group.SessionToken,
            type: Action.REQUEST,
        });
    }
    exports.request = request;
    function respond(sessionToken) {
        return helper_1.actionWrapper({
            payload: sessionToken,
            group: types_1.Group.SessionToken,
            type: Action.RESPOND,
        });
    }
    exports.respond = respond;
})(SessionToken$1);

var TitleBar$3 = {};

var buttonGroupHelper = {};

Object.defineProperty(buttonGroupHelper, '__esModule', { value: true });
buttonGroupHelper.getGroupedButton = void 0;
var ButtonGroup_1 = ButtonGroup$1;
function getGroupedButton(action, button, subgroups, updateCb) {
    action.addChild(button, action.group, subgroups);
    var id = button.id,
        label = button.label,
        disabled = button.disabled,
        buttons = button.buttons,
        plain = button.plain;
    action.subscribeToChild(button, ButtonGroup_1.Action.UPDATE, updateCb);
    return { id: id, label: label, buttons: buttons, disabled: disabled, plain: plain };
}
buttonGroupHelper.getGroupedButton = getGroupedButton;

(function (exports) {
    var __extends =
        (commonjsGlobal && commonjsGlobal.__extends) ||
        (function () {
            var extendStatics = function (d, b) {
                extendStatics =
                    Object.setPrototypeOf ||
                    ({ __proto__: [] } instanceof Array &&
                        function (d, b) {
                            d.__proto__ = b;
                        }) ||
                    function (d, b) {
                        for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
                    };
                return extendStatics(d, b);
            };
            return function (d, b) {
                if (typeof b !== 'function' && b !== null) throw new TypeError('Class extends value ' + String(b) + ' is not a constructor or null');
                extendStatics(d, b);
                function __() {
                    this.constructor = d;
                }
                d.prototype = b === null ? Object.create(b) : ((__.prototype = b.prototype), new __());
            };
        })();
    var __assign =
        (commonjsGlobal && commonjsGlobal.__assign) ||
        function () {
            __assign =
                Object.assign ||
                function (t) {
                    for (var s, i = 1, n = arguments.length; i < n; i++) {
                        s = arguments[i];
                        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
                    }
                    return t;
                };
            return __assign.apply(this, arguments);
        };
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.create = exports.TitleBar = exports.update = exports.clickBreadcrumb = exports.clickActionButton = exports.Action = void 0;
    var Button_1 = Button$1;
    var ButtonGroup_1 = ButtonGroup$1;
    var buttonGroupHelper_1 = buttonGroupHelper;
    var buttonHelper_1 = buttonHelper;
    var helper_1 = helper;
    var ActionSet_1 = ActionSet$1;
    var types_1 = types$4;
    var Action;
    (function (Action) {
        Action['UPDATE'] = 'APP::TITLEBAR::UPDATE';
        Action['BUTTON_CLICK'] = 'APP::TITLEBAR::BUTTONS::BUTTON::CLICK';
        Action['BUTTON_UPDATE'] = 'APP::TITLEBAR::BUTTONS::BUTTON::UPDATE';
        Action['BUTTON_GROUP_UPDATE'] = 'APP::TITLEBAR::BUTTONS::BUTTONGROUP::UPDATE';
        Action['BREADCRUMBS_CLICK'] = 'APP::TITLEBAR::BREADCRUMBS::BUTTON::CLICK';
        Action['BREADCRUMBS_UPDATE'] = 'APP::TITLEBAR::BREADCRUMBS::BUTTON::UPDATE';
    })((Action = exports.Action || (exports.Action = {})));
    var TITLEBAR_BUTTON_PROPS = {
        group: types_1.Group.TitleBar,
        subgroups: ['Buttons'],
    };
    var BREADCRUMB_BUTTON_PROPS = {
        group: types_1.Group.TitleBar,
        subgroups: ['Breadcrumbs'],
        type: types_1.ComponentType.Button,
    };
    function clickActionButton(id, payload) {
        var type = types_1.ComponentType.Button;
        var component = __assign({ id: id, type: type }, TITLEBAR_BUTTON_PROPS);
        return Button_1.clickButton(types_1.Group.TitleBar, component, payload);
    }
    exports.clickActionButton = clickActionButton;
    function clickBreadcrumb(id, payload) {
        var component = __assign({ id: id }, BREADCRUMB_BUTTON_PROPS);
        return Button_1.clickButton(types_1.Group.TitleBar, component, payload);
    }
    exports.clickBreadcrumb = clickBreadcrumb;
    function update(payload) {
        return helper_1.actionWrapper({
            payload: payload,
            group: types_1.Group.TitleBar,
            type: Action.UPDATE,
        });
    }
    exports.update = update;
    var TitleBar = /** @class */ (function (_super) {
        __extends(TitleBar, _super);
        function TitleBar(app, options) {
            var _this = _super.call(this, app, types_1.Group.TitleBar, types_1.Group.TitleBar) || this;
            // Trigger 'update' on creation
            _this.set(options);
            return _this;
        }
        Object.defineProperty(TitleBar.prototype, 'buttons', {
            get: function () {
                if (!this.primary && !this.secondary) {
                    return undefined;
                }
                return {
                    primary: this.primary,
                    secondary: this.secondary,
                };
            },
            enumerable: false,
            configurable: true,
        });
        Object.defineProperty(TitleBar.prototype, 'buttonsOptions', {
            get: function () {
                if (!this.primaryOptions && !this.secondaryOptions) {
                    return undefined;
                }
                return {
                    primary: this.primaryOptions,
                    secondary: this.secondaryOptions,
                };
            },
            enumerable: false,
            configurable: true,
        });
        Object.defineProperty(TitleBar.prototype, 'options', {
            get: function () {
                return {
                    breadcrumbs: this.breadcrumbsOption,
                    buttons: this.buttonsOptions,
                    title: this.title,
                };
            },
            enumerable: false,
            configurable: true,
        });
        Object.defineProperty(TitleBar.prototype, 'payload', {
            get: function () {
                return __assign(__assign({}, this.options), { breadcrumbs: this.breadcrumb, buttons: this.buttons, id: this.id });
            },
            enumerable: false,
            configurable: true,
        });
        TitleBar.prototype.set = function (options, shouldUpdate) {
            if (shouldUpdate === void 0) {
                shouldUpdate = true;
            }
            var mergedOptions = helper_1.getMergedProps(this.options, options);
            var title = mergedOptions.title,
                buttons = mergedOptions.buttons,
                breadcrumbs = mergedOptions.breadcrumbs;
            this.title = title;
            this.setBreadcrumbs(breadcrumbs);
            this.setPrimaryButton(buttons ? buttons.primary : undefined);
            this.setSecondaryButton(buttons ? buttons.secondary : undefined);
            if (shouldUpdate) {
                this.dispatch(Action.UPDATE);
            }
            return this;
        };
        TitleBar.prototype.dispatch = function (action) {
            switch (action) {
                case Action.UPDATE:
                    this.app.dispatch(update(this.payload));
                    break;
            }
            return this;
        };
        TitleBar.prototype.getButton = function (button, subgroups, updateCb) {
            if (button instanceof ButtonGroup_1.ButtonGroup) {
                return buttonGroupHelper_1.getGroupedButton(this, button, subgroups, updateCb);
            }
            return buttonHelper_1.getSingleButton(this, button, subgroups, updateCb);
        };
        TitleBar.prototype.updatePrimaryButton = function (newPayload) {
            if (!this.primary) {
                return;
            }
            if (helper_1.updateActionFromPayload(this.primary, newPayload)) {
                this.dispatch(Action.UPDATE);
            }
        };
        TitleBar.prototype.updateSecondaryButtons = function (newPayload) {
            if (!this.secondary) {
                return;
            }
            var buttonToUpdate = this.secondary.find(function (action) {
                return action.id === newPayload.id;
            });
            if (!buttonToUpdate) {
                return;
            }
            var updated = false;
            if (ButtonGroup_1.isGroupedButtonPayload(newPayload)) {
                updated = helper_1.updateActionFromPayload(buttonToUpdate, newPayload);
            } else {
                updated = helper_1.updateActionFromPayload(buttonToUpdate, newPayload);
            }
            if (updated) {
                this.dispatch(Action.UPDATE);
            }
        };
        TitleBar.prototype.updateBreadcrumbButton = function (newPayload) {
            if (!this.breadcrumb) {
                return;
            }
            if (helper_1.updateActionFromPayload(this.breadcrumb, newPayload)) {
                this.dispatch(Action.UPDATE);
            }
        };
        TitleBar.prototype.setPrimaryButton = function (newOptions) {
            this.primaryOptions = this.getChildButton(newOptions, this.primaryOptions);
            this.primary = this.primaryOptions ? this.getButton(this.primaryOptions, TITLEBAR_BUTTON_PROPS.subgroups, this.updatePrimaryButton) : undefined;
        };
        TitleBar.prototype.setSecondaryButton = function (newOptions) {
            var _this = this;
            var newButtons = newOptions || [];
            var currentButtons = this.secondaryOptions || [];
            this.secondaryOptions = this.getUpdatedChildActions(newButtons, currentButtons);
            this.secondary = this.secondaryOptions
                ? this.secondaryOptions.map(function (action) {
                      return _this.getButton(action, TITLEBAR_BUTTON_PROPS.subgroups, _this.updateSecondaryButtons);
                  })
                : undefined;
        };
        TitleBar.prototype.setBreadcrumbs = function (breadcrumb) {
            this.breadcrumbsOption = this.getChildButton(breadcrumb, this.breadcrumbsOption);
            this.breadcrumb = this.breadcrumbsOption ? this.getButton(this.breadcrumbsOption, BREADCRUMB_BUTTON_PROPS.subgroups, this.updateBreadcrumbButton) : undefined;
        };
        TitleBar.prototype.getChildButton = function (newAction, currentAction) {
            var newButtons = newAction ? [newAction] : [];
            var currentButtons = currentAction ? [currentAction] : [];
            var updatedButton = this.getUpdatedChildActions(newButtons, currentButtons);
            return updatedButton ? updatedButton[0] : undefined;
        };
        return TitleBar;
    })(ActionSet_1.ActionSetWithChildren);
    exports.TitleBar = TitleBar;
    function create(app, options) {
        return new TitleBar(app, options);
    }
    exports.create = create;
})(TitleBar$3);

var ContextualSaveBar$2 = {};

(function (exports) {
    var __extends =
        (commonjsGlobal && commonjsGlobal.__extends) ||
        (function () {
            var extendStatics = function (d, b) {
                extendStatics =
                    Object.setPrototypeOf ||
                    ({ __proto__: [] } instanceof Array &&
                        function (d, b) {
                            d.__proto__ = b;
                        }) ||
                    function (d, b) {
                        for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
                    };
                return extendStatics(d, b);
            };
            return function (d, b) {
                if (typeof b !== 'function' && b !== null) throw new TypeError('Class extends value ' + String(b) + ' is not a constructor or null');
                extendStatics(d, b);
                function __() {
                    this.constructor = d;
                }
                d.prototype = b === null ? Object.create(b) : ((__.prototype = b.prototype), new __());
            };
        })();
    var __assign =
        (commonjsGlobal && commonjsGlobal.__assign) ||
        function () {
            __assign =
                Object.assign ||
                function (t) {
                    for (var s, i = 1, n = arguments.length; i < n; i++) {
                        s = arguments[i];
                        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
                    }
                    return t;
                };
            return __assign.apply(this, arguments);
        };
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.create = exports.ContextualSaveBar = exports.discard = exports.save = exports.hide = exports.show = exports.Action = void 0;
    var helper_1 = helper;
    var ActionSet_1 = ActionSet$1;
    var types_1 = types$4;
    /**
     * ContextualSaveBar action enum
     */
    var Action;
    (function (Action) {
        Action['DISCARD'] = 'APP::CONTEXTUAL_SAVE_BAR::DISCARD';
        Action['SAVE'] = 'APP::CONTEXTUAL_SAVE_BAR::SAVE';
        Action['SHOW'] = 'APP::CONTEXTUAL_SAVE_BAR::SHOW';
        Action['HIDE'] = 'APP::CONTEXTUAL_SAVE_BAR::HIDE';
        Action['UPDATE'] = 'APP::CONTEXTUAL_SAVE_BAR::UPDATE';
    })((Action = exports.Action || (exports.Action = {})));
    function createContextBarAction(action, payload) {
        return helper_1.actionWrapper({
            group: types_1.Group.ContextualSaveBar,
            type: action,
            payload: payload,
        });
    }
    function show(payload) {
        return createContextBarAction(Action.SHOW, payload);
    }
    exports.show = show;
    function hide(payload) {
        return createContextBarAction(Action.HIDE, payload);
    }
    exports.hide = hide;
    function save(payload) {
        return createContextBarAction(Action.SAVE, payload);
    }
    exports.save = save;
    function discard(payload) {
        return createContextBarAction(Action.DISCARD, payload);
    }
    exports.discard = discard;
    /**
     * ContextualSaveBar action set
     */
    var ContextualSaveBar = /** @class */ (function (_super) {
        __extends(ContextualSaveBar, _super);
        /**
         * Returns a new instance of a ContextualSaveBar action set
         * @param app the client application
         */
        function ContextualSaveBar(app, options) {
            if (options === void 0) {
                options = {};
            }
            var _this = _super.call(this, app, types_1.Group.ContextualSaveBar, types_1.Group.ContextualSaveBar) || this;
            _this.options = options;
            _this.set(options, false);
            return _this;
        }
        Object.defineProperty(ContextualSaveBar.prototype, 'payload', {
            /**
             * Returns the action set payload
             */
            get: function () {
                return __assign({ id: this.id }, this.options);
            },
            enumerable: false,
            configurable: true,
        });
        ContextualSaveBar.prototype.set = function (options, shouldUpdate) {
            if (shouldUpdate === void 0) {
                shouldUpdate = true;
            }
            var mergedOptions = helper_1.getMergedProps(this.options, options);
            this.options = mergedOptions;
            if (shouldUpdate) {
                this.dispatch(Action.UPDATE);
            }
            return this;
        };
        /**
         * Dispatches a given action with the action set payload
         * @param action the action enum
         * @returns the action set instance
         */
        ContextualSaveBar.prototype.dispatch = function (action) {
            this.app.dispatch(createContextBarAction(action, this.payload));
            return this;
        };
        return ContextualSaveBar;
    })(ActionSet_1.ActionSet);
    exports.ContextualSaveBar = ContextualSaveBar;
    /**
     * Returns a new instance of a ContextualSaveBar action set
     * @param app the client application
     *
     */
    function create(app, options) {
        return new ContextualSaveBar(app, options);
    }
    exports.create = create;
})(ContextualSaveBar$2);

var Share = {};

(function (exports) {
    var __extends =
        (commonjsGlobal && commonjsGlobal.__extends) ||
        (function () {
            var extendStatics = function (d, b) {
                extendStatics =
                    Object.setPrototypeOf ||
                    ({ __proto__: [] } instanceof Array &&
                        function (d, b) {
                            d.__proto__ = b;
                        }) ||
                    function (d, b) {
                        for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
                    };
                return extendStatics(d, b);
            };
            return function (d, b) {
                if (typeof b !== 'function' && b !== null) throw new TypeError('Class extends value ' + String(b) + ' is not a constructor or null');
                extendStatics(d, b);
                function __() {
                    this.constructor = d;
                }
                d.prototype = b === null ? Object.create(b) : ((__.prototype = b.prototype), new __());
            };
        })();
    var __assign =
        (commonjsGlobal && commonjsGlobal.__assign) ||
        function () {
            __assign =
                Object.assign ||
                function (t) {
                    for (var s, i = 1, n = arguments.length; i < n; i++) {
                        s = arguments[i];
                        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
                    }
                    return t;
                };
            return __assign.apply(this, arguments);
        };
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.close = exports.show = exports.create = exports.Share = exports.Action = void 0;
    var types_1 = types$4;
    var helper_1 = helper;
    var ActionSet_1 = ActionSet$1;
    /**
     * Types
     */
    /**
     * @public
     */
    var Action;
    (function (Action) {
        Action['SHOW'] = 'APP::SHARE::SHOW';
        Action['CLOSE'] = 'APP::SHARE::CLOSE';
    })((Action = exports.Action || (exports.Action = {})));
    /**
     * Action
     */
    /**
     * A set of actions for displaying a Share Sheet component
     * @public
     */
    var Share = /** @class */ (function (_super) {
        __extends(Share, _super);
        function Share(app) {
            return _super.call(this, app, types_1.Group.Share, types_1.Group.Share) || this;
        }
        /**
         * @public
         */
        Share.prototype.dispatch = function (action, payload) {
            switch (action) {
                case Action.SHOW:
                    this.dispatchShareAction(Action.SHOW, payload);
                    break;
                default:
                    throw new Error('Action: ' + action + ' not supported');
            }
            return this;
        };
        /**
         * @internal
         */
        Share.prototype.dispatchShareAction = function (actionType, payload) {
            this.app.dispatch(
                helper_1.actionWrapper({
                    type: actionType,
                    group: types_1.Group.Share,
                    payload: __assign({ id: this.id }, payload),
                })
            );
        };
        return Share;
    })(ActionSet_1.ActionSet);
    exports.Share = Share;
    /**
     * @public
     */
    function create(app) {
        return new Share(app);
    }
    exports.create = create;
    function show() {
        return helper_1.actionWrapper({
            group: types_1.Group.Share,
            type: Action.SHOW,
        });
    }
    exports.show = show;
    function close() {
        return helper_1.actionWrapper({
            group: types_1.Group.Share,
            type: Action.CLOSE,
        });
    }
    exports.close = close;
})(Share);

var NavigationMenu$3 = {};

var AppLink = {};

(function (exports) {
    var __extends =
        (commonjsGlobal && commonjsGlobal.__extends) ||
        (function () {
            var extendStatics = function (d, b) {
                extendStatics =
                    Object.setPrototypeOf ||
                    ({ __proto__: [] } instanceof Array &&
                        function (d, b) {
                            d.__proto__ = b;
                        }) ||
                    function (d, b) {
                        for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
                    };
                return extendStatics(d, b);
            };
            return function (d, b) {
                if (typeof b !== 'function' && b !== null) throw new TypeError('Class extends value ' + String(b) + ' is not a constructor or null');
                extendStatics(d, b);
                function __() {
                    this.constructor = d;
                }
                d.prototype = b === null ? Object.create(b) : ((__.prototype = b.prototype), new __());
            };
        })();
    var __assign =
        (commonjsGlobal && commonjsGlobal.__assign) ||
        function () {
            __assign =
                Object.assign ||
                function (t) {
                    for (var s, i = 1, n = arguments.length; i < n; i++) {
                        s = arguments[i];
                        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
                    }
                    return t;
                };
            return __assign.apply(this, arguments);
        };
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.create = exports.AppLink = exports.update = exports.Action = void 0;
    var helper_1 = helper;
    var ActionSet_1 = ActionSet$1;
    var types_1 = types$4;
    var Redirect_1 = Redirect$1;
    var Action;
    (function (Action) {
        Action['UPDATE'] = 'UPDATE';
    })((Action = exports.Action || (exports.Action = {})));
    function update(group, component, updatePayload) {
        var id = component.id;
        var label = updatePayload.label,
            destination = updatePayload.destination;
        var linkPayload = __assign(__assign({}, updatePayload), { id: id, label: label, destination: destination });
        return helper_1.actionWrapper({
            group: group,
            type: helper_1.getEventNameSpace(group, Action.UPDATE, component),
            payload: linkPayload,
        });
    }
    exports.update = update;
    var AppLink = /** @class */ (function (_super) {
        __extends(AppLink, _super);
        function AppLink(app, options) {
            var _this = _super.call(this, app, types_1.Group.Link, types_1.Group.Link) || this;
            _this.label = '';
            _this.destination = '';
            _this.set(options, false);
            return _this;
        }
        Object.defineProperty(AppLink.prototype, 'options', {
            get: function () {
                var _a = this,
                    label = _a.label,
                    destination = _a.destination;
                return {
                    label: label,
                    destination: destination,
                    redirectType: Redirect_1.Action.APP,
                };
            },
            enumerable: false,
            configurable: true,
        });
        Object.defineProperty(AppLink.prototype, 'payload', {
            get: function () {
                var _a = this.options,
                    label = _a.label,
                    destination = _a.destination,
                    redirectType = _a.redirectType;
                var path = destination;
                return {
                    id: this.id,
                    label: label,
                    destination: { path: path },
                    redirectType: redirectType,
                };
            },
            enumerable: false,
            configurable: true,
        });
        AppLink.prototype.set = function (options, shouldUpdate) {
            if (shouldUpdate === void 0) {
                shouldUpdate = true;
            }
            var _a = helper_1.getMergedProps(this.options, options),
                label = _a.label,
                destination = _a.destination;
            this.label = label;
            this.destination = destination;
            if (shouldUpdate) {
                this.dispatch(Action.UPDATE);
            }
            return this;
        };
        AppLink.prototype.dispatch = function (action) {
            switch (action) {
                case Action.UPDATE: {
                    var updateAction = update(this.group, this.component, this.payload);
                    this.app.dispatch(updateAction);
                    break;
                }
            }
            return this;
        };
        return AppLink;
    })(ActionSet_1.ActionSet);
    exports.AppLink = AppLink;
    function create(app, options) {
        return new AppLink(app, options);
    }
    exports.create = create;
})(AppLink);

(function (exports) {
    var __extends =
        (commonjsGlobal && commonjsGlobal.__extends) ||
        (function () {
            var extendStatics = function (d, b) {
                extendStatics =
                    Object.setPrototypeOf ||
                    ({ __proto__: [] } instanceof Array &&
                        function (d, b) {
                            d.__proto__ = b;
                        }) ||
                    function (d, b) {
                        for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
                    };
                return extendStatics(d, b);
            };
            return function (d, b) {
                if (typeof b !== 'function' && b !== null) throw new TypeError('Class extends value ' + String(b) + ' is not a constructor or null');
                extendStatics(d, b);
                function __() {
                    this.constructor = d;
                }
                d.prototype = b === null ? Object.create(b) : ((__.prototype = b.prototype), new __());
            };
        })();
    var __assign =
        (commonjsGlobal && commonjsGlobal.__assign) ||
        function () {
            __assign =
                Object.assign ||
                function (t) {
                    for (var s, i = 1, n = arguments.length; i < n; i++) {
                        s = arguments[i];
                        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
                    }
                    return t;
                };
            return __assign.apply(this, arguments);
        };
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.create = exports.NavigationMenu = exports.update = exports.Action = void 0;
    var AppLink_1 = AppLink;
    var helper_1 = helper;
    var ActionSet_1 = ActionSet$1;
    var types_1 = types$4;
    var SUBGROUPS = ['Navigation_Menu'];
    var Action;
    (function (Action) {
        Action['UPDATE'] = 'APP::MENU::NAVIGATION_MENU::UPDATE';
        Action['LINK_UPDATE'] = 'APP::MENU::NAVIGATION_MENU::LINK::UPDATE';
    })((Action = exports.Action || (exports.Action = {})));
    function update(payload) {
        return helper_1.actionWrapper({
            payload: payload,
            group: types_1.Group.Menu,
            type: Action.UPDATE,
        });
    }
    exports.update = update;
    var NavigationMenu = /** @class */ (function (_super) {
        __extends(NavigationMenu, _super);
        function NavigationMenu(app, options) {
            var _this = _super.call(this, app, 'Navigation_Menu', types_1.Group.Menu) || this;
            _this.items = [];
            // Trigger 'update' on creation
            _this.set(options);
            return _this;
        }
        Object.defineProperty(NavigationMenu.prototype, 'options', {
            get: function () {
                return {
                    items: this.itemsOptions,
                    active: this.activeOptions,
                };
            },
            enumerable: false,
            configurable: true,
        });
        Object.defineProperty(NavigationMenu.prototype, 'payload', {
            get: function () {
                return __assign(__assign({}, this.options), { active: this.active, items: this.items, id: this.id });
            },
            enumerable: false,
            configurable: true,
        });
        NavigationMenu.prototype.set = function (options, shouldUpdate) {
            if (shouldUpdate === void 0) {
                shouldUpdate = true;
            }
            var mergedOptions = helper_1.getMergedProps(this.options, options);
            var items = mergedOptions.items,
                active = mergedOptions.active;
            this.setItems(items);
            this.activeOptions = active;
            this.active = active && active.id;
            if (shouldUpdate) {
                this.dispatch(Action.UPDATE);
            }
            return this;
        };
        NavigationMenu.prototype.dispatch = function (action) {
            switch (action) {
                case Action.UPDATE:
                    this.app.dispatch(update(this.payload));
                    break;
            }
            return this;
        };
        NavigationMenu.prototype.updateItem = function (newPayload) {
            if (!this.items) {
                return;
            }
            var itemToUpdate = this.items.find(function (action) {
                return action.id === newPayload.id;
            });
            if (!itemToUpdate) {
                return;
            }
            if (helper_1.updateActionFromPayload(itemToUpdate, newPayload)) {
                this.dispatch(Action.UPDATE);
            }
        };
        NavigationMenu.prototype.setItems = function (newOptions) {
            var _this = this;
            var newItems = newOptions || [];
            var currentItems = this.itemsOptions || [];
            this.itemsOptions = this.getUpdatedChildActions(newItems, currentItems);
            this.items = this.itemsOptions
                ? this.itemsOptions.map(function (action) {
                      _this.addChild(action, _this.group, SUBGROUPS);
                      _this.subscribeToChild(action, AppLink_1.Action.UPDATE, _this.updateItem);
                      return action.payload;
                  })
                : [];
        };
        return NavigationMenu;
    })(ActionSet_1.ActionSetWithChildren);
    exports.NavigationMenu = NavigationMenu;
    function create(app, options) {
        return new NavigationMenu(app, options);
    }
    exports.create = create;
})(NavigationMenu$3);

var ChannelMenu = {};

(function (exports) {
    var __extends =
        (commonjsGlobal && commonjsGlobal.__extends) ||
        (function () {
            var extendStatics = function (d, b) {
                extendStatics =
                    Object.setPrototypeOf ||
                    ({ __proto__: [] } instanceof Array &&
                        function (d, b) {
                            d.__proto__ = b;
                        }) ||
                    function (d, b) {
                        for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
                    };
                return extendStatics(d, b);
            };
            return function (d, b) {
                if (typeof b !== 'function' && b !== null) throw new TypeError('Class extends value ' + String(b) + ' is not a constructor or null');
                extendStatics(d, b);
                function __() {
                    this.constructor = d;
                }
                d.prototype = b === null ? Object.create(b) : ((__.prototype = b.prototype), new __());
            };
        })();
    var __assign =
        (commonjsGlobal && commonjsGlobal.__assign) ||
        function () {
            __assign =
                Object.assign ||
                function (t) {
                    for (var s, i = 1, n = arguments.length; i < n; i++) {
                        s = arguments[i];
                        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
                    }
                    return t;
                };
            return __assign.apply(this, arguments);
        };
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.create = exports.ChannelMenu = exports.update = exports.Action = void 0;
    var AppLink_1 = AppLink;
    var helper_1 = helper;
    var ActionSet_1 = ActionSet$1;
    var types_1 = types$4;
    var SUBGROUPS = ['Channel_Menu'];
    var Action;
    (function (Action) {
        Action['UPDATE'] = 'APP::MENU::CHANNEL_MENU::UPDATE';
        Action['LINK_UPDATE'] = 'APP::MENU::CHANNEL_MENU::LINK::UPDATE';
    })((Action = exports.Action || (exports.Action = {})));
    function update(payload) {
        return helper_1.actionWrapper({
            payload: payload,
            group: types_1.Group.Menu,
            type: Action.UPDATE,
        });
    }
    exports.update = update;
    var ChannelMenu = /** @class */ (function (_super) {
        __extends(ChannelMenu, _super);
        function ChannelMenu(app, options) {
            var _this = _super.call(this, app, 'Channel_Menu', types_1.Group.Menu) || this;
            _this.items = [];
            // Trigger 'update' on creation
            _this.set(options);
            return _this;
        }
        Object.defineProperty(ChannelMenu.prototype, 'options', {
            get: function () {
                return {
                    items: this.itemsOptions,
                    active: this.activeOptions,
                };
            },
            enumerable: false,
            configurable: true,
        });
        Object.defineProperty(ChannelMenu.prototype, 'payload', {
            get: function () {
                return __assign(__assign({}, this.options), { active: this.active, items: this.items, id: this.id });
            },
            enumerable: false,
            configurable: true,
        });
        ChannelMenu.prototype.set = function (options, shouldUpdate) {
            if (shouldUpdate === void 0) {
                shouldUpdate = true;
            }
            var mergedOptions = helper_1.getMergedProps(this.options, options);
            var items = mergedOptions.items,
                active = mergedOptions.active;
            this.setItems(items);
            this.activeOptions = active;
            this.active = active && active.id;
            if (shouldUpdate) {
                this.dispatch(Action.UPDATE);
            }
            return this;
        };
        ChannelMenu.prototype.dispatch = function (action) {
            switch (action) {
                case Action.UPDATE:
                    this.app.dispatch(update(this.payload));
                    break;
            }
            return this;
        };
        ChannelMenu.prototype.updateItem = function (newPayload) {
            if (!this.items) {
                return;
            }
            var itemToUpdate = this.items.find(function (action) {
                return action.id === newPayload.id;
            });
            if (!itemToUpdate) {
                return;
            }
            if (helper_1.updateActionFromPayload(itemToUpdate, newPayload)) {
                this.dispatch(Action.UPDATE);
            }
        };
        ChannelMenu.prototype.setItems = function (newOptions) {
            var _this = this;
            var newItems = newOptions || [];
            var currentItems = this.itemsOptions || [];
            this.itemsOptions = this.getUpdatedChildActions(newItems, currentItems);
            this.items = this.itemsOptions
                ? this.itemsOptions.map(function (action) {
                      _this.addChild(action, _this.group, SUBGROUPS);
                      _this.subscribeToChild(action, AppLink_1.Action.UPDATE, _this.updateItem);
                      return action.payload;
                  })
                : [];
        };
        return ChannelMenu;
    })(ActionSet_1.ActionSetWithChildren);
    exports.ChannelMenu = ChannelMenu;
    function create(app, options) {
        return new ChannelMenu(app, options);
    }
    exports.create = create;
})(ChannelMenu);

var Pos = {};

(function (exports) {
    var __extends =
        (commonjsGlobal && commonjsGlobal.__extends) ||
        (function () {
            var extendStatics = function (d, b) {
                extendStatics =
                    Object.setPrototypeOf ||
                    ({ __proto__: [] } instanceof Array &&
                        function (d, b) {
                            d.__proto__ = b;
                        }) ||
                    function (d, b) {
                        for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
                    };
                return extendStatics(d, b);
            };
            return function (d, b) {
                if (typeof b !== 'function' && b !== null) throw new TypeError('Class extends value ' + String(b) + ' is not a constructor or null');
                extendStatics(d, b);
                function __() {
                    this.constructor = d;
                }
                d.prototype = b === null ? Object.create(b) : ((__.prototype = b.prototype), new __());
            };
        })();
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.create = exports.Pos = exports.close = exports.Action = void 0;
    var helper_1 = helper;
    var ActionSet_1 = ActionSet$1;
    var types_1 = types$4;
    /**
     * Pos action type enum
     * @remarks includes the action prefix and group
     *
     */
    var Action;
    (function (Action) {
        Action['CLOSE'] = 'APP::POS::CLOSE';
        Action['LOCATION_UPDATE'] = 'APP::POS::LOCATION::UPDATE';
        Action['USER_UPDATE'] = 'APP::POS::USER::UPDATE';
        Action['DEVICE_UPDATE'] = 'APP::POS::DEVICE::UPDATE';
    })((Action = exports.Action || (exports.Action = {})));
    function close() {
        return helper_1.actionWrapper({
            group: types_1.Group.Pos,
            type: Action.CLOSE,
        });
    }
    exports.close = close;
    var Pos = /** @class */ (function (_super) {
        __extends(Pos, _super);
        function Pos(app) {
            return _super.call(this, app, types_1.Group.Pos, types_1.Group.Pos) || this;
        }
        Pos.prototype.dispatch = function (action) {
            switch (action) {
                case Action.CLOSE:
                    this.app.dispatch(close());
                    break;
            }
            return this;
        };
        return Pos;
    })(ActionSet_1.ActionSet);
    exports.Pos = Pos;
    function create(app) {
        return new Pos(app);
    }
    exports.create = create;
})(Pos);

var MarketingExternalActivityTopBar = {};

(function (exports) {
    var __extends =
        (commonjsGlobal && commonjsGlobal.__extends) ||
        (function () {
            var extendStatics = function (d, b) {
                extendStatics =
                    Object.setPrototypeOf ||
                    ({ __proto__: [] } instanceof Array &&
                        function (d, b) {
                            d.__proto__ = b;
                        }) ||
                    function (d, b) {
                        for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
                    };
                return extendStatics(d, b);
            };
            return function (d, b) {
                if (typeof b !== 'function' && b !== null) throw new TypeError('Class extends value ' + String(b) + ' is not a constructor or null');
                extendStatics(d, b);
                function __() {
                    this.constructor = d;
                }
                d.prototype = b === null ? Object.create(b) : ((__.prototype = b.prototype), new __());
            };
        })();
    var __assign =
        (commonjsGlobal && commonjsGlobal.__assign) ||
        function () {
            __assign =
                Object.assign ||
                function (t) {
                    for (var s, i = 1, n = arguments.length; i < n; i++) {
                        s = arguments[i];
                        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
                    }
                    return t;
                };
            return __assign.apply(this, arguments);
        };
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.create = exports.MarketingExternalActivityTopBar = exports.update = exports.clickActionButton = exports.MarketingActivityStatusBadgeType = exports.Action = void 0;
    var Button_1 = Button$1;
    var buttonHelper_1 = buttonHelper;
    var helper_1 = helper;
    var ActionSet_1 = ActionSet$1;
    var types_1 = types$4;
    var Action;
    (function (Action) {
        Action['UPDATE'] = 'APP::MARKETING_EXTERNAL_ACTIVITY_TOP_BAR::UPDATE';
        Action['BUTTON_CLICK'] = 'APP::MARKETING_EXTERNAL_ACTIVITY_TOP_BAR::BUTTONS::BUTTON::CLICK';
        Action['BUTTON_UPDATE'] = 'APP::MARKETING_EXTERNAL_ACTIVITY_TOP_BAR::BUTTONS::BUTTON::UPDATE';
    })((Action = exports.Action || (exports.Action = {})));
    (function (MarketingActivityStatusBadgeType) {
        MarketingActivityStatusBadgeType['Default'] = 'DEFAULT';
        MarketingActivityStatusBadgeType['Success'] = 'SUCCESS';
        MarketingActivityStatusBadgeType['Attention'] = 'ATTENTION';
        MarketingActivityStatusBadgeType['Warning'] = 'WARNING';
        MarketingActivityStatusBadgeType['Info'] = 'INFO';
    })(exports.MarketingActivityStatusBadgeType || (exports.MarketingActivityStatusBadgeType = {}));
    var MARKETING_ACTIVITY_TOPBAR_BUTTON_PROPS = {
        group: types_1.Group.MarketingExternalActivityTopBar,
        subgroups: ['Buttons'],
    };
    function clickActionButton(id, payload) {
        var type = types_1.ComponentType.Button;
        var component = __assign({ id: id, type: type }, MARKETING_ACTIVITY_TOPBAR_BUTTON_PROPS);
        return Button_1.clickButton(types_1.Group.MarketingExternalActivityTopBar, component, payload);
    }
    exports.clickActionButton = clickActionButton;
    function update(payload) {
        return helper_1.actionWrapper({
            payload: payload,
            group: types_1.Group.MarketingExternalActivityTopBar,
            type: Action.UPDATE,
        });
    }
    exports.update = update;
    var MarketingExternalActivityTopBar = /** @class */ (function (_super) {
        __extends(MarketingExternalActivityTopBar, _super);
        function MarketingExternalActivityTopBar(app, options) {
            var _this = _super.call(this, app, types_1.Group.MarketingExternalActivityTopBar, types_1.Group.MarketingExternalActivityTopBar) || this;
            // Trigger 'update' on creation
            _this.set(options);
            return _this;
        }
        Object.defineProperty(MarketingExternalActivityTopBar.prototype, 'buttons', {
            get: function () {
                if (!this.primary && !this.secondary) {
                    return undefined;
                }
                return {
                    primary: this.primary,
                    secondary: this.secondary,
                };
            },
            enumerable: false,
            configurable: true,
        });
        Object.defineProperty(MarketingExternalActivityTopBar.prototype, 'buttonsOptions', {
            get: function () {
                if (!this.primaryOptions && !this.secondaryOptions) {
                    return undefined;
                }
                return {
                    primary: this.primaryOptions,
                    secondary: this.secondaryOptions,
                };
            },
            enumerable: false,
            configurable: true,
        });
        Object.defineProperty(MarketingExternalActivityTopBar.prototype, 'options', {
            get: function () {
                return {
                    title: this.title,
                    status: this.status,
                    saving: this.saving,
                    saved: this.saved,
                    buttons: this.buttonsOptions,
                };
            },
            enumerable: false,
            configurable: true,
        });
        Object.defineProperty(MarketingExternalActivityTopBar.prototype, 'payload', {
            get: function () {
                return __assign(__assign({}, this.options), { buttons: this.buttons, id: this.id });
            },
            enumerable: false,
            configurable: true,
        });
        MarketingExternalActivityTopBar.prototype.set = function (options, shouldUpdate) {
            if (shouldUpdate === void 0) {
                shouldUpdate = true;
            }
            var mergedOptions = helper_1.getMergedProps(this.options, options);
            var title = mergedOptions.title,
                buttons = mergedOptions.buttons,
                saved = mergedOptions.saved,
                saving = mergedOptions.saving,
                status = mergedOptions.status;
            this.title = title;
            this.saving = saving;
            this.saved = saved;
            this.status = status;
            this.setPrimaryButton(buttons ? buttons.primary : undefined);
            this.setSecondaryButtons(buttons ? buttons.secondary : undefined);
            if (shouldUpdate) {
                this.dispatch(Action.UPDATE);
            }
            return this;
        };
        MarketingExternalActivityTopBar.prototype.dispatch = function (action) {
            switch (action) {
                case Action.UPDATE:
                    this.app.dispatch(update(this.payload));
                    break;
            }
            return this;
        };
        MarketingExternalActivityTopBar.prototype.getButton = function (button, subgroups, updateCb) {
            return buttonHelper_1.getSingleButton(this, button, subgroups, updateCb);
        };
        MarketingExternalActivityTopBar.prototype.updatePrimaryButton = function (newPayload) {
            if (!this.primary) {
                return;
            }
            if (helper_1.updateActionFromPayload(this.primary, newPayload)) {
                this.dispatch(Action.UPDATE);
            }
        };
        MarketingExternalActivityTopBar.prototype.updateSecondaryButtons = function (newPayload) {
            if (!this.secondary) {
                return;
            }
            var buttonToUpdate = this.secondary.find(function (action) {
                return action.id === newPayload.id;
            });
            if (!buttonToUpdate) {
                return;
            }
            var updated = helper_1.updateActionFromPayload(buttonToUpdate, newPayload);
            if (updated) {
                this.dispatch(Action.UPDATE);
            }
        };
        MarketingExternalActivityTopBar.prototype.setPrimaryButton = function (newOptions) {
            this.primaryOptions = this.getChildButton(newOptions, this.primaryOptions);
            this.primary = this.primaryOptions ? this.getButton(this.primaryOptions, MARKETING_ACTIVITY_TOPBAR_BUTTON_PROPS.subgroups, this.updatePrimaryButton) : undefined;
        };
        MarketingExternalActivityTopBar.prototype.setSecondaryButtons = function (newOptions) {
            var _this = this;
            var newButtons = newOptions || [];
            var currentButtons = this.secondaryOptions || [];
            this.secondaryOptions = this.getUpdatedChildActions(newButtons, currentButtons);
            this.secondary = this.secondaryOptions
                ? this.secondaryOptions.map(function (action) {
                      return _this.getButton(action, MARKETING_ACTIVITY_TOPBAR_BUTTON_PROPS.subgroups, _this.updateSecondaryButtons);
                  })
                : undefined;
        };
        MarketingExternalActivityTopBar.prototype.updateSaving = function (saving) {
            this.saving = saving;
            this.dispatch(Action.UPDATE);
        };
        MarketingExternalActivityTopBar.prototype.updateSaved = function (saved) {
            this.saved = saved;
            this.dispatch(Action.UPDATE);
        };
        MarketingExternalActivityTopBar.prototype.updateStatus = function (newPayload) {
            this.status = newPayload;
            this.dispatch(Action.UPDATE);
        };
        MarketingExternalActivityTopBar.prototype.getChildButton = function (newAction, currentAction) {
            var newButtons = newAction ? [newAction] : [];
            var currentButtons = currentAction ? [currentAction] : [];
            var updatedButton = this.getUpdatedChildActions(newButtons, currentButtons);
            return updatedButton ? updatedButton[0] : undefined;
        };
        return MarketingExternalActivityTopBar;
    })(ActionSet_1.ActionSetWithChildren);
    exports.MarketingExternalActivityTopBar = MarketingExternalActivityTopBar;
    function create(app, options) {
        return new MarketingExternalActivityTopBar(app, options);
    }
    exports.create = create;
})(MarketingExternalActivityTopBar);

var Performance = {};

(function (exports) {
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.fullPageLoad = exports.skeletonPageLoad = exports.Action = void 0;
    var types_1 = types$4;
    var helper_1 = helper;
    var Action;
    (function (Action) {
        Action['SKELETON_PAGE_LOAD'] = 'APP::PERFORMANCE::SKELETON_PAGE_LOAD';
        Action['FULL_PAGE_LOAD'] = 'APP::PERFORMANCE::FULL_PAGE_LOAD';
    })((Action = exports.Action || (exports.Action = {})));
    function skeletonPageLoad() {
        return helper_1.actionWrapper({
            group: types_1.Group.Performance,
            type: Action.SKELETON_PAGE_LOAD,
        });
    }
    exports.skeletonPageLoad = skeletonPageLoad;
    function fullPageLoad() {
        return helper_1.actionWrapper({
            group: types_1.Group.Performance,
            type: Action.FULL_PAGE_LOAD,
        });
    }
    exports.fullPageLoad = fullPageLoad;
})(Performance);

var validator = {};

Object.defineProperty(validator, '__esModule', { value: true });
validator.isAppMessage = validator.isPermitted = validator.getPermissionKey = validator.isFromApp = validator.isAppBridgeAction = void 0;
var types_1 = types$2;
var constants_1 = constants;
var helper_1 = helper;
/**
 * Predicate to determine if an action is an App Bridge action.
 * @public
 */
function isAppBridgeAction(action) {
    return action instanceof Object && Object.prototype.hasOwnProperty.call(action, 'type') && action.type.toString().startsWith(constants_1.PREFIX);
}
validator.isAppBridgeAction = isAppBridgeAction;
/**
 * Predicate to determine if an action originated from an application.
 * @internal
 */
function isFromApp(action) {
    if (typeof action !== 'object' || typeof action.source !== 'object') {
        return false;
    }
    return typeof action.source.apiKey === 'string';
}
validator.isFromApp = isFromApp;
/**
 * Returns the action type without the prefix and group
 * @internal
 */
function getPermissionKey(type) {
    return type.replace(new RegExp('^' + constants_1.PREFIX + constants_1.SEPARATOR + '\\w+' + constants_1.SEPARATOR), '');
}
validator.getPermissionKey = getPermissionKey;
/**
 * Predicate to determine if an action is permitted
 * @internal
 */
function isPermitted(features, _a, permissionType) {
    var group = _a.group,
        type = _a.type;
    if (!group || !Object.prototype.hasOwnProperty.call(features, group)) {
        return false;
    }
    var feature = features[group];
    if (!feature) {
        return false;
    }
    var actionType = getPermissionKey(type);
    return feature[actionType] ? feature[actionType][permissionType] === true : false;
}
validator.isPermitted = isPermitted;
/**
 * Predicate to determine if an event originated from an application.
 * @internal
 */
function isAppMessage(event) {
    if (typeof event !== 'object' || !event.data || typeof event.data !== 'object') {
        return false;
    }
    var data = event.data;
    return Object.prototype.hasOwnProperty.call(data, 'type') && helper_1.findMatchInEnum(types_1.MessageType, data.type) !== undefined;
}
validator.isAppMessage = isAppMessage;

(function (exports) {
    var __createBinding =
        (commonjsGlobal && commonjsGlobal.__createBinding) ||
        (Object.create
            ? function (o, m, k, k2) {
                  if (k2 === undefined) k2 = k;
                  Object.defineProperty(o, k2, {
                      enumerable: true,
                      get: function () {
                          return m[k];
                      },
                  });
              }
            : function (o, m, k, k2) {
                  if (k2 === undefined) k2 = k;
                  o[k2] = m[k];
              });
    var __setModuleDefault =
        (commonjsGlobal && commonjsGlobal.__setModuleDefault) ||
        (Object.create
            ? function (o, v) {
                  Object.defineProperty(o, 'default', { enumerable: true, value: v });
              }
            : function (o, v) {
                  o['default'] = v;
              });
    var __importStar =
        (commonjsGlobal && commonjsGlobal.__importStar) ||
        function (mod) {
            if (mod && mod.__esModule) return mod;
            var result = {};
            if (mod != null) for (var k in mod) if (k !== 'default' && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
            __setModuleDefault(result, mod);
            return result;
        };
    var __exportStar =
        (commonjsGlobal && commonjsGlobal.__exportStar) ||
        function (m, exports) {
            for (var p in m) if (p !== 'default' && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
        };
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.Performance =
        exports.Pos =
        exports.AppLink =
        exports.ChannelMenu =
        exports.NavigationMenu =
        exports.Share =
        exports.ContextualSaveBar =
        exports.MarketingExternalActivityTopBar =
        exports.TitleBar =
        exports.SessionToken =
        exports.ResourcePicker =
        exports.Redirect =
        exports.Print =
        exports.ModalContent =
        exports.Modal =
        exports.Loading =
        exports.LeaveConfirmation =
        exports.History =
        exports.Toast =
        exports.Fullscreen =
        exports.FeedbackModal =
        exports.Features =
        exports.Flash =
        exports.Error =
        exports.Client =
        exports.Cart =
        exports.Scanner =
        exports.ButtonGroup =
        exports.Button =
        exports.AuthCode =
        exports.isAppBridgeAction =
            void 0;
    var AuthCode = __importStar(AuthCode$1);
    exports.AuthCode = AuthCode;
    var Button = __importStar(Button$1);
    exports.Button = Button;
    var ButtonGroup = __importStar(ButtonGroup$1);
    exports.ButtonGroup = ButtonGroup;
    var Cart$1 = __importStar(Cart);
    exports.Cart = Cart$1;
    var Client = __importStar(Client$1);
    exports.Client = Client;
    var Error = __importStar(_Error);
    exports.Error = Error;
    var Flash$1 = __importStar(Flash);
    exports.Flash = Flash$1;
    var Features = __importStar(Features$1);
    exports.Features = Features;
    var FeedbackModal$1 = __importStar(FeedbackModal);
    exports.FeedbackModal = FeedbackModal$1;
    var Fullscreen$1 = __importStar(Fullscreen);
    exports.Fullscreen = Fullscreen$1;
    var LeaveConfirmation$1 = __importStar(LeaveConfirmation);
    exports.LeaveConfirmation = LeaveConfirmation$1;
    var Loading = __importStar(Loading$5);
    exports.Loading = Loading;
    var Modal = __importStar(Modal$4);
    exports.Modal = Modal;
    var ModalContent = __importStar(ModalContent$3);
    exports.ModalContent = ModalContent;
    var History$1 = __importStar(History);
    exports.History = History$1;
    var Redirect = __importStar(Redirect$1);
    exports.Redirect = Redirect;
    var Print$1 = __importStar(Print);
    exports.Print = Print$1;
    var ResourcePicker = __importStar(ResourcePicker$3);
    exports.ResourcePicker = ResourcePicker;
    var Scanner$1 = __importStar(Scanner);
    exports.Scanner = Scanner$1;
    var SessionToken = __importStar(SessionToken$1);
    exports.SessionToken = SessionToken;
    var TitleBar = __importStar(TitleBar$3);
    exports.TitleBar = TitleBar;
    var Toast = __importStar(Toast$4);
    exports.Toast = Toast;
    var ContextualSaveBar = __importStar(ContextualSaveBar$2);
    exports.ContextualSaveBar = ContextualSaveBar;
    var Share$1 = __importStar(Share);
    exports.Share = Share$1;
    var NavigationMenu = __importStar(NavigationMenu$3);
    exports.NavigationMenu = NavigationMenu;
    var ChannelMenu$1 = __importStar(ChannelMenu);
    exports.ChannelMenu = ChannelMenu$1;
    var AppLink$1 = __importStar(AppLink);
    exports.AppLink = AppLink$1;
    var Pos$1 = __importStar(Pos);
    exports.Pos = Pos$1;
    var MarketingExternalActivityTopBar$1 = __importStar(MarketingExternalActivityTopBar);
    exports.MarketingExternalActivityTopBar = MarketingExternalActivityTopBar$1;
    var Performance$1 = __importStar(Performance);
    exports.Performance = Performance$1;
    var validator_1 = validator;
    Object.defineProperty(exports, 'isAppBridgeAction', {
        enumerable: true,
        get: function () {
            return validator_1.isAppBridgeAction;
        },
    });
    __exportStar(types$4, exports);
})(actions$2);

var useAppBridge$1 = {};

var context = {};

Object.defineProperty(context, '__esModule', { value: true });
context.AppBridgeContext = void 0;
var react_1$g = react.exports;
/**
 * App Bridge context.
 *
 * @public
 */
context.AppBridgeContext = react_1$g.createContext(null);

Object.defineProperty(useAppBridge$1, '__esModule', { value: true });
useAppBridge$1.useAppBridge = void 0;
var react_1$f = react.exports;
var context_1$7 = context;
function useAppBridge() {
    var appBridge = react_1$f.useContext(context_1$7.AppBridgeContext);
    if (!appBridge) {
        throw new Error('No AppBridge context provided. Your component must be wrapped in the <Provider> component from App Bridge React.');
    }
    return appBridge;
}
useAppBridge$1.useAppBridge = useAppBridge;

var __rest$1 =
    (commonjsGlobal && commonjsGlobal.__rest) ||
    function (s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === 'function')
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
            }
        return t;
    };
Object.defineProperty(ContextualSaveBar$3, '__esModule', { value: true });
var react_1$e = react.exports;
var actions_1$9 = actions$2;
var useAppBridge_1$7 = useAppBridge$1;
var Action$1 = actions_1$9.ContextualSaveBar.Action,
    create = actions_1$9.ContextualSaveBar.create;
function ContextualSaveBar$1(_a) {
    var discardAction = _a.discardAction,
        saveAction = _a.saveAction,
        fullWidth = _a.fullWidth,
        leaveConfirmationDisable = _a.leaveConfirmationDisable,
        visible = _a.visible;
    var app = useAppBridge_1$7.useAppBridge();
    var onSaveAction = saveAction.onAction,
        saveActionProps = __rest$1(saveAction, ['onAction']);
    var onDiscardAction = discardAction.onAction,
        discardActionProps = __rest$1(discardAction, ['onAction']);
    var contextualSaveBar = react_1$e.useMemo(
        function () {
            return create(app, {
                saveAction: saveActionProps,
                discardAction: discardActionProps,
                fullWidth: fullWidth,
                leaveConfirmationDisable: leaveConfirmationDisable,
            });
        },
        [app]
    );
    react_1$e.useEffect(
        function () {
            contextualSaveBar.set(
                {
                    saveAction: saveActionProps,
                    discardAction: discardActionProps,
                    fullWidth: fullWidth,
                    leaveConfirmationDisable: leaveConfirmationDisable,
                },
                visible
            );
        },
        [app, contextualSaveBar, saveActionProps, discardActionProps, fullWidth, leaveConfirmationDisable, visible]
    );
    react_1$e.useEffect(
        function () {
            contextualSaveBar.subscribe(Action$1.DISCARD, onDiscardAction);
            contextualSaveBar.subscribe(Action$1.SAVE, onSaveAction);
            return function () {
                contextualSaveBar.unsubscribe();
            };
        },
        [contextualSaveBar]
    );
    react_1$e.useEffect(
        function () {
            if (visible) {
                contextualSaveBar.dispatch(Action$1.SHOW);
            } else {
                contextualSaveBar.dispatch(Action$1.HIDE);
            }
        },
        [contextualSaveBar, visible]
    );
    return null;
}
ContextualSaveBar$3.default = ContextualSaveBar$1;

var __importDefault$f =
    (commonjsGlobal && commonjsGlobal.__importDefault) ||
    function (mod) {
        return mod && mod.__esModule ? mod : { default: mod };
    };
Object.defineProperty(ContextualSaveBar$4, '__esModule', { value: true });
var ContextualSaveBar_1$1 = __importDefault$f(ContextualSaveBar$3);
ContextualSaveBar$4.default = ContextualSaveBar_1$1.default;

var Loading$4 = {};

var Loading$3 = {};

var __extends$6 =
    (commonjsGlobal && commonjsGlobal.__extends) ||
    (function () {
        var extendStatics = function (d, b) {
            extendStatics =
                Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array &&
                    function (d, b) {
                        d.__proto__ = b;
                    }) ||
                function (d, b) {
                    for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
                };
            return extendStatics(d, b);
        };
        return function (d, b) {
            if (typeof b !== 'function' && b !== null) throw new TypeError('Class extends value ' + String(b) + ' is not a constructor or null');
            extendStatics(d, b);
            function __() {
                this.constructor = d;
            }
            d.prototype = b === null ? Object.create(b) : ((__.prototype = b.prototype), new __());
        };
    })();
var __importDefault$e =
    (commonjsGlobal && commonjsGlobal.__importDefault) ||
    function (mod) {
        return mod && mod.__esModule ? mod : { default: mod };
    };
Object.defineProperty(Loading$3, '__esModule', { value: true });
var react_1$d = __importDefault$e(react.exports);
var actions_1$8 = actions$2;
var context_1$6 = context;
/**
 * Loading component
 *
 * @remarks
 * React component which wraps the Shopify App Bridge Loading action.
 *
 * @public
 */
var Loading$2 = /** @class */ (function (_super) {
    __extends$6(Loading, _super);
    function Loading() {
        return (_super !== null && _super.apply(this, arguments)) || this;
    }
    Loading.prototype.componentDidMount = function () {
        var app = this.context;
        this.loading = actions_1$8.Loading.create(app);
        if (this.loading != null) {
            this.loading.dispatch(actions_1$8.Loading.Action.START);
        }
    };
    Loading.prototype.componentWillUnmount = function () {
        if (this.loading != null) {
            this.loading.dispatch(actions_1$8.Loading.Action.STOP);
        }
    };
    Loading.prototype.render = function () {
        return null;
    };
    Loading.contextType = context_1$6.AppBridgeContext;
    return Loading;
})(react_1$d.default.Component);
Loading$3.default = Loading$2;

var __importDefault$d =
    (commonjsGlobal && commonjsGlobal.__importDefault) ||
    function (mod) {
        return mod && mod.__esModule ? mod : { default: mod };
    };
Object.defineProperty(Loading$4, '__esModule', { value: true });
var Loading_1 = __importDefault$d(Loading$3);
Loading$4.default = Loading_1.default;

var Modal$3 = {};

var Modal$2 = {};

var transformers = {};

var __spreadArray =
    (commonjsGlobal && commonjsGlobal.__spreadArray) ||
    function (to, from) {
        for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) to[j] = from[i];
        return to;
    };
Object.defineProperty(transformers, '__esModule', { value: true });
transformers.transformActions = transformers.generateRedirect = void 0;
var actions_1$7 = actions$2;
function generateRedirect(appBridge, url, target, external) {
    if (target === void 0) {
        target = 'APP';
    }
    if (url == null) {
        return undefined;
    }
    var redirect = actions_1$7.Redirect.create(appBridge);
    var payload =
        external === true
            ? {
                  url: url,
                  newContext: true,
              }
            : url;
    return function () {
        redirect.dispatch(redirectAction(target, external), payload);
    };
}
transformers.generateRedirect = generateRedirect;
function redirectAction(target, external) {
    if (external === true) {
        return actions_1$7.Redirect.Action.REMOTE;
    }
    return actions_1$7.Redirect.Action[target];
}
function transformActions(appBridge, _a) {
    var primaryAction = _a.primaryAction,
        secondaryActions = _a.secondaryActions,
        actionGroups = _a.actionGroups;
    var primary = transformPrimaryAction(appBridge, primaryAction);
    var secondary = __spreadArray(__spreadArray([], transformSecondaryActions(appBridge, secondaryActions)), transformActionGroups(appBridge, actionGroups));
    return {
        primary: primary,
        secondary: secondary,
    };
}
transformers.transformActions = transformActions;
function transformAction(appBridge, action) {
    var style = action.destructive === true ? actions_1$7.Button.Style.Danger : undefined;
    var button = actions_1$7.Button.create(appBridge, {
        label: action.content || '',
        disabled: action.disabled,
        loading: action.loading,
        plain: action.plain,
        style: style,
    });
    if (action.onAction) {
        button.subscribe(actions_1$7.Button.Action.CLICK, action.onAction);
    }
    var redirect = generateRedirect(appBridge, action.url, action.target, action.external);
    if (redirect != null) {
        button.subscribe(actions_1$7.Button.Action.CLICK, redirect);
    }
    return button;
}
function transformPrimaryAction(appBridge, primaryAction) {
    if (primaryAction == null) {
        return undefined;
    }
    var primary = transformAction(appBridge, primaryAction);
    return primary;
}
function transformSecondaryActions(appBridge, secondaryActions) {
    if (secondaryActions === void 0) {
        secondaryActions = [];
    }
    var secondary = __spreadArray(
        [],
        secondaryActions.map(function (secondaryAction) {
            return transformAction(appBridge, secondaryAction);
        })
    );
    return secondary;
}
function transformActionGroups(appBridge, actionGroups) {
    if (actionGroups === void 0) {
        actionGroups = [];
    }
    var buttonGroups = __spreadArray(
        [],
        actionGroups.map(function (group) {
            var buttons = group.actions.map(function (groupAction) {
                return transformAction(appBridge, groupAction);
            });
            return actions_1$7.ButtonGroup.create(appBridge, { label: group.title, plain: group.plain, buttons: buttons });
        })
    );
    return buttonGroups;
}

var __extends$5 =
    (commonjsGlobal && commonjsGlobal.__extends) ||
    (function () {
        var extendStatics = function (d, b) {
            extendStatics =
                Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array &&
                    function (d, b) {
                        d.__proto__ = b;
                    }) ||
                function (d, b) {
                    for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
                };
            return extendStatics(d, b);
        };
        return function (d, b) {
            if (typeof b !== 'function' && b !== null) throw new TypeError('Class extends value ' + String(b) + ' is not a constructor or null');
            extendStatics(d, b);
            function __() {
                this.constructor = d;
            }
            d.prototype = b === null ? Object.create(b) : ((__.prototype = b.prototype), new __());
        };
    })();
var __assign$3 =
    (commonjsGlobal && commonjsGlobal.__assign) ||
    function () {
        __assign$3 =
            Object.assign ||
            function (t) {
                for (var s, i = 1, n = arguments.length; i < n; i++) {
                    s = arguments[i];
                    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
                }
                return t;
            };
        return __assign$3.apply(this, arguments);
    };
var __importDefault$c =
    (commonjsGlobal && commonjsGlobal.__importDefault) ||
    function (mod) {
        return mod && mod.__esModule ? mod : { default: mod };
    };
Object.defineProperty(Modal$2, '__esModule', { value: true });
var react_1$c = __importDefault$c(react.exports);
var actions_1$6 = actions$2;
var transformers_1$1 = transformers;
var context_1$5 = context;
/**
 * Modal component
 *
 * @remarks
 * React component which wraps the Shopify App Bridge Modal action.
 *
 * @public
 */
var Modal$1 = /** @class */ (function (_super) {
    __extends$5(Modal, _super);
    function Modal() {
        var _this = (_super !== null && _super.apply(this, arguments)) || this;
        _this.focusReturnPoint = null;
        return _this;
    }
    Modal.prototype.componentDidMount = function () {
        var _a = this.props,
            open = _a.open,
            onClose = _a.onClose;
        var app = this.context;
        this.modal = actions_1$6.Modal.create(app, this.transformProps());
        if (onClose != null) {
            this.modal.subscribe(actions_1$6.Modal.Action.CLOSE, onClose);
        }
        if (open) {
            this.focusReturnPoint = document.activeElement;
            this.modal.dispatch(actions_1$6.Modal.Action.OPEN);
        }
    };
    Modal.prototype.componentDidUpdate = function (prevProps) {
        var _a = this.props,
            open = _a.open,
            onClose = _a.onClose;
        var wasOpen = prevProps.open;
        var transformedProps = this.transformProps(wasOpen);
        this.modal.unsubscribe();
        if (isIframeModal(transformedProps)) {
            this.modal.set(transformedProps, open);
        } else {
            this.modal.set(transformedProps, open);
        }
        if (onClose != null) {
            this.modal.subscribe(actions_1$6.Modal.Action.CLOSE, onClose);
        }
        if (wasOpen !== open) {
            if (open) {
                this.modal.dispatch(actions_1$6.Modal.Action.OPEN);
            } else {
                this.modal.dispatch(actions_1$6.Modal.Action.CLOSE);
            }
        }
        if (!wasOpen && open) {
            this.focusReturnPoint = document.activeElement;
        } else if (wasOpen && !open && this.focusReturnPoint != null && document.contains(this.focusReturnPoint)) {
            this.focusReturnPoint.focus();
            this.focusReturnPoint = null;
        }
    };
    Modal.prototype.componentWillUnmount = function () {
        this.modal.unsubscribe();
        if (this.props.open) {
            this.modal.dispatch(actions_1$6.Modal.Action.CLOSE);
        }
    };
    Modal.prototype.render = function () {
        return null;
    };
    Modal.prototype.transformProps = function (wasOpen) {
        var _a = this.props,
            title = _a.title,
            size = _a.size,
            message = _a.message,
            src = _a.src,
            primaryAction = _a.primaryAction,
            secondaryActions = _a.secondaryActions,
            loading = _a.loading;
        var app = this.context;
        var safeSize = size == null ? undefined : actions_1$6.Modal.Size[size];
        var srcPayload = {};
        if (src != null) {
            if (src.match('^https?://')) {
                srcPayload.url = src;
            } else {
                srcPayload.path = src;
            }
        }
        return __assign$3(__assign$3({ title: title, message: message, size: safeSize }, srcPayload), {
            footer: {
                buttons: transformers_1$1.transformActions(app, {
                    primaryAction: primaryAction,
                    secondaryActions: secondaryActions,
                }),
            },
            loading: wasOpen ? undefined : loading,
        });
    };
    Modal.contextType = context_1$5.AppBridgeContext;
    return Modal;
})(react_1$c.default.PureComponent);
function isIframeModal(options) {
    return typeof options.url === 'string' || typeof options.path === 'string';
}
Modal$2.default = Modal$1;

var ModalContent$2 = {};

var ModalContent$1 = {};

var __extends$4 =
    (commonjsGlobal && commonjsGlobal.__extends) ||
    (function () {
        var extendStatics = function (d, b) {
            extendStatics =
                Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array &&
                    function (d, b) {
                        d.__proto__ = b;
                    }) ||
                function (d, b) {
                    for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
                };
            return extendStatics(d, b);
        };
        return function (d, b) {
            if (typeof b !== 'function' && b !== null) throw new TypeError('Class extends value ' + String(b) + ' is not a constructor or null');
            extendStatics(d, b);
            function __() {
                this.constructor = d;
            }
            d.prototype = b === null ? Object.create(b) : ((__.prototype = b.prototype), new __());
        };
    })();
var __importDefault$b =
    (commonjsGlobal && commonjsGlobal.__importDefault) ||
    function (mod) {
        return mod && mod.__esModule ? mod : { default: mod };
    };
Object.defineProperty(ModalContent$1, '__esModule', { value: true });
var react_1$b = __importDefault$b(react.exports);
var actions_1$5 = actions$2;
var context_1$4 = context;
/**
 * Modal Content component
 *
 * @remarks
 * React component which wraps the Shopify App Bridge Modal Content action.
 *
 * @public
 */
var ModalContent = /** @class */ (function (_super) {
    __extends$4(ModalContent, _super);
    function ModalContent() {
        return (_super !== null && _super.apply(this, arguments)) || this;
    }
    ModalContent.prototype.componentDidMount = function () {
        var app = this.context;
        this.modalContent = actions_1$5.ModalContent.create(app);
        this.syncLoadingStatus();
    };
    ModalContent.prototype.componentDidUpdate = function () {
        this.syncLoadingStatus();
    };
    ModalContent.prototype.syncLoadingStatus = function () {
        if (!this.modalContent) return;
        if (this.props.loading) {
            this.modalContent.loading();
        } else {
            this.modalContent.loaded();
        }
    };
    ModalContent.prototype.render = function () {
        return null;
    };
    ModalContent.contextType = context_1$4.AppBridgeContext;
    return ModalContent;
})(react_1$b.default.Component);
ModalContent$1.default = ModalContent;

var __importDefault$a =
    (commonjsGlobal && commonjsGlobal.__importDefault) ||
    function (mod) {
        return mod && mod.__esModule ? mod : { default: mod };
    };
Object.defineProperty(ModalContent$2, '__esModule', { value: true });
var ModalContent_1 = __importDefault$a(ModalContent$1);
ModalContent$2.default = ModalContent_1.default;

(function (exports) {
    var __importDefault =
        (commonjsGlobal && commonjsGlobal.__importDefault) ||
        function (mod) {
            return mod && mod.__esModule ? mod : { default: mod };
        };
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ModalContent = void 0;
    var Modal_1 = __importDefault(Modal$2);
    var ModalContent_1 = ModalContent$2;
    Object.defineProperty(exports, 'ModalContent', {
        enumerable: true,
        get: function () {
            return __importDefault(ModalContent_1).default;
        },
    });
    exports.default = Modal_1.default;
})(Modal$3);

var NavigationMenu$2 = {};

var NavigationMenu$1 = {};

var __createBinding$3 =
    (commonjsGlobal && commonjsGlobal.__createBinding) ||
    (Object.create
        ? function (o, m, k, k2) {
              if (k2 === undefined) k2 = k;
              Object.defineProperty(o, k2, {
                  enumerable: true,
                  get: function () {
                      return m[k];
                  },
              });
          }
        : function (o, m, k, k2) {
              if (k2 === undefined) k2 = k;
              o[k2] = m[k];
          });
var __setModuleDefault$3 =
    (commonjsGlobal && commonjsGlobal.__setModuleDefault) ||
    (Object.create
        ? function (o, v) {
              Object.defineProperty(o, 'default', { enumerable: true, value: v });
          }
        : function (o, v) {
              o['default'] = v;
          });
var __importStar$3 =
    (commonjsGlobal && commonjsGlobal.__importStar) ||
    function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== 'default' && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$3(result, mod, k);
        __setModuleDefault$3(result, mod);
        return result;
    };
Object.defineProperty(NavigationMenu$1, '__esModule', { value: true });
var react_1$a = react.exports;
var AppBridgeAppLinks = __importStar$3(AppLink);
var AppBridgeNavigationMenu = __importStar$3(NavigationMenu$3);
var useAppBridge_1$6 = useAppBridge$1;
function NavigationMenu(_a) {
    var navigationLinks = _a.navigationLinks,
        matcher = _a.matcher;
    var app = useAppBridge_1$6.useAppBridge();
    var _b = react_1$a.useState(),
        activeLink = _b[0],
        setActiveLink = _b[1];
    var items = react_1$a.useMemo(
        function () {
            return navigationLinks.map(function (link) {
                var appLink = AppBridgeAppLinks.create(app, link);
                if ((matcher === null || matcher === void 0 ? void 0 : matcher(link, location)) || link.destination === location.pathname) {
                    setActiveLink(appLink);
                }
                return appLink;
            });
        },
        [app, location.pathname, matcher, navigationLinks]
    );
    var navigationMenu = react_1$a.useMemo(
        function () {
            return AppBridgeNavigationMenu.create(app, {
                items: items,
                active: activeLink,
            });
            /* We want to reuse the same NavigationMenu instance, even when props change
             * (so we don't include all the props in the dependency array).
             * Instead of recreating the component on every change, we use the set method,
             * in the useEffect block below, to dispatch updates when props change.
             */
        },
        [app]
    );
    react_1$a.useEffect(
        function () {
            navigationMenu.set({ items: items, active: activeLink });
        },
        [activeLink, items]
    );
    return null;
}
NavigationMenu$1.default = NavigationMenu;

var __importDefault$9 =
    (commonjsGlobal && commonjsGlobal.__importDefault) ||
    function (mod) {
        return mod && mod.__esModule ? mod : { default: mod };
    };
Object.defineProperty(NavigationMenu$2, '__esModule', { value: true });
var NavigationMenu_1 = __importDefault$9(NavigationMenu$1);
NavigationMenu$2.default = NavigationMenu_1.default;

var Provider$1 = {};

var Provider = {};

var appBridge = { exports: {} };

var production = {};

var client = {};

var Client = {};

var MessageTransport = {};

var env = {};

(function (exports) {
    var _a, _b;
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.isUnframed = exports.isDevelopmentClient = exports.isProduction = exports.isDevelopment = exports.isClient = exports.isServer = void 0;
    exports.isServer = typeof window === 'undefined';
    exports.isClient = !exports.isServer;
    exports.isDevelopment = typeof process !== 'undefined' && process.env && 'production' === 'development';
    exports.isProduction = !exports.isDevelopment;
    exports.isDevelopmentClient = exports.isDevelopment && exports.isClient;
    // eslint-disable-next-line ssr-friendly/no-dom-globals-in-module-scope
    exports.isUnframed = exports.isClient && ((_b = (_a = window.navigator) === null || _a === void 0 ? void 0 : _a.userAgent) === null || _b === void 0 ? void 0 : _b.indexOf('Unframed')) > 0;
})(env);

(function (exports) {
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.createTransportListener = exports.fromWindow = exports.fromFrame = exports.Context = void 0;
    var Error_1 = _Error;
    var validator_1 = validator;
    var types_1 = types$2;
    var collection_1 = collection;
    var env_1 = env;
    (function (Context) {
        Context['Modal'] = 'Modal';
        Context['Main'] = 'Main';
    })(exports.Context || (exports.Context = {}));
    /**
     * Create a MessageTransport from a Frame.
     * @remarks
     * Used on the host-side to create a postMessage MessageTransport.
     * @beta
     */
    function fromFrame(frame, localOrigin, context) {
        var handlers = [];
        var host = frame.host,
            frameWindow = frame.window;
        if (!host) {
            throw Error_1.fromAction('App frame is undefined', Error_1.AppActionType.WINDOW_UNDEFINED);
        }
        if (env_1.isUnframed && window && window.MobileWebView) {
            Object.assign(window.MobileWebView, {
                postMessageToIframe: function (message, origin) {
                    frameWindow === null || frameWindow === void 0 ? void 0 : frameWindow.postMessage(message, origin);
                },
            });
        }
        host.addEventListener('message', function (event) {
            if (!validator_1.isAppMessage(event)) {
                return;
            }
            if (event.origin !== localOrigin) {
                var errorMessage = "Message origin '" + event.origin + "' does not match app origin '" + localOrigin + "'.";
                var payload = Error_1.invalidOriginAction(errorMessage);
                var message = {
                    type: 'dispatch',
                    payload: payload,
                };
                frameWindow === null || frameWindow === void 0 ? void 0 : frameWindow.postMessage(message, event.origin);
                return;
            }
            if (env_1.isUnframed && window && window.MobileWebView) {
                var payload = JSON.stringify({
                    id: 'unframed://fromClient',
                    origin: localOrigin,
                    data: event.data,
                });
                window.MobileWebView.postMessage(payload);
                return;
            }
            for (var _i = 0, handlers_1 = handlers; _i < handlers_1.length; _i++) {
                var handler = handlers_1[_i];
                handler(event);
            }
        });
        return {
            context: context,
            localOrigin: localOrigin,
            frameWindow: frameWindow,
            hostFrame: host,
            dispatch: function (message) {
                frameWindow === null || frameWindow === void 0 ? void 0 : frameWindow.postMessage(message, localOrigin);
            },
            subscribe: function (handler) {
                return collection_1.addAndRemoveFromCollection(handlers, handler);
            },
        };
    }
    exports.fromFrame = fromFrame;
    /**
     * Create a MessageTransport from a parent window.
     * @remarks
     * Used on the client-side to create a postMessage MessageTransport.
     * @internalremarks
     * In unframed mode, message should be dispatched via MobileWebView.postMessage instead of postMessage.
     * @beta
     */
    function fromWindow(contentWindow, localOrigin) {
        var handlers = [];
        if (typeof window !== undefined) {
            window.addEventListener('message', function (event) {
                if ((window === contentWindow && !env_1.isUnframed) || event.source !== contentWindow || !(validator_1.isAppBridgeAction(event.data.payload) || validator_1.isAppMessage(event))) {
                    return;
                }
                for (var _i = 0, handlers_2 = handlers; _i < handlers_2.length; _i++) {
                    var handler = handlers_2[_i];
                    handler(event);
                }
            });
        }
        return {
            localOrigin: localOrigin,
            hostFrame: contentWindow,
            dispatch: function (message) {
                var _a;
                if (!((_a = message.source) === null || _a === void 0 ? void 0 : _a.host)) {
                    return;
                }
                if (env_1.isUnframed && window && window.MobileWebView) {
                    var payload = JSON.stringify({
                        id: 'unframed://fromClient',
                        origin: localOrigin,
                        data: message,
                    });
                    window.MobileWebView.postMessage(payload);
                    return;
                }
                var messageOrigin = new URL('https://' + message.source.host).origin;
                contentWindow.postMessage(message, messageOrigin);
            },
            subscribe: function (handler) {
                return collection_1.addAndRemoveFromCollection(handlers, handler);
            },
        };
    }
    exports.fromWindow = fromWindow;
    function createTransportListener() {
        var listeners = [];
        var actionListeners = {};
        function createSubscribeHandler(dispatcher) {
            function subscribe() {
                if (arguments.length < 2) {
                    // eslint-disable-next-line prefer-rest-params
                    return collection_1.addAndRemoveFromCollection(listeners, { callback: arguments[0] });
                }
                // eslint-disable-next-line prefer-rest-params
                var _a = Array.from(arguments),
                    type = _a[0],
                    callback = _a[1],
                    id = _a[2];
                var actionCallback = { callback: callback, id: id };
                var payload = { type: type, id: id };
                if (!Object.prototype.hasOwnProperty.call(actionListeners, type)) {
                    actionListeners[type] = [];
                }
                if (dispatcher) {
                    dispatcher(types_1.MessageType.Subscribe, payload);
                }
                return collection_1.addAndRemoveFromCollection(actionListeners[type], actionCallback, function () {
                    if (dispatcher) {
                        dispatcher(types_1.MessageType.Unsubscribe, payload);
                    }
                });
            }
            return subscribe;
        }
        return {
            createSubscribeHandler: createSubscribeHandler,
            handleMessage: function (message) {
                listeners.forEach(function (listener) {
                    return listener.callback(message);
                });
            },
            handleActionDispatch: function (_a) {
                var type = _a.type,
                    payload = _a.payload;
                var hasCallback = false;
                if (Object.prototype.hasOwnProperty.call(actionListeners, type)) {
                    for (var _i = 0, _b = actionListeners[type]; _i < _b.length; _i++) {
                        var listener = _b[_i];
                        var id = listener.id,
                            callback = listener.callback;
                        var matchId = payload && payload.id === id;
                        if (matchId || !id) {
                            callback(payload);
                            hasCallback = true;
                        }
                    }
                }
                return hasCallback;
            },
        };
    }
    exports.createTransportListener = createTransportListener;
})(MessageTransport);

var shared = {};

Object.defineProperty(shared, '__esModule', { value: true });
shared.serverAppBridge = void 0;
var Error_1$2 = _Error;
var noop$c = function () {};
/**
 * @internal
 */
shared.serverAppBridge = {
    dispatch: function () {
        return {};
    },
    error: function () {
        return noop$c;
    },
    featuresAvailable: function () {
        return Promise.reject(Error_1$2.fromAction('Feature detection is only available on the client side.', Error_1$2.AppActionType.WINDOW_UNDEFINED));
    },
    getState: function () {
        return Promise.reject(Error_1$2.fromAction('State is only available on the client side.', Error_1$2.AppActionType.WINDOW_UNDEFINED));
    },
    localOrigin: '',
    hostOrigin: '',
    subscribe: function () {
        return noop$c;
    },
};

var print = {};

var redirect$1 = {};

Object.defineProperty(redirect$1, '__esModule', { value: true });
redirect$1.getWindow = redirect$1.getLocation = redirect$1.redirect = redirect$1.shouldRedirect = void 0;
function shouldRedirect(frame) {
    return frame === window;
}
redirect$1.shouldRedirect = shouldRedirect;
function redirect(url) {
    var location = getLocation();
    if (!location) {
        return;
    }
    location.assign(url);
}
redirect$1.redirect = redirect;
function getLocation() {
    return hasWindow() ? window.location : undefined;
}
redirect$1.getLocation = getLocation;
function getWindow() {
    return hasWindow() ? window : undefined;
}
redirect$1.getWindow = getWindow;
function hasWindow() {
    return typeof window !== 'undefined';
}

Object.defineProperty(print, '__esModule', { value: true });
print.handleAppPrint = void 0;
var redirect_1 = redirect$1;
function isRunningOniOS() {
    return navigator.userAgent.indexOf('iOS') >= 0;
}
function createHiddenInput() {
    var currentWindow = redirect_1.getWindow();
    if (!currentWindow || !currentWindow.document || !currentWindow.document.body) {
        return;
    }
    var inputElement = currentWindow.document.createElement('input');
    inputElement.style.display = 'none';
    currentWindow.document.body.appendChild(inputElement);
    return inputElement;
}
function printWindow() {
    var _a;
    (_a = redirect_1.getWindow()) === null || _a === void 0 ? void 0 : _a.print();
}
function handleMobileAppPrint() {
    var input = createHiddenInput();
    if (!input) {
        return;
    }
    input.select();
    printWindow();
    input.remove();
}
function handleAppPrint() {
    if (isRunningOniOS()) {
        handleMobileAppPrint();
    } else {
        printWindow();
    }
}
print.handleAppPrint = handleAppPrint;

var Hooks$1 = {};

Object.defineProperty(Hooks$1, '__esModule', { value: true });
var collection_1 = collection;
/**
 * Shopify App Bridge can be extended with hooks, which run when actions are dispatched and updated.
 * Hooks are middleware functions that can modify or cancel actions.
 *
 * The [validation middleware](../validate/README.md) is implemented using hooks.
 *
 * @remarks
 * Here’s an example hook that modifies all Toast show actions to have a duration of five seconds.
 *
 * ```ts
 * import createApp, {LifecycleHook, DispatchActionHook} from '@shopify/app-bridge';
 * import {Toast} from '@shopify/app-bridge/actions'
 *
 * const app = createApp({apiKey: API_KEY, host: HOST});
 *
 * function makeToastsFiveSeconds: DispatchActionHook(next) {
 *   return function(action){
 *       if(action.type === Toast.Action.SHOW) {
 *         const modifiedAction = {
 *           ...action,
 *           payload: {
 *             ...action.payload,
 *             duration: 5000,
 *           },
 *         };
 *         return next(modifiedAction);
 *       } else {
 *         // don’t modify non-Toast actions
 *         return next(action);
 *       }
 *   }
 * }
 *
 * app.hooks.set(LifecycleHook.DispatchAction, makeToastsFiveSeconds);
 * ```
 *
 * The hook function `makeToastsFiveSeconds()` takes a `next()` function as its argument.
 * The hook function returns an anonymous function, which takes the action being dispatched as its argument.
 *
 * To modify an action, call `next()` with the modified action, as in the example.
 * To cancel an action, don’t call `next()`, and the action will not be dispatched.
 */
var Hooks = /** @class */ (function () {
    function Hooks() {
        this.map = {};
    }
    Hooks.prototype.set = function (hook, handler) {
        if (!Object.prototype.hasOwnProperty.call(this.map, hook)) {
            this.map[hook] = [];
        }
        var value = { handler: handler, remove: function () {} };
        var remove = collection_1.addAndRemoveFromCollection(this.map[hook], value);
        value = { handler: handler, remove: remove };
        return remove;
    };
    Hooks.prototype.get = function (hook) {
        var value = this.map[hook];
        return value
            ? value.map(function (val) {
                  return val.handler;
              })
            : undefined;
    };
    // eslint-disable-next-line @typescript-eslint/ban-types
    Hooks.prototype.run = function (hook, final, context) {
        var initialArgs = [];
        for (var _i = 3; _i < arguments.length; _i++) {
            initialArgs[_i - 3] = arguments[_i];
        }
        var index = 0;
        var handlers = this.get(hook) || [];
        function handler() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            var childHandler = handlers[index++];
            if (childHandler) {
                return childHandler(handler).apply(context, args);
            }
            return final.apply(context, args);
        }
        return handler.apply(context, initialArgs);
    };
    return Hooks;
})();
Hooks$1.default = Hooks;

(function (exports) {
    var __assign =
        (commonjsGlobal && commonjsGlobal.__assign) ||
        function () {
            __assign =
                Object.assign ||
                function (t) {
                    for (var s, i = 1, n = arguments.length; i < n; i++) {
                        s = arguments[i];
                        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
                    }
                    return t;
                };
            return __assign.apply(this, arguments);
        };
    var __spreadArray =
        (commonjsGlobal && commonjsGlobal.__spreadArray) ||
        function (to, from) {
            for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) to[j] = from[i];
            return to;
        };
    var __importDefault =
        (commonjsGlobal && commonjsGlobal.__importDefault) ||
        function (mod) {
            return mod && mod.__esModule ? mod : { default: mod };
        };
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.createApp = exports.createAppWrapper = exports.createClientApp = exports.WINDOW_UNDEFINED_MESSAGE = void 0;
    var helper_1 = helper;
    var Print_1 = Print;
    var Error_1 = _Error;
    var MessageTransport_1 = MessageTransport;
    var shared_1 = shared;
    var env_1 = env;
    var Client_1 = Client$1;
    var print_1 = print;
    var redirect_1 = redirect$1;
    var types_1 = types$2;
    var Hooks_1 = __importDefault(Hooks$1);
    exports.WINDOW_UNDEFINED_MESSAGE = 'window is not defined. Running an app outside a browser is not supported';
    function redirectHandler(hostFrame, config) {
        var apiKey = config.apiKey,
            host = config.host,
            _a = config.forceRedirect,
            forceRedirect = _a === void 0 ? !env_1.isDevelopmentClient : _a;
        var location = redirect_1.getLocation();
        if (env_1.isUnframed || !location || !apiKey || !host || !forceRedirect || !redirect_1.shouldRedirect(hostFrame)) {
            return;
        }
        var url = 'https://' + host + '/apps/' + apiKey + location.pathname + (location.search || '');
        redirect_1.redirect(url);
    }
    function appSetUp(app) {
        app.subscribe(Print_1.Action.APP, print_1.handleAppPrint);
        app.dispatch(Client_1.initialize());
    }
    /**
     * @internal
     */
    var createClientApp = function (transport, middlewares) {
        if (middlewares === void 0) {
            middlewares = [];
        }
        var getStateListeners = [];
        var transportListener = MessageTransport_1.createTransportListener();
        var handler = function (event) {
            var message = event.data;
            var type = message.type,
                payload = message.payload;
            switch (type) {
                case 'getState': {
                    var resolvers = getStateListeners.splice(0);
                    resolvers.forEach(function (resolver) {
                        return resolver(payload);
                    });
                    break;
                }
                case 'dispatch': {
                    transportListener.handleMessage(payload);
                    var hasCallback = transportListener.handleActionDispatch(payload);
                    if (hasCallback) {
                        return;
                    }
                    // Throw an error if there are no subscriptions to this error
                    var errorType = helper_1.findMatchInEnum(Error_1.Action, payload.type);
                    if (errorType) {
                        Error_1.throwError(errorType, payload);
                    }
                    break;
                }
                // Silently swallow unknown actions
            }
        };
        transport.subscribe(handler);
        return function (config) {
            var decodedConfig = validateAndDecodeConfig(config);
            var dispatcher = createDispatcher(transport, decodedConfig);
            var subscribe = transportListener.createSubscribeHandler(dispatcher);
            // It is possible to initialize an app multiple times
            // Therefore we need to clear subscriptions to be safe
            dispatcher(types_1.MessageType.Unsubscribe);
            function dispatch(action) {
                dispatcher(types_1.MessageType.Dispatch, action);
                return action;
            }
            redirectHandler(transport.hostFrame, decodedConfig);
            var hostOrigin = new URL('https://' + decodedConfig.host).origin;
            var hooks = new Hooks_1.default();
            var app = {
                hostOrigin: hostOrigin,
                localOrigin: transport.localOrigin,
                hooks: hooks,
                dispatch: function (action) {
                    if (!app.hooks) {
                        return dispatch(action);
                    }
                    return app.hooks.run(types_1.LifecycleHook.DispatchAction, dispatch, app, action);
                },
                featuresAvailable: function () {
                    var features = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        features[_i] = arguments[_i];
                    }
                    var firstItem = features[0];
                    var parsedFeatures = Array.isArray(firstItem) ? __spreadArray([], firstItem) : features;
                    return app.getState('features').then(function (state) {
                        if (parsedFeatures.length) {
                            return parsedFeatures.reduce(function (acc, feature) {
                                if (Object.keys(state).includes(feature)) {
                                    acc[feature] = state[feature];
                                }
                                return acc;
                            }, {});
                        }
                        return state;
                    });
                },
                getState: function (query) {
                    if (query && typeof query !== 'string') {
                        return Promise.resolve(undefined);
                    }
                    return new Promise(function (resolve) {
                        getStateListeners.push(resolve);
                        dispatcher(types_1.MessageType.GetState);
                    }).then(function (state) {
                        var newState = state;
                        if (query) {
                            for (var _i = 0, _a = query.split('.'); _i < _a.length; _i++) {
                                var key = _a[_i];
                                if (newState == null || typeof newState !== 'object' || Array.isArray(newState) || !Object.keys(newState).includes(key)) {
                                    return undefined;
                                }
                                newState = newState[key];
                            }
                        }
                        return newState;
                    });
                },
                subscribe: subscribe,
                error: function (listener, id) {
                    var unsubscribeCb = [];
                    helper_1.forEachInEnum(Error_1.Action, function (eventNameSpace) {
                        unsubscribeCb.push(subscribe(eventNameSpace, listener, id));
                    });
                    return function () {
                        unsubscribeCb.forEach(function (unsubscribe) {
                            return unsubscribe();
                        });
                    };
                },
            };
            for (var _i = 0, middlewares_1 = middlewares; _i < middlewares_1.length; _i++) {
                var middleware = middlewares_1[_i];
                middleware(hooks, app);
            }
            appSetUp(app);
            return app;
        };
    };
    exports.createClientApp = createClientApp;
    /**
     * @internal
     */
    function validateAndDecodeConfig(config) {
        var _a;
        if (!config.host) {
            throw Error_1.fromAction('host must be provided', Error_1.AppActionType.INVALID_CONFIG);
        }
        if (!config.apiKey) {
            throw Error_1.fromAction('apiKey must be provided', Error_1.AppActionType.INVALID_CONFIG);
        }
        try {
            var host = atob((_a = config.host) === null || _a === void 0 ? void 0 : _a.replace(/_/g, '/').replace(/-/g, '+'));
            return __assign(__assign({}, config), { host: host });
        } catch (_b) {
            var message = 'not a valid host, please use the value provided by Shopify';
            throw Error_1.fromAction(message, Error_1.AppActionType.INVALID_CONFIG);
        }
    }
    /**
     * @public
     */
    function createAppWrapper(frame, localOrigin, middleware) {
        if (middleware === void 0) {
            middleware = [];
        }
        if (!frame) {
            throw Error_1.fromAction(exports.WINDOW_UNDEFINED_MESSAGE, Error_1.AppActionType.WINDOW_UNDEFINED);
        }
        var location = redirect_1.getLocation();
        var origin = localOrigin || (location && location.origin);
        if (!origin) {
            throw Error_1.fromAction('local origin cannot be blank', Error_1.AppActionType.MISSING_LOCAL_ORIGIN);
        }
        var transport = MessageTransport_1.fromWindow(frame, origin);
        var appCreator = exports.createClientApp(transport, middleware);
        return appCreator;
    }
    exports.createAppWrapper = createAppWrapper;
    /**
     * Creates your application instance.
     * @param config - `apiKey` and `host` are both required.
     * @remarks
     * You will need to store `host` during the authentication process and then retrieve it for the code to work properly. To learn more about this process, see {@link https://help.shopify.com/api/embedded-apps/shop-origin | Getting and storing the shop origin}.
     * @public
     */
    function createApp(config) {
        var currentWindow = redirect_1.getWindow();
        if (!currentWindow || !currentWindow.top) {
            return shared_1.serverAppBridge;
        }
        return createAppWrapper(currentWindow.top)(config);
    }
    exports.createApp = createApp;
    function createDispatcher(transport, config) {
        return function (type, payload) {
            transport.dispatch({
                payload: payload,
                source: config,
                type: type,
            });
        };
    }
    /**
     * {@inheritdocs createApp}
     * @public
     */
    exports.default = createApp;
})(Client);

(function (exports) {
    var __createBinding =
        (commonjsGlobal && commonjsGlobal.__createBinding) ||
        (Object.create
            ? function (o, m, k, k2) {
                  if (k2 === undefined) k2 = k;
                  Object.defineProperty(o, k2, {
                      enumerable: true,
                      get: function () {
                          return m[k];
                      },
                  });
              }
            : function (o, m, k, k2) {
                  if (k2 === undefined) k2 = k;
                  o[k2] = m[k];
              });
    var __exportStar =
        (commonjsGlobal && commonjsGlobal.__exportStar) ||
        function (m, exports) {
            for (var p in m) if (p !== 'default' && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
        };
    Object.defineProperty(exports, '__esModule', { value: true });
    var Client_1 = Client;
    __exportStar(types$2, exports);
    __exportStar(Client, exports);
    exports.default = Client_1.createClientApp;
})(client);

(function (exports) {
    var __createBinding =
        (commonjsGlobal && commonjsGlobal.__createBinding) ||
        (Object.create
            ? function (o, m, k, k2) {
                  if (k2 === undefined) k2 = k;
                  Object.defineProperty(o, k2, {
                      enumerable: true,
                      get: function () {
                          return m[k];
                      },
                  });
              }
            : function (o, m, k, k2) {
                  if (k2 === undefined) k2 = k;
                  o[k2] = m[k];
              });
    var __exportStar =
        (commonjsGlobal && commonjsGlobal.__exportStar) ||
        function (m, exports) {
            for (var p in m) if (p !== 'default' && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
        };
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.default = void 0;
    var client_1 = client;
    Object.defineProperty(exports, 'default', {
        enumerable: true,
        get: function () {
            return client_1.createApp;
        },
    });
    __exportStar(MessageTransport, exports);
    __exportStar(client, exports);
})(production);

{
    appBridge.exports = production;
}

const name = '@shopify/app-bridge-react';
const version = '2.0.24';
const types = 'index.d.ts';
const main$1 = 'index.js';
const unpkg = 'umd/index.js';
const jsdelivr = 'umd/index.js';
const files = ['/components/', '/umd/', '/hooks/', '/utilities/', '/context.d.ts', '/context.js', '/index.d.ts', '/index.js', '/types.d.ts', '/types.js', '/useAppBridge.d.ts', '/useAppBridge.js'];
const publishConfig = {
    access: 'public',
    '@shopify:registry': 'https://registry.npmjs.org',
};
const repository = 'git@github.com:Shopify/app-bridge.git';
const homepage = 'https://shopify.dev/tools/app-bridge/react-components';
const author = 'Shopify Inc.';
const license = 'MIT';
const scripts = {
    build: 'yarn build:tsc && yarn build:umd',
    'build:tsc': 'NODE_ENV=production tsc',
    'build:umd': 'NODE_ENV=production webpack -p',
    check: 'tsc',
    clean: "cat package.json | node -pe \"JSON.parse(require('fs').readFileSync('/dev/stdin').toString()).files.map(f => './'+f).join(' ')\" | xargs rm -rf",
    pack: 'yarn pack',
    size: 'size-limit',
};
const sideEffects = false;
const dependencies = {
    '@shopify/app-bridge': '^2.0.24',
};
const devDependencies = {
    '@types/react': '^17.0.38',
    enzyme: '3.11.0',
    'react-dom': '^17.0.2',
};
const peerDependencies = {
    react: '^16.0.0 || ^17.0.0',
};
const gitHead = '0c3aa24d39c86120c8823bd43f439cda0ab7df5e';
var require$$3 = {
    name: name,
    version: version,
    types: types,
    main: main$1,
    unpkg: unpkg,
    jsdelivr: jsdelivr,
    files: files,
    private: false,
    publishConfig: publishConfig,
    repository: repository,
    homepage: homepage,
    author: author,
    license: license,
    scripts: scripts,
    sideEffects: sideEffects,
    'size-limit': [
        {
            limit: '30 KB',
            path: 'index.js',
        },
    ],
    dependencies: dependencies,
    devDependencies: devDependencies,
    peerDependencies: peerDependencies,
    gitHead: gitHead,
};

(function (exports) {
    var __extends =
        (commonjsGlobal && commonjsGlobal.__extends) ||
        (function () {
            var extendStatics = function (d, b) {
                extendStatics =
                    Object.setPrototypeOf ||
                    ({ __proto__: [] } instanceof Array &&
                        function (d, b) {
                            d.__proto__ = b;
                        }) ||
                    function (d, b) {
                        for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
                    };
                return extendStatics(d, b);
            };
            return function (d, b) {
                if (typeof b !== 'function' && b !== null) throw new TypeError('Class extends value ' + String(b) + ' is not a constructor or null');
                extendStatics(d, b);
                function __() {
                    this.constructor = d;
                }
                d.prototype = b === null ? Object.create(b) : ((__.prototype = b.prototype), new __());
            };
        })();
    var __createBinding =
        (commonjsGlobal && commonjsGlobal.__createBinding) ||
        (Object.create
            ? function (o, m, k, k2) {
                  if (k2 === undefined) k2 = k;
                  Object.defineProperty(o, k2, {
                      enumerable: true,
                      get: function () {
                          return m[k];
                      },
                  });
              }
            : function (o, m, k, k2) {
                  if (k2 === undefined) k2 = k;
                  o[k2] = m[k];
              });
    var __setModuleDefault =
        (commonjsGlobal && commonjsGlobal.__setModuleDefault) ||
        (Object.create
            ? function (o, v) {
                  Object.defineProperty(o, 'default', { enumerable: true, value: v });
              }
            : function (o, v) {
                  o['default'] = v;
              });
    var __importStar =
        (commonjsGlobal && commonjsGlobal.__importStar) ||
        function (mod) {
            if (mod && mod.__esModule) return mod;
            var result = {};
            if (mod != null) for (var k in mod) if (k !== 'default' && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
            __setModuleDefault(result, mod);
            return result;
        };
    var __importDefault =
        (commonjsGlobal && commonjsGlobal.__importDefault) ||
        function (mod) {
            return mod && mod.__esModule ? mod : { default: mod };
        };
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.setClientInterfaceHook = void 0;
    var react_1 = __importDefault(react.exports);
    var app_bridge_1 = __importStar(appBridge.exports);
    var context_1 = context;
    // eslint-disable-next-line @typescript-eslint/no-var-requires
    var packageJson = require$$3;
    /**
     * Create an App Bridge client application from a config and pass it as the
     * value to the context provider.
     *
     * @remarks
     * You'll probably want something a little more robust than storing the current
     * app instance in a module-level global.
     *
     * @public
     */
    var Provider = /** @class */ (function (_super) {
        __extends(Provider, _super);
        function Provider() {
            var _this = (_super !== null && _super.apply(this, arguments)) || this;
            _this.app = _this.appInstance;
            return _this;
        }
        Object.defineProperty(Provider.prototype, 'appInstance', {
            get: function () {
                if (!this.app) {
                    this.app = app_bridge_1.default(this.props.config);
                    if (this.app && this.app.hooks) {
                        this.app.hooks.set(app_bridge_1.LifecycleHook.DispatchAction, exports.setClientInterfaceHook);
                    }
                }
                return this.app;
            },
            enumerable: false,
            configurable: true,
        });
        Provider.prototype.render = function () {
            return react_1.default.createElement(context_1.AppBridgeContext.Provider, { value: this.appInstance }, this.props.children);
        };
        return Provider;
    })(react_1.default.Component);
    exports.default = Provider;
    /**
     * Augment actions with clientInterface metadata, identifying use of this library
     *
     * @internal
     */
    var setClientInterfaceHook = function (next) {
        return function (action) {
            action.clientInterface = {
                name: '@shopify/app-bridge-react',
                version: packageJson.version,
            };
            return next(action);
        };
    };
    exports.setClientInterfaceHook = setClientInterfaceHook;
})(Provider);

var __importDefault$8 =
    (commonjsGlobal && commonjsGlobal.__importDefault) ||
    function (mod) {
        return mod && mod.__esModule ? mod : { default: mod };
    };
Object.defineProperty(Provider$1, '__esModule', { value: true });
var Provider_1 = __importDefault$8(Provider);
Provider$1.default = Provider_1.default;

var ResourcePicker$2 = {};

var ResourcePicker$1 = {};

var __extends$3 =
    (commonjsGlobal && commonjsGlobal.__extends) ||
    (function () {
        var extendStatics = function (d, b) {
            extendStatics =
                Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array &&
                    function (d, b) {
                        d.__proto__ = b;
                    }) ||
                function (d, b) {
                    for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
                };
            return extendStatics(d, b);
        };
        return function (d, b) {
            if (typeof b !== 'function' && b !== null) throw new TypeError('Class extends value ' + String(b) + ' is not a constructor or null');
            extendStatics(d, b);
            function __() {
                this.constructor = d;
            }
            d.prototype = b === null ? Object.create(b) : ((__.prototype = b.prototype), new __());
        };
    })();
var __assign$2 =
    (commonjsGlobal && commonjsGlobal.__assign) ||
    function () {
        __assign$2 =
            Object.assign ||
            function (t) {
                for (var s, i = 1, n = arguments.length; i < n; i++) {
                    s = arguments[i];
                    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
                }
                return t;
            };
        return __assign$2.apply(this, arguments);
    };
var __importDefault$7 =
    (commonjsGlobal && commonjsGlobal.__importDefault) ||
    function (mod) {
        return mod && mod.__esModule ? mod : { default: mod };
    };
Object.defineProperty(ResourcePicker$1, '__esModule', { value: true });
var react_1$9 = __importDefault$7(react.exports);
var actions_1$4 = actions$2;
var context_1$3 = context;
/**
 * ResourcePicker component
 *
 * @remarks
 * React component which wraps the Shopify App Bridge ResourcePicker action.
 *
 * @public
 */
var ResourcePicker = /** @class */ (function (_super) {
    __extends$3(ResourcePicker, _super);
    function ResourcePicker() {
        var _this = (_super !== null && _super.apply(this, arguments)) || this;
        _this.focusReturnPoint = null;
        return _this;
    }
    ResourcePicker.prototype.componentDidMount = function () {
        var _a = this.props,
            open = _a.open,
            resourceType = _a.resourceType,
            onSelection = _a.onSelection,
            onCancel = _a.onCancel;
        var app = this.context;
        this.picker = actions_1$4.ResourcePicker.create(app, {
            resourceType: actions_1$4.ResourcePicker.ResourceType[resourceType],
            options: this.getActionOptions(),
        });
        if (onSelection != null) {
            this.picker.subscribe(actions_1$4.ResourcePicker.Action.SELECT, onSelection);
        }
        if (onCancel != null) {
            this.picker.subscribe(actions_1$4.ResourcePicker.Action.CANCEL, onCancel);
        }
        if (open) {
            this.focusReturnPoint = document.activeElement;
            this.picker.dispatch(actions_1$4.ResourcePicker.Action.OPEN);
        }
    };
    ResourcePicker.prototype.componentDidUpdate = function (prevProps) {
        var wasOpen = prevProps.open;
        var _a = this.props,
            open = _a.open,
            onCancel = _a.onCancel,
            onSelection = _a.onSelection;
        this.picker.unsubscribe();
        this.picker.set(this.getActionOptions());
        if (onSelection != null) {
            this.picker.subscribe(actions_1$4.ResourcePicker.Action.SELECT, onSelection);
        }
        if (onCancel != null) {
            this.picker.subscribe(actions_1$4.ResourcePicker.Action.CANCEL, onCancel);
        }
        if (wasOpen !== open) {
            if (open) {
                this.picker.dispatch(actions_1$4.ResourcePicker.Action.OPEN);
            } else {
                this.picker.dispatch(actions_1$4.ResourcePicker.Action.CLOSE);
            }
        }
        if (!wasOpen && open) {
            this.focusReturnPoint = document.activeElement;
        } else if (wasOpen && !open && this.focusReturnPoint != null && document.contains(this.focusReturnPoint)) {
            this.focusReturnPoint.focus();
            this.focusReturnPoint = null;
        }
    };
    ResourcePicker.prototype.componentWillUnmount = function () {
        this.picker.unsubscribe();
    };
    ResourcePicker.prototype.render = function () {
        return null;
    };
    ResourcePicker.prototype.getActionOptions = function () {
        var _a = this.props,
            initialQuery = _a.initialQuery,
            initialSelectionIds = _a.initialSelectionIds,
            showHidden = _a.showHidden,
            allowMultiple = _a.allowMultiple,
            selectMultiple = _a.selectMultiple,
            actionVerb = _a.actionVerb;
        var sharedOptions = {
            initialQuery: initialQuery,
            initialSelectionIds: initialSelectionIds,
            showHidden: showHidden,
            selectMultiple: selectMultiple !== null && selectMultiple !== void 0 ? selectMultiple : allowMultiple,
            actionVerb: actionVerb,
        };
        var result = sharedOptions;
        if (this.props.resourceType === 'Product') {
            var _b = this.props,
                showVariants = _b.showVariants,
                showDraft = _b.showDraft,
                showArchived = _b.showArchived,
                showDraftBadge = _b.showDraftBadge,
                showArchivedBadge = _b.showArchivedBadge;
            var productSpecificOptions = {
                showVariants: showVariants,
                showDraft: showDraft,
                showArchived: showArchived,
                showDraftBadge: showDraftBadge,
                showArchivedBadge: showArchivedBadge,
            };
            result = __assign$2(__assign$2({}, sharedOptions), productSpecificOptions);
        }
        return result;
    };
    ResourcePicker.contextType = context_1$3.AppBridgeContext;
    ResourcePicker.ActionVerb = actions_1$4.ResourcePicker.ActionVerb;
    return ResourcePicker;
})(react_1$9.default.PureComponent);
ResourcePicker$1.default = ResourcePicker;

var __importDefault$6 =
    (commonjsGlobal && commonjsGlobal.__importDefault) ||
    function (mod) {
        return mod && mod.__esModule ? mod : { default: mod };
    };
Object.defineProperty(ResourcePicker$2, '__esModule', { value: true });
var ResourcePicker_1 = __importDefault$6(ResourcePicker$1);
ResourcePicker$2.default = ResourcePicker_1.default;

var TitleBar$2 = {};

var TitleBar$1 = {};

var __extends$2 =
    (commonjsGlobal && commonjsGlobal.__extends) ||
    (function () {
        var extendStatics = function (d, b) {
            extendStatics =
                Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array &&
                    function (d, b) {
                        d.__proto__ = b;
                    }) ||
                function (d, b) {
                    for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
                };
            return extendStatics(d, b);
        };
        return function (d, b) {
            if (typeof b !== 'function' && b !== null) throw new TypeError('Class extends value ' + String(b) + ' is not a constructor or null');
            extendStatics(d, b);
            function __() {
                this.constructor = d;
            }
            d.prototype = b === null ? Object.create(b) : ((__.prototype = b.prototype), new __());
        };
    })();
var __importDefault$5 =
    (commonjsGlobal && commonjsGlobal.__importDefault) ||
    function (mod) {
        return mod && mod.__esModule ? mod : { default: mod };
    };
Object.defineProperty(TitleBar$1, '__esModule', { value: true });
var react_1$8 = __importDefault$5(react.exports);
var actions_1$3 = actions$2;
var transformers_1 = transformers;
var context_1$2 = context;
var TitleBar = /** @class */ (function (_super) {
    __extends$2(TitleBar, _super);
    function TitleBar() {
        return (_super !== null && _super.apply(this, arguments)) || this;
    }
    TitleBar.prototype.componentDidMount = function () {
        var app = this.context;
        this.titleBar = actions_1$3.TitleBar.create(app, this.transformProps());
    };
    TitleBar.prototype.componentDidUpdate = function () {
        this.titleBar.unsubscribe();
        this.titleBar.set(this.transformProps());
    };
    TitleBar.prototype.componentWillUnmount = function () {
        this.titleBar.unsubscribe();
    };
    TitleBar.prototype.render = function () {
        return null;
    };
    TitleBar.prototype.transformProps = function () {
        var app = this.context;
        var _a = this.props,
            title = _a.title,
            primaryAction = _a.primaryAction,
            secondaryActions = _a.secondaryActions,
            actionGroups = _a.actionGroups;
        return {
            title: title,
            buttons: transformers_1.transformActions(app, {
                primaryAction: primaryAction,
                secondaryActions: secondaryActions,
                actionGroups: actionGroups,
            }),
            breadcrumbs: this.transformBreadcrumbs(),
        };
    };
    TitleBar.prototype.transformBreadcrumbs = function () {
        var app = this.context;
        var breadcrumbs = this.props.breadcrumbs;
        if (breadcrumbs == null || breadcrumbs.length === 0) {
            return undefined;
        }
        var breadcrumb = breadcrumbs[breadcrumbs.length - 1];
        var url = breadcrumb.url,
            onAction = breadcrumb.onAction,
            target = breadcrumb.target,
            content = breadcrumb.content;
        var button = actions_1$3.Button.create(app, {
            label: content || '',
        });
        var redirect = transformers_1.generateRedirect(app, url, target);
        if (redirect != null) {
            button.subscribe(actions_1$3.Button.Action.CLICK, redirect);
        }
        if (onAction != null) {
            button.subscribe(actions_1$3.Button.Action.CLICK, onAction);
        }
        return button;
    };
    TitleBar.contextType = context_1$2.AppBridgeContext;
    return TitleBar;
})(react_1$8.default.PureComponent);
TitleBar$1.default = TitleBar;

var __importDefault$4 =
    (commonjsGlobal && commonjsGlobal.__importDefault) ||
    function (mod) {
        return mod && mod.__esModule ? mod : { default: mod };
    };
Object.defineProperty(TitleBar$2, '__esModule', { value: true });
var TitleBar_1 = __importDefault$4(TitleBar$1);
TitleBar$2.default = TitleBar_1.default;

var Toast$3 = {};

var Toast$2 = {};

(function (exports) {
    var __extends =
        (commonjsGlobal && commonjsGlobal.__extends) ||
        (function () {
            var extendStatics = function (d, b) {
                extendStatics =
                    Object.setPrototypeOf ||
                    ({ __proto__: [] } instanceof Array &&
                        function (d, b) {
                            d.__proto__ = b;
                        }) ||
                    function (d, b) {
                        for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
                    };
                return extendStatics(d, b);
            };
            return function (d, b) {
                if (typeof b !== 'function' && b !== null) throw new TypeError('Class extends value ' + String(b) + ' is not a constructor or null');
                extendStatics(d, b);
                function __() {
                    this.constructor = d;
                }
                d.prototype = b === null ? Object.create(b) : ((__.prototype = b.prototype), new __());
            };
        })();
    var __importDefault =
        (commonjsGlobal && commonjsGlobal.__importDefault) ||
        function (mod) {
            return mod && mod.__esModule ? mod : { default: mod };
        };
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.DEFAULT_TOAST_DURATION = void 0;
    var react_1 = __importDefault(react.exports);
    var actions_1 = actions$2;
    var context_1 = context;
    exports.DEFAULT_TOAST_DURATION = 5000;
    /**
     * Toast component
     *
     * @remarks
     * React component which wraps the Shopify App Bridge Toast action.
     *
     * @public
     */
    var Toast = /** @class */ (function (_super) {
        __extends(Toast, _super);
        function Toast() {
            return (_super !== null && _super.apply(this, arguments)) || this;
        }
        Toast.prototype.componentDidMount = function () {
            var app = this.context;
            var _a = this.props,
                error = _a.error,
                content = _a.content,
                _b = _a.duration,
                duration = _b === void 0 ? exports.DEFAULT_TOAST_DURATION : _b,
                onDismiss = _a.onDismiss;
            this.toast = actions_1.Toast.create(app, {
                message: content,
                duration: duration,
                isError: error,
            });
            this.toast.subscribe(actions_1.Toast.Action.CLEAR, onDismiss);
            this.toast.dispatch(actions_1.Toast.Action.SHOW);
        };
        Toast.prototype.componentWillUnmount = function () {
            this.toast.unsubscribe();
        };
        Toast.prototype.render = function () {
            return null;
        };
        Toast.contextType = context_1.AppBridgeContext;
        return Toast;
    })(react_1.default.PureComponent);
    exports.default = Toast;
})(Toast$2);

var __importDefault$3 =
    (commonjsGlobal && commonjsGlobal.__importDefault) ||
    function (mod) {
        return mod && mod.__esModule ? mod : { default: mod };
    };
Object.defineProperty(Toast$3, '__esModule', { value: true });
var Toast_1 = __importDefault$3(Toast$2);
Toast$3.default = Toast_1.default;

var RoutePropagator$2 = {};

var RoutePropagator$1 = {};

var routePropagator = {};

var globals = {};

Object.defineProperty(globals, '__esModule', { value: true });
globals.getOrigin = globals.getTopWindow = globals.getSelfWindow = void 0;
function getSelfWindow() {
    return window.self;
}
globals.getSelfWindow = getSelfWindow;
function getTopWindow() {
    return window.top;
}
globals.getTopWindow = getTopWindow;
function getOrigin() {
    return location.origin;
}
globals.getOrigin = getOrigin;

var __awaiter$6 =
    (commonjsGlobal && commonjsGlobal.__awaiter) ||
    function (thisArg, _arguments, P, generator) {
        function adopt(value) {
            return value instanceof P
                ? value
                : new P(function (resolve) {
                      resolve(value);
                  });
        }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) {
                try {
                    step(generator.next(value));
                } catch (e) {
                    reject(e);
                }
            }
            function rejected(value) {
                try {
                    step(generator['throw'](value));
                } catch (e) {
                    reject(e);
                }
            }
            function step(result) {
                result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
            }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
var __generator$6 =
    (commonjsGlobal && commonjsGlobal.__generator) ||
    function (thisArg, body) {
        var _ = {
                label: 0,
                sent: function () {
                    if (t[0] & 1) throw t[1];
                    return t[1];
                },
                trys: [],
                ops: [],
            },
            f,
            y,
            t,
            g;
        return (
            (g = { next: verb(0), throw: verb(1), return: verb(2) }),
            typeof Symbol === 'function' &&
                (g[Symbol.iterator] = function () {
                    return this;
                }),
            g
        );
        function verb(n) {
            return function (v) {
                return step([n, v]);
            };
        }
        function step(op) {
            if (f) throw new TypeError('Generator is already executing.');
            while (_)
                try {
                    if (((f = 1), y && (t = op[0] & 2 ? y['return'] : op[0] ? y['throw'] || ((t = y['return']) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)) return t;
                    if (((y = 0), t)) op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!((t = _.trys), (t = t.length > 0 && t[t.length - 1])) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2]) _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                } catch (e) {
                    op = [6, e];
                    y = 0;
                } finally {
                    f = t = 0;
                }
            if (op[0] & 5) throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    };
Object.defineProperty(routePropagator, '__esModule', { value: true });
routePropagator.updateHistory = void 0;
var MessageTransport_1$1 = MessageTransport;
var actions_1$2 = actions$2;
var globals_1 = globals;
// These parameters are added to the iframe url but we don't want to propagate
// them up to the address bar as they are not provided by the application
// Removing hmac is especially important as its presence may cause infinite
// oauth authentication loops
var embeddedFrameParamsToRemove = ['hmac', 'locale', 'protocol', 'session', 'shop', 'timestamp', 'host'];
function updateHistory(app, location) {
    return __awaiter$6(this, void 0, void 0, function () {
        var selfWindow, topWindow, renderedInTheTopWindow, renderedAsMainApp, normalizedLocation, pathname, search, hash, locationStr;
        return __generator$6(this, function (_a) {
            switch (_a.label) {
                case 0:
                    selfWindow = globals_1.getSelfWindow();
                    topWindow = globals_1.getTopWindow();
                    renderedInTheTopWindow = selfWindow === topWindow;
                    return [
                        4 /*yield*/,
                        app.getState('context').then(function (context) {
                            return context === MessageTransport_1$1.Context.Main;
                        }),
                    ];
                case 1:
                    renderedAsMainApp = _a.sent();
                    if (renderedInTheTopWindow || !renderedAsMainApp) {
                        return [2 /*return*/];
                    }
                    normalizedLocation = getNormalizedURL(location);
                    embeddedFrameParamsToRemove.forEach(function (param) {
                        return normalizedLocation.searchParams.delete(param);
                    });
                    (pathname = normalizedLocation.pathname), (search = normalizedLocation.search), (hash = normalizedLocation.hash);
                    locationStr = '' + pathname + search + hash;
                    actions_1$2.History.create(app).dispatch(actions_1$2.History.Action.REPLACE, locationStr);
                    return [2 /*return*/];
            }
        });
    });
}
routePropagator.updateHistory = updateHistory;
function getNormalizedURL(location) {
    var origin = globals_1.getOrigin();
    if (typeof location === 'string') {
        return new URL(location, origin);
    }
    var pathname = location.pathname,
        search = location.search,
        hash = location.hash;
    return new URL('' + pathname + search + hash, origin);
}

var __extends$1 =
    (commonjsGlobal && commonjsGlobal.__extends) ||
    (function () {
        var extendStatics = function (d, b) {
            extendStatics =
                Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array &&
                    function (d, b) {
                        d.__proto__ = b;
                    }) ||
                function (d, b) {
                    for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
                };
            return extendStatics(d, b);
        };
        return function (d, b) {
            if (typeof b !== 'function' && b !== null) throw new TypeError('Class extends value ' + String(b) + ' is not a constructor or null');
            extendStatics(d, b);
            function __() {
                this.constructor = d;
            }
            d.prototype = b === null ? Object.create(b) : ((__.prototype = b.prototype), new __());
        };
    })();
var __importDefault$2 =
    (commonjsGlobal && commonjsGlobal.__importDefault) ||
    function (mod) {
        return mod && mod.__esModule ? mod : { default: mod };
    };
Object.defineProperty(RoutePropagator$1, '__esModule', { value: true });
var react_1$7 = __importDefault$2(react.exports);
var context_1$1 = context;
var route_propagator_1$1 = routePropagator;
/**
 * RoutePropagator component
 *
 * @remarks
 * React component which keeps the Shopify admin url in sync with the app url
 *
 * @public
 */
var RoutePropagator = /** @class */ (function (_super) {
    __extends$1(RoutePropagator, _super);
    function RoutePropagator() {
        return (_super !== null && _super.apply(this, arguments)) || this;
    }
    RoutePropagator.prototype.componentDidMount = function () {
        var location = this.props.location;
        route_propagator_1$1.updateHistory(this.context, location);
    };
    RoutePropagator.prototype.componentDidUpdate = function (_a) {
        var prevLocation = _a.location;
        var location = this.props.location;
        if (location !== prevLocation) {
            route_propagator_1$1.updateHistory(this.context, location);
        }
    };
    RoutePropagator.prototype.render = function () {
        return null;
    };
    RoutePropagator.contextType = context_1$1.AppBridgeContext;
    return RoutePropagator;
})(react_1$7.default.Component);
RoutePropagator$1.default = RoutePropagator;

var hook$1 = {};

Object.defineProperty(hook$1, '__esModule', { value: true });
var react_1$6 = react.exports;
var useAppBridge_1$5 = useAppBridge$1;
var route_propagator_1 = routePropagator;
/**
 * useRoutePropagation
 *
 * @remarks
 * A hook which keeps the Shopify admin url in sync with the app url
 *
 * @public
 */
function useRoutePropagation(location) {
    var app = useAppBridge_1$5.useAppBridge();
    react_1$6.useEffect(
        function () {
            route_propagator_1.updateHistory(app, location);
        },
        [app, location]
    );
}
hook$1.default = useRoutePropagation;

(function (exports) {
    var __importDefault =
        (commonjsGlobal && commonjsGlobal.__importDefault) ||
        function (mod) {
            return mod && mod.__esModule ? mod : { default: mod };
        };
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.useRoutePropagation = exports.RoutePropagator = void 0;
    var RoutePropagator_1 = RoutePropagator$1;
    Object.defineProperty(exports, 'RoutePropagator', {
        enumerable: true,
        get: function () {
            return __importDefault(RoutePropagator_1).default;
        },
    });
    var hook_1 = hook$1;
    Object.defineProperty(exports, 'useRoutePropagation', {
        enumerable: true,
        get: function () {
            return __importDefault(hook_1).default;
        },
    });
})(RoutePropagator$2);

var ClientRouter$2 = {};

var ClientRouter$1 = {};

var router = {};

Object.defineProperty(router, '__esModule', { value: true });
router.handleRouteChange = void 0;
var actions_1$1 = actions$2;
function handleRouteChange(app, history) {
    return app.subscribe(actions_1$1.Redirect.Action.APP, function (_a) {
        var path = _a.path;
        history.replace(path);
    });
}
router.handleRouteChange = handleRouteChange;

var __extends =
    (commonjsGlobal && commonjsGlobal.__extends) ||
    (function () {
        var extendStatics = function (d, b) {
            extendStatics =
                Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array &&
                    function (d, b) {
                        d.__proto__ = b;
                    }) ||
                function (d, b) {
                    for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
                };
            return extendStatics(d, b);
        };
        return function (d, b) {
            if (typeof b !== 'function' && b !== null) throw new TypeError('Class extends value ' + String(b) + ' is not a constructor or null');
            extendStatics(d, b);
            function __() {
                this.constructor = d;
            }
            d.prototype = b === null ? Object.create(b) : ((__.prototype = b.prototype), new __());
        };
    })();
var __importDefault$1 =
    (commonjsGlobal && commonjsGlobal.__importDefault) ||
    function (mod) {
        return mod && mod.__esModule ? mod : { default: mod };
    };
Object.defineProperty(ClientRouter$1, '__esModule', { value: true });
var react_1$5 = __importDefault$1(react.exports);
var context_1 = context;
var router_1$1 = router;
/**
 * ClientRouter component
 *
 * @remarks
 * React component which keeps the Shopify admin url in sync with the app url
 *
 * @public
 */
var ClientRouter = /** @class */ (function (_super) {
    __extends(ClientRouter, _super);
    function ClientRouter() {
        return (_super !== null && _super.apply(this, arguments)) || this;
    }
    ClientRouter.prototype.componentDidMount = function () {
        var history = this.props.history;
        this.unsubscribe = router_1$1.handleRouteChange(this.context, history);
    };
    ClientRouter.prototype.componentWillUnmount = function () {
        if (this.unsubscribe) {
            this.unsubscribe();
        }
    };
    ClientRouter.prototype.render = function () {
        return null;
    };
    ClientRouter.contextType = context_1.AppBridgeContext;
    return ClientRouter;
})(react_1$5.default.Component);
ClientRouter$1.default = ClientRouter;

var hook = {};

Object.defineProperty(hook, '__esModule', { value: true });
var react_1$4 = react.exports;
var useAppBridge_1$4 = useAppBridge$1;
var router_1 = router;
/**
 * useRoutePropagation
 *
 * @remarks
 * A hook which keeps the Shopify admin url in sync with the app url
 *
 * @public
 */
function useClientRouting(history) {
    var app = useAppBridge_1$4.useAppBridge();
    react_1$4.useEffect(
        function () {
            return router_1.handleRouteChange(app, history);
        },
        [app, history]
    );
}
hook.default = useClientRouting;

(function (exports) {
    var __importDefault =
        (commonjsGlobal && commonjsGlobal.__importDefault) ||
        function (mod) {
            return mod && mod.__esModule ? mod : { default: mod };
        };
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.useClientRouting = exports.ClientRouter = void 0;
    var ClientRouter_1 = ClientRouter$1;
    Object.defineProperty(exports, 'ClientRouter', {
        enumerable: true,
        get: function () {
            return __importDefault(ClientRouter_1).default;
        },
    });
    var hook_1 = hook;
    Object.defineProperty(exports, 'useClientRouting', {
        enumerable: true,
        get: function () {
            return __importDefault(hook_1).default;
        },
    });
})(ClientRouter$2);

(function (exports) {
    var __createBinding =
        (commonjsGlobal && commonjsGlobal.__createBinding) ||
        (Object.create
            ? function (o, m, k, k2) {
                  if (k2 === undefined) k2 = k;
                  Object.defineProperty(o, k2, {
                      enumerable: true,
                      get: function () {
                          return m[k];
                      },
                  });
              }
            : function (o, m, k, k2) {
                  if (k2 === undefined) k2 = k;
                  o[k2] = m[k];
              });
    var __exportStar =
        (commonjsGlobal && commonjsGlobal.__exportStar) ||
        function (m, exports) {
            for (var p in m) if (p !== 'default' && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
        };
    var __importDefault =
        (commonjsGlobal && commonjsGlobal.__importDefault) ||
        function (mod) {
            return mod && mod.__esModule ? mod : { default: mod };
        };
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.Toast = exports.TitleBar = exports.ResourcePicker = exports.Provider = exports.NavigationMenu = exports.ModalContent = exports.Modal = exports.Loading = exports.ContextualSaveBar = void 0;
    var ContextualSaveBar_1 = ContextualSaveBar$4;
    Object.defineProperty(exports, 'ContextualSaveBar', {
        enumerable: true,
        get: function () {
            return __importDefault(ContextualSaveBar_1).default;
        },
    });
    var Loading_1 = Loading$4;
    Object.defineProperty(exports, 'Loading', {
        enumerable: true,
        get: function () {
            return __importDefault(Loading_1).default;
        },
    });
    var Modal_1 = Modal$3;
    Object.defineProperty(exports, 'Modal', {
        enumerable: true,
        get: function () {
            return __importDefault(Modal_1).default;
        },
    });
    Object.defineProperty(exports, 'ModalContent', {
        enumerable: true,
        get: function () {
            return Modal_1.ModalContent;
        },
    });
    var NavigationMenu_1 = NavigationMenu$2;
    Object.defineProperty(exports, 'NavigationMenu', {
        enumerable: true,
        get: function () {
            return __importDefault(NavigationMenu_1).default;
        },
    });
    var Provider_1 = Provider$1;
    Object.defineProperty(exports, 'Provider', {
        enumerable: true,
        get: function () {
            return __importDefault(Provider_1).default;
        },
    });
    var ResourcePicker_1 = ResourcePicker$2;
    Object.defineProperty(exports, 'ResourcePicker', {
        enumerable: true,
        get: function () {
            return __importDefault(ResourcePicker_1).default;
        },
    });
    var TitleBar_1 = TitleBar$2;
    Object.defineProperty(exports, 'TitleBar', {
        enumerable: true,
        get: function () {
            return __importDefault(TitleBar_1).default;
        },
    });
    var Toast_1 = Toast$3;
    Object.defineProperty(exports, 'Toast', {
        enumerable: true,
        get: function () {
            return __importDefault(Toast_1).default;
        },
    });
    __exportStar(RoutePropagator$2, exports);
    __exportStar(ClientRouter$2, exports);
})(components);

var hooks = {};

var useContextualSaveBar$2 = {};

var useContextualSaveBar$1 = {};

var __rest =
    (commonjsGlobal && commonjsGlobal.__rest) ||
    function (s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === 'function')
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
            }
        return t;
    };
Object.defineProperty(useContextualSaveBar$1, '__esModule', { value: true });
useContextualSaveBar$1.useContextualSaveBar = void 0;
var react_1$3 = react.exports;
var ContextualSaveBar_1 = ContextualSaveBar$2;
var useAppBridge_1$3 = useAppBridge$1;
function useContextualSaveBar(_a) {
    var discardAction = _a.discardAction,
        saveAction = _a.saveAction,
        fullWidth = _a.fullWidth,
        leaveConfirmationDisable = _a.leaveConfirmationDisable,
        visible = _a.visible;
    var app = useAppBridge_1$3.useAppBridge();
    var onSaveAction = saveAction.onAction,
        saveActionProps = __rest(saveAction, ['onAction']);
    var onDiscardAction = discardAction.onAction,
        discardActionProps = __rest(discardAction, ['onAction']);
    /* We want to reuse the same ContextualSaveBar instance, even when props change
     * (so we don't include all the props in the dependency array).
     * Instead of recreating the component on every change, we use the set method,
     * in the useEffect block below, to dispatch updates when props change.
     */
    var contextualSaveBar = react_1$3.useMemo(
        function () {
            return ContextualSaveBar_1.create(app, {
                saveAction: saveActionProps,
                discardAction: discardActionProps,
                fullWidth: fullWidth,
                leaveConfirmationDisable: leaveConfirmationDisable,
            });
        },
        [app]
    );
    react_1$3.useEffect(
        function () {
            contextualSaveBar.set(
                {
                    saveAction: saveActionProps,
                    discardAction: discardActionProps,
                    fullWidth: fullWidth,
                    leaveConfirmationDisable: leaveConfirmationDisable,
                },
                Boolean(visible)
            );
        },
        [contextualSaveBar, saveActionProps, discardActionProps, fullWidth, leaveConfirmationDisable, visible]
    );
    react_1$3.useEffect(
        function () {
            contextualSaveBar.subscribe(ContextualSaveBar_1.Action.DISCARD, onDiscardAction);
            contextualSaveBar.subscribe(ContextualSaveBar_1.Action.SAVE, onSaveAction);
            return function () {
                contextualSaveBar.unsubscribe();
            };
        },
        [contextualSaveBar]
    );
    react_1$3.useEffect(
        function () {
            if (visible) {
                contextualSaveBar.dispatch(ContextualSaveBar_1.Action.SHOW);
            } else {
                contextualSaveBar.dispatch(ContextualSaveBar_1.Action.HIDE);
            }
        },
        [contextualSaveBar, visible]
    );
    return null;
}
useContextualSaveBar$1.useContextualSaveBar = useContextualSaveBar;

(function (exports) {
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.useContextualSaveBar = void 0;
    var useContextualSaveBar_1 = useContextualSaveBar$1;
    Object.defineProperty(exports, 'useContextualSaveBar', {
        enumerable: true,
        get: function () {
            return useContextualSaveBar_1.useContextualSaveBar;
        },
    });
})(useContextualSaveBar$2);

var useNavigationHistory$2 = {};

var useNavigationHistory$1 = {};

Object.defineProperty(useNavigationHistory$1, '__esModule', { value: true });
useNavigationHistory$1.useNavigationHistory = void 0;
var react_1$2 = react.exports;
var actions_1 = actions$2;
var useAppBridge_1$2 = useAppBridge$1;
/**
 * useNavigationHistory hook
 *
 * @remarks
 * React hook which wraps the Shopify App Bridge History action.
 *
 * @public
 */
function useNavigationHistory() {
    var app = useAppBridge_1$2.useAppBridge();
    return react_1$2.useMemo(function () {
        var history = actions_1.History.create(app);
        function push(location) {
            history.dispatch(actions_1.History.Action.PUSH, location.pathname);
        }
        function replace(location) {
            history.dispatch(actions_1.History.Action.REPLACE, location.pathname);
        }
        return { push: push, replace: replace };
    }, []);
}
useNavigationHistory$1.useNavigationHistory = useNavigationHistory;

(function (exports) {
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.useNavigationHistory = void 0;
    var useNavigationHistory_1 = useNavigationHistory$1;
    Object.defineProperty(exports, 'useNavigationHistory', {
        enumerable: true,
        get: function () {
            return useNavigationHistory_1.useNavigationHistory;
        },
    });
})(useNavigationHistory$2);

var useToast$1 = {};

var useToast = {};

(function (exports) {
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.useToast = exports.DEFAULT_TOAST_DURATION = void 0;
    var react_1 = react.exports;
    var Toast_1 = Toast$4;
    var useAppBridge_1 = useAppBridge$1;
    exports.DEFAULT_TOAST_DURATION = 5000;
    /**
     * useToast hook
     *
     * @remarks
     * React hook which wraps the Shopify App Bridge Toast action.
     *
     * @public
     */
    function useToast() {
        var app = useAppBridge_1.useAppBridge();
        var toast;
        var show = react_1.useCallback(
            function (_a) {
                var message = _a.content,
                    _b = _a.duration,
                    duration = _b === void 0 ? exports.DEFAULT_TOAST_DURATION : _b,
                    isError = _a.isError,
                    onDismiss = _a.onDismiss;
                toast = Toast_1.create(app, {
                    message: message,
                    isError: isError,
                    duration: duration,
                });
                toast.dispatch(Toast_1.Action.SHOW);
                if (onDismiss) {
                    toast.subscribe(Toast_1.Action.CLEAR, onDismiss);
                }
            },
            [app]
        );
        react_1.useEffect(function () {
            return function () {
                toast.unsubscribe();
            };
        }, []);
        return { show: show };
    }
    exports.useToast = useToast;
})(useToast);

(function (exports) {
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.useToast = void 0;
    var useToast_1 = useToast;
    Object.defineProperty(exports, 'useToast', {
        enumerable: true,
        get: function () {
            return useToast_1.useToast;
        },
    });
})(useToast$1);

var useAppBridgeState$2 = {};

var useAppBridgeState$1 = {};

var __awaiter$5 =
    (commonjsGlobal && commonjsGlobal.__awaiter) ||
    function (thisArg, _arguments, P, generator) {
        function adopt(value) {
            return value instanceof P
                ? value
                : new P(function (resolve) {
                      resolve(value);
                  });
        }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) {
                try {
                    step(generator.next(value));
                } catch (e) {
                    reject(e);
                }
            }
            function rejected(value) {
                try {
                    step(generator['throw'](value));
                } catch (e) {
                    reject(e);
                }
            }
            function step(result) {
                result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
            }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
var __generator$5 =
    (commonjsGlobal && commonjsGlobal.__generator) ||
    function (thisArg, body) {
        var _ = {
                label: 0,
                sent: function () {
                    if (t[0] & 1) throw t[1];
                    return t[1];
                },
                trys: [],
                ops: [],
            },
            f,
            y,
            t,
            g;
        return (
            (g = { next: verb(0), throw: verb(1), return: verb(2) }),
            typeof Symbol === 'function' &&
                (g[Symbol.iterator] = function () {
                    return this;
                }),
            g
        );
        function verb(n) {
            return function (v) {
                return step([n, v]);
            };
        }
        function step(op) {
            if (f) throw new TypeError('Generator is already executing.');
            while (_)
                try {
                    if (((f = 1), y && (t = op[0] & 2 ? y['return'] : op[0] ? y['throw'] || ((t = y['return']) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)) return t;
                    if (((y = 0), t)) op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!((t = _.trys), (t = t.length > 0 && t[t.length - 1])) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2]) _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                } catch (e) {
                    op = [6, e];
                    y = 0;
                } finally {
                    f = t = 0;
                }
            if (op[0] & 5) throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    };
Object.defineProperty(useAppBridgeState$1, '__esModule', { value: true });
useAppBridgeState$1.useAppBridgeState = void 0;
var react_1$1 = react.exports;
var useAppBridge_1$1 = useAppBridge$1;
var useAppBridgeState = function (query) {
    var app = useAppBridge_1$1.useAppBridge();
    var _a = react_1$1.useState(),
        state = _a[0],
        setState = _a[1];
    var refresh = react_1$1.useCallback(
        function () {
            return __awaiter$5(void 0, void 0, void 0, function () {
                var state, _a;
                return __generator$5(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            if (!query) return [3 /*break*/, 2];
                            return [4 /*yield*/, app.getState(query)];
                        case 1:
                            _a = _b.sent();
                            return [3 /*break*/, 4];
                        case 2:
                            return [4 /*yield*/, app.getState()];
                        case 3:
                            _a = _b.sent();
                            _b.label = 4;
                        case 4:
                            state = _a;
                            setState(state);
                            return [2 /*return*/, state];
                    }
                });
            });
        },
        [app, query]
    );
    react_1$1.useEffect(
        function () {
            refresh();
            // Automatically check to see if the state has changed every time an action has been dispatched
            return app.subscribe(function () {
                refresh();
            });
        },
        [app, refresh]
    );
    return state;
};
useAppBridgeState$1.useAppBridgeState = useAppBridgeState;

(function (exports) {
    var __createBinding =
        (commonjsGlobal && commonjsGlobal.__createBinding) ||
        (Object.create
            ? function (o, m, k, k2) {
                  if (k2 === undefined) k2 = k;
                  Object.defineProperty(o, k2, {
                      enumerable: true,
                      get: function () {
                          return m[k];
                      },
                  });
              }
            : function (o, m, k, k2) {
                  if (k2 === undefined) k2 = k;
                  o[k2] = m[k];
              });
    var __exportStar =
        (commonjsGlobal && commonjsGlobal.__exportStar) ||
        function (m, exports) {
            for (var p in m) if (p !== 'default' && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
        };
    Object.defineProperty(exports, '__esModule', { value: true });
    __exportStar(useAppBridgeState$1, exports);
})(useAppBridgeState$2);

var useNavigate$2 = {};

var useNavigate$1 = {};

var __assign$1 =
    (commonjsGlobal && commonjsGlobal.__assign) ||
    function () {
        __assign$1 =
            Object.assign ||
            function (t) {
                for (var s, i = 1, n = arguments.length; i < n; i++) {
                    s = arguments[i];
                    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
                }
                return t;
            };
        return __assign$1.apply(this, arguments);
    };
var __createBinding$2 =
    (commonjsGlobal && commonjsGlobal.__createBinding) ||
    (Object.create
        ? function (o, m, k, k2) {
              if (k2 === undefined) k2 = k;
              Object.defineProperty(o, k2, {
                  enumerable: true,
                  get: function () {
                      return m[k];
                  },
              });
          }
        : function (o, m, k, k2) {
              if (k2 === undefined) k2 = k;
              o[k2] = m[k];
          });
var __setModuleDefault$2 =
    (commonjsGlobal && commonjsGlobal.__setModuleDefault) ||
    (Object.create
        ? function (o, v) {
              Object.defineProperty(o, 'default', { enumerable: true, value: v });
          }
        : function (o, v) {
              o['default'] = v;
          });
var __importStar$2 =
    (commonjsGlobal && commonjsGlobal.__importStar) ||
    function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== 'default' && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$2(result, mod, k);
        __setModuleDefault$2(result, mod);
        return result;
    };
Object.defineProperty(useNavigate$1, '__esModule', { value: true });
useNavigate$1.isAdminSection = useNavigate$1.useNavigate = void 0;
var react_1 = react.exports;
var Redirect = __importStar$2(Redirect$1);
var useAppBridge_1 = useAppBridge$1;
var useNavigationHistory_1 = useNavigationHistory$2;
function useNavigate() {
    var app = useAppBridge_1.useAppBridge();
    var history = useNavigationHistory_1.useNavigationHistory();
    var redirect = react_1.useMemo(
        function () {
            return Redirect.create(app);
        },
        [app]
    );
    var handleRedirect = react_1.useCallback(
        function (to, options) {
            var url = normalizeUrl(to);
            var isAppUrl = url.startsWith(app.localOrigin);
            var isHostUrl = url.startsWith(app.hostOrigin);
            var isRelative = url.startsWith('/');
            if (isAppUrl || isHostUrl || isRelative) {
                var path = getRelativePath(url);
                if (isHostUrl || (options === null || options === void 0 ? void 0 : options.target) === 'new' || (options === null || options === void 0 ? void 0 : options.target) === 'host') {
                    redirect.dispatch(Redirect.Action.ADMIN_PATH, {
                        path: path.replace(/^\/admin/, ''),
                        newContext: (options === null || options === void 0 ? void 0 : options.target) === 'new',
                    });
                    return;
                }
                if (((options === null || options === void 0 ? void 0 : options.target) === 'self' || !(options === null || options === void 0 ? void 0 : options.target)) && (options === null || options === void 0 ? void 0 : options.replace)) {
                    history.replace({ pathname: path });
                    return;
                }
                redirect.dispatch(Redirect.Action.APP, path);
                return;
            }
            redirect.dispatch(Redirect.Action.REMOTE, {
                url: url,
                newContext: (options === null || options === void 0 ? void 0 : options.target) === 'new',
            });
        },
        [redirect, history]
    );
    return react_1.useCallback(
        function (to, options) {
            if (isAdminSection(to)) {
                var convertedSection = __assign$1(__assign$1({}, to), { name: Redirect.ResourceType[to.name] });
                redirect.dispatch(Redirect.Action.ADMIN_SECTION, {
                    section: convertedSection,
                    newContext: (options === null || options === void 0 ? void 0 : options.target) === 'new',
                });
                return;
            }
            handleRedirect(to, options);
        },
        [handleRedirect, redirect]
    );
}
useNavigate$1.useNavigate = useNavigate;
function isAdminSection(to) {
    return typeof to === 'object' && typeof (to === null || to === void 0 ? void 0 : to.name) === 'string';
}
useNavigate$1.isAdminSection = isAdminSection;
function getPathWithSearchAndHash(_a) {
    var pathname = _a.pathname,
        search = _a.search,
        hash = _a.hash;
    return '' + pathname + (search || '') + (hash || '');
}
function normalizeUrl(to) {
    if (to instanceof URL) {
        return to.toString();
    }
    if (typeof to === 'string') {
        return to;
    }
    return getRelativePath(to);
}
function getRelativePath(to) {
    if (typeof to === 'string') {
        if (to.startsWith('/')) {
            return to;
        }
        return getPathWithSearchAndHash(new URL(to));
    }
    var search = to.search instanceof URLSearchParams ? to.search.toString() : to.search;
    return getPathWithSearchAndHash(__assign$1(__assign$1({}, to), { search: search }));
}

(function (exports) {
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.useNavigate = void 0;
    var useNavigate_1 = useNavigate$1;
    Object.defineProperty(exports, 'useNavigate', {
        enumerable: true,
        get: function () {
            return useNavigate_1.useNavigate;
        },
    });
})(useNavigate$2);

(function (exports) {
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.useNavigate = exports.useAppBridgeState = exports.useToast = exports.useNavigationHistory = exports.useContextualSaveBar = void 0;
    var useContextualSaveBar_1 = useContextualSaveBar$2;
    Object.defineProperty(exports, 'useContextualSaveBar', {
        enumerable: true,
        get: function () {
            return useContextualSaveBar_1.useContextualSaveBar;
        },
    });
    var useNavigationHistory_1 = useNavigationHistory$2;
    Object.defineProperty(exports, 'useNavigationHistory', {
        enumerable: true,
        get: function () {
            return useNavigationHistory_1.useNavigationHistory;
        },
    });
    var useToast_1 = useToast$1;
    Object.defineProperty(exports, 'useToast', {
        enumerable: true,
        get: function () {
            return useToast_1.useToast;
        },
    });
    var useAppBridgeState_1 = useAppBridgeState$2;
    Object.defineProperty(exports, 'useAppBridgeState', {
        enumerable: true,
        get: function () {
            return useAppBridgeState_1.useAppBridgeState;
        },
    });
    var useNavigate_1 = useNavigate$2;
    Object.defineProperty(exports, 'useNavigate', {
        enumerable: true,
        get: function () {
            return useNavigate_1.useNavigate;
        },
    });
})(hooks);

(function (exports) {
    var __createBinding =
        (commonjsGlobal && commonjsGlobal.__createBinding) ||
        (Object.create
            ? function (o, m, k, k2) {
                  if (k2 === undefined) k2 = k;
                  Object.defineProperty(o, k2, {
                      enumerable: true,
                      get: function () {
                          return m[k];
                      },
                  });
              }
            : function (o, m, k, k2) {
                  if (k2 === undefined) k2 = k;
                  o[k2] = m[k];
              });
    var __exportStar =
        (commonjsGlobal && commonjsGlobal.__exportStar) ||
        function (m, exports) {
            for (var p in m) if (p !== 'default' && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
        };
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.useAppBridge = exports.Context = void 0;
    __exportStar(components, exports);
    var context_1 = context;
    Object.defineProperty(exports, 'Context', {
        enumerable: true,
        get: function () {
            return context_1.AppBridgeContext;
        },
    });
    var useAppBridge_1 = useAppBridge$1;
    Object.defineProperty(exports, 'useAppBridge', {
        enumerable: true,
        get: function () {
            return useAppBridge_1.useAppBridge;
        },
    });
    __exportStar(hooks, exports);
})(appBridgeReact);

var appBridgeUtils = {};

var utilities = {};

var modal = {};

var platform = {};

Object.defineProperty(platform, '__esModule', { value: true });
platform.isShopifyPing = platform.isShopifyPOS = platform.isShopifyMobile = platform.isMobile = void 0;
function isMobile() {
    return isShopifyMobile() || isShopifyPOS() || isShopifyPing();
}
platform.isMobile = isMobile;
function isShopifyMobile() {
    return typeof navigator !== 'undefined' && navigator.userAgent.indexOf('Shopify Mobile') >= 0;
}
platform.isShopifyMobile = isShopifyMobile;
function isShopifyPOS() {
    return typeof navigator !== 'undefined' && navigator.userAgent.indexOf('Shopify POS') >= 0;
}
platform.isShopifyPOS = isShopifyPOS;
function isShopifyPing() {
    return typeof navigator !== 'undefined' && navigator.userAgent.indexOf('Shopify Ping') >= 0;
}
platform.isShopifyPing = isShopifyPing;

var __awaiter$4 =
    (commonjsGlobal && commonjsGlobal.__awaiter) ||
    function (thisArg, _arguments, P, generator) {
        function adopt(value) {
            return value instanceof P
                ? value
                : new P(function (resolve) {
                      resolve(value);
                  });
        }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) {
                try {
                    step(generator.next(value));
                } catch (e) {
                    reject(e);
                }
            }
            function rejected(value) {
                try {
                    step(generator['throw'](value));
                } catch (e) {
                    reject(e);
                }
            }
            function step(result) {
                result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
            }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
var __generator$4 =
    (commonjsGlobal && commonjsGlobal.__generator) ||
    function (thisArg, body) {
        var _ = {
                label: 0,
                sent: function () {
                    if (t[0] & 1) throw t[1];
                    return t[1];
                },
                trys: [],
                ops: [],
            },
            f,
            y,
            t,
            g;
        return (
            (g = { next: verb(0), throw: verb(1), return: verb(2) }),
            typeof Symbol === 'function' &&
                (g[Symbol.iterator] = function () {
                    return this;
                }),
            g
        );
        function verb(n) {
            return function (v) {
                return step([n, v]);
            };
        }
        function step(op) {
            if (f) throw new TypeError('Generator is already executing.');
            while (_)
                try {
                    if (((f = 1), y && (t = op[0] & 2 ? y['return'] : op[0] ? y['throw'] || ((t = y['return']) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)) return t;
                    if (((y = 0), t)) op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!((t = _.trys), (t = t.length > 0 && t[t.length - 1])) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2]) _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                } catch (e) {
                    op = [6, e];
                    y = 0;
                } finally {
                    f = t = 0;
                }
            if (op[0] & 5) throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    };
Object.defineProperty(modal, '__esModule', { value: true });
modal.createMutationObserver = modal.setupModalAutoSizing = void 0;
var Modal_1 = Modal$4;
var MessageTransport_1 = MessageTransport;
var platform_1 = platform;
var AUTO_SIZE_CLASS = 'app-bridge-utils-modal-auto-size';
var autoSizeStylesheet = createAutoSizeStylesheet();
function createAutoSizeStylesheet() {
    if (typeof document === 'undefined') {
        return null;
    }
    var autoSizeStylesheet = document.createElement('style');
    autoSizeStylesheet.type = 'text/css';
    autoSizeStylesheet.innerHTML = '.' + AUTO_SIZE_CLASS + ' { overflow: hidden; height: auto; min-height: auto; }';
    return autoSizeStylesheet;
}
function addAutoSizing(app, id) {
    if (!autoSizeStylesheet) {
        return function () {};
    }
    var head = document.getElementsByTagName('head')[0];
    var classList = document.body.classList;
    head.appendChild(autoSizeStylesheet);
    classList.add(AUTO_SIZE_CLASS);
    var mutationObserver = createMutationObserver(app, id);
    return function () {
        classList.remove(AUTO_SIZE_CLASS);
        if (head.contains(autoSizeStylesheet)) {
            head.removeChild(autoSizeStylesheet);
        }
        if (mutationObserver) {
            mutationObserver.disconnect();
        }
    };
}
/**
 * Automatically track changes to the document.body height and dispatch and action to update the modal size
 * @remarks This utility should only be used for an app that is meant to open inside a Modal
 * @param app App Bridge client application instance
 * @returns function to remove the auto-size tracker for the document.body
 *
 * @public
 */
function setupModalAutoSizing(app) {
    return __awaiter$4(this, void 0, void 0, function () {
        function cleanup() {
            if (removeAutoSizing) {
                removeAutoSizing();
                removeAutoSizing = undefined;
            }
        }
        function handleModalSizeUpdate(appState) {
            var context = appState.context,
                id = appState.modal.id;
            if (platform_1.isMobile() || context !== MessageTransport_1.Context.Modal) {
                cleanup();
                return cleanup;
            }
            if (!removeAutoSizing) {
                removeAutoSizing = addAutoSizing(app, id);
            }
            return cleanup;
        }
        var removeAutoSizing;
        return __generator$4(this, function (_a) {
            switch (_a.label) {
                case 0:
                    return [4 /*yield*/, app.getState().then(handleModalSizeUpdate)];
                case 1:
                    _a.sent();
                    return [2 /*return*/, cleanup];
            }
        });
    });
}
modal.setupModalAutoSizing = setupModalAutoSizing;
/**
 * Sets up modal auto sizing, using a MutationObserver.
 *
 * @param app App Bridge client application instance
 * @param id Currently active modal instance ID
 *
 * @internal
 */
function createMutationObserver(app, id) {
    if (typeof document === 'undefined') {
        return;
    }
    var lastKnownWindowHeight = -1;
    var mutationTimeoutId;
    var mutationObserverConfig = {
        attributes: true,
        attributeOldValue: false,
        characterData: true,
        characterDataOldValue: false,
        childList: true,
        subtree: true,
    };
    var mutationObserver = new MutationObserver(debouncedResizeHandler);
    mutationObserver.observe(document, mutationObserverConfig);
    updateHeight();
    function debouncedResizeHandler() {
        if (mutationTimeoutId) {
            window.clearTimeout(mutationTimeoutId);
        }
        mutationTimeoutId = window.setTimeout(updateHeight, 16);
    }
    function updateHeight() {
        var height = document.body.scrollHeight;
        if (height !== lastKnownWindowHeight) {
            lastKnownWindowHeight = height;
            app.dispatch(Modal_1.updateModalSize({ id: id, height: String(height) }));
        }
    }
    return mutationObserver;
}
modal.createMutationObserver = createMutationObserver;

var sessionToken$1 = {};

var sessionToken = {};

var __createBinding$1 =
    (commonjsGlobal && commonjsGlobal.__createBinding) ||
    (Object.create
        ? function (o, m, k, k2) {
              if (k2 === undefined) k2 = k;
              Object.defineProperty(o, k2, {
                  enumerable: true,
                  get: function () {
                      return m[k];
                  },
              });
          }
        : function (o, m, k, k2) {
              if (k2 === undefined) k2 = k;
              o[k2] = m[k];
          });
var __setModuleDefault$1 =
    (commonjsGlobal && commonjsGlobal.__setModuleDefault) ||
    (Object.create
        ? function (o, v) {
              Object.defineProperty(o, 'default', { enumerable: true, value: v });
          }
        : function (o, v) {
              o['default'] = v;
          });
var __importStar$1 =
    (commonjsGlobal && commonjsGlobal.__importStar) ||
    function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== 'default' && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$1(result, mod, k);
        __setModuleDefault$1(result, mod);
        return result;
    };
var __awaiter$3 =
    (commonjsGlobal && commonjsGlobal.__awaiter) ||
    function (thisArg, _arguments, P, generator) {
        function adopt(value) {
            return value instanceof P
                ? value
                : new P(function (resolve) {
                      resolve(value);
                  });
        }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) {
                try {
                    step(generator.next(value));
                } catch (e) {
                    reject(e);
                }
            }
            function rejected(value) {
                try {
                    step(generator['throw'](value));
                } catch (e) {
                    reject(e);
                }
            }
            function step(result) {
                result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
            }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
var __generator$3 =
    (commonjsGlobal && commonjsGlobal.__generator) ||
    function (thisArg, body) {
        var _ = {
                label: 0,
                sent: function () {
                    if (t[0] & 1) throw t[1];
                    return t[1];
                },
                trys: [],
                ops: [],
            },
            f,
            y,
            t,
            g;
        return (
            (g = { next: verb(0), throw: verb(1), return: verb(2) }),
            typeof Symbol === 'function' &&
                (g[Symbol.iterator] = function () {
                    return this;
                }),
            g
        );
        function verb(n) {
            return function (v) {
                return step([n, v]);
            };
        }
        function step(op) {
            if (f) throw new TypeError('Generator is already executing.');
            while (_)
                try {
                    if (((f = 1), y && (t = op[0] & 2 ? y['return'] : op[0] ? y['throw'] || ((t = y['return']) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)) return t;
                    if (((y = 0), t)) op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!((t = _.trys), (t = t.length > 0 && t[t.length - 1])) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2]) _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                } catch (e) {
                    op = [6, e];
                    y = 0;
                } finally {
                    f = t = 0;
                }
            if (op[0] & 5) throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    };
Object.defineProperty(sessionToken, '__esModule', { value: true });
sessionToken.getSessionToken = void 0;
var SessionToken = __importStar$1(SessionToken$1);
var Error_1$1 = _Error;
function getSessionToken(appBridge) {
    return __awaiter$3(this, void 0, void 0, function () {
        return __generator$3(this, function (_a) {
            return [
                2 /*return*/,
                new Promise(function (resolve, reject) {
                    var unsubscribe = appBridge.subscribe(SessionToken.Action.RESPOND, function (_a) {
                        var sessionToken = _a.sessionToken;
                        if (sessionToken) {
                            resolve(sessionToken);
                        } else {
                            reject(Error_1$1.fromAction('Failed to retrieve a session token', Error_1$1.Action.FAILED_AUTHENTICATION));
                        }
                        unsubscribe();
                    });
                    appBridge.dispatch(SessionToken.request());
                }),
            ];
        });
    });
}
sessionToken.getSessionToken = getSessionToken;

var authenticatedFetch$1 = {};

var __assign =
    (commonjsGlobal && commonjsGlobal.__assign) ||
    function () {
        __assign =
            Object.assign ||
            function (t) {
                for (var s, i = 1, n = arguments.length; i < n; i++) {
                    s = arguments[i];
                    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
                }
                return t;
            };
        return __assign.apply(this, arguments);
    };
var __awaiter$2 =
    (commonjsGlobal && commonjsGlobal.__awaiter) ||
    function (thisArg, _arguments, P, generator) {
        function adopt(value) {
            return value instanceof P
                ? value
                : new P(function (resolve) {
                      resolve(value);
                  });
        }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) {
                try {
                    step(generator.next(value));
                } catch (e) {
                    reject(e);
                }
            }
            function rejected(value) {
                try {
                    step(generator['throw'](value));
                } catch (e) {
                    reject(e);
                }
            }
            function step(result) {
                result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
            }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
var __generator$2 =
    (commonjsGlobal && commonjsGlobal.__generator) ||
    function (thisArg, body) {
        var _ = {
                label: 0,
                sent: function () {
                    if (t[0] & 1) throw t[1];
                    return t[1];
                },
                trys: [],
                ops: [],
            },
            f,
            y,
            t,
            g;
        return (
            (g = { next: verb(0), throw: verb(1), return: verb(2) }),
            typeof Symbol === 'function' &&
                (g[Symbol.iterator] = function () {
                    return this;
                }),
            g
        );
        function verb(n) {
            return function (v) {
                return step([n, v]);
            };
        }
        function step(op) {
            if (f) throw new TypeError('Generator is already executing.');
            while (_)
                try {
                    if (((f = 1), y && (t = op[0] & 2 ? y['return'] : op[0] ? y['throw'] || ((t = y['return']) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)) return t;
                    if (((y = 0), t)) op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!((t = _.trys), (t = t.length > 0 && t[t.length - 1])) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2]) _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                } catch (e) {
                    op = [6, e];
                    y = 0;
                } finally {
                    f = t = 0;
                }
            if (op[0] & 5) throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    };
Object.defineProperty(authenticatedFetch$1, '__esModule', { value: true });
authenticatedFetch$1.authenticatedFetch = void 0;
var session_token_1 = sessionToken;
function authenticatedFetch(app, fetchOperation) {
    var _this = this;
    if (fetchOperation === void 0) {
        fetchOperation = fetch;
    }
    return function (uri, options) {
        if (options === void 0) {
            options = {};
        }
        return __awaiter$2(_this, void 0, void 0, function () {
            var sessionToken, headers, finalHeaders;
            return __generator$2(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        return [4 /*yield*/, session_token_1.getSessionToken(app)];
                    case 1:
                        sessionToken = _a.sent();
                        headers = new Headers(options.headers);
                        headers.append('Authorization', 'Bearer ' + sessionToken);
                        headers.append('X-Requested-With', 'XMLHttpRequest');
                        finalHeaders = {};
                        headers.forEach(function (value, key) {
                            finalHeaders[key] = value;
                        });
                        return [2 /*return*/, fetchOperation(uri, __assign(__assign({}, options), { headers: finalHeaders }))];
                }
            });
        });
    };
}
authenticatedFetch$1.authenticatedFetch = authenticatedFetch;

(function (exports) {
    var __createBinding =
        (commonjsGlobal && commonjsGlobal.__createBinding) ||
        (Object.create
            ? function (o, m, k, k2) {
                  if (k2 === undefined) k2 = k;
                  Object.defineProperty(o, k2, {
                      enumerable: true,
                      get: function () {
                          return m[k];
                      },
                  });
              }
            : function (o, m, k, k2) {
                  if (k2 === undefined) k2 = k;
                  o[k2] = m[k];
              });
    var __exportStar =
        (commonjsGlobal && commonjsGlobal.__exportStar) ||
        function (m, exports) {
            for (var p in m) if (p !== 'default' && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
        };
    Object.defineProperty(exports, '__esModule', { value: true });
    __exportStar(sessionToken, exports);
    __exportStar(authenticatedFetch$1, exports);
})(sessionToken$1);

var authorizationCode$1 = {};

var authorizationCode = {};

var __createBinding =
    (commonjsGlobal && commonjsGlobal.__createBinding) ||
    (Object.create
        ? function (o, m, k, k2) {
              if (k2 === undefined) k2 = k;
              Object.defineProperty(o, k2, {
                  enumerable: true,
                  get: function () {
                      return m[k];
                  },
              });
          }
        : function (o, m, k, k2) {
              if (k2 === undefined) k2 = k;
              o[k2] = m[k];
          });
var __setModuleDefault =
    (commonjsGlobal && commonjsGlobal.__setModuleDefault) ||
    (Object.create
        ? function (o, v) {
              Object.defineProperty(o, 'default', { enumerable: true, value: v });
          }
        : function (o, v) {
              o['default'] = v;
          });
var __importStar =
    (commonjsGlobal && commonjsGlobal.__importStar) ||
    function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== 'default' && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    };
var __awaiter$1 =
    (commonjsGlobal && commonjsGlobal.__awaiter) ||
    function (thisArg, _arguments, P, generator) {
        function adopt(value) {
            return value instanceof P
                ? value
                : new P(function (resolve) {
                      resolve(value);
                  });
        }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) {
                try {
                    step(generator.next(value));
                } catch (e) {
                    reject(e);
                }
            }
            function rejected(value) {
                try {
                    step(generator['throw'](value));
                } catch (e) {
                    reject(e);
                }
            }
            function step(result) {
                result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
            }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
var __generator$1 =
    (commonjsGlobal && commonjsGlobal.__generator) ||
    function (thisArg, body) {
        var _ = {
                label: 0,
                sent: function () {
                    if (t[0] & 1) throw t[1];
                    return t[1];
                },
                trys: [],
                ops: [],
            },
            f,
            y,
            t,
            g;
        return (
            (g = { next: verb(0), throw: verb(1), return: verb(2) }),
            typeof Symbol === 'function' &&
                (g[Symbol.iterator] = function () {
                    return this;
                }),
            g
        );
        function verb(n) {
            return function (v) {
                return step([n, v]);
            };
        }
        function step(op) {
            if (f) throw new TypeError('Generator is already executing.');
            while (_)
                try {
                    if (((f = 1), y && (t = op[0] & 2 ? y['return'] : op[0] ? y['throw'] || ((t = y['return']) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)) return t;
                    if (((y = 0), t)) op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!((t = _.trys), (t = t.length > 0 && t[t.length - 1])) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2]) _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                } catch (e) {
                    op = [6, e];
                    y = 0;
                } finally {
                    f = t = 0;
                }
            if (op[0] & 5) throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    };
var __importDefault =
    (commonjsGlobal && commonjsGlobal.__importDefault) ||
    function (mod) {
        return mod && mod.__esModule ? mod : { default: mod };
    };
Object.defineProperty(authorizationCode, '__esModule', { value: true });
authorizationCode.getAuthorizationCodePayload = void 0;
var AuthCode = __importStar(AuthCode$1);
var Error_1 = _Error;
var uuid_1 = __importDefault(uuid);
function getAuthorizationCodePayload(app) {
    return __awaiter$1(this, void 0, void 0, function () {
        return __generator$1(this, function (_a) {
            return [
                2 /*return*/,
                new Promise(function (resolve, reject) {
                    var requestId = uuid_1.default();
                    var unsubscribe = app.subscribe(
                        AuthCode.Action.RESPOND,
                        function (payload) {
                            switch (payload === null || payload === void 0 ? void 0 : payload.status) {
                                case 'needsExchange':
                                    resolve(payload);
                                    break;
                                default:
                                    reject(Error_1.fromAction('Failed to retrieve an authorization code', Error_1.Action.FAILED_AUTHENTICATION));
                            }
                            unsubscribe();
                        },
                        requestId
                    );
                    app.dispatch(AuthCode.request(requestId));
                }),
            ];
        });
    });
}
authorizationCode.getAuthorizationCodePayload = getAuthorizationCodePayload;

var userAuthorizedFetch$1 = {};

var __awaiter =
    (commonjsGlobal && commonjsGlobal.__awaiter) ||
    function (thisArg, _arguments, P, generator) {
        function adopt(value) {
            return value instanceof P
                ? value
                : new P(function (resolve) {
                      resolve(value);
                  });
        }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) {
                try {
                    step(generator.next(value));
                } catch (e) {
                    reject(e);
                }
            }
            function rejected(value) {
                try {
                    step(generator['throw'](value));
                } catch (e) {
                    reject(e);
                }
            }
            function step(result) {
                result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
            }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
var __generator =
    (commonjsGlobal && commonjsGlobal.__generator) ||
    function (thisArg, body) {
        var _ = {
                label: 0,
                sent: function () {
                    if (t[0] & 1) throw t[1];
                    return t[1];
                },
                trys: [],
                ops: [],
            },
            f,
            y,
            t,
            g;
        return (
            (g = { next: verb(0), throw: verb(1), return: verb(2) }),
            typeof Symbol === 'function' &&
                (g[Symbol.iterator] = function () {
                    return this;
                }),
            g
        );
        function verb(n) {
            return function (v) {
                return step([n, v]);
            };
        }
        function step(op) {
            if (f) throw new TypeError('Generator is already executing.');
            while (_)
                try {
                    if (((f = 1), y && (t = op[0] & 2 ? y['return'] : op[0] ? y['throw'] || ((t = y['return']) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)) return t;
                    if (((y = 0), t)) op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!((t = _.trys), (t = t.length > 0 && t[t.length - 1])) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2]) _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                } catch (e) {
                    op = [6, e];
                    y = 0;
                } finally {
                    f = t = 0;
                }
            if (op[0] & 5) throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    };
Object.defineProperty(userAuthorizedFetch$1, '__esModule', { value: true });
userAuthorizedFetch$1.userAuthorizedFetch = void 0;
var authorization_code_1 = authorizationCode;
var DEFAULT_CALLBACK_URI = 'auth/shopify/callback';
function needsAuthorizationCode(response) {
    var headerValue = response.headers.get('X-Shopify-API-Request-Failure-Unauthorized');
    if (headerValue) {
        return headerValue.toLowerCase() === 'true';
    }
    return false;
}
function userAuthorizedFetch(_a) {
    var _this = this;
    var app = _a.app,
        _b = _a.callbackUri,
        callbackUri = _b === void 0 ? DEFAULT_CALLBACK_URI : _b,
        _c = _a.isAuthorizationCodeRequired,
        isAuthorizationCodeRequired = _c === void 0 ? needsAuthorizationCode : _c,
        fetchOperation = _a.fetchOperation;
    return function (uri, options) {
        return __awaiter(_this, void 0, void 0, function () {
            var response, _a, code, hmac, shop, timestamp, formattedCallbackUri, callbackResponse;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        return [4 /*yield*/, fetchOperation(uri, options)];
                    case 1:
                        response = _b.sent();
                        if (!isAuthorizationCodeRequired(response)) {
                            return [2 /*return*/, response];
                        }
                        return [4 /*yield*/, authorization_code_1.getAuthorizationCodePayload(app)];
                    case 2:
                        (_a = _b.sent()), (code = _a.code), (hmac = _a.hmac), (shop = _a.shop), (timestamp = _a.timestamp);
                        formattedCallbackUri = encodeURI('https://' + window.location.hostname + '/' + callbackUri + '?code=' + code + '&hmac=' + hmac + '&shop=' + shop + '&timestamp=' + timestamp);
                        return [4 /*yield*/, fetchOperation(formattedCallbackUri, {})];
                    case 3:
                        callbackResponse = _b.sent();
                        if (!callbackResponse.ok) {
                            throw new Error('Failed to authorize request.');
                        }
                        return [2 /*return*/, fetchOperation(uri, options)];
                }
            });
        });
    };
}
userAuthorizedFetch$1.userAuthorizedFetch = userAuthorizedFetch;

(function (exports) {
    var __createBinding =
        (commonjsGlobal && commonjsGlobal.__createBinding) ||
        (Object.create
            ? function (o, m, k, k2) {
                  if (k2 === undefined) k2 = k;
                  Object.defineProperty(o, k2, {
                      enumerable: true,
                      get: function () {
                          return m[k];
                      },
                  });
              }
            : function (o, m, k, k2) {
                  if (k2 === undefined) k2 = k;
                  o[k2] = m[k];
              });
    var __exportStar =
        (commonjsGlobal && commonjsGlobal.__exportStar) ||
        function (m, exports) {
            for (var p in m) if (p !== 'default' && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
        };
    Object.defineProperty(exports, '__esModule', { value: true });
    __exportStar(authorizationCode, exports);
    __exportStar(userAuthorizedFetch$1, exports);
})(authorizationCode$1);

(function (exports) {
    var __createBinding =
        (commonjsGlobal && commonjsGlobal.__createBinding) ||
        (Object.create
            ? function (o, m, k, k2) {
                  if (k2 === undefined) k2 = k;
                  Object.defineProperty(o, k2, {
                      enumerable: true,
                      get: function () {
                          return m[k];
                      },
                  });
              }
            : function (o, m, k, k2) {
                  if (k2 === undefined) k2 = k;
                  o[k2] = m[k];
              });
    var __exportStar =
        (commonjsGlobal && commonjsGlobal.__exportStar) ||
        function (m, exports) {
            for (var p in m) if (p !== 'default' && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
        };
    Object.defineProperty(exports, '__esModule', { value: true });
    __exportStar(modal, exports);
    __exportStar(platform, exports);
    __exportStar(sessionToken$1, exports);
    __exportStar(authorizationCode$1, exports);
})(utilities);

(function (exports) {
    var __createBinding =
        (commonjsGlobal && commonjsGlobal.__createBinding) ||
        (Object.create
            ? function (o, m, k, k2) {
                  if (k2 === undefined) k2 = k;
                  Object.defineProperty(o, k2, {
                      enumerable: true,
                      get: function () {
                          return m[k];
                      },
                  });
              }
            : function (o, m, k, k2) {
                  if (k2 === undefined) k2 = k;
                  o[k2] = m[k];
              });
    var __exportStar =
        (commonjsGlobal && commonjsGlobal.__exportStar) ||
        function (m, exports) {
            for (var p in m) if (p !== 'default' && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
        };
    Object.defineProperty(exports, '__esModule', { value: true });
    __exportStar(utilities, exports);
})(appBridgeUtils);

// eslint-disable-next-line @shopify/strict-component-boundaries
// eslint-disable-next-line @shopify/strict-component-boundaries
// eslint-disable-next-line @shopify/strict-component-boundaries
let Key;

(function (Key) {
    Key[(Key['Backspace'] = 8)] = 'Backspace';
    Key[(Key['Tab'] = 9)] = 'Tab';
    Key[(Key['Enter'] = 13)] = 'Enter';
    Key[(Key['Shift'] = 16)] = 'Shift';
    Key[(Key['Ctrl'] = 17)] = 'Ctrl';
    Key[(Key['Alt'] = 18)] = 'Alt';
    Key[(Key['Pause'] = 19)] = 'Pause';
    Key[(Key['CapsLock'] = 20)] = 'CapsLock';
    Key[(Key['Escape'] = 27)] = 'Escape';
    Key[(Key['Space'] = 32)] = 'Space';
    Key[(Key['PageUp'] = 33)] = 'PageUp';
    Key[(Key['PageDown'] = 34)] = 'PageDown';
    Key[(Key['End'] = 35)] = 'End';
    Key[(Key['Home'] = 36)] = 'Home';
    Key[(Key['LeftArrow'] = 37)] = 'LeftArrow';
    Key[(Key['UpArrow'] = 38)] = 'UpArrow';
    Key[(Key['RightArrow'] = 39)] = 'RightArrow';
    Key[(Key['DownArrow'] = 40)] = 'DownArrow';
    Key[(Key['Insert'] = 45)] = 'Insert';
    Key[(Key['Delete'] = 46)] = 'Delete';
    Key[(Key['Key0'] = 48)] = 'Key0';
    Key[(Key['Key1'] = 49)] = 'Key1';
    Key[(Key['Key2'] = 50)] = 'Key2';
    Key[(Key['Key3'] = 51)] = 'Key3';
    Key[(Key['Key4'] = 52)] = 'Key4';
    Key[(Key['Key5'] = 53)] = 'Key5';
    Key[(Key['Key6'] = 54)] = 'Key6';
    Key[(Key['Key7'] = 55)] = 'Key7';
    Key[(Key['Key8'] = 56)] = 'Key8';
    Key[(Key['Key9'] = 57)] = 'Key9';
    Key[(Key['KeyA'] = 65)] = 'KeyA';
    Key[(Key['KeyB'] = 66)] = 'KeyB';
    Key[(Key['KeyC'] = 67)] = 'KeyC';
    Key[(Key['KeyD'] = 68)] = 'KeyD';
    Key[(Key['KeyE'] = 69)] = 'KeyE';
    Key[(Key['KeyF'] = 70)] = 'KeyF';
    Key[(Key['KeyG'] = 71)] = 'KeyG';
    Key[(Key['KeyH'] = 72)] = 'KeyH';
    Key[(Key['KeyI'] = 73)] = 'KeyI';
    Key[(Key['KeyJ'] = 74)] = 'KeyJ';
    Key[(Key['KeyK'] = 75)] = 'KeyK';
    Key[(Key['KeyL'] = 76)] = 'KeyL';
    Key[(Key['KeyM'] = 77)] = 'KeyM';
    Key[(Key['KeyN'] = 78)] = 'KeyN';
    Key[(Key['KeyO'] = 79)] = 'KeyO';
    Key[(Key['KeyP'] = 80)] = 'KeyP';
    Key[(Key['KeyQ'] = 81)] = 'KeyQ';
    Key[(Key['KeyR'] = 82)] = 'KeyR';
    Key[(Key['KeyS'] = 83)] = 'KeyS';
    Key[(Key['KeyT'] = 84)] = 'KeyT';
    Key[(Key['KeyU'] = 85)] = 'KeyU';
    Key[(Key['KeyV'] = 86)] = 'KeyV';
    Key[(Key['KeyW'] = 87)] = 'KeyW';
    Key[(Key['KeyX'] = 88)] = 'KeyX';
    Key[(Key['KeyY'] = 89)] = 'KeyY';
    Key[(Key['KeyZ'] = 90)] = 'KeyZ';
    Key[(Key['LeftMeta'] = 91)] = 'LeftMeta';
    Key[(Key['RightMeta'] = 92)] = 'RightMeta';
    Key[(Key['Select'] = 93)] = 'Select';
    Key[(Key['Numpad0'] = 96)] = 'Numpad0';
    Key[(Key['Numpad1'] = 97)] = 'Numpad1';
    Key[(Key['Numpad2'] = 98)] = 'Numpad2';
    Key[(Key['Numpad3'] = 99)] = 'Numpad3';
    Key[(Key['Numpad4'] = 100)] = 'Numpad4';
    Key[(Key['Numpad5'] = 101)] = 'Numpad5';
    Key[(Key['Numpad6'] = 102)] = 'Numpad6';
    Key[(Key['Numpad7'] = 103)] = 'Numpad7';
    Key[(Key['Numpad8'] = 104)] = 'Numpad8';
    Key[(Key['Numpad9'] = 105)] = 'Numpad9';
    Key[(Key['Multiply'] = 106)] = 'Multiply';
    Key[(Key['Add'] = 107)] = 'Add';
    Key[(Key['Subtract'] = 109)] = 'Subtract';
    Key[(Key['Decimal'] = 110)] = 'Decimal';
    Key[(Key['Divide'] = 111)] = 'Divide';
    Key[(Key['F1'] = 112)] = 'F1';
    Key[(Key['F2'] = 113)] = 'F2';
    Key[(Key['F3'] = 114)] = 'F3';
    Key[(Key['F4'] = 115)] = 'F4';
    Key[(Key['F5'] = 116)] = 'F5';
    Key[(Key['F6'] = 117)] = 'F6';
    Key[(Key['F7'] = 118)] = 'F7';
    Key[(Key['F8'] = 119)] = 'F8';
    Key[(Key['F9'] = 120)] = 'F9';
    Key[(Key['F10'] = 121)] = 'F10';
    Key[(Key['F11'] = 122)] = 'F11';
    Key[(Key['F12'] = 123)] = 'F12';
    Key[(Key['NumLock'] = 144)] = 'NumLock';
    Key[(Key['ScrollLock'] = 145)] = 'ScrollLock';
    Key[(Key['Semicolon'] = 186)] = 'Semicolon';
    Key[(Key['Equals'] = 187)] = 'Equals';
    Key[(Key['Comma'] = 188)] = 'Comma';
    Key[(Key['Dash'] = 189)] = 'Dash';
    Key[(Key['Period'] = 190)] = 'Period';
    Key[(Key['ForwardSlash'] = 191)] = 'ForwardSlash';
    Key[(Key['GraveAccent'] = 192)] = 'GraveAccent';
    Key[(Key['OpenBracket'] = 219)] = 'OpenBracket';
    Key[(Key['BackSlash'] = 220)] = 'BackSlash';
    Key[(Key['CloseBracket'] = 221)] = 'CloseBracket';
    Key[(Key['SingleQuote'] = 222)] = 'SingleQuote';
})(Key || (Key = {}));

const scrollable = {
    props: {
        'data-polaris-scrollable': true,
    },
    selector: '[data-polaris-scrollable]',
};
const overlay$2 = {
    props: {
        'data-polaris-overlay': true,
    },
    selector: '[data-polaris-overlay]',
};
const layer = {
    props: {
        'data-polaris-layer': true,
    },
    selector: '[data-polaris-layer]',
};
const unstyled = {
    props: {
        'data-polaris-unstyled': true,
    },
    selector: '[data-polaris-unstyled]',
};
const dataPolarisTopBar = {
    props: {
        'data-polaris-top-bar': true,
    },
    selector: '[data-polaris-top-bar]',
};
const portal = {
    props: ['data-portal-id'],
    selector: '[data-portal-id]',
};

function clamp(number, min, max) {
    if (number < min) return min;
    if (number > max) return max;
    return number;
}

const WithinContentContext = /*#__PURE__*/ react.exports.createContext(false);

(function (module, exports) {
    (function (global, factory) {
        factory();
    })(commonjsGlobal, function () {
        /**
         * Applies the :focus-visible polyfill at the given scope.
         * A scope in this case is either the top-level Document or a Shadow Root.
         *
         * @param {(Document|ShadowRoot)} scope
         * @see https://github.com/WICG/focus-visible
         */
        function applyFocusVisiblePolyfill(scope) {
            var hadKeyboardEvent = true;
            var hadFocusVisibleRecently = false;
            var hadFocusVisibleRecentlyTimeout = null;

            var inputTypesAllowlist = {
                text: true,
                search: true,
                url: true,
                tel: true,
                email: true,
                password: true,
                number: true,
                date: true,
                month: true,
                week: true,
                time: true,
                datetime: true,
                'datetime-local': true,
            };

            /**
             * Helper function for legacy browsers and iframes which sometimes focus
             * elements like document, body, and non-interactive SVG.
             * @param {Element} el
             */
            function isValidFocusTarget(el) {
                if (el && el !== document && el.nodeName !== 'HTML' && el.nodeName !== 'BODY' && 'classList' in el && 'contains' in el.classList) {
                    return true;
                }
                return false;
            }

            /**
             * Computes whether the given element should automatically trigger the
             * `focus-visible` class being added, i.e. whether it should always match
             * `:focus-visible` when focused.
             * @param {Element} el
             * @return {boolean}
             */
            function focusTriggersKeyboardModality(el) {
                var type = el.type;
                var tagName = el.tagName;

                if (tagName === 'INPUT' && inputTypesAllowlist[type] && !el.readOnly) {
                    return true;
                }

                if (tagName === 'TEXTAREA' && !el.readOnly) {
                    return true;
                }

                if (el.isContentEditable) {
                    return true;
                }

                return false;
            }

            /**
             * Add the `focus-visible` class to the given element if it was not added by
             * the author.
             * @param {Element} el
             */
            function addFocusVisibleClass(el) {
                if (el.classList.contains('focus-visible')) {
                    return;
                }
                el.classList.add('focus-visible');
                el.setAttribute('data-focus-visible-added', '');
            }

            /**
             * Remove the `focus-visible` class from the given element if it was not
             * originally added by the author.
             * @param {Element} el
             */
            function removeFocusVisibleClass(el) {
                if (!el.hasAttribute('data-focus-visible-added')) {
                    return;
                }
                el.classList.remove('focus-visible');
                el.removeAttribute('data-focus-visible-added');
            }

            /**
             * If the most recent user interaction was via the keyboard;
             * and the key press did not include a meta, alt/option, or control key;
             * then the modality is keyboard. Otherwise, the modality is not keyboard.
             * Apply `focus-visible` to any current active element and keep track
             * of our keyboard modality state with `hadKeyboardEvent`.
             * @param {KeyboardEvent} e
             */
            function onKeyDown(e) {
                if (e.metaKey || e.altKey || e.ctrlKey) {
                    return;
                }

                if (isValidFocusTarget(scope.activeElement)) {
                    addFocusVisibleClass(scope.activeElement);
                }

                hadKeyboardEvent = true;
            }

            /**
             * If at any point a user clicks with a pointing device, ensure that we change
             * the modality away from keyboard.
             * This avoids the situation where a user presses a key on an already focused
             * element, and then clicks on a different element, focusing it with a
             * pointing device, while we still think we're in keyboard modality.
             * @param {Event} e
             */
            function onPointerDown(e) {
                hadKeyboardEvent = false;
            }

            /**
             * On `focus`, add the `focus-visible` class to the target if:
             * - the target received focus as a result of keyboard navigation, or
             * - the event target is an element that will likely require interaction
             *   via the keyboard (e.g. a text box)
             * @param {Event} e
             */
            function onFocus(e) {
                // Prevent IE from focusing the document or HTML element.
                if (!isValidFocusTarget(e.target)) {
                    return;
                }

                if (hadKeyboardEvent || focusTriggersKeyboardModality(e.target)) {
                    addFocusVisibleClass(e.target);
                }
            }

            /**
             * On `blur`, remove the `focus-visible` class from the target.
             * @param {Event} e
             */
            function onBlur(e) {
                if (!isValidFocusTarget(e.target)) {
                    return;
                }

                if (e.target.classList.contains('focus-visible') || e.target.hasAttribute('data-focus-visible-added')) {
                    // To detect a tab/window switch, we look for a blur event followed
                    // rapidly by a visibility change.
                    // If we don't see a visibility change within 100ms, it's probably a
                    // regular focus change.
                    hadFocusVisibleRecently = true;
                    window.clearTimeout(hadFocusVisibleRecentlyTimeout);
                    hadFocusVisibleRecentlyTimeout = window.setTimeout(function () {
                        hadFocusVisibleRecently = false;
                    }, 100);
                    removeFocusVisibleClass(e.target);
                }
            }

            /**
             * If the user changes tabs, keep track of whether or not the previously
             * focused element had .focus-visible.
             * @param {Event} e
             */
            function onVisibilityChange(e) {
                if (document.visibilityState === 'hidden') {
                    // If the tab becomes active again, the browser will handle calling focus
                    // on the element (Safari actually calls it twice).
                    // If this tab change caused a blur on an element with focus-visible,
                    // re-apply the class when the user switches back to the tab.
                    if (hadFocusVisibleRecently) {
                        hadKeyboardEvent = true;
                    }
                    addInitialPointerMoveListeners();
                }
            }

            /**
             * Add a group of listeners to detect usage of any pointing devices.
             * These listeners will be added when the polyfill first loads, and anytime
             * the window is blurred, so that they are active when the window regains
             * focus.
             */
            function addInitialPointerMoveListeners() {
                document.addEventListener('mousemove', onInitialPointerMove);
                document.addEventListener('mousedown', onInitialPointerMove);
                document.addEventListener('mouseup', onInitialPointerMove);
                document.addEventListener('pointermove', onInitialPointerMove);
                document.addEventListener('pointerdown', onInitialPointerMove);
                document.addEventListener('pointerup', onInitialPointerMove);
                document.addEventListener('touchmove', onInitialPointerMove);
                document.addEventListener('touchstart', onInitialPointerMove);
                document.addEventListener('touchend', onInitialPointerMove);
            }

            function removeInitialPointerMoveListeners() {
                document.removeEventListener('mousemove', onInitialPointerMove);
                document.removeEventListener('mousedown', onInitialPointerMove);
                document.removeEventListener('mouseup', onInitialPointerMove);
                document.removeEventListener('pointermove', onInitialPointerMove);
                document.removeEventListener('pointerdown', onInitialPointerMove);
                document.removeEventListener('pointerup', onInitialPointerMove);
                document.removeEventListener('touchmove', onInitialPointerMove);
                document.removeEventListener('touchstart', onInitialPointerMove);
                document.removeEventListener('touchend', onInitialPointerMove);
            }

            /**
             * When the polfyill first loads, assume the user is in keyboard modality.
             * If any event is received from a pointing device (e.g. mouse, pointer,
             * touch), turn off keyboard modality.
             * This accounts for situations where focus enters the page from the URL bar.
             * @param {Event} e
             */
            function onInitialPointerMove(e) {
                // Work around a Safari quirk that fires a mousemove on <html> whenever the
                // window blurs, even if you're tabbing out of the page. ¯\_(ツ)_/¯
                if (e.target.nodeName && e.target.nodeName.toLowerCase() === 'html') {
                    return;
                }

                hadKeyboardEvent = false;
                removeInitialPointerMoveListeners();
            }

            // For some kinds of state, we are interested in changes at the global scope
            // only. For example, global pointer input, global key presses and global
            // visibility change should affect the state at every scope:
            document.addEventListener('keydown', onKeyDown, true);
            document.addEventListener('mousedown', onPointerDown, true);
            document.addEventListener('pointerdown', onPointerDown, true);
            document.addEventListener('touchstart', onPointerDown, true);
            document.addEventListener('visibilitychange', onVisibilityChange, true);

            addInitialPointerMoveListeners();

            // For focus and blur, we specifically care about state changes in the local
            // scope. This is because focus / blur events that originate from within a
            // shadow root are not re-dispatched from the host element if it was already
            // the active element in its own scope:
            scope.addEventListener('focus', onFocus, true);
            scope.addEventListener('blur', onBlur, true);

            // We detect that a node is a ShadowRoot by ensuring that it is a
            // DocumentFragment and also has a host property. This check covers native
            // implementation and polyfill implementation transparently. If we only cared
            // about the native implementation, we could just check if the scope was
            // an instance of a ShadowRoot.
            if (scope.nodeType === Node.DOCUMENT_FRAGMENT_NODE && scope.host) {
                // Since a ShadowRoot is a special kind of DocumentFragment, it does not
                // have a root element to add a class to. So, we add this attribute to the
                // host element instead:
                scope.host.setAttribute('data-js-focus-visible', '');
            } else if (scope.nodeType === Node.DOCUMENT_NODE) {
                document.documentElement.classList.add('js-focus-visible');
                document.documentElement.setAttribute('data-js-focus-visible', '');
            }
        }

        // It is important to wrap all references to global window and document in
        // these checks to support server-side rendering use cases
        // @see https://github.com/WICG/focus-visible/issues/199
        if (typeof window !== 'undefined' && typeof document !== 'undefined') {
            // Make the polyfill helper globally available. This can be used as a signal
            // to interested libraries that wish to coordinate with the polyfill for e.g.,
            // applying the polyfill to a shadow root:
            window.applyFocusVisiblePolyfill = applyFocusVisiblePolyfill;

            // Notify interested libraries of the polyfill's presence, in case the
            // polyfill was loaded lazily:
            var event;

            try {
                event = new CustomEvent('focus-visible-polyfill-ready');
            } catch (error) {
                // IE11 does not support using CustomEvent as a constructor directly:
                event = document.createEvent('CustomEvent');
                event.initCustomEvent('focus-visible-polyfill-ready', false, false, {});
            }

            window.dispatchEvent(event);
        }

        if (typeof document !== 'undefined') {
            // Apply the polyfill to the global document, so that no JavaScript
            // coordination is required to use the polyfill in the top-level document:
            applyFocusVisiblePolyfill(document);
        }
    });
})();

var depth = {
    'shadow-transparent': '0 0 0 0 transparent',
    'shadow-faint': '0 1px 0 0 rgba(22, 29, 37, 0.05)',
    'shadow-base': '0 0 0 1px rgba(63, 63, 68, 0.05), 0 1px 3px 0 rgba(63, 63, 68, 0.15)',
    'shadow-deep': '0 0 0 1px rgba(6, 44, 82, 0.1), 0 2px 16px rgba(33, 43, 54, 0.08)',
    'shadow-button': '0 1px 0 rgba(0, 0, 0, 0.05)',
    'shadow-top-bar': '0 2px 2px -1px rgba(0, 0, 0, 0.15)',
    'shadow-card': '0 0 5px rgba(23, 24, 24, 0.05), 0 1px 2px rgba(0, 0, 0, 0.15)',
    'shadow-popover': '-1px 0 20px rgba(23, 24, 24, 0.05), 0 1px 5px rgba(0, 0, 0, 0.15)',
    'shadow-layer': '0 31px 41px 0 rgba(32, 42, 53, 0.2), 0 2px 16px 0 rgba(32, 42, 54, 0.08)',
    'shadow-modal': '0 26px 80px rgba(0, 0, 0, 0.2), 0 0px 1px rgba(0, 0, 0, 0.2)',
    'shadows-inset-button': 'inset 0 -1px 0 rgba(0, 0, 0, 0.2)',
    'shadows-inset-button-pressed': 'inset 0 1px 0 rgba(0, 0, 0, 0.15)',
};

var legacyTokens = {
    'override-loading-z-index': '514',
    'choice-size': '20px',
    'icon-size-small': '10px',
    'icon-size-medium': '20px',
    'choice-margin': '1px',
    'control-border-width': '2px',
    'banner-border-default': 'inset 0 1px 0 0 var(--p-border-neutral-subdued), inset 0 0 0 1px var(--p-border-neutral-subdued)',
    'banner-border-success': 'inset 0 1px 0 0 var(--p-border-success-subdued), inset 0 0 0 1px var(--p-border-success-subdued)',
    'banner-border-highlight': 'inset 0 1px 0 0 var(--p-border-highlight-subdued), inset 0 0 0 1px var(--p-border-highlight-subdued)',
    'banner-border-warning': 'inset 0 1px 0 0 var(--p-border-warning-subdued), inset 0 0 0 1px var(--p-border-warning-subdued)',
    'banner-border-critical': 'inset 0 1px 0 0 var(--p-border-critical-subdued), inset 0 0 0 1px var(--p-border-critical-subdued)',
    'thin-border-subdued': '1px solid var(--p-border-subdued)',
    'text-field-spinner-offset': '2px',
    'text-field-focus-ring-offset': '-4px',
    'button-group-item-spacing': '-1px',
    'range-slider-thumb-size-base': '16px',
    'range-slider-thumb-size-active': '24px',
    'frame-offset': '0px',
};

var background$1 = 'rgba(11, 12, 13, 1)';
var surface$1 = 'rgba(32, 33, 35, 1)';
var backdrop$1 = 'rgba(0, 0, 0, 0.5)';
var overlay$1 = 'rgba(33, 33, 33, 0.5)';
var border$1 = 'rgba(80, 83, 86, 1)';
var divider$1 = 'rgba(69, 71, 73, 1)';
var icon$1 = 'rgba(166, 172, 178, 1)';
var text$1 = 'rgba(227, 229, 231, 1)';
var interactive$1 = 'rgba(54, 163, 255, 1)';
var focused$1 = 'rgba(38, 98, 182, 1)';
var darkColorScheme = {
    background: background$1,
    'background-hovered': 'rgba(11, 12, 13, 1)',
    'background-pressed': 'rgba(11, 12, 13, 1)',
    'background-selected': 'rgba(11, 12, 13, 1)',
    surface: surface$1,
    'surface-neutral': 'rgba(49, 51, 53, 1)',
    'surface-neutral-hovered': 'rgba(49, 51, 53, 1)',
    'surface-neutral-pressed': 'rgba(49, 51, 53, 1)',
    'surface-neutral-disabled': 'rgba(49, 51, 53, 1)',
    'surface-neutral-subdued': 'rgba(68, 71, 74, 1)',
    'surface-subdued': 'rgba(26, 28, 29, 1)',
    'surface-disabled': 'rgba(26, 28, 29, 1)',
    'surface-hovered': 'rgba(47, 49, 51, 1)',
    'surface-pressed': 'rgba(62, 64, 67, 1)',
    'surface-depressed': 'rgba(80, 83, 86, 1)',
    'surface-search-field': 'rgba(47, 49, 51, 1)',
    backdrop: backdrop$1,
    overlay: overlay$1,
    'shadow-from-dim-light': 'rgba(255, 255, 255, 0.2)',
    'shadow-from-ambient-light': 'rgba(23, 24, 24, 0.05)',
    'shadow-from-direct-light': 'rgba(255, 255, 255, 0.15)',
    'shadow-color-picker': 'rgba(0, 0, 0, 0)',
    'shadow-color-picker-dragger': 'rgba(0, 0, 0, 0)',
    'hint-from-direct-light': 'rgba(185, 185, 185, 0.2)',
    border: border$1,
    'border-neutral-subdued': 'rgba(130, 135, 139, 1)',
    'border-hovered': 'rgba(80, 83, 86, 1)',
    'border-disabled': 'rgba(103, 107, 111, 1)',
    'border-subdued': 'rgba(130, 135, 139, 1)',
    'border-depressed': 'rgba(142, 145, 145, 1)',
    'border-shadow': 'rgba(91, 95, 98, 1)',
    'border-shadow-subdued': 'rgba(130, 135, 139, 1)',
    divider: divider$1,
    icon: icon$1,
    'icon-hovered': 'rgba(225, 227, 229, 1)',
    'icon-pressed': 'rgba(166, 172, 178, 1)',
    'icon-disabled': 'rgba(84, 87, 90, 1)',
    'icon-subdued': 'rgba(120, 125, 129, 1)',
    text: text$1,
    'text-disabled': 'rgba(111, 115, 119, 1)',
    'text-subdued': 'rgba(153, 159, 164, 1)',
    interactive: interactive$1,
    'interactive-disabled': 'rgba(38, 98, 182, 1)',
    'interactive-hovered': 'rgba(103, 175, 255, 1)',
    'interactive-pressed': 'rgba(136, 188, 255, 1)',
    focused: focused$1,
    'surface-selected': 'rgba(2, 14, 35, 1)',
    'surface-selected-hovered': 'rgba(7, 29, 61, 1)',
    'surface-selected-pressed': 'rgba(13, 43, 86, 1)',
    'icon-on-interactive': 'rgba(255, 255, 255, 1)',
    'text-on-interactive': 'rgba(255, 255, 255, 1)',
    'action-secondary': 'rgba(77, 80, 83, 1)',
    'action-secondary-disabled': 'rgba(32, 34, 35, 1)',
    'action-secondary-hovered': 'rgba(84, 87, 91, 1)',
    'action-secondary-pressed': 'rgba(96, 100, 103, 1)',
    'action-secondary-depressed': 'rgba(123, 127, 132, 1)',
    'action-primary': 'rgba(0, 128, 96, 1)',
    'action-primary-disabled': 'rgba(0, 86, 64, 1)',
    'action-primary-hovered': 'rgba(0, 150, 113, 1)',
    'action-primary-pressed': 'rgba(0, 164, 124, 1)',
    'action-primary-depressed': 'rgba(0, 179, 136, 1)',
    'icon-on-primary': 'rgba(230, 255, 244, 1)',
    'text-on-primary': 'rgba(255, 255, 255, 1)',
    'text-primary': 'rgba(0, 141, 106, 1)',
    'text-primary-hovered': 'rgba(0, 158, 120, 1)',
    'text-primary-pressed': 'rgba(0, 176, 133, 1)',
    'surface-primary-selected': 'rgba(12, 18, 16, 1)',
    'surface-primary-selected-hovered': 'rgba(40, 48, 44, 1)',
    'surface-primary-selected-pressed': 'rgba(54, 64, 59, 1)',
    'border-critical': 'rgba(227, 47, 14, 1)',
    'border-critical-subdued': 'rgba(227, 47, 14, 1)',
    'border-critical-disabled': 'rgba(131, 23, 4, 1)',
    'icon-critical': 'rgba(218, 45, 13, 1)',
    'surface-critical': 'rgba(69, 7, 1, 1)',
    'surface-critical-subdued': 'rgba(69, 7, 1, 1)',
    'surface-critical-subdued-hovered': 'rgba(68, 23, 20, 1)',
    'surface-critical-subdued-pressed': 'rgba(107, 16, 3, 1)',
    'surface-critical-subdued-depressed': 'rgba(135, 24, 5, 1)',
    'text-critical': 'rgba(233, 128, 122, 1)',
    'action-critical': 'rgba(205, 41, 12, 1)',
    'action-critical-disabled': 'rgba(187, 37, 10, 1)',
    'action-critical-hovered': 'rgba(227, 47, 14, 1)',
    'action-critical-pressed': 'rgba(250, 53, 17, 1)',
    'action-critical-depressed': 'rgba(253, 87, 73, 1)',
    'icon-on-critical': 'rgba(255, 248, 247, 1)',
    'text-on-critical': 'rgba(255, 255, 255, 1)',
    'interactive-critical': 'rgba(253, 114, 106, 1)',
    'interactive-critical-disabled': 'rgba(254, 172, 168, 1)',
    'interactive-critical-hovered': 'rgba(253, 138, 132, 1)',
    'interactive-critical-pressed': 'rgba(253, 159, 155, 1)',
    'border-warning': 'rgba(153, 112, 0, 1)',
    'border-warning-subdued': 'rgba(153, 112, 0, 1)',
    'icon-warning': 'rgba(104, 75, 0, 1)',
    'surface-warning': 'rgba(153, 112, 0, 1)',
    'surface-warning-subdued': 'rgba(77, 59, 29, 1)',
    'surface-warning-subdued-hovered': 'rgba(82, 63, 32, 1)',
    'surface-warning-subdued-pressed': 'rgba(87, 67, 34, 1)',
    'text-warning': 'rgba(202, 149, 0, 1)',
    'border-highlight': 'rgba(68, 157, 167, 1)',
    'border-highlight-subdued': 'rgba(68, 157, 167, 1)',
    'icon-highlight': 'rgba(44, 108, 115, 1)',
    'surface-highlight': 'rgba(0, 105, 113, 1)',
    'surface-highlight-subdued': 'rgba(18, 53, 57, 1)',
    'surface-highlight-subdued-hovered': 'rgba(20, 58, 62, 1)',
    'surface-highlight-subdued-pressed': 'rgba(24, 65, 70, 1)',
    'text-highlight': 'rgba(162, 239, 250, 1)',
    'border-success': 'rgba(0, 135, 102, 1)',
    'border-success-subdued': 'rgba(0, 135, 102, 1)',
    'icon-success': 'rgba(0, 94, 70, 1)',
    'surface-success': 'rgba(0, 94, 70, 1)',
    'surface-success-subdued': 'rgba(28, 53, 44, 1)',
    'surface-success-subdued-hovered': 'rgba(31, 58, 48, 1)',
    'surface-success-subdued-pressed': 'rgba(35, 65, 54, 1)',
    'text-success': 'rgba(88, 173, 142, 1)',
    'decorative-one-icon': 'rgba(255, 186, 67, 1)',
    'decorative-one-surface': 'rgba(142, 102, 9, 1)',
    'decorative-one-text': 'rgba(255, 255, 255, 1)',
    'decorative-two-icon': 'rgba(245, 182, 192, 1)',
    'decorative-two-surface': 'rgba(206, 88, 20, 1)',
    'decorative-two-text': 'rgba(255, 255, 255, 1)',
    'decorative-three-icon': 'rgba(0, 227, 141, 1)',
    'decorative-three-surface': 'rgba(0, 124, 90, 1)',
    'decorative-three-text': 'rgba(255, 255, 255, 1)',
    'decorative-four-icon': 'rgba(0, 221, 218, 1)',
    'decorative-four-surface': 'rgba(22, 124, 121, 1)',
    'decorative-four-text': 'rgba(255, 255, 255, 1)',
    'decorative-five-icon': 'rgba(244, 183, 191, 1)',
    'decorative-five-surface': 'rgba(194, 51, 86, 1)',
    'decorative-five-text': 'rgba(255, 255, 255, 1)',
};

var background = 'rgba(246, 246, 247, 1)';
var surface = 'rgba(255, 255, 255, 1)';
var backdrop = 'rgba(0, 0, 0, 0.5)';
var overlay = 'rgba(255, 255, 255, 0.5)';
var border = 'rgba(140, 145, 150, 1)';
var divider = 'rgba(225, 227, 229, 1)';
var icon = 'rgba(92, 95, 98, 1)';
var text = 'rgba(32, 34, 35, 1)';
var interactive = 'rgba(44, 110, 203, 1)';
var focused = 'rgba(69, 143, 255, 1)';
var lightColorScheme = {
    background: background,
    'background-hovered': 'rgba(241, 242, 243, 1)',
    'background-pressed': 'rgba(237, 238, 239, 1)',
    'background-selected': 'rgba(237, 238, 239, 1)',
    surface: surface,
    'surface-neutral': 'rgba(228, 229, 231, 1)',
    'surface-neutral-hovered': 'rgba(219, 221, 223, 1)',
    'surface-neutral-pressed': 'rgba(201, 204, 208, 1)',
    'surface-neutral-disabled': 'rgba(241, 242, 243, 1)',
    'surface-neutral-subdued': 'rgba(246, 246, 247, 1)',
    'surface-subdued': 'rgba(250, 251, 251, 1)',
    'surface-disabled': 'rgba(250, 251, 251, 1)',
    'surface-hovered': 'rgba(246, 246, 247, 1)',
    'surface-pressed': 'rgba(241, 242, 243, 1)',
    'surface-depressed': 'rgba(237, 238, 239, 1)',
    'surface-search-field': 'rgba(241, 242, 243, 1)',
    backdrop: backdrop,
    overlay: overlay,
    'shadow-from-dim-light': 'rgba(0, 0, 0, 0.2)',
    'shadow-from-ambient-light': 'rgba(23, 24, 24, 0.05)',
    'shadow-from-direct-light': 'rgba(0, 0, 0, 0.15)',
    'shadow-color-picker': 'rgba(0, 0, 0, 0.5)',
    'shadow-color-picker-dragger': 'rgba(33, 43, 54, 0.32)',
    'hint-from-direct-light': 'rgba(0, 0, 0, 0.15)',
    border: border,
    'border-neutral-subdued': 'rgba(186, 191, 195, 1)',
    'border-hovered': 'rgba(153, 158, 164, 1)',
    'border-disabled': 'rgba(210, 213, 216, 1)',
    'border-subdued': 'rgba(201, 204, 207, 1)',
    'border-depressed': 'rgba(87, 89, 89, 1)',
    'border-shadow': 'rgba(174, 180, 185, 1)',
    'border-shadow-subdued': 'rgba(186, 191, 196, 1)',
    divider: divider,
    icon: icon,
    'icon-hovered': 'rgba(26, 28, 29, 1)',
    'icon-pressed': 'rgba(68, 71, 74, 1)',
    'icon-disabled': 'rgba(186, 190, 195, 1)',
    'icon-subdued': 'rgba(140, 145, 150, 1)',
    text: text,
    'text-disabled': 'rgba(140, 145, 150, 1)',
    'text-subdued': 'rgba(109, 113, 117, 1)',
    interactive: interactive,
    'interactive-disabled': 'rgba(189, 193, 204, 1)',
    'interactive-hovered': 'rgba(31, 81, 153, 1)',
    'interactive-pressed': 'rgba(16, 50, 98, 1)',
    focused: focused,
    'surface-selected': 'rgba(242, 247, 254, 1)',
    'surface-selected-hovered': 'rgba(237, 244, 254, 1)',
    'surface-selected-pressed': 'rgba(229, 239, 253, 1)',
    'icon-on-interactive': 'rgba(255, 255, 255, 1)',
    'text-on-interactive': 'rgba(255, 255, 255, 1)',
    'action-secondary': 'rgba(255, 255, 255, 1)',
    'action-secondary-disabled': 'rgba(255, 255, 255, 1)',
    'action-secondary-hovered': 'rgba(246, 246, 247, 1)',
    'action-secondary-pressed': 'rgba(241, 242, 243, 1)',
    'action-secondary-depressed': 'rgba(109, 113, 117, 1)',
    'action-primary': 'rgba(0, 128, 96, 1)',
    'action-primary-disabled': 'rgba(241, 241, 241, 1)',
    'action-primary-hovered': 'rgba(0, 110, 82, 1)',
    'action-primary-pressed': 'rgba(0, 94, 70, 1)',
    'action-primary-depressed': 'rgba(0, 61, 44, 1)',
    'icon-on-primary': 'rgba(255, 255, 255, 1)',
    'text-on-primary': 'rgba(255, 255, 255, 1)',
    'text-primary': 'rgba(0, 123, 92, 1)',
    'text-primary-hovered': 'rgba(0, 108, 80, 1)',
    'text-primary-pressed': 'rgba(0, 92, 68, 1)',
    'surface-primary-selected': 'rgba(241, 248, 245, 1)',
    'surface-primary-selected-hovered': 'rgba(179, 208, 195, 1)',
    'surface-primary-selected-pressed': 'rgba(162, 188, 176, 1)',
    'border-critical': 'rgba(253, 87, 73, 1)',
    'border-critical-subdued': 'rgba(224, 179, 178, 1)',
    'border-critical-disabled': 'rgba(255, 167, 163, 1)',
    'icon-critical': 'rgba(215, 44, 13, 1)',
    'surface-critical': 'rgba(254, 211, 209, 1)',
    'surface-critical-subdued': 'rgba(255, 244, 244, 1)',
    'surface-critical-subdued-hovered': 'rgba(255, 240, 240, 1)',
    'surface-critical-subdued-pressed': 'rgba(255, 233, 232, 1)',
    'surface-critical-subdued-depressed': 'rgba(254, 188, 185, 1)',
    'text-critical': 'rgba(215, 44, 13, 1)',
    'action-critical': 'rgba(216, 44, 13, 1)',
    'action-critical-disabled': 'rgba(241, 241, 241, 1)',
    'action-critical-hovered': 'rgba(188, 34, 0, 1)',
    'action-critical-pressed': 'rgba(162, 27, 0, 1)',
    'action-critical-depressed': 'rgba(108, 15, 0, 1)',
    'icon-on-critical': 'rgba(255, 255, 255, 1)',
    'text-on-critical': 'rgba(255, 255, 255, 1)',
    'interactive-critical': 'rgba(216, 44, 13, 1)',
    'interactive-critical-disabled': 'rgba(253, 147, 141, 1)',
    'interactive-critical-hovered': 'rgba(205, 41, 12, 1)',
    'interactive-critical-pressed': 'rgba(103, 15, 3, 1)',
    'border-warning': 'rgba(185, 137, 0, 1)',
    'border-warning-subdued': 'rgba(225, 184, 120, 1)',
    'icon-warning': 'rgba(185, 137, 0, 1)',
    'surface-warning': 'rgba(255, 215, 157, 1)',
    'surface-warning-subdued': 'rgba(255, 245, 234, 1)',
    'surface-warning-subdued-hovered': 'rgba(255, 242, 226, 1)',
    'surface-warning-subdued-pressed': 'rgba(255, 235, 211, 1)',
    'text-warning': 'rgba(145, 106, 0, 1)',
    'border-highlight': 'rgba(68, 157, 167, 1)',
    'border-highlight-subdued': 'rgba(152, 198, 205, 1)',
    'icon-highlight': 'rgba(0, 160, 172, 1)',
    'surface-highlight': 'rgba(164, 232, 242, 1)',
    'surface-highlight-subdued': 'rgba(235, 249, 252, 1)',
    'surface-highlight-subdued-hovered': 'rgba(228, 247, 250, 1)',
    'surface-highlight-subdued-pressed': 'rgba(213, 243, 248, 1)',
    'text-highlight': 'rgba(52, 124, 132, 1)',
    'border-success': 'rgba(0, 164, 124, 1)',
    'border-success-subdued': 'rgba(149, 201, 180, 1)',
    'icon-success': 'rgba(0, 127, 95, 1)',
    'surface-success': 'rgba(174, 233, 209, 1)',
    'surface-success-subdued': 'rgba(241, 248, 245, 1)',
    'surface-success-subdued-hovered': 'rgba(236, 246, 241, 1)',
    'surface-success-subdued-pressed': 'rgba(226, 241, 234, 1)',
    'text-success': 'rgba(0, 128, 96, 1)',
    'decorative-one-icon': 'rgba(126, 87, 0, 1)',
    'decorative-one-surface': 'rgba(255, 201, 107, 1)',
    'decorative-one-text': 'rgba(61, 40, 0, 1)',
    'decorative-two-icon': 'rgba(175, 41, 78, 1)',
    'decorative-two-surface': 'rgba(255, 196, 176, 1)',
    'decorative-two-text': 'rgba(73, 11, 28, 1)',
    'decorative-three-icon': 'rgba(0, 109, 65, 1)',
    'decorative-three-surface': 'rgba(146, 230, 181, 1)',
    'decorative-three-text': 'rgba(0, 47, 25, 1)',
    'decorative-four-icon': 'rgba(0, 106, 104, 1)',
    'decorative-four-surface': 'rgba(145, 224, 214, 1)',
    'decorative-four-text': 'rgba(0, 45, 45, 1)',
    'decorative-five-icon': 'rgba(174, 43, 76, 1)',
    'decorative-five-surface': 'rgba(253, 201, 208, 1)',
    'decorative-five-text': 'rgba(79, 14, 31, 1)',
};

var ease = 'cubic-bezier(0.25, 0.1, 0.25, 1)';
var linear = 'cubic-bezier(0, 0, 1, 1)';
var motion = {
    'duration-0': '0ms',
    'duration-50': '50ms',
    'duration-100': '100ms',
    'duration-150': '150ms',
    'duration-200': '200ms',
    'duration-250': '250ms',
    'duration-300': '300ms',
    'duration-350': '350ms',
    'duration-400': '400ms',
    'duration-450': '450ms',
    'duration-500': '500ms',
    ease: ease,
    'ease-in': 'cubic-bezier(0.42, 0, 1, 1)',
    'ease-out': 'cubic-bezier(0, 0, 0.58, 1)',
    'ease-in-out': 'cubic-bezier(0.42, 0, 0.58, 1)',
    linear: linear,
};

var shape = {
    'border-radius-05': '2px',
    'border-radius-1': '4px',
    'border-radius-2': '8px',
    'border-radius-3': '12px',
    'border-radius-4': '16px',
    'border-radius-5': '20px',
    'border-radius-6': '30px',
    'border-radius-base': '3px',
    'border-radius-large': '6px',
    'border-radius-half': '50%',
    'border-width-1': '1px',
    'border-width-2': '2px',
    'border-width-3': '3px',
    'border-base': 'var(--p-border-width-1) solid var(--p-border-subdued)',
    'border-dark': 'var(--p-border-width-1) solid var(--p-border)',
    'border-transparent': 'var(--p-border-width-1) solid transparent',
    'border-divider': 'var(--p-border-width-1) solid var(--p-divider)',
};

var spacing = {
    'space-0': '0',
    'space-025': '1px',
    'space-05': '2px',
    'space-1': '4px',
    'space-2': '8px',
    'space-3': '12px',
    'space-4': '16px',
    'space-5': '20px',
    'space-6': '24px',
    'space-8': '32px',
    'space-10': '40px',
    'space-12': '48px',
    'space-16': '64px',
    'space-20': '80px',
    'space-24': '96px',
    'space-28': '112px',
    'space-32': '128px',
};

var typography = {
    'font-family-sans': "-apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
    'font-family-mono': "ui-monospace, SFMono-Regular, 'SF Mono', Consolas, 'Liberation Mono', Menlo, monospace",
    'font-size-1': '12px',
    'font-size-2': '13px',
    'font-size-3': '14px',
    'font-size-4': '15px',
    'font-size-5': '16px',
    'font-size-6': '17px',
    'font-size-7': '20px',
    'font-size-8': '21px',
    'font-size-9': '24px',
    'font-size-10': '26px',
    'font-size-11': '27px',
    'font-size-12': '28px',
    'font-size-13': '42px',
    'font-weight-regular': '400',
    'font-weight-medium': '500',
    'font-weight-semibold': '600',
    'font-weight-bold': '700',
    'line-height-1': '16px',
    'line-height-2': '20px',
    'line-height-3': '24px',
    'line-height-4': '28px',
    'line-height-5': '32px',
    'line-height-6': '36px',
    'line-height-7': '44px',
};

var zIndex = { 'z-1': '100', 'z-2': '400', 'z-3': '510', 'z-4': '512', 'z-5': '513', 'z-6': '514', 'z-7': '515', 'z-8': '516', 'z-9': '517', 'z-10': '518', 'z-11': '519', 'z-12': '520' };

const BASE_FONT_SIZE = 16;

function rem(value) {
    return value.replace(
        // https://regex101.com/r/RBL7EE/1
        /\d+(?:\.\d+|\d*)px/g,
        (px) => `${parseInt(px, 10) / BASE_FONT_SIZE}rem`
    );
}

function tokensToRems(tokenGroup) {
    return Object.fromEntries(Object.entries(tokenGroup).map(([token, value]) => [token, rem(value)]));
}

/**
 * Values to convert to CSS custom properties.
 * @example {background: '#000'} // --p-background: #000;
 */

const osColorSchemes = {
    light: 'light',
    dark: 'dark',
};
/**
 * Polaris color schemes and their associated color tokens.
 */

const colorSchemes = {
    light: lightColorScheme,
    dark: darkColorScheme,
};
const tokens = {
    colorSchemes,
    depth,
    legacyTokens: tokensToRems(legacyTokens),
    motion,
    shape: tokensToRems(shape),
    spacing: tokensToRems(spacing),
    typography: tokensToRems(typography),
    zIndex,
};

const defaultCustomProperties = `
  ${getColorSchemeDeclarations('light', tokens, osColorSchemes)}
  ${getStaticCustomProperties(tokens)}
`;
/**
 * Creates CSS Rules for each color-scheme.
 * @example:
 * [p-color-scheme="light"] {...}
 * [p-color-scheme="dark"] {...}
 * [p-color-scheme="dim"] {...}
 */

function getColorSchemeRules(tokens, osColorSchemes) {
    return Object.keys(tokens.colorSchemes)
        .map((key) => {
            const colorScheme = key;
            const selector = `[p-color-scheme="${colorScheme}"]`;
            const colorCustomProperties = getColorSchemeDeclarations(colorScheme, tokens, osColorSchemes);
            return `${selector}{${colorCustomProperties}${getStaticCustomProperties(tokens)}}`;
        })
        .join('');
}
/**
 * Creates static CSS custom properties.
 * Note: These values don't vary by color-scheme.
 */

function getStaticCustomProperties(tokens) {
    return Object.entries(tokens)
        .filter(([tokenGroup]) => tokenGroup !== 'colorSchemes')
        .map(([_, tokens]) => getCustomProperties(tokens))
        .join('');
}
/**
 * Creates CSS declarations for a given color-scheme.
 */

function getColorSchemeDeclarations(colorScheme, tokens, osColorSchemes) {
    return [`color-scheme:${osColorSchemes[colorScheme]};`, getCustomProperties(tokens.colorSchemes[colorScheme])].join('');
}
/**
 * Creates CSS custom properties for a given tokens object.
 */

function getCustomProperties(tokens) {
    return Object.entries(tokens)
        .map(([name, value]) => `--p-${name}:${value};`)
        .join('');
}
/**
 * Adapted from: https://github.com/argyleink/gui-challenges/blob/main/color-schemes/style.css
 */

const styles$1b = `
  :root{${defaultCustomProperties}}
  ${getColorSchemeRules(tokens, osColorSchemes)}
`;

var jsxRuntime = { exports: {} };

var reactJsxRuntime_production_min = {};

/** @license React v17.0.2
 * react-jsx-runtime.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var f = react.exports,
    g = 60103;
reactJsxRuntime_production_min.Fragment = 60107;
if ('function' === typeof Symbol && Symbol.for) {
    var h = Symbol.for;
    g = h('react.element');
    reactJsxRuntime_production_min.Fragment = h('react.fragment');
}
var m = f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,
    n = Object.prototype.hasOwnProperty,
    p = { key: !0, ref: !0, __self: !0, __source: !0 };
function q(c, a, k) {
    var b,
        d = {},
        e = null,
        l = null;
    void 0 !== k && (e = '' + k);
    void 0 !== a.key && (e = '' + a.key);
    void 0 !== a.ref && (l = a.ref);
    for (b in a) n.call(a, b) && !p.hasOwnProperty(b) && (d[b] = a[b]);
    if (c && c.defaultProps) for (b in ((a = c.defaultProps), a)) void 0 === d[b] && (d[b] = a[b]);
    return { $$typeof: g, type: c, key: e, ref: l, props: d, _owner: m.current };
}
reactJsxRuntime_production_min.jsx = q;
reactJsxRuntime_production_min.jsxs = q;

{
    jsxRuntime.exports = reactJsxRuntime_production_min;
}

const jsx = jsxRuntime.exports.jsx;
const jsxs = jsxRuntime.exports.jsxs;
const Fragment = jsxRuntime.exports.Fragment;

const DEFAULT_COLOR_SCHEME = 'light';
const STYLE_SHEET_ID = 'polaris-custom-properties';

function CustomProperties(props) {
    const { as: Component = 'div', children, className, colorScheme = DEFAULT_COLOR_SCHEME } = props;
    react.exports.useEffect(() => {
        let styleSheet = document.getElementById(STYLE_SHEET_ID);
        if (styleSheet) return;
        styleSheet = document.createElement('style');
        styleSheet.id = STYLE_SHEET_ID;
        styleSheet.textContent = styles$1b;
        document.head.appendChild(styleSheet);
    }, []);
    return (
        /*#__PURE__*/

        /*#__PURE__*/
        jsx(Component, {
            'p-color-scheme': colorScheme,
            className: className,
            style: {
                color: 'var(--p-text)',
            },
            children: children,
        })
    );
}

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */

function isObject$5(value) {
    var type = typeof value;
    return value != null && (type == 'object' || type == 'function');
}

var isObject_1 = isObject$5;

/** Detect free variable `global` from Node.js. */

var freeGlobal$1 = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

var _freeGlobal = freeGlobal$1;

var freeGlobal = _freeGlobal;

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root$9 = freeGlobal || freeSelf || Function('return this')();

var _root = root$9;

var root$8 = _root;

/**
 * Gets the timestamp of the number of milliseconds that have elapsed since
 * the Unix epoch (1 January 1970 00:00:00 UTC).
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Date
 * @returns {number} Returns the timestamp.
 * @example
 *
 * _.defer(function(stamp) {
 *   console.log(_.now() - stamp);
 * }, _.now());
 * // => Logs the number of milliseconds it took for the deferred invocation.
 */
var now$1 = function () {
    return root$8.Date.now();
};

var now_1 = now$1;

/** Used to match a single whitespace character. */

var reWhitespace = /\s/;

/**
 * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
 * character of `string`.
 *
 * @private
 * @param {string} string The string to inspect.
 * @returns {number} Returns the index of the last non-whitespace character.
 */
function trimmedEndIndex$1(string) {
    var index = string.length;

    while (index-- && reWhitespace.test(string.charAt(index))) {}
    return index;
}

var _trimmedEndIndex = trimmedEndIndex$1;

var trimmedEndIndex = _trimmedEndIndex;

/** Used to match leading whitespace. */
var reTrimStart = /^\s+/;

/**
 * The base implementation of `_.trim`.
 *
 * @private
 * @param {string} string The string to trim.
 * @returns {string} Returns the trimmed string.
 */
function baseTrim$1(string) {
    return string ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '') : string;
}

var _baseTrim = baseTrim$1;

var root$7 = _root;

/** Built-in value references. */
var Symbol$4 = root$7.Symbol;

var _Symbol = Symbol$4;

var Symbol$3 = _Symbol;

/** Used for built-in method references. */
var objectProto$b = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$8 = objectProto$b.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString$1 = objectProto$b.toString;

/** Built-in value references. */
var symToStringTag$1 = Symbol$3 ? Symbol$3.toStringTag : undefined;

/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */
function getRawTag$1(value) {
    var isOwn = hasOwnProperty$8.call(value, symToStringTag$1),
        tag = value[symToStringTag$1];

    try {
        value[symToStringTag$1] = undefined;
        var unmasked = true;
    } catch (e) {}

    var result = nativeObjectToString$1.call(value);
    if (unmasked) {
        if (isOwn) {
            value[symToStringTag$1] = tag;
        } else {
            delete value[symToStringTag$1];
        }
    }
    return result;
}

var _getRawTag = getRawTag$1;

/** Used for built-in method references. */

var objectProto$a = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto$a.toString;

/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */
function objectToString$1(value) {
    return nativeObjectToString.call(value);
}

var _objectToString = objectToString$1;

var Symbol$2 = _Symbol,
    getRawTag = _getRawTag,
    objectToString = _objectToString;

/** `Object#toString` result references. */
var nullTag = '[object Null]',
    undefinedTag = '[object Undefined]';

/** Built-in value references. */
var symToStringTag = Symbol$2 ? Symbol$2.toStringTag : undefined;

/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function baseGetTag$5(value) {
    if (value == null) {
        return value === undefined ? undefinedTag : nullTag;
    }
    return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
}

var _baseGetTag = baseGetTag$5;

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */

function isObjectLike$5(value) {
    return value != null && typeof value == 'object';
}

var isObjectLike_1 = isObjectLike$5;

var baseGetTag$4 = _baseGetTag,
    isObjectLike$4 = isObjectLike_1;

/** `Object#toString` result references. */
var symbolTag$1 = '[object Symbol]';

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
function isSymbol$1(value) {
    return typeof value == 'symbol' || (isObjectLike$4(value) && baseGetTag$4(value) == symbolTag$1);
}

var isSymbol_1 = isSymbol$1;

var baseTrim = _baseTrim,
    isObject$4 = isObject_1,
    isSymbol = isSymbol_1;

/** Used as references for various `Number` constants. */
var NAN = 0 / 0;

/** Used to detect bad signed hexadecimal string values. */
var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

/** Used to detect binary string values. */
var reIsBinary = /^0b[01]+$/i;

/** Used to detect octal string values. */
var reIsOctal = /^0o[0-7]+$/i;

/** Built-in method references without a dependency on `root`. */
var freeParseInt = parseInt;

/**
 * Converts `value` to a number.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {number} Returns the number.
 * @example
 *
 * _.toNumber(3.2);
 * // => 3.2
 *
 * _.toNumber(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toNumber(Infinity);
 * // => Infinity
 *
 * _.toNumber('3.2');
 * // => 3.2
 */
function toNumber$1(value) {
    if (typeof value == 'number') {
        return value;
    }
    if (isSymbol(value)) {
        return NAN;
    }
    if (isObject$4(value)) {
        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
        value = isObject$4(other) ? other + '' : other;
    }
    if (typeof value != 'string') {
        return value === 0 ? value : +value;
    }
    value = baseTrim(value);
    var isBinary = reIsBinary.test(value);
    return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
}

var toNumber_1 = toNumber$1;

var isObject$3 = isObject_1,
    now = now_1,
    toNumber = toNumber_1;

/** Error message constants. */
var FUNC_ERROR_TEXT = 'Expected a function';

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max,
    nativeMin = Math.min;

/**
 * Creates a debounced function that delays invoking `func` until after `wait`
 * milliseconds have elapsed since the last time the debounced function was
 * invoked. The debounced function comes with a `cancel` method to cancel
 * delayed `func` invocations and a `flush` method to immediately invoke them.
 * Provide `options` to indicate whether `func` should be invoked on the
 * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
 * with the last arguments provided to the debounced function. Subsequent
 * calls to the debounced function return the result of the last `func`
 * invocation.
 *
 * **Note:** If `leading` and `trailing` options are `true`, `func` is
 * invoked on the trailing edge of the timeout only if the debounced function
 * is invoked more than once during the `wait` timeout.
 *
 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
 *
 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
 * for details over the differences between `_.debounce` and `_.throttle`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to debounce.
 * @param {number} [wait=0] The number of milliseconds to delay.
 * @param {Object} [options={}] The options object.
 * @param {boolean} [options.leading=false]
 *  Specify invoking on the leading edge of the timeout.
 * @param {number} [options.maxWait]
 *  The maximum time `func` is allowed to be delayed before it's invoked.
 * @param {boolean} [options.trailing=true]
 *  Specify invoking on the trailing edge of the timeout.
 * @returns {Function} Returns the new debounced function.
 * @example
 *
 * // Avoid costly calculations while the window size is in flux.
 * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
 *
 * // Invoke `sendMail` when clicked, debouncing subsequent calls.
 * jQuery(element).on('click', _.debounce(sendMail, 300, {
 *   'leading': true,
 *   'trailing': false
 * }));
 *
 * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
 * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
 * var source = new EventSource('/stream');
 * jQuery(source).on('message', debounced);
 *
 * // Cancel the trailing debounced invocation.
 * jQuery(window).on('popstate', debounced.cancel);
 */
function debounce(func, wait, options) {
    var lastArgs,
        lastThis,
        maxWait,
        result,
        timerId,
        lastCallTime,
        lastInvokeTime = 0,
        leading = false,
        maxing = false,
        trailing = true;

    if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
    }
    wait = toNumber(wait) || 0;
    if (isObject$3(options)) {
        leading = !!options.leading;
        maxing = 'maxWait' in options;
        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
    }

    function invokeFunc(time) {
        var args = lastArgs,
            thisArg = lastThis;

        lastArgs = lastThis = undefined;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
    }

    function leadingEdge(time) {
        // Reset any `maxWait` timer.
        lastInvokeTime = time;
        // Start the timer for the trailing edge.
        timerId = setTimeout(timerExpired, wait);
        // Invoke the leading edge.
        return leading ? invokeFunc(time) : result;
    }

    function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime,
            timeWaiting = wait - timeSinceLastCall;

        return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
    }

    function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime;

        // Either this is the first call, activity has stopped and we're at the
        // trailing edge, the system time has gone backwards and we're treating
        // it as the trailing edge, or we've hit the `maxWait` limit.
        return lastCallTime === undefined || timeSinceLastCall >= wait || timeSinceLastCall < 0 || (maxing && timeSinceLastInvoke >= maxWait);
    }

    function timerExpired() {
        var time = now();
        if (shouldInvoke(time)) {
            return trailingEdge(time);
        }
        // Restart the timer.
        timerId = setTimeout(timerExpired, remainingWait(time));
    }

    function trailingEdge(time) {
        timerId = undefined;

        // Only invoke if we have `lastArgs` which means `func` has been
        // debounced at least once.
        if (trailing && lastArgs) {
            return invokeFunc(time);
        }
        lastArgs = lastThis = undefined;
        return result;
    }

    function cancel() {
        if (timerId !== undefined) {
            clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = undefined;
    }

    function flush() {
        return timerId === undefined ? result : trailingEdge(now());
    }

    function debounced() {
        var time = now(),
            isInvoking = shouldInvoke(time);

        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;

        if (isInvoking) {
            if (timerId === undefined) {
                return leadingEdge(lastCallTime);
            }
            if (maxing) {
                // Handle invocations in a tight loop.
                clearTimeout(timerId);
                timerId = setTimeout(timerExpired, wait);
                return invokeFunc(lastCallTime);
            }
        }
        if (timerId === undefined) {
            timerId = setTimeout(timerExpired, wait);
        }
        return result;
    }
    debounced.cancel = cancel;
    debounced.flush = flush;
    return debounced;
}

var debounce_1 = debounce;

const Breakpoints = {
    navigationBarCollapsed: '768px',
    stackedContent: '1043px',
};
const noWindowMatches = {
    media: '',
    addListener: noop$b,
    removeListener: noop$b,
    matches: false,
    onchange: noop$b,
    addEventListener: noop$b,
    removeEventListener: noop$b,
    dispatchEvent: (_) => true,
};

function noop$b() {}

function navigationBarCollapsed() {
    return typeof window === 'undefined' ? noWindowMatches : window.matchMedia(`(max-width: ${Breakpoints.navigationBarCollapsed})`);
}
function stackedContent() {
    return typeof window === 'undefined' ? noWindowMatches : window.matchMedia(`(max-width: ${Breakpoints.stackedContent})`);
}

class Rect {
    static get zero() {
        return new Rect();
    }

    constructor({ top = 0, left = 0, width = 0, height = 0 } = {}) {
        this.top = void 0;
        this.left = void 0;
        this.width = void 0;
        this.height = void 0;
        this.top = top;
        this.left = left;
        this.width = width;
        this.height = height;
    }

    get center() {
        return {
            x: this.left + this.width / 2,
            y: this.top + this.height / 2,
        };
    }
}
function getRectForNode(node) {
    if (!(node instanceof Element)) {
        return new Rect({
            width: window.innerWidth,
            height: window.innerHeight,
        });
    }

    const rect = node.getBoundingClientRect();
    return new Rect({
        top: rect.top,
        left: rect.left,
        width: rect.width,
        height: rect.height,
    });
}

const SIXTY_FPS$1 = 1000 / 60;
class StickyManager {
    constructor(container) {
        this.stickyItems = [];
        this.stuckItems = [];
        this.container = null;
        this.topBarOffset = 0;
        this.handleResize = debounce_1(
            () => {
                this.manageStickyItems();
            },
            SIXTY_FPS$1,
            {
                leading: true,
                trailing: true,
                maxWait: SIXTY_FPS$1,
            }
        );
        this.handleScroll = debounce_1(
            () => {
                this.manageStickyItems();
            },
            SIXTY_FPS$1,
            {
                leading: true,
                trailing: true,
                maxWait: SIXTY_FPS$1,
            }
        );

        if (container) {
            this.setContainer(container);
        }
    }

    registerStickyItem(stickyItem) {
        this.stickyItems.push(stickyItem);
    }

    unregisterStickyItem(nodeToRemove) {
        const nodeIndex = this.stickyItems.findIndex(({ stickyNode }) => nodeToRemove === stickyNode);
        this.stickyItems.splice(nodeIndex, 1);
    }

    setContainer(el) {
        this.container = el;

        if (isDocument$1(el)) {
            this.setTopBarOffset(el);
        }

        this.container.addEventListener('scroll', this.handleScroll);
        window.addEventListener('resize', this.handleResize);
        this.manageStickyItems();
    }

    removeScrollListener() {
        if (this.container) {
            this.container.removeEventListener('scroll', this.handleScroll);
            window.removeEventListener('resize', this.handleResize);
        }
    }

    manageStickyItems() {
        if (this.stickyItems.length <= 0) {
            return;
        }

        const scrollTop = this.container ? scrollTopFor(this.container) : 0;
        const containerTop = getRectForNode(this.container).top + this.topBarOffset;
        this.stickyItems.forEach((stickyItem) => {
            const { handlePositioning } = stickyItem;
            const { sticky, top, left, width } = this.evaluateStickyItem(stickyItem, scrollTop, containerTop);
            this.updateStuckItems(stickyItem, sticky);
            handlePositioning(sticky, top, left, width);
        });
    }

    evaluateStickyItem(stickyItem, scrollTop, containerTop) {
        const { stickyNode, placeHolderNode, boundingElement, offset, disableWhenStacked } = stickyItem;

        if (disableWhenStacked && stackedContent().matches) {
            return {
                sticky: false,
                top: 0,
                left: 0,
                width: 'auto',
            };
        }

        const stickyOffset = offset ? this.getOffset(stickyNode) + parseInt(tokens.spacing['5'], 10) : this.getOffset(stickyNode);
        const scrollPosition = scrollTop + stickyOffset;
        const placeHolderNodeCurrentTop = placeHolderNode.getBoundingClientRect().top - containerTop + scrollTop;
        const top = containerTop + stickyOffset;
        const width = placeHolderNode.getBoundingClientRect().width;
        const left = placeHolderNode.getBoundingClientRect().left;
        let sticky;

        if (boundingElement == null) {
            sticky = scrollPosition >= placeHolderNodeCurrentTop;
        } else {
            var _stickyNode$firstElem;

            const stickyItemHeight = stickyNode.getBoundingClientRect().height || ((_stickyNode$firstElem = stickyNode.firstElementChild) === null || _stickyNode$firstElem === void 0 ? void 0 : _stickyNode$firstElem.getBoundingClientRect().height) || 0;
            const stickyItemBottomPosition = boundingElement.getBoundingClientRect().bottom - stickyItemHeight + scrollTop - containerTop;
            sticky = scrollPosition >= placeHolderNodeCurrentTop && scrollPosition < stickyItemBottomPosition;
        }

        return {
            sticky,
            top,
            left,
            width,
        };
    }

    updateStuckItems(item, sticky) {
        const { stickyNode } = item;

        if (sticky && !this.isNodeStuck(stickyNode)) {
            this.addStuckItem(item);
        } else if (!sticky && this.isNodeStuck(stickyNode)) {
            this.removeStuckItem(item);
        }
    }

    addStuckItem(stickyItem) {
        this.stuckItems.push(stickyItem);
    }

    removeStuckItem(stickyItem) {
        const { stickyNode: nodeToRemove } = stickyItem;
        const nodeIndex = this.stuckItems.findIndex(({ stickyNode }) => nodeToRemove === stickyNode);
        this.stuckItems.splice(nodeIndex, 1);
    }

    getOffset(node) {
        if (this.stuckItems.length === 0) {
            return 0;
        }

        let offset = 0;
        let count = 0;
        const stuckNodesLength = this.stuckItems.length;
        const nodeRect = getRectForNode(node);

        while (count < stuckNodesLength) {
            const stuckNode = this.stuckItems[count].stickyNode;

            if (stuckNode !== node) {
                const stuckNodeRect = getRectForNode(stuckNode);

                if (!horizontallyOverlaps(nodeRect, stuckNodeRect)) {
                    offset += getRectForNode(stuckNode).height;
                }
            } else {
                break;
            }

            count++;
        }

        return offset;
    }

    isNodeStuck(node) {
        const nodeFound = this.stuckItems.findIndex(({ stickyNode }) => node === stickyNode);
        return nodeFound >= 0;
    }

    setTopBarOffset(container) {
        const topbarElement = container.querySelector(`:not(${scrollable.selector}) ${dataPolarisTopBar.selector}`);
        this.topBarOffset = topbarElement ? topbarElement.clientHeight : 0;
    }
}

function isDocument$1(node) {
    return node === document;
}

function scrollTopFor(container) {
    return isDocument$1(container) ? document.body.scrollTop || document.documentElement.scrollTop : container.scrollTop;
}

function horizontallyOverlaps(rect1, rect2) {
    const rect1Left = rect1.left;
    const rect1Right = rect1.left + rect1.width;
    const rect2Left = rect2.left;
    const rect2Right = rect2.left + rect2.width;
    return rect2Right < rect1Left || rect1Right < rect2Left;
}

const isServer = typeof window === 'undefined' || typeof document === 'undefined';

const SCROLL_LOCKING_ATTRIBUTE = 'data-lock-scrolling';
const SCROLL_LOCKING_WRAPPER_ATTRIBUTE = 'data-lock-scrolling-wrapper';
let scrollPosition = 0;
class ScrollLockManager {
    constructor() {
        this.scrollLocks = 0;
        this.locked = false;
    }

    registerScrollLock() {
        this.scrollLocks += 1;
        this.handleScrollLocking();
    }

    unregisterScrollLock() {
        this.scrollLocks -= 1;
        this.handleScrollLocking();
    }

    handleScrollLocking() {
        if (isServer) return;
        const { scrollLocks } = this;
        const { body } = document;
        const wrapper = body.firstElementChild;

        if (scrollLocks === 0) {
            body.removeAttribute(SCROLL_LOCKING_ATTRIBUTE);

            if (wrapper) {
                wrapper.removeAttribute(SCROLL_LOCKING_WRAPPER_ATTRIBUTE);
            }

            window.scroll(0, scrollPosition);
            this.locked = false;
        } else if (scrollLocks > 0 && !this.locked) {
            scrollPosition = window.pageYOffset;
            body.setAttribute(SCROLL_LOCKING_ATTRIBUTE, '');

            if (wrapper) {
                wrapper.setAttribute(SCROLL_LOCKING_WRAPPER_ATTRIBUTE, '');
                wrapper.scrollTop = scrollPosition;
            }

            this.locked = true;
        }
    }

    resetScrollPosition() {
        scrollPosition = 0;
    }
}

class UniqueIdFactory {
    constructor(idGeneratorFactory) {
        this.idGeneratorFactory = void 0;
        this.idGenerators = {};
        this.idGeneratorFactory = idGeneratorFactory;
    }

    nextId(prefix) {
        if (!this.idGenerators[prefix]) {
            this.idGenerators[prefix] = this.idGeneratorFactory(prefix);
        }

        return this.idGenerators[prefix]();
    }
}
function globalIdGeneratorFactory(prefix = '') {
    let index = 1;
    return () => `Polaris${prefix}${index++}`;
}

const OBJECT_NOTATION_MATCHER = /\[(.*?)\]|(\w+)/g;
function get(obj, keypath, defaultValue) {
    if (obj == null) return undefined;
    const keys = Array.isArray(keypath) ? keypath : getKeypath(keypath);
    let acc = obj; // eslint-disable-next-line @typescript-eslint/prefer-for-of

    for (let i = 0; i < keys.length; i++) {
        const val = acc[keys[i]];
        if (val === undefined) return defaultValue;
        acc = val;
    }

    return acc;
}

function getKeypath(str) {
    const path = [];
    let result;

    while ((result = OBJECT_NOTATION_MATCHER.exec(str))) {
        const [, first, second] = result;
        path.push(first || second);
    }

    return path;
}

// Unfortunately, this is how we have to type this at the moment.
// There is currently a proposal to support variadic kinds.
// https://github.com/Microsoft/TypeScript/issues/5453
function merge(...objs) {
    let final = {};

    for (const obj of objs) {
        final = mergeRecursively(final, obj);
    }

    return final;
}

function mergeRecursively(inputObjA, objB) {
    const objA = Array.isArray(inputObjA) ? [...inputObjA] : { ...inputObjA };

    for (const key in objB) {
        if (!Object.prototype.hasOwnProperty.call(objB, key)) {
            continue;
        } else if (isMergeableValue(objB[key]) && isMergeableValue(objA[key])) {
            objA[key] = mergeRecursively(objA[key], objB[key]);
        } else {
            objA[key] = objB[key];
        }
    }

    return objA;
}

function isMergeableValue(value) {
    return value !== null && typeof value === 'object';
}

const REPLACE_REGEX$1 = /{([^}]*)}/g;
class I18n {
    /**
     * @param translation A locale object or array of locale objects that overrides default translations. If specifying an array then your desired language dictionary should come first, followed by your fallback language dictionaries
     */
    constructor(translation) {
        this.translation = {};
        // slice the array to make a shallow copy of it, so we don't accidentally
        // modify the original translation array
        this.translation = Array.isArray(translation) ? merge(...translation.slice().reverse()) : translation;
    }

    translate(id, replacements) {
        const text = get(this.translation, id, '');

        if (!text) {
            return '';
        }

        if (replacements) {
            return text.replace(REPLACE_REGEX$1, (match) => {
                const replacement = match.substring(1, match.length - 1);

                if (replacements[replacement] === undefined) {
                    const replacementData = JSON.stringify(replacements);
                    throw new Error(`Error in translation for key '${id}'. No replacement found for key '${replacement}'. The following replacements were passed: '${replacementData}'`);
                } // This could be a string or a number, but JS doesn't mind which it gets
                // and can handle that cast internally. So let it, to save us calling
                // toString() on what's already a string in 90% of cases.

                return replacements[replacement];
            });
        }

        return text;
    }

    translationKeyExists(path) {
        return Boolean(get(this.translation, path));
    }
}

const FeaturesContext = /*#__PURE__*/ react.exports.createContext(undefined);

const I18nContext = /*#__PURE__*/ react.exports.createContext(undefined);

const ScrollLockManagerContext = /*#__PURE__*/ react.exports.createContext(undefined);

const StickyManagerContext = /*#__PURE__*/ react.exports.createContext(undefined);

const UniqueIdFactoryContext = /*#__PURE__*/ react.exports.createContext(undefined);

const LinkContext = /*#__PURE__*/ react.exports.createContext(undefined);

const MediaQueryContext = /*#__PURE__*/ react.exports.createContext(undefined);

// see https://github.com/oliviertassinari/react-event-listener/
class EventListener extends react.exports.PureComponent {
    componentDidMount() {
        this.attachListener();
    }

    componentDidUpdate({ passive, ...detachProps }) {
        this.detachListener(detachProps);
        this.attachListener();
    }

    componentWillUnmount() {
        this.detachListener();
    }

    render() {
        return null;
    }

    attachListener() {
        const { event, handler, capture, passive } = this.props;
        window.addEventListener(event, handler, {
            capture,
            passive,
        });
    }

    detachListener(prevProps) {
        const { event, handler, capture } = prevProps || this.props;
        window.removeEventListener(event, handler, capture);
    }
}

const MediaQueryProvider = function MediaQueryProvider({ children }) {
    const [isNavigationCollapsed, setIsNavigationCollapsed] = react.exports.useState(navigationBarCollapsed().matches); // eslint-disable-next-line react-hooks/exhaustive-deps

    const handleResize = react.exports.useCallback(
        debounce_1(
            () => {
                if (isNavigationCollapsed !== navigationBarCollapsed().matches) {
                    setIsNavigationCollapsed(!isNavigationCollapsed);
                }
            },
            40,
            {
                trailing: true,
                leading: true,
                maxWait: 40,
            }
        ),
        [isNavigationCollapsed]
    );
    react.exports.useEffect(() => {
        setIsNavigationCollapsed(navigationBarCollapsed().matches);
    }, []);
    const context = react.exports.useMemo(
        () => ({
            isNavigationCollapsed,
        }),
        [isNavigationCollapsed]
    );
    return (
        /*#__PURE__*/

        /*#__PURE__*/
        jsxs(MediaQueryContext.Provider, {
            value: context,
            children: [
                /*#__PURE__*/ jsx(EventListener, {
                    event: 'resize',
                    handler: handleResize,
                }),
                children,
            ],
        })
    );
};

const PortalsManagerContext = /*#__PURE__*/ react.exports.createContext(undefined);

function PortalsContainerComponent(_props, ref) {
    return (
        /*#__PURE__*/

        /*#__PURE__*/
        jsx('div', {
            id: 'PolarisPortalsContainer',
            ref: ref,
        })
    );
}

const PortalsContainer = /*#__PURE__*/ react.exports.forwardRef(PortalsContainerComponent);

function PortalsManager({ children, container }) {
    const [portalContainerElement, setPortalContainerElement] = react.exports.useState(null);
    const currentContainer = container !== null && container !== void 0 ? container : portalContainerElement;
    const contextValue = react.exports.useMemo(
        () => ({
            container: currentContainer,
        }),
        [currentContainer]
    );
    return (
        /*#__PURE__*/

        /*#__PURE__*/
        jsxs(PortalsManagerContext.Provider, {
            value: contextValue,
            children: [
                children,
                container
                    ? null
                    : /*#__PURE__*/

                      /*#__PURE__*/
                      jsx(PortalsContainer, {
                          ref: setPortalContainerElement,
                      }),
            ],
        })
    );
}

const FocusManagerContext = /*#__PURE__*/ react.exports.createContext(undefined);

function FocusManager({ children }) {
    const [trapFocusList, setTrapFocusList] = react.exports.useState([]);
    const add = react.exports.useCallback((id) => {
        setTrapFocusList((list) => [...list, id]);
    }, []);
    const remove = react.exports.useCallback((id) => {
        let removed = true;
        setTrapFocusList((list) => {
            const clone = [...list];
            const index = clone.indexOf(id);

            if (index === -1) {
                removed = false;
            } else {
                clone.splice(index, 1);
            }

            return clone;
        });
        return removed;
    }, []);
    const value = react.exports.useMemo(
        () => ({
            trapFocusList,
            add,
            remove,
        }),
        [add, trapFocusList, remove]
    );
    return (
        /*#__PURE__*/

        /*#__PURE__*/
        jsx(FocusManagerContext.Provider, {
            value: value,
            children: children,
        })
    );
}

class AppProvider extends react.exports.Component {
    constructor(props) {
        super(props);
        this.stickyManager = void 0;
        this.scrollLockManager = void 0;
        this.uniqueIdFactory = void 0;

        this.setBodyStyles = () => {
            // Inlining the following custom properties to maintain backward
            // compatibility with the legacy ThemeProvider implementation.
            document.body.setAttribute('p-color-scheme', this.props.colorScheme || DEFAULT_COLOR_SCHEME);
            document.body.style.backgroundColor = 'var(--p-background)';
            document.body.style.color = 'var(--p-text)';
        };

        this.stickyManager = new StickyManager();
        this.scrollLockManager = new ScrollLockManager();
        this.uniqueIdFactory = new UniqueIdFactory(globalIdGeneratorFactory);
        const { i18n, linkComponent } = this.props; // eslint-disable-next-line react/state-in-constructor

        this.state = {
            link: linkComponent,
            intl: new I18n(i18n),
        };
    }

    componentDidMount() {
        if (document != null) {
            this.stickyManager.setContainer(document);
            this.setBodyStyles();
        }
    }

    componentDidUpdate({ colorScheme: prevColorScheme, i18n: prevI18n, linkComponent: prevLinkComponent }) {
        const { colorScheme, i18n, linkComponent } = this.props;

        if (colorScheme !== prevColorScheme) {
            this.setBodyStyles();
        }

        if (i18n === prevI18n && linkComponent === prevLinkComponent) {
            return;
        } // eslint-disable-next-line react/no-did-update-set-state

        this.setState({
            link: linkComponent,
            intl: new I18n(i18n),
        });
    }

    render() {
        const { children, features = {}, colorScheme } = this.props;
        const { intl, link } = this.state;
        return (
            /*#__PURE__*/

            /*#__PURE__*/
            jsx(FeaturesContext.Provider, {
                value: features,
                children: /*#__PURE__*/ jsx(I18nContext.Provider, {
                    value: intl,
                    children: /*#__PURE__*/ jsx(ScrollLockManagerContext.Provider, {
                        value: this.scrollLockManager,
                        children: /*#__PURE__*/ jsx(StickyManagerContext.Provider, {
                            value: this.stickyManager,
                            children: /*#__PURE__*/ jsx(UniqueIdFactoryContext.Provider, {
                                value: this.uniqueIdFactory,
                                children: /*#__PURE__*/ jsx(LinkContext.Provider, {
                                    value: link,
                                    children: /*#__PURE__*/ jsx(CustomProperties, {
                                        colorScheme: colorScheme,
                                        children: /*#__PURE__*/ jsx(MediaQueryProvider, {
                                            children: /*#__PURE__*/ jsx(PortalsManager, {
                                                children: /*#__PURE__*/ jsx(FocusManager, {
                                                    children: children,
                                                }),
                                            }),
                                        }),
                                    }),
                                }),
                            }),
                        }),
                    }),
                }),
            })
        );
    }
}

function classNames(...classes) {
    return classes.filter(Boolean).join(' ');
}
function variationName(name, value) {
    return `${name}${value.charAt(0).toUpperCase()}${value.slice(1)}`;
}

/**
 * Returns a stateful value, and a set of memoized functions to toggle it,
 * set it to true and set it to false
 */

function useToggle(initialState) {
    const [value, setState] = react.exports.useState(initialState);
    return {
        value,
        toggle: react.exports.useCallback(() => setState((state) => !state), []),
        setTrue: react.exports.useCallback(() => setState(true), []),
        setFalse: react.exports.useCallback(() => setState(false), []),
    };
}

var styles$1a = {
    Card: 'Polaris-Card',
    subdued: 'Polaris-Card--subdued',
    'Section-hideOnPrint': 'Polaris-Card__Section--hideOnPrint',
    hideOnPrint: 'Polaris-Card--hideOnPrint',
    Header: 'Polaris-Card__Header',
    Section: 'Polaris-Card__Section',
    'Section-fullWidth': 'Polaris-Card__Section--fullWidth',
    'Section-flush': 'Polaris-Card__Section--flush',
    'Section-subdued': 'Polaris-Card__Section--subdued',
    SectionHeader: 'Polaris-Card__SectionHeader',
    Subsection: 'Polaris-Card__Subsection',
    Footer: 'Polaris-Card__Footer',
    LeftJustified: 'Polaris-Card__LeftJustified',
};

var _path$s;

var SvgAlertMinor = function SvgAlertMinor(props) {
    return /*#__PURE__*/ React.createElement(
        'svg',
        Object.assign(
            {
                viewBox: '0 0 20 20',
            },
            props
        ),
        _path$s ||
            (_path$s = /*#__PURE__*/ React.createElement('path', {
                d: 'M10 18a8 8 0 1 1 0-16 8 8 0 0 1 0 16zm-1-9a1 1 0 0 0 2 0v-2a1 1 0 1 0-2 0v2zm0 4a1 1 0 1 0 2 0 1 1 0 0 0-2 0z',
            }))
    );
};

var _path$r;

var SvgArrowLeftMinor = function SvgArrowLeftMinor(props) {
    return /*#__PURE__*/ React.createElement(
        'svg',
        Object.assign(
            {
                viewBox: '0 0 20 20',
            },
            props
        ),
        _path$r ||
            (_path$r = /*#__PURE__*/ React.createElement('path', {
                d: 'M17 9h-11.586l3.293-3.293a.999.999 0 1 0-1.414-1.414l-5 5a.999.999 0 0 0 0 1.414l5 5a.997.997 0 0 0 1.414 0 .999.999 0 0 0 0-1.414l-3.293-3.293h11.586a1 1 0 1 0 0-2z',
            }))
    );
};

var _path$q;

var SvgCancelSmallMinor = function SvgCancelSmallMinor(props) {
    return /*#__PURE__*/ React.createElement(
        'svg',
        Object.assign(
            {
                viewBox: '0 0 20 20',
            },
            props
        ),
        _path$q ||
            (_path$q = /*#__PURE__*/ React.createElement('path', {
                d: 'M6.707 5.293a1 1 0 0 0-1.414 1.414l3.293 3.293-3.293 3.293a1 1 0 1 0 1.414 1.414l3.293-3.293 3.293 3.293a1 1 0 0 0 1.414-1.414l-3.293-3.293 3.293-3.293a1 1 0 0 0-1.414-1.414l-3.293 3.293-3.293-3.293z',
            }))
    );
};

var _path$p;

var SvgCaretDownMinor = function SvgCaretDownMinor(props) {
    return /*#__PURE__*/ React.createElement(
        'svg',
        Object.assign(
            {
                viewBox: '0 0 20 20',
            },
            props
        ),
        _path$p ||
            (_path$p = /*#__PURE__*/ React.createElement('path', {
                d: 'M13.098 8h-6.196c-.751 0-1.172.754-.708 1.268l3.098 3.432c.36.399 1.055.399 1.416 0l3.098-3.433c.464-.513.043-1.267-.708-1.267z',
            }))
    );
};

var _path$o;

var SvgCaretUpMinor = function SvgCaretUpMinor(props) {
    return /*#__PURE__*/ React.createElement(
        'svg',
        Object.assign(
            {
                viewBox: '0 0 20 20',
            },
            props
        ),
        _path$o ||
            (_path$o = /*#__PURE__*/ React.createElement('path', {
                d: 'M6.902 12h6.196c.751 0 1.172-.754.708-1.268l-3.098-3.432c-.36-.399-1.055-.399-1.416 0l-3.098 3.433c-.464.513-.043 1.267.708 1.267z',
            }))
    );
};

var _path$n;

var SvgCashDollarMajor = function SvgCashDollarMajor(props) {
    return /*#__PURE__*/ React.createElement(
        'svg',
        Object.assign(
            {
                viewBox: '0 0 20 20',
            },
            props
        ),
        _path$n ||
            (_path$n = /*#__PURE__*/ React.createElement('path', {
                d: 'M10 20c-5.514 0-10-4.486-10-10s4.486-10 10-10 10 4.486 10 10-4.486 10-10 10zm1-15a1 1 0 1 0-2 0v.17a3 3 0 0 0-2 2.83c0 1.013.36 1.77 1.025 2.269.54.405 1.215.572 1.666.685l.066.016c.55.138.835.224 1.018.361.085.064.225.182.225.669a1 1 0 0 1-.984 1 1.611 1.611 0 0 1-.325-.074 2.533 2.533 0 0 1-.984-.633 1 1 0 0 0-1.414 1.414 4.548 4.548 0 0 0 1.707 1.097v.196a1 1 0 1 0 2 0v-.17a3 3 0 0 0 2-2.83c0-1.013-.36-1.77-1.025-2.269-.54-.405-1.215-.572-1.666-.685l-.066-.016c-.55-.138-.835-.224-1.018-.361-.085-.064-.225-.182-.225-.669a1 1 0 0 1 .984-1 1.618 1.618 0 0 1 .325.074c.245.081.606.255.984.633a1 1 0 1 0 1.414-1.414 4.547 4.547 0 0 0-1.707-1.097v-.196z',
            }))
    );
};

var _path$m;

var SvgChevronDownMinor = function SvgChevronDownMinor(props) {
    return /*#__PURE__*/ React.createElement(
        'svg',
        Object.assign(
            {
                viewBox: '0 0 20 20',
            },
            props
        ),
        _path$m ||
            (_path$m = /*#__PURE__*/ React.createElement('path', {
                d: 'M10 14a.997.997 0 0 1-.707-.293l-5-5a.999.999 0 1 1 1.414-1.414l4.293 4.293 4.293-4.293a.999.999 0 1 1 1.414 1.414l-5 5a.997.997 0 0 1-.707.293z',
            }))
    );
};

var _path$l;

var SvgChevronLeftMinor = function SvgChevronLeftMinor(props) {
    return /*#__PURE__*/ React.createElement(
        'svg',
        Object.assign(
            {
                viewBox: '0 0 20 20',
            },
            props
        ),
        _path$l ||
            (_path$l = /*#__PURE__*/ React.createElement('path', {
                d: 'M12 16a.997.997 0 0 1-.707-.293l-5-5a.999.999 0 0 1 0-1.414l5-5a.999.999 0 1 1 1.414 1.414l-4.293 4.293 4.293 4.293a.999.999 0 0 1-.707 1.707z',
            }))
    );
};

var _path$k;

var SvgChevronRightMinor = function SvgChevronRightMinor(props) {
    return /*#__PURE__*/ React.createElement(
        'svg',
        Object.assign(
            {
                viewBox: '0 0 20 20',
            },
            props
        ),
        _path$k ||
            (_path$k = /*#__PURE__*/ React.createElement('path', {
                d: 'M8 16a.999.999 0 0 1-.707-1.707l4.293-4.293-4.293-4.293a.999.999 0 1 1 1.414-1.414l5 5a.999.999 0 0 1 0 1.414l-5 5a.997.997 0 0 1-.707.293z',
            }))
    );
};

var _path$j;

var SvgChevronUpMinor = function SvgChevronUpMinor(props) {
    return /*#__PURE__*/ React.createElement(
        'svg',
        Object.assign(
            {
                viewBox: '0 0 20 20',
            },
            props
        ),
        _path$j ||
            (_path$j = /*#__PURE__*/ React.createElement('path', {
                d: 'M15 13a.997.997 0 0 1-.707-.293l-4.293-4.293-4.293 4.293a.999.999 0 1 1-1.414-1.414l5-5a.999.999 0 0 1 1.414 0l5 5a.999.999 0 0 1-.707 1.707z',
            }))
    );
};

var _path$i;

var SvgCircleAlertMajor = function SvgCircleAlertMajor(props) {
    return /*#__PURE__*/ React.createElement(
        'svg',
        Object.assign(
            {
                viewBox: '0 0 20 20',
            },
            props
        ),
        _path$i ||
            (_path$i = /*#__PURE__*/ React.createElement('path', {
                fillRule: 'evenodd',
                d: 'M10 0c-5.514 0-10 4.486-10 10s4.486 10 10 10 10-4.486 10-10-4.486-10-10-10zm-1 6a1 1 0 1 1 2 0v4a1 1 0 1 1-2 0v-4zm1 9a1 1 0 1 0 0-2 1 1 0 0 0 0 2z',
            }))
    );
};

var _path$h;

var SvgCircleCancelMinor = function SvgCircleCancelMinor(props) {
    return /*#__PURE__*/ React.createElement(
        'svg',
        Object.assign(
            {
                viewBox: '0 0 20 20',
            },
            props
        ),
        _path$h ||
            (_path$h = /*#__PURE__*/ React.createElement('path', {
                fillRule: 'evenodd',
                d: 'M10 2a8 8 0 1 0 0 16 8 8 0 0 0 0-16zm-2.293 4.293a1 1 0 0 0-1.414 1.414l2.293 2.293-2.293 2.293a1 1 0 1 0 1.414 1.414l2.293-2.293 2.293 2.293a1 1 0 1 0 1.414-1.414l-2.293-2.293 2.293-2.293a1 1 0 0 0-1.414-1.414l-2.293 2.293-2.293-2.293z',
            }))
    );
};

var _path$g;

var SvgCircleInformationMajor = function SvgCircleInformationMajor(props) {
    return /*#__PURE__*/ React.createElement(
        'svg',
        Object.assign(
            {
                viewBox: '0 0 20 20',
            },
            props
        ),
        _path$g ||
            (_path$g = /*#__PURE__*/ React.createElement('path', {
                fillRule: 'evenodd',
                d: 'M10 20c5.514 0 10-4.486 10-10s-4.486-10-10-10-10 4.486-10 10 4.486 10 10 10zm1-6a1 1 0 1 1-2 0v-4a1 1 0 1 1 2 0v4zm-1-9a1 1 0 1 0 0 2 1 1 0 0 0 0-2z',
            }))
    );
};

var _path$f;

var SvgCircleTickMajor = function SvgCircleTickMajor(props) {
    return /*#__PURE__*/ React.createElement(
        'svg',
        Object.assign(
            {
                viewBox: '0 0 20 20',
            },
            props
        ),
        _path$f ||
            (_path$f = /*#__PURE__*/ React.createElement('path', {
                fillRule: 'evenodd',
                d: 'M0 10a10 10 0 1 0 20 0 10 10 0 0 0-20 0zm15.2-1.8a1 1 0 0 0-1.4-1.4l-4.8 4.8-2.3-2.3a1 1 0 0 0-1.4 1.4l3 3c.4.4 1 .4 1.4 0l5.5-5.5z',
            }))
    );
};

var _path$e;

var SvgDiamondAlertMajor = function SvgDiamondAlertMajor(props) {
    return /*#__PURE__*/ React.createElement(
        'svg',
        Object.assign(
            {
                viewBox: '0 0 20 20',
            },
            props
        ),
        _path$e ||
            (_path$e = /*#__PURE__*/ React.createElement('path', {
                d: 'M11.768.768a2.5 2.5 0 0 0-3.536 0l-7.464 7.464a2.5 2.5 0 0 0 0 3.536l7.464 7.464a2.5 2.5 0 0 0 3.536 0l7.464-7.464a2.5 2.5 0 0 0 0-3.536l-7.464-7.464zm-2.768 5.232a1 1 0 1 1 2 0v4a1 1 0 1 1-2 0v-4zm2 8a1 1 0 1 1-2 0 1 1 0 0 1 2 0z',
            }))
    );
};

var _path$d;

var SvgDiscountsMajor = function SvgDiscountsMajor(props) {
    return /*#__PURE__*/ React.createElement(
        'svg',
        Object.assign(
            {
                viewBox: '0 0 20 20',
            },
            props
        ),
        _path$d ||
            (_path$d = /*#__PURE__*/ React.createElement('path', {
                fillRule: 'evenodd',
                d: 'M11.566.66a2.189 2.189 0 0 0-3.132 0l-.962.985a2.189 2.189 0 0 1-1.592.66l-1.377-.017a2.189 2.189 0 0 0-2.215 2.215l.016 1.377a2.189 2.189 0 0 1-.66 1.592l-.984.962a2.189 2.189 0 0 0 0 3.132l.985.962c.428.418.667.994.66 1.592l-.017 1.377a2.189 2.189 0 0 0 2.215 2.215l1.377-.016a2.189 2.189 0 0 1 1.592.66l.962.984c.859.88 2.273.88 3.132 0l.962-.985a2.189 2.189 0 0 1 1.592-.66l1.377.017a2.189 2.189 0 0 0 2.215-2.215l-.016-1.377a2.189 2.189 0 0 1 .66-1.592l.984-.962c.88-.859.88-2.273 0-3.132l-.985-.962a2.189 2.189 0 0 1-.66-1.592l.017-1.377a2.189 2.189 0 0 0-2.215-2.215l-1.377.016a2.189 2.189 0 0 1-1.592-.66l-.962-.984zm-4.566 7.84a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3zm6 6a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3zm.778-8.278a1.1 1.1 0 0 1 0 1.556l-6 6a1.1 1.1 0 1 1-1.556-1.556l6-6a1.1 1.1 0 0 1 1.556 0z',
            }))
    );
};

var _path$c;

var SvgEnableSelectionMinor = function SvgEnableSelectionMinor(props) {
    return /*#__PURE__*/ React.createElement(
        'svg',
        Object.assign(
            {
                viewBox: '0 0 20 20',
            },
            props
        ),
        _path$c ||
            (_path$c = /*#__PURE__*/ React.createElement('path', {
                fillRule: 'evenodd',
                d: 'M4.5 3a1.5 1.5 0 0 0-1.5 1.5v11a1.5 1.5 0 0 0 1.5 1.5h11a1.5 1.5 0 0 0 1.5-1.5v-11a1.5 1.5 0 0 0-1.5-1.5h-11zm9.207 5.707a1 1 0 0 0-1.414-1.414l-3.293 3.293-1.293-1.293a1 1 0 0 0-1.414 1.414l2 2a1 1 0 0 0 1.414 0l4-4z',
            }))
    );
};

var _path$b;

var SvgExternalSmallMinor = function SvgExternalSmallMinor(props) {
    return /*#__PURE__*/ React.createElement(
        'svg',
        Object.assign(
            {
                viewBox: '0 0 20 20',
            },
            props
        ),
        _path$b ||
            (_path$b = /*#__PURE__*/ React.createElement('path', {
                d: 'M14 13v1a1 1 0 0 1-1 1h-7c-.575 0-1-.484-1-1v-7a1 1 0 0 1 1-1h1c1.037 0 1.04 1.5 0 1.5-.178.005-.353 0-.5 0v6h6v-.5c0-1 1.5-1 1.5 0zm-3.75-7.25a.75.75 0 0 1 .75-.75h4v4a.75.75 0 0 1-1.5 0v-1.44l-3.22 3.22a.75.75 0 1 1-1.06-1.06l3.22-3.22h-1.44a.75.75 0 0 1-.75-.75z',
            }))
    );
};

var _path$a;

var SvgHorizontalDotsMinor = function SvgHorizontalDotsMinor(props) {
    return /*#__PURE__*/ React.createElement(
        'svg',
        Object.assign(
            {
                viewBox: '0 0 20 20',
            },
            props
        ),
        _path$a ||
            (_path$a = /*#__PURE__*/ React.createElement('path', {
                d: 'M6 10a2 2 0 1 1-4.001-.001 2 2 0 0 1 4.001.001zm6 0a2 2 0 1 1-4.001-.001 2 2 0 0 1 4.001.001zm6 0a2 2 0 1 1-4.001-.001 2 2 0 0 1 4.001.001z',
            }))
    );
};

var _path$9;

var SvgLocationMajor = function SvgLocationMajor(props) {
    return /*#__PURE__*/ React.createElement(
        'svg',
        Object.assign(
            {
                viewBox: '0 0 20 20',
            },
            props
        ),
        _path$9 ||
            (_path$9 = /*#__PURE__*/ React.createElement('path', {
                fillRule: 'evenodd',
                d: 'M18 8c0-4.42-3.58-8-8-8s-8 3.58-8 8c0 .15 0 .29.01.44.13 3.55 1.99 7.62 7.13 11.29.51.36 1.21.36 1.72 0 5.14-3.67 7-7.74 7.13-11.29.01-.15.01-.29.01-.44zm-5.879 2.121a2.996 2.996 0 0 0 0-4.242 2.996 2.996 0 0 0-4.242 0 2.996 2.996 0 0 0 0 4.242 2.996 2.996 0 0 0 4.242 0z',
            }))
    );
};

var _path$8;

var SvgMinusMinor = function SvgMinusMinor(props) {
    return /*#__PURE__*/ React.createElement(
        'svg',
        Object.assign(
            {
                viewBox: '0 0 20 20',
            },
            props
        ),
        _path$8 ||
            (_path$8 = /*#__PURE__*/ React.createElement('path', {
                d: 'M15 9h-10a1 1 0 1 0 0 2h10a1 1 0 1 0 0-2z',
            }))
    );
};

var _path$7;

var SvgMobileCancelMajor = function SvgMobileCancelMajor(props) {
    return /*#__PURE__*/ React.createElement(
        'svg',
        Object.assign(
            {
                viewBox: '0 0 20 20',
            },
            props
        ),
        _path$7 ||
            (_path$7 = /*#__PURE__*/ React.createElement('path', {
                d: 'm11.414 10 6.293-6.293a1 1 0 1 0-1.414-1.414l-6.293 6.293-6.293-6.293a1 1 0 0 0-1.414 1.414l6.293 6.293-6.293 6.293a1 1 0 1 0 1.414 1.414l6.293-6.293 6.293 6.293a.998.998 0 0 0 1.707-.707.999.999 0 0 0-.293-.707l-6.293-6.293z',
            }))
    );
};

var _path$6;

var SvgProductsMajor = function SvgProductsMajor(props) {
    return /*#__PURE__*/ React.createElement(
        'svg',
        Object.assign(
            {
                viewBox: '0 0 20 20',
            },
            props
        ),
        _path$6 ||
            (_path$6 = /*#__PURE__*/ React.createElement('path', {
                d: 'M10.293 1.293a1 1 0 0 1 .707-.293h7a1 1 0 0 1 1 1v7a1 1 0 0 1-.293.707l-9 9a1 1 0 0 1-1.414 0l-7-7a1 1 0 0 1 0-1.414l9-9zm5.207 4.707a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3z',
            }))
    );
};

var _path$5;

var SvgProfileMinor = function SvgProfileMinor(props) {
    return /*#__PURE__*/ React.createElement(
        'svg',
        Object.assign(
            {
                viewBox: '0 0 20 20',
            },
            props
        ),
        _path$5 ||
            (_path$5 = /*#__PURE__*/ React.createElement('path', {
                d: 'M10 15c-1.631 0-3.064-.792-3.978-2 .914-1.208 2.347-2 3.978-2 1.631 0 3.064.792 3.978 2-.914 1.208-2.347 2-3.978 2zm0-10c1.104 0 2 .897 2 2s-.896 2-2 2-2-.897-2-2 .896-2 2-2zm0-3c-4.411 0-8 3.589-8 8s3.589 8 8 8 8-3.589 8-8-3.589-8-8-8z',
            }))
    );
};

var _path$4, _path2$1;

var SvgQuestionMarkInverseMajor = function SvgQuestionMarkInverseMajor(props) {
    return /*#__PURE__*/ React.createElement(
        'svg',
        Object.assign(
            {
                viewBox: '0 0 20 20',
            },
            props
        ),
        _path$4 ||
            (_path$4 = /*#__PURE__*/ React.createElement('path', {
                d: 'M10 2a8 8 0 1 0 0 16 8 8 0 0 0 0-16zm-7.071.929a10 10 0 1 1 14.141 14.141 10 10 0 0 1-14.14-14.14z',
            })),
        _path2$1 ||
            (_path2$1 = /*#__PURE__*/ React.createElement('path', {
                d: 'M11.126 13.002h-2.136v-1.142c.01-1.966.492-2.254 1.374-2.782.093-.056.19-.114.293-.178.73-.459 1.292-1.038 1.292-1.883 0-.948-.743-1.564-1.666-1.564-.852 0-1.657.398-1.712 1.533h-2.266c.06-2.294 1.877-3.487 3.99-3.487 2.306 0 3.894 1.447 3.894 3.488 0 1.382-.695 2.288-1.806 2.952l-.237.144c-.79.475-1.009.607-1.02 1.777v1.142zm.17 2.012a1.344 1.344 0 0 1-1.327 1.328 1.32 1.32 0 0 1-1.227-1.834 1.318 1.318 0 0 1 1.227-.81c.712 0 1.322.592 1.328 1.316h-.001z',
            }))
    );
};

var _path$3;

var SvgSearchMinor = function SvgSearchMinor(props) {
    return /*#__PURE__*/ React.createElement(
        'svg',
        Object.assign(
            {
                viewBox: '0 0 20 20',
            },
            props
        ),
        _path$3 ||
            (_path$3 = /*#__PURE__*/ React.createElement('path', {
                d: 'M8 12a4 4 0 1 1 0-8 4 4 0 0 1 0 8zm9.707 4.293-4.82-4.82a5.968 5.968 0 0 0 1.113-3.473 6 6 0 0 0-12 0 6 6 0 0 0 6 6 5.968 5.968 0 0 0 3.473-1.113l4.82 4.82a.997.997 0 0 0 1.414 0 .999.999 0 0 0 0-1.414z',
            }))
    );
};

var _path$2;

var SvgSelectMinor = function SvgSelectMinor(props) {
    return /*#__PURE__*/ React.createElement(
        'svg',
        Object.assign(
            {
                viewBox: '0 0 20 20',
            },
            props
        ),
        _path$2 ||
            (_path$2 = /*#__PURE__*/ React.createElement('path', {
                d: 'M7.676 9h4.648c.563 0 .879-.603.53-1.014l-2.323-2.746a.708.708 0 0 0-1.062 0l-2.324 2.746c-.347.411-.032 1.014.531 1.014zm4.648 2h-4.648c-.563 0-.878.603-.53 1.014l2.323 2.746c.27.32.792.32 1.062 0l2.323-2.746c.349-.411.033-1.014-.53-1.014z',
            }))
    );
};

var _path$1, _path2;

var SvgStoreMajor = function SvgStoreMajor(props) {
    return /*#__PURE__*/ React.createElement(
        'svg',
        Object.assign(
            {
                viewBox: '0 0 20 20',
            },
            props
        ),
        _path$1 ||
            (_path$1 = /*#__PURE__*/ React.createElement('path', {
                d: 'm1.791 2.253-.597 3.583a1 1 0 0 0 .986 1.164h.893a1.5 1.5 0 0 0 1.342-.83l.585-1.17.585 1.17a1.5 1.5 0 0 0 1.342.83h1.146a1.5 1.5 0 0 0 1.342-.83l.585-1.17.585 1.17a1.5 1.5 0 0 0 1.342.83h1.146a1.5 1.5 0 0 0 1.342-.83l.585-1.17.585 1.17a1.5 1.5 0 0 0 1.342.83h.893a1 1 0 0 0 .986-1.164l-.597-3.583a1.5 1.5 0 0 0-1.48-1.253h-13.458a1.5 1.5 0 0 0-1.48 1.253z',
            })),
        _path2 ||
            (_path2 = /*#__PURE__*/ React.createElement('path', {
                d: 'M18 9h-16v8.5a1.5 1.5 0 0 0 1.5 1.5h3.5v-7h6v7h3.5a1.5 1.5 0 0 0 1.5-1.5v-8.5z',
            }))
    );
};

var _path;

var SvgTickSmallMinor = function SvgTickSmallMinor(props) {
    return /*#__PURE__*/ React.createElement(
        'svg',
        Object.assign(
            {
                viewBox: '0 0 20 20',
            },
            props
        ),
        _path ||
            (_path = /*#__PURE__*/ React.createElement('path', {
                d: 'm8.315 13.859-3.182-3.417a.506.506 0 0 1 0-.684l.643-.683a.437.437 0 0 1 .642 0l2.22 2.393 4.942-5.327a.436.436 0 0 1 .643 0l.643.684a.504.504 0 0 1 0 .683l-5.91 6.35a.437.437 0 0 1-.642 0',
            }))
    );
};

function isElementInViewport(element) {
    const { top, left, bottom, right } = element.getBoundingClientRect();
    return top >= 0 && right <= window.innerWidth && bottom <= window.innerHeight && left >= 0;
}

const FOCUSABLE_SELECTOR = 'a,frame,iframe,input:not([type=hidden]):not(:disabled),select:not(:disabled),textarea:not(:disabled),button:not(:disabled),*[tabindex]';
const KEYBOARD_FOCUSABLE_SELECTORS = 'a,frame,iframe,input:not([type=hidden]):not(:disabled),select:not(:disabled),textarea:not(:disabled),button:not(:disabled),*[tabindex]:not([tabindex="-1"])';
const MENUITEM_FOCUSABLE_SELECTORS =
    'a[role="menuitem"],frame[role="menuitem"],iframe[role="menuitem"],input[role="menuitem"]:not([type=hidden]):not(:disabled),select[role="menuitem"]:not(:disabled),textarea[role="menuitem"]:not(:disabled),button[role="menuitem"]:not(:disabled),*[tabindex]:not([tabindex="-1"])';
const handleMouseUpByBlurring = ({ currentTarget }) => currentTarget.blur();
function nextFocusableNode(node, filter) {
    const allFocusableElements = [...document.querySelectorAll(FOCUSABLE_SELECTOR)];
    const sliceLocation = allFocusableElements.indexOf(node) + 1;
    const focusableElementsAfterNode = allFocusableElements.slice(sliceLocation);

    for (const focusableElement of focusableElementsAfterNode) {
        if (isElementInViewport(focusableElement) && (!filter || (filter && filter(focusableElement)))) {
            return focusableElement;
        }
    }

    return null;
}
function findFirstFocusableNode(element, onlyDescendants = true) {
    if (!onlyDescendants && matches(element, FOCUSABLE_SELECTOR)) {
        return element;
    }

    return element.querySelector(FOCUSABLE_SELECTOR);
} // Popover needs to be able to find its activator even if it is disabled, which FOCUSABLE_SELECTOR doesn't support.

function findFirstFocusableNodeIncludingDisabled(element) {
    const focusableSelector = `a,button,frame,iframe,input:not([type=hidden]),select,textarea,*[tabindex]`;

    if (matches(element, focusableSelector)) {
        return element;
    }

    return element.querySelector(focusableSelector);
}
function focusFirstFocusableNode(element, onlyDescendants = true) {
    var _findFirstFocusableNo;

    (_findFirstFocusableNo = findFirstFocusableNode(element, onlyDescendants)) === null || _findFirstFocusableNo === void 0 ? void 0 : _findFirstFocusableNo.focus();
}
function focusNextFocusableNode(node, filter) {
    const nextFocusable = nextFocusableNode(node, filter);

    if (nextFocusable && nextFocusable instanceof HTMLElement) {
        nextFocusable.focus();
        return true;
    }

    return false;
}
function findFirstKeyboardFocusableNode(element, onlyDescendants = true) {
    if (!onlyDescendants && matches(element, KEYBOARD_FOCUSABLE_SELECTORS)) {
        return element;
    }

    return element.querySelector(KEYBOARD_FOCUSABLE_SELECTORS);
}
function focusFirstKeyboardFocusableNode(element, onlyDescendants = true) {
    const firstFocusable = findFirstKeyboardFocusableNode(element, onlyDescendants);

    if (firstFocusable) {
        firstFocusable.focus();
        return true;
    }

    return false;
}
function findLastKeyboardFocusableNode(element, onlyDescendants = true) {
    if (!onlyDescendants && matches(element, KEYBOARD_FOCUSABLE_SELECTORS)) {
        return element;
    }

    const allFocusable = element.querySelectorAll(KEYBOARD_FOCUSABLE_SELECTORS);
    return allFocusable[allFocusable.length - 1];
}
function focusLastKeyboardFocusableNode(element, onlyDescendants = true) {
    const lastFocusable = findLastKeyboardFocusableNode(element, onlyDescendants);

    if (lastFocusable) {
        lastFocusable.focus();
        return true;
    }

    return false;
}
function wrapFocusPreviousFocusableMenuItem(parentElement, currentFocusedElement) {
    const allFocusableChildren = getMenuFocusableDescendants(parentElement);
    const currentItemIdx = getCurrentFocusedElementIndex(allFocusableChildren, currentFocusedElement);

    if (currentItemIdx === -1) {
        allFocusableChildren[0].focus();
    } else {
        allFocusableChildren[(currentItemIdx - 1 + allFocusableChildren.length) % allFocusableChildren.length].focus();
    }
}
function wrapFocusNextFocusableMenuItem(parentElement, currentFocusedElement) {
    const allFocusableChildren = getMenuFocusableDescendants(parentElement);
    const currentItemIdx = getCurrentFocusedElementIndex(allFocusableChildren, currentFocusedElement);

    if (currentItemIdx === -1) {
        allFocusableChildren[0].focus();
    } else {
        allFocusableChildren[(currentItemIdx + 1) % allFocusableChildren.length].focus();
    }
}

function getMenuFocusableDescendants(element) {
    return element.querySelectorAll(MENUITEM_FOCUSABLE_SELECTORS);
}

function getCurrentFocusedElementIndex(allFocusableChildren, currentFocusedElement) {
    let currentItemIdx = 0;

    for (const focusableChild of allFocusableChildren) {
        if (focusableChild === currentFocusedElement) {
            break;
        }

        currentItemIdx++;
    }

    return currentItemIdx === allFocusableChildren.length ? -1 : currentItemIdx;
}

function matches(node, selector) {
    if (node.matches) {
        return node.matches(selector);
    }

    const matches = (node.ownerDocument || document).querySelectorAll(selector);
    let i = matches.length;

    while (--i >= 0 && matches.item(i) !== node) return i > -1;
}

var styles$19 = {
    Button: 'Polaris-Button',
    pressed: 'Polaris-Button--pressed',
    disabled: 'Polaris-Button--disabled',
    connectedDisclosure: 'Polaris-Button--connectedDisclosure',
    Content: 'Polaris-Button__Content',
    plain: 'Polaris-Button--plain',
    textAlignLeft: 'Polaris-Button--textAlignLeft',
    textAlignCenter: 'Polaris-Button--textAlignCenter',
    textAlignRight: 'Polaris-Button--textAlignRight',
    Icon: 'Polaris-Button__Icon',
    fullWidth: 'Polaris-Button--fullWidth',
    hidden: 'Polaris-Button--hidden',
    Spinner: 'Polaris-Button__Spinner',
    primary: 'Polaris-Button--primary',
    destructive: 'Polaris-Button--destructive',
    outline: 'Polaris-Button--outline',
    loading: 'Polaris-Button--loading',
    removeUnderline: 'Polaris-Button--removeUnderline',
    iconOnly: 'Polaris-Button--iconOnly',
    sizeSlim: 'Polaris-Button--sizeSlim',
    sizeLarge: 'Polaris-Button--sizeLarge',
    monochrome: 'Polaris-Button--monochrome',
    Text: 'Polaris-Button__Text',
    ConnectedDisclosureWrapper: 'Polaris-Button__ConnectedDisclosureWrapper',
    ConnectedDisclosure: 'Polaris-Button__ConnectedDisclosure',
};

/**
 * useIsAfterInitialMount will trigger a re-render to provide
 * you with an updated value. Using this you enhance server-side
 * code that can only run on the client.
 * @returns MutableRefObject<T> - Returns a ref object with the
 * results from invoking initial value
 * @example
 * function ComponentExample({children}) {
 *  const isMounted = useIsAfterInitialMount();
 *  const content = isMounted ? children : null;
 *
 *  return <>{content}</>;
 * }
 */

function useIsAfterInitialMount() {
    const [isAfterInitialMount, setIsAfterInitialMount] = react.exports.useState(false);
    react.exports.useEffect(() => {
        setIsAfterInitialMount(true);
    }, []);
    return isAfterInitialMount;
}

var styles$18 = {
    Spinner: 'Polaris-Spinner',
    loading: 'Polaris-Spinner--loading',
    sizeSmall: 'Polaris-Spinner--sizeSmall',
    sizeLarge: 'Polaris-Spinner--sizeLarge',
};

var styles$17 = {
    VisuallyHidden: 'Polaris-VisuallyHidden',
};

function VisuallyHidden({ children }) {
    return /*#__PURE__*/ React.createElement(
        'span',
        {
            className: styles$17.VisuallyHidden,
        },
        children
    );
}

function Spinner$1({ size = 'large', accessibilityLabel, hasFocusableParent }) {
    const isAfterInitialMount = useIsAfterInitialMount();
    const className = classNames(styles$18.Spinner, size && styles$18[variationName('size', size)]);
    const spinnerSVGMarkup =
        size === 'large'
            ? /*#__PURE__*/ React.createElement(
                  'svg',
                  {
                      viewBox: '0 0 44 44',
                      xmlns: 'http://www.w3.org/2000/svg',
                  },
                  /*#__PURE__*/ React.createElement('path', {
                      d: 'M15.542 1.487A21.507 21.507 0 00.5 22c0 11.874 9.626 21.5 21.5 21.5 9.847 0 18.364-6.675 20.809-16.072a1.5 1.5 0 00-2.904-.756C37.803 34.755 30.473 40.5 22 40.5 11.783 40.5 3.5 32.217 3.5 22c0-8.137 5.3-15.247 12.942-17.65a1.5 1.5 0 10-.9-2.863z',
                  })
              )
            : /*#__PURE__*/ React.createElement(
                  'svg',
                  {
                      viewBox: '0 0 20 20',
                      xmlns: 'http://www.w3.org/2000/svg',
                  },
                  /*#__PURE__*/ React.createElement('path', {
                      d: 'M7.229 1.173a9.25 9.25 0 1011.655 11.412 1.25 1.25 0 10-2.4-.698 6.75 6.75 0 11-8.506-8.329 1.25 1.25 0 10-.75-2.385z',
                  })
              );
    const spanAttributes = {
        ...(!hasFocusableParent && {
            role: 'status',
        }),
    };
    const accessibilityLabelMarkup = (isAfterInitialMount || !hasFocusableParent) && /*#__PURE__*/ React.createElement(VisuallyHidden, null, accessibilityLabel);
    return /*#__PURE__*/ React.createElement(
        React.Fragment,
        null,
        /*#__PURE__*/ React.createElement(
            'span',
            {
                className: className,
            },
            spinnerSVGMarkup
        ),
        /*#__PURE__*/ React.createElement('span', spanAttributes, accessibilityLabelMarkup)
    );
}

function setActivatorAttributes(activator, { id, active = false, ariaHaspopup, activatorDisabled = false }) {
    if (!activatorDisabled) {
        activator.tabIndex = activator.tabIndex || 0;
    }

    activator.setAttribute('aria-controls', id);
    activator.setAttribute('aria-owns', id);
    activator.setAttribute('aria-expanded', String(active));

    if (ariaHaspopup != null) {
        activator.setAttribute('aria-haspopup', String(ariaHaspopup));
    }
}

function usePortalsManager() {
    const portalsManager = react.exports.useContext(PortalsManagerContext);

    if (!portalsManager) {
        throw new Error('No portals manager was provided. Your application must be wrapped in an <AppProvider> component. See https://polaris.shopify.com/components/structure/app-provider for implementation instructions.');
    }

    return portalsManager;
}

class MissingAppProviderError extends Error {
    constructor(message = '') {
        super(`${message ? `${message} ` : message}Your application must be wrapped in an <AppProvider> component. See https://polaris.shopify.com/components/structure/app-provider for implementation instructions.`);
        this.name = 'MissingAppProviderError';
    }
}

/**
 * Returns a unique id that remains consistent across multiple re-renders of the
 * same hook
 * @param prefix Defines a prefix for the ID. You probably want to set this to
 *   the name of the component you're calling `useUniqueId` in.
 * @param overrideId Defines a fixed value to use instead of generating a unique
 *   ID. Useful for components that allow consumers to specify their own ID.
 */

function useUniqueId(prefix = '', overrideId = '') {
    const idFactory = react.exports.useContext(UniqueIdFactoryContext); // By using a ref to store the uniqueId for each invocation of the hook and
    // checking that it is not already populated we ensure that we don’t generate
    // a new ID on every re-render of a component.

    const uniqueIdRef = react.exports.useRef(null);

    if (!idFactory) {
        throw new MissingAppProviderError('No UniqueIdFactory was provided.');
    } // If an override was specified, then use that instead of using a unique ID
    // Hooks can’t be called conditionally so this has to go after all use* calls

    if (overrideId) {
        return overrideId;
    } // If a unique id has not yet been generated, then get a new one

    if (!uniqueIdRef.current) {
        uniqueIdRef.current = idFactory.nextId(prefix);
    }

    return uniqueIdRef.current;
}

function Portal({ children, idPrefix = '', onPortalCreated = noop$a }) {
    const { container } = usePortalsManager();
    const uniqueId = useUniqueId('portal');
    const portalId = idPrefix !== '' ? `${idPrefix}-${uniqueId}` : uniqueId;
    react.exports.useEffect(() => {
        onPortalCreated();
    }, [onPortalCreated]);
    return container
        ? /*#__PURE__*/ reactDom.exports.createPortal(
              /*#__PURE__*/

              /*#__PURE__*/
              jsx('div', {
                  'data-portal-id': portalId,
                  children: children,
              }),
              container
          )
        : null;
}

function noop$a() {}

function wrapWithComponent(element, Component, props) {
    if (element == null) {
        return null;
    }

    return isElementOfType(element, Component)
        ? element
        : /*#__PURE__*/

          /*#__PURE__*/
          jsx(Component, { ...props, children: element });
} // In development, we compare based on the name of the function because
// React Hot Loader proxies React components in order to make updates. In
// production we can simply compare the components for equality.

const isComponent = (AComponent, AnotherComponent) => AComponent === AnotherComponent; // Checks whether `element` is a React element of type `Component` (or one of
// the passed components, if `Component` is an array of React components).

function isElementOfType(element, Component) {
    var _element$props;

    if (element == null || !(/*#__PURE__*/ react.exports.isValidElement(element)) || typeof element.type === 'string') {
        return false;
    }

    const { type: defaultType } = element; // Type override allows components to bypass default wrapping behavior. Ex: Stack, ResourceList...
    // See https://github.com/Shopify/app-extension-libs/issues/996#issuecomment-710437088

    const overrideType = (_element$props = element.props) === null || _element$props === void 0 ? void 0 : _element$props.__type__;
    const type = overrideType || defaultType;
    const Components = Array.isArray(Component) ? Component : [Component];
    return Components.some((AComponent) => typeof type !== 'string' && isComponent(AComponent, type));
} // Returns all children that are valid elements as an array. Can optionally be
// filtered by passing `predicate`.

function elementChildren(children, predicate = () => true) {
    return react.exports.Children.toArray(children).filter((child) => /*#__PURE__*/ react.exports.isValidElement(child) && predicate(child));
}

function ConditionalWrapper({ condition, wrapper, children }) {
    return condition ? wrapper(children) : children;
}

function ConditionalRender({ condition, children }) {
    return condition ? children : null;
}

var styles$16 = {
    Popover: 'Polaris-Popover',
    PopoverOverlay: 'Polaris-Popover__PopoverOverlay',
    'PopoverOverlay-entering': 'Polaris-Popover__PopoverOverlay--entering',
    'PopoverOverlay-open': 'Polaris-Popover__PopoverOverlay--open',
    'PopoverOverlay-exiting': 'Polaris-Popover__PopoverOverlay--exiting',
    measuring: 'Polaris-Popover--measuring',
    fullWidth: 'Polaris-Popover--fullWidth',
    Content: 'Polaris-Popover__Content',
    positionedAbove: 'Polaris-Popover--positionedAbove',
    Wrapper: 'Polaris-Popover__Wrapper',
    'Content-fullHeight': 'Polaris-Popover__Content--fullHeight',
    'Content-fluidContent': 'Polaris-Popover__Content--fluidContent',
    Pane: 'Polaris-Popover__Pane',
    'Pane-fixed': 'Polaris-Popover__Pane--fixed',
    Section: 'Polaris-Popover__Section',
    FocusTracker: 'Polaris-Popover__FocusTracker',
    'PopoverOverlay-hideOnPrint': 'Polaris-Popover__PopoverOverlay--hideOnPrint',
};

const useIsomorphicLayoutEffect = isServer ? react.exports.useEffect : react.exports.useLayoutEffect;

function KeypressListener({ keyCode, handler, keyEvent = 'keyup' }) {
    const tracked = react.exports.useRef({
        handler,
        keyCode,
    });
    useIsomorphicLayoutEffect(() => {
        tracked.current = {
            handler,
            keyCode,
        };
    }, [handler, keyCode]);
    const handleKeyEvent = react.exports.useCallback((event) => {
        const { handler, keyCode } = tracked.current;

        if (event.keyCode === keyCode) {
            handler(event);
        }
    }, []);
    react.exports.useEffect(() => {
        document.addEventListener(keyEvent, handleKeyEvent);
        return () => {
            document.removeEventListener(keyEvent, handleKeyEvent);
        };
    }, [keyEvent, handleKeyEvent]);
    return null;
}

function calculateVerticalPosition(activatorRect, overlayRect, overlayMargins, scrollableContainerRect, containerRect, preferredPosition, fixed, topBarOffset = 0) {
    const activatorTop = activatorRect.top;
    const activatorBottom = activatorTop + activatorRect.height;
    const spaceAbove = activatorRect.top - topBarOffset;
    const spaceBelow = containerRect.height - activatorRect.top - activatorRect.height;
    const desiredHeight = overlayRect.height;
    const verticalMargins = overlayMargins.activator + overlayMargins.container;
    const minimumSpaceToScroll = overlayMargins.container;
    const distanceToTopScroll = activatorRect.top - Math.max(scrollableContainerRect.top, 0);
    const distanceToBottomScroll = containerRect.top + Math.min(containerRect.height, scrollableContainerRect.top + scrollableContainerRect.height) - (activatorRect.top + activatorRect.height);
    const enoughSpaceFromTopScroll = distanceToTopScroll >= minimumSpaceToScroll;
    const enoughSpaceFromBottomScroll = distanceToBottomScroll >= minimumSpaceToScroll;
    const heightIfBelow = Math.min(spaceBelow, desiredHeight);
    const heightIfAbove = Math.min(spaceAbove, desiredHeight);
    const containerRectTop = fixed ? 0 : containerRect.top;
    const positionIfAbove = {
        height: heightIfAbove - verticalMargins,
        top: activatorTop + containerRectTop - heightIfAbove,
        positioning: 'above',
    };
    const positionIfBelow = {
        height: heightIfBelow - verticalMargins,
        top: activatorBottom + containerRectTop,
        positioning: 'below',
    };

    if (preferredPosition === 'above') {
        return (enoughSpaceFromTopScroll || (distanceToTopScroll >= distanceToBottomScroll && !enoughSpaceFromBottomScroll)) && (spaceAbove > desiredHeight || spaceAbove > spaceBelow) ? positionIfAbove : positionIfBelow;
    }

    if (preferredPosition === 'below') {
        return (enoughSpaceFromBottomScroll || (distanceToBottomScroll >= distanceToTopScroll && !enoughSpaceFromTopScroll)) && (spaceBelow > desiredHeight || spaceBelow > spaceAbove) ? positionIfBelow : positionIfAbove;
    }

    if (enoughSpaceFromTopScroll && enoughSpaceFromBottomScroll) {
        return spaceAbove > spaceBelow ? positionIfAbove : positionIfBelow;
    }

    return distanceToTopScroll > minimumSpaceToScroll ? positionIfAbove : positionIfBelow;
}
function calculateHorizontalPosition(activatorRect, overlayRect, containerRect, overlayMargins, preferredAlignment) {
    const maximum = containerRect.width - overlayRect.width;

    if (preferredAlignment === 'left') {
        return Math.min(maximum, Math.max(0, activatorRect.left - overlayMargins.horizontal));
    } else if (preferredAlignment === 'right') {
        const activatorRight = containerRect.width - (activatorRect.left + activatorRect.width);
        return Math.min(maximum, Math.max(0, activatorRight - overlayMargins.horizontal));
    }

    return Math.min(maximum, Math.max(0, activatorRect.center.x - overlayRect.width / 2));
}
function rectIsOutsideOfRect(inner, outer) {
    const { center } = inner;
    return center.y < outer.top || center.y > outer.top + outer.height;
}
function intersectionWithViewport(rect, viewport = windowRect()) {
    const top = Math.max(rect.top, 0);
    const left = Math.max(rect.left, 0);
    const bottom = Math.min(rect.top + rect.height, viewport.height);
    const right = Math.min(rect.left + rect.width, viewport.width);
    return new Rect({
        top,
        left,
        height: bottom - top,
        width: right - left,
    });
}
function windowRect() {
    return new Rect({
        top: window.scrollY,
        left: window.scrollX,
        height: window.innerHeight,
        width: document.body.clientWidth,
    });
}

var styles$15 = {
    PositionedOverlay: 'Polaris-PositionedOverlay',
    fixed: 'Polaris-PositionedOverlay--fixed',
    calculating: 'Polaris-PositionedOverlay--calculating',
    preventInteraction: 'Polaris-PositionedOverlay--preventInteraction',
};

const ScrollableContext = /*#__PURE__*/ react.exports.createContext(undefined);

var styles$14 = {
    Scrollable: 'Polaris-Scrollable',
    horizontal: 'Polaris-Scrollable--horizontal',
    vertical: 'Polaris-Scrollable--vertical',
    verticalHasScrolling: 'Polaris-Scrollable--verticalHasScrolling',
    hasTopShadow: 'Polaris-Scrollable--hasTopShadow',
    hasBottomShadow: 'Polaris-Scrollable--hasBottomShadow',
};

function ScrollTo() {
    const anchorNode = react.exports.useRef(null);
    const scrollToPosition = react.exports.useContext(ScrollableContext);
    react.exports.useEffect(() => {
        if (!scrollToPosition || !anchorNode.current) {
            return;
        }

        scrollToPosition(anchorNode.current.offsetTop);
    }, [scrollToPosition]);
    const id = useUniqueId(`ScrollTo`); // eslint-disable-next-line jsx-a11y/anchor-is-valid

    return (
        /*#__PURE__*/

        /*#__PURE__*/
        jsx('a', {
            id: id,
            ref: anchorNode,
        })
    );
}

const MAX_SCROLL_DISTANCE = 100;
const DELTA_THRESHOLD = 0.2;
const DELTA_PERCENTAGE = 0.2;
const EVENTS_TO_LOCK = ['scroll', 'touchmove', 'wheel'];
const PREFERS_REDUCED_MOTION = prefersReducedMotion();
const LOW_RES_BUFFER = 2;

class Scrollable extends react.exports.Component {
    constructor(...args) {
        super(...args);
        this.state = {
            topShadow: false,
            bottomShadow: false,
            scrollPosition: 0,
            canScroll: false,
        };
        this.stickyManager = new StickyManager();
        this.scrollArea = null;
        this.handleResize = debounce_1(
            () => {
                this.handleScroll();
            },
            50,
            {
                trailing: true,
            }
        );

        this.setScrollArea = (scrollArea) => {
            this.scrollArea = scrollArea;
        };

        this.handleScroll = () => {
            const { scrollArea } = this;
            const { scrollPosition } = this.state;
            const { shadow, onScrolledToBottom } = this.props;

            if (scrollArea == null) {
                return;
            }

            const { scrollTop, clientHeight, scrollHeight } = scrollArea;
            const shouldBottomShadow = Boolean(shadow && !(scrollTop + clientHeight >= scrollHeight));
            const shouldTopShadow = Boolean(shadow && scrollTop > 0 && scrollPosition > 0);
            const canScroll = scrollHeight > clientHeight;
            const hasScrolledToBottom = scrollHeight - scrollTop <= clientHeight + LOW_RES_BUFFER;

            if (canScroll && hasScrolledToBottom && onScrolledToBottom) {
                onScrolledToBottom();
            }

            this.setState({
                topShadow: shouldTopShadow,
                bottomShadow: shouldBottomShadow,
                scrollPosition: scrollTop,
                canScroll,
            });
        };

        this.scrollHint = () => {
            const { scrollArea } = this;

            if (scrollArea == null) {
                return;
            }

            const { clientHeight, scrollHeight } = scrollArea;

            if (PREFERS_REDUCED_MOTION || this.state.scrollPosition > 0 || scrollHeight <= clientHeight) {
                return;
            }

            const scrollDistance = scrollHeight - clientHeight;
            this.toggleLock();
            this.setState(
                {
                    scrollPosition: scrollDistance > MAX_SCROLL_DISTANCE ? MAX_SCROLL_DISTANCE : scrollDistance,
                },
                () => {
                    window.requestAnimationFrame(this.scrollStep);
                }
            );
        };

        this.scrollStep = () => {
            this.setState(
                ({ scrollPosition }) => {
                    const delta = scrollPosition * DELTA_PERCENTAGE;
                    return {
                        scrollPosition: delta < DELTA_THRESHOLD ? 0 : scrollPosition - delta,
                    };
                },
                () => {
                    if (this.state.scrollPosition > 0) {
                        window.requestAnimationFrame(this.scrollStep);
                    } else {
                        this.toggleLock(false);
                    }
                }
            );
        };

        this.scrollToPosition = (scrollY) => {
            this.setState({
                scrollPosition: scrollY,
            });
        };
    }

    static forNode(node) {
        const closestElement = node.closest(scrollable.selector);
        return closestElement instanceof HTMLElement ? closestElement : document;
    }

    componentDidMount() {
        if (this.scrollArea == null) {
            return;
        }

        this.stickyManager.setContainer(this.scrollArea);
        this.scrollArea.addEventListener('scroll', () => {
            window.requestAnimationFrame(this.handleScroll);
        });
        window.addEventListener('resize', this.handleResize);
        window.requestAnimationFrame(() => {
            this.handleScroll();

            if (this.props.hint) {
                this.scrollHint();
            }
        });
    }

    componentWillUnmount() {
        if (this.scrollArea == null) {
            return;
        }

        this.scrollArea.removeEventListener('scroll', this.handleScroll);
        window.removeEventListener('resize', this.handleResize);
        this.stickyManager.removeScrollListener();
    }

    componentDidUpdate() {
        const { scrollPosition } = this.state;

        if (scrollPosition && this.scrollArea && scrollPosition > 0) {
            this.scrollArea.scrollTop = scrollPosition;
        }
    }

    render() {
        const { topShadow, bottomShadow, canScroll } = this.state;
        const { children, className, horizontal, vertical = true, shadow, hint, focusable, onScrolledToBottom, ...rest } = this.props;
        const finalClassName = classNames(className, styles$14.Scrollable, vertical && styles$14.vertical, horizontal && styles$14.horizontal, topShadow && styles$14.hasTopShadow, bottomShadow && styles$14.hasBottomShadow, vertical && canScroll && styles$14.verticalHasScrolling);
        return (
            /*#__PURE__*/

            /*#__PURE__*/
            jsx(ScrollableContext.Provider, {
                value: this.scrollToPosition,
                children: /*#__PURE__*/ jsx(StickyManagerContext.Provider, {
                    value: this.stickyManager,
                    children: /*#__PURE__*/ jsx('div', {
                        ...Object.assign(
                            {
                                className: finalClassName,
                            },
                            scrollable.props,
                            rest,
                            {
                                ref: this.setScrollArea, // eslint-disable-next-line jsx-a11y/no-noninteractive-tabindex
                                tabIndex: focusable ? 0 : undefined,
                            }
                        ),
                        children: children,
                    }),
                }),
            })
        );
    }

    toggleLock(shouldLock = true) {
        const { scrollArea } = this;

        if (scrollArea == null) {
            return;
        }

        EVENTS_TO_LOCK.forEach((eventName) => {
            if (shouldLock) {
                scrollArea.addEventListener(eventName, prevent);
            } else {
                scrollArea.removeEventListener(eventName, prevent);
            }
        });
    }
}

Scrollable.ScrollTo = ScrollTo;

function prevent(evt) {
    evt.preventDefault();
}

function prefersReducedMotion() {
    try {
        return window.matchMedia('(prefers-reduced-motion: reduce)').matches;
    } catch (err) {
        return false;
    }
}

const OBSERVER_CONFIG = {
    childList: true,
    subtree: true,
    characterData: true,
};

class PositionedOverlay extends react.exports.PureComponent {
    constructor(props) {
        super(props);
        this.state = {
            measuring: true,
            activatorRect: getRectForNode(this.props.activator),
            right: undefined,
            left: undefined,
            top: 0,
            height: 0,
            width: null,
            positioning: 'below',
            zIndex: null,
            outsideScrollableContainer: false,
            lockPosition: false,
        };
        this.overlay = null;
        this.scrollableContainer = null;
        this.observer = void 0;

        this.overlayDetails = () => {
            const { measuring, left, right, positioning, height, activatorRect } = this.state;
            return {
                measuring,
                left,
                right,
                desiredHeight: height,
                positioning,
                activatorRect,
            };
        };

        this.setOverlay = (node) => {
            this.overlay = node;
        };

        this.handleMeasurement = () => {
            const { lockPosition, top } = this.state;
            this.observer.disconnect();
            this.setState(
                ({ left, top, right }) => ({
                    left,
                    right,
                    top,
                    height: 0,
                    positioning: 'below',
                    measuring: true,
                }),
                () => {
                    if (this.overlay == null || this.scrollableContainer == null) {
                        return;
                    }

                    const { activator, preferredPosition = 'below', preferredAlignment = 'center', onScrollOut, fullWidth, fixed, preferInputActivator = true } = this.props;
                    const preferredActivator = preferInputActivator ? activator.querySelector('input') || activator : activator;
                    const activatorRect = getRectForNode(preferredActivator);
                    const currentOverlayRect = getRectForNode(this.overlay);
                    const scrollableElement = isDocument(this.scrollableContainer) ? document.body : this.scrollableContainer;
                    const scrollableContainerRect = getRectForNode(scrollableElement);
                    const overlayRect = fullWidth ? new Rect({ ...currentOverlayRect, width: activatorRect.width }) : currentOverlayRect; // If `body` is 100% height, it still acts as though it were not constrained to that size. This adjusts for that.

                    if (scrollableElement === document.body) {
                        scrollableContainerRect.height = document.body.scrollHeight;
                    }

                    let topBarOffset = 0;
                    const topBarElement = scrollableElement.querySelector(`${dataPolarisTopBar.selector}`);

                    if (topBarElement) {
                        topBarOffset = topBarElement.clientHeight;
                    }

                    const overlayMargins =
                        this.overlay.firstElementChild && this.overlay.firstChild instanceof HTMLElement
                            ? getMarginsForNode(this.overlay.firstElementChild)
                            : {
                                  activator: 0,
                                  container: 0,
                                  horizontal: 0,
                              };
                    const containerRect = windowRect();
                    const zIndexForLayer = getZIndexForLayerFromNode(activator);
                    const zIndex = zIndexForLayer == null ? zIndexForLayer : zIndexForLayer + 1;
                    const verticalPosition = calculateVerticalPosition(activatorRect, overlayRect, overlayMargins, scrollableContainerRect, containerRect, preferredPosition, fixed, topBarOffset);
                    const horizontalPosition = calculateHorizontalPosition(activatorRect, overlayRect, containerRect, overlayMargins, preferredAlignment);
                    this.setState(
                        {
                            measuring: false,
                            activatorRect: getRectForNode(activator),
                            left: preferredAlignment !== 'right' ? horizontalPosition : undefined,
                            right: preferredAlignment === 'right' ? horizontalPosition : undefined,
                            top: lockPosition ? top : verticalPosition.top,
                            lockPosition: Boolean(fixed),
                            height: verticalPosition.height || 0,
                            width: fullWidth ? overlayRect.width : null,
                            positioning: verticalPosition.positioning,
                            outsideScrollableContainer: onScrollOut != null && rectIsOutsideOfRect(activatorRect, intersectionWithViewport(scrollableContainerRect)),
                            zIndex,
                        },
                        () => {
                            if (!this.overlay) return;
                            this.observer.observe(this.overlay, OBSERVER_CONFIG);
                            this.observer.observe(activator, OBSERVER_CONFIG);
                        }
                    );
                }
            );
        };

        this.observer = new MutationObserver(this.handleMeasurement);
    }

    componentDidMount() {
        this.scrollableContainer = Scrollable.forNode(this.props.activator);

        if (this.scrollableContainer && !this.props.fixed) {
            this.scrollableContainer.addEventListener('scroll', this.handleMeasurement);
        }

        this.handleMeasurement();
    }

    componentWillUnmount() {
        this.observer.disconnect();

        if (this.scrollableContainer && !this.props.fixed) {
            this.scrollableContainer.removeEventListener('scroll', this.handleMeasurement);
        }
    }

    componentDidUpdate() {
        const { outsideScrollableContainer, top } = this.state;
        const { onScrollOut, active } = this.props;

        if (active && onScrollOut != null && top !== 0 && outsideScrollableContainer) {
            onScrollOut();
        }
    }

    render() {
        const { left, right, top, zIndex, width } = this.state;
        const { render, fixed, preventInteraction, classNames: propClassNames, zIndexOverride } = this.props;
        const style = {
            top: top == null || isNaN(top) ? undefined : top,
            left: left == null || isNaN(left) ? undefined : left,
            right: right == null || isNaN(right) ? undefined : right,
            width: width == null || isNaN(width) ? undefined : width,
            zIndex: zIndexOverride || zIndex || undefined,
        };
        const className = classNames(styles$15.PositionedOverlay, fixed && styles$15.fixed, preventInteraction && styles$15.preventInteraction, propClassNames);
        return (
            /*#__PURE__*/

            /*#__PURE__*/
            jsxs('div', {
                className: className,
                style: style,
                ref: this.setOverlay,
                children: [
                    /*#__PURE__*/ jsx(EventListener, {
                        event: 'resize',
                        handler: this.handleMeasurement,
                    }),
                    render(this.overlayDetails()),
                ],
            })
        );
    }

    forceUpdatePosition() {
        // Wait a single animation frame before re-measuring.
        // Consumer's may also need to setup their own timers for
        // triggering forceUpdatePosition() `children` use animation.
        // Ideally, forceUpdatePosition() is fired at the end of a transition event.
        requestAnimationFrame(this.handleMeasurement);
    }
}

function getMarginsForNode(node) {
    const nodeStyles = window.getComputedStyle(node);
    return {
        activator: parseFloat(nodeStyles.marginTop || '0'),
        container: parseFloat(nodeStyles.marginBottom || '0'),
        horizontal: parseFloat(nodeStyles.marginLeft || '0'),
    };
}

function getZIndexForLayerFromNode(node) {
    const layerNode = node.closest(layer.selector) || document.body;
    const zIndex = layerNode === document.body ? 'auto' : parseInt(window.getComputedStyle(layerNode).zIndex || '0', 10);
    return zIndex === 'auto' || isNaN(zIndex) ? null : zIndex;
}

function isDocument(node) {
    return node === document;
}

function Section$4({ children }) {
    return /*#__PURE__*/ React.createElement(
        'div',
        {
            className: styles$16.Section,
        },
        children
    );
}

function Pane({ fixed, sectioned, children, onScrolledToBottom }) {
    const className = classNames(styles$16.Pane, fixed && styles$16['Pane-fixed']);
    const content = sectioned ? wrapWithComponent(children, Section$4, {}) : children;
    return fixed
        ? /*#__PURE__*/ React.createElement(
              'div',
              {
                  className: className,
              },
              content
          )
        : /*#__PURE__*/ React.createElement(
              Scrollable,
              {
                  shadow: true,
                  className: className,
                  onScrolledToBottom: onScrolledToBottom,
              },
              content
          );
}

let PopoverCloseSource;

(function (PopoverCloseSource) {
    PopoverCloseSource[(PopoverCloseSource['Click'] = 0)] = 'Click';
    PopoverCloseSource[(PopoverCloseSource['EscapeKeypress'] = 1)] = 'EscapeKeypress';
    PopoverCloseSource[(PopoverCloseSource['FocusOut'] = 2)] = 'FocusOut';
    PopoverCloseSource[(PopoverCloseSource['ScrollOut'] = 3)] = 'ScrollOut';
})(PopoverCloseSource || (PopoverCloseSource = {}));

var TransitionStatus$1;

(function (TransitionStatus) {
    TransitionStatus['Entering'] = 'entering';
    TransitionStatus['Entered'] = 'entered';
    TransitionStatus['Exiting'] = 'exiting';
    TransitionStatus['Exited'] = 'exited';
})(TransitionStatus$1 || (TransitionStatus$1 = {}));

class PopoverOverlay extends react.exports.PureComponent {
    constructor(props) {
        super(props);
        this.state = {
            transitionStatus: this.props.active ? TransitionStatus$1.Entering : TransitionStatus$1.Exited,
        };
        this.contentNode = /*#__PURE__*/ react.exports.createRef();
        this.enteringTimer = void 0;
        this.exitingTimer = void 0;
        this.overlayRef = void 0;

        this.renderPopover = (overlayDetails) => {
            const { measuring, desiredHeight, positioning } = overlayDetails;
            const { id, children, sectioned, fullWidth, fullHeight, fluidContent, hideOnPrint, colorScheme, autofocusTarget } = this.props;
            const className = classNames(styles$16.Popover, positioning === 'above' && styles$16.positionedAbove, fullWidth && styles$16.fullWidth, measuring && styles$16.measuring, hideOnPrint && styles$16['PopoverOverlay-hideOnPrint']);
            const contentStyles = measuring
                ? undefined
                : {
                      height: desiredHeight,
                  };
            const contentClassNames = classNames(styles$16.Content, fullHeight && styles$16['Content-fullHeight'], fluidContent && styles$16['Content-fluidContent']);

            const content =
                /*#__PURE__*/

                /*#__PURE__*/
                jsx('div', {
                    id: id,
                    tabIndex: autofocusTarget === 'none' ? undefined : -1,
                    className: contentClassNames,
                    style: contentStyles,
                    ref: this.contentNode,
                    children: renderPopoverContent(children, {
                        sectioned,
                    }),
                });

            return (
                /*#__PURE__*/

                /*#__PURE__*/
                jsxs('div', {
                    ...Object.assign(
                        {
                            className: className,
                        },
                        overlay$2.props
                    ),
                    children: [
                        /*#__PURE__*/ jsx(EventListener, {
                            event: 'click',
                            handler: this.handleClick,
                        }),
                        /*#__PURE__*/ jsx(EventListener, {
                            event: 'touchstart',
                            handler: this.handleClick,
                        }),
                        /*#__PURE__*/ jsx(KeypressListener, {
                            keyCode: Key.Escape,
                            handler: this.handleEscape,
                        }),
                        /*#__PURE__*/ jsx('div', {
                            className: styles$16.FocusTracker,
                            tabIndex: 0,
                            onFocus: this.handleFocusFirstItem,
                        }),
                        /*#__PURE__*/ jsx(CustomProperties, {
                            colorScheme: colorScheme,
                            children: /*#__PURE__*/ jsx('div', {
                                className: styles$16.Wrapper,
                                children: content,
                            }),
                        }),
                        /*#__PURE__*/ jsx('div', {
                            className: styles$16.FocusTracker,
                            tabIndex: 0,
                            onFocus: this.handleFocusLastItem,
                        }),
                    ],
                })
            );
        };

        this.handleClick = (event) => {
            const target = event.target;
            const {
                contentNode,
                props: { activator, onClose },
            } = this;
            const isDescendant = contentNode.current != null && nodeContainsDescendant(contentNode.current, target);
            const isActivatorDescendant = nodeContainsDescendant(activator, target);

            if (isDescendant || isActivatorDescendant || this.state.transitionStatus !== TransitionStatus$1.Entered) {
                return;
            }

            onClose(PopoverCloseSource.Click);
        };

        this.handleScrollOut = () => {
            this.props.onClose(PopoverCloseSource.ScrollOut);
        };

        this.handleEscape = () => {
            this.props.onClose(PopoverCloseSource.EscapeKeypress);
        };

        this.handleFocusFirstItem = () => {
            this.props.onClose(PopoverCloseSource.FocusOut);
        };

        this.handleFocusLastItem = () => {
            this.props.onClose(PopoverCloseSource.FocusOut);
        };

        this.overlayRef = /*#__PURE__*/ react.exports.createRef();
    }

    forceUpdatePosition() {
        var _this$overlayRef$curr;

        (_this$overlayRef$curr = this.overlayRef.current) === null || _this$overlayRef$curr === void 0 ? void 0 : _this$overlayRef$curr.forceUpdatePosition();
    }

    changeTransitionStatus(transitionStatus, cb) {
        this.setState(
            {
                transitionStatus,
            },
            cb
        ); // Forcing a reflow to enable the animation

        this.contentNode.current && this.contentNode.current.getBoundingClientRect();
    }

    componentDidMount() {
        if (this.props.active) {
            this.focusContent();
            this.changeTransitionStatus(TransitionStatus$1.Entered);
        }
    }

    componentDidUpdate(oldProps) {
        if (this.props.active && !oldProps.active) {
            this.focusContent();
            this.changeTransitionStatus(TransitionStatus$1.Entering, () => {
                this.clearTransitionTimeout();
                this.enteringTimer = window.setTimeout(() => {
                    this.setState({
                        transitionStatus: TransitionStatus$1.Entered,
                    });
                }, parseInt(tokens.motion['duration-100'], 10));
            });
        }

        if (!this.props.active && oldProps.active) {
            this.changeTransitionStatus(TransitionStatus$1.Exiting, () => {
                this.clearTransitionTimeout();
                this.exitingTimer = window.setTimeout(() => {
                    this.setState({
                        transitionStatus: TransitionStatus$1.Exited,
                    });
                }, parseInt(tokens.motion['duration-100'], 10));
            });
        }
    }

    componentWillUnmount() {
        this.clearTransitionTimeout();
    }

    render() {
        const { active, activator, fullWidth, preferredPosition = 'below', preferredAlignment = 'center', preferInputActivator = true, fixed, zIndexOverride } = this.props;
        const { transitionStatus } = this.state;
        if (transitionStatus === TransitionStatus$1.Exited && !active) return null;
        const className = classNames(
            styles$16.PopoverOverlay,
            transitionStatus === TransitionStatus$1.Entering && styles$16['PopoverOverlay-entering'],
            transitionStatus === TransitionStatus$1.Entered && styles$16['PopoverOverlay-open'],
            transitionStatus === TransitionStatus$1.Exiting && styles$16['PopoverOverlay-exiting']
        );
        return (
            /*#__PURE__*/

            /*#__PURE__*/
            jsx(PositionedOverlay, {
                ref: this.overlayRef,
                fullWidth: fullWidth,
                active: active,
                activator: activator,
                preferInputActivator: preferInputActivator,
                preferredPosition: preferredPosition,
                preferredAlignment: preferredAlignment,
                render: this.renderPopover.bind(this),
                fixed: fixed,
                onScrollOut: this.handleScrollOut,
                classNames: className,
                zIndexOverride: zIndexOverride,
            })
        );
    }

    clearTransitionTimeout() {
        if (this.enteringTimer) {
            window.clearTimeout(this.enteringTimer);
        }

        if (this.exitingTimer) {
            window.clearTimeout(this.exitingTimer);
        }
    }

    focusContent() {
        const { autofocusTarget = 'container' } = this.props;

        if (autofocusTarget === 'none' || this.contentNode == null) {
            return;
        }

        requestAnimationFrame(() => {
            if (this.contentNode.current == null) {
                return;
            }

            const focusableChild = findFirstFocusableNode(this.contentNode.current);

            if (focusableChild && autofocusTarget === 'first-node') {
                focusableChild.focus({
                    preventScroll: 'production' === 'development',
                });
            } else {
                this.contentNode.current.focus({
                    preventScroll: 'production' === 'development',
                });
            }
        });
    } // eslint-disable-next-line @shopify/react-no-multiple-render-methods
}

function renderPopoverContent(children, props) {
    const childrenArray = react.exports.Children.toArray(children);

    if (isElementOfType(childrenArray[0], Pane)) {
        return childrenArray;
    }

    return wrapWithComponent(childrenArray, Pane, props);
}

function nodeContainsDescendant(rootNode, descendant) {
    if (rootNode === descendant) {
        return true;
    }

    let parent = descendant.parentNode;

    while (parent != null) {
        if (parent === rootNode) {
            return true;
        }

        parent = parent.parentNode;
    }

    return false;
}

const PopoverComponent = /*#__PURE__*/ react.exports.forwardRef(function Popover({ activatorWrapper = 'div', children, onClose, activator, preventFocusOnClose, active, fixed, ariaHaspopup, preferInputActivator = true, colorScheme, zIndexOverride, ...rest }, ref) {
    const [activatorNode, setActivatorNode] = react.exports.useState();
    const overlayRef = react.exports.useRef(null);
    const activatorContainer = react.exports.useRef(null);
    const WrapperComponent = activatorWrapper;
    const id = useUniqueId('popover');

    function forceUpdatePosition() {
        var _overlayRef$current;

        (_overlayRef$current = overlayRef.current) === null || _overlayRef$current === void 0 ? void 0 : _overlayRef$current.forceUpdatePosition();
    }

    react.exports.useImperativeHandle(ref, () => {
        return {
            forceUpdatePosition,
        };
    });
    const setAccessibilityAttributes = react.exports.useCallback(() => {
        if (activatorContainer.current == null) {
            return;
        }

        const firstFocusable = findFirstFocusableNodeIncludingDisabled(activatorContainer.current);
        const focusableActivator = firstFocusable || activatorContainer.current;
        const activatorDisabled = 'disabled' in focusableActivator && Boolean(focusableActivator.disabled);
        setActivatorAttributes(focusableActivator, {
            id,
            active,
            ariaHaspopup,
            activatorDisabled,
        });
    }, [id, active, ariaHaspopup]);

    const handleClose = (source) => {
        onClose(source);

        if (activatorContainer.current == null || preventFocusOnClose) {
            return;
        }

        if ((source === PopoverCloseSource.FocusOut || source === PopoverCloseSource.EscapeKeypress) && activatorNode) {
            const focusableActivator = findFirstFocusableNodeIncludingDisabled(activatorNode) || findFirstFocusableNodeIncludingDisabled(activatorContainer.current) || activatorContainer.current;

            if (!focusNextFocusableNode(focusableActivator, isInPortal)) {
                focusableActivator.focus();
            }
        }
    };

    react.exports.useEffect(() => {
        if (!activatorNode && activatorContainer.current) {
            setActivatorNode(activatorContainer.current.firstElementChild);
        } else if (activatorNode && activatorContainer.current && !activatorContainer.current.contains(activatorNode)) {
            setActivatorNode(activatorContainer.current.firstElementChild);
        }

        setAccessibilityAttributes();
    }, [activatorNode, setAccessibilityAttributes]);
    react.exports.useEffect(() => {
        if (activatorNode && activatorContainer.current) {
            setActivatorNode(activatorContainer.current.firstElementChild);
        }

        setAccessibilityAttributes();
    }, [activatorNode, setAccessibilityAttributes]);
    const portal = activatorNode
        ? /*#__PURE__*/

          /*#__PURE__*/
          jsx(Portal, {
              idPrefix: 'popover',
              children: /*#__PURE__*/ jsx(PopoverOverlay, {
                  ...Object.assign(
                      {
                          ref: overlayRef,
                          id: id,
                          activator: activatorNode,
                          preferInputActivator: preferInputActivator,
                          onClose: handleClose,
                          active: active,
                          fixed: fixed,
                          colorScheme: colorScheme,
                          zIndexOverride: zIndexOverride,
                      },
                      rest
                  ),
                  children: children,
              }),
          })
        : null;
    return (
        /*#__PURE__*/

        /*#__PURE__*/
        jsxs(WrapperComponent, {
            ref: activatorContainer,
            children: [react.exports.Children.only(activator), portal],
        })
    );
});

function isInPortal(element) {
    let parentElement = element.parentElement;

    while (parentElement) {
        if (parentElement.matches(portal.selector)) return false;
        parentElement = parentElement.parentElement;
    }

    return true;
}

const Popover = Object.assign(PopoverComponent, {
    Pane,
    Section: Section$4,
});

var styles$13 = {
    ActionList: 'Polaris-ActionList',
    'Section-withoutTitle': 'Polaris-ActionList__Section--withoutTitle',
    Actions: 'Polaris-ActionList__Actions',
    Section: 'Polaris-ActionList__Section',
    Title: 'Polaris-ActionList__Title',
    firstSectionWithTitle: 'Polaris-ActionList--firstSectionWithTitle',
    Item: 'Polaris-ActionList__Item',
    active: 'Polaris-ActionList--active',
    destructive: 'Polaris-ActionList--destructive',
    disabled: 'Polaris-ActionList--disabled',
    Prefix: 'Polaris-ActionList__Prefix',
    Suffix: 'Polaris-ActionList__Suffix',
    Content: 'Polaris-ActionList__Content',
    ContentBlock: 'Polaris-ActionList__ContentBlock',
    ContentBlockInner: 'Polaris-ActionList__ContentBlockInner',
    Text: 'Polaris-ActionList__Text',
};

var styles$12 = {
    Icon: 'Polaris-Icon',
    applyColor: 'Polaris-Icon--applyColor',
    hasBackdrop: 'Polaris-Icon--hasBackdrop',
    colorBase: 'Polaris-Icon--colorBase',
    colorSubdued: 'Polaris-Icon--colorSubdued',
    colorCritical: 'Polaris-Icon--colorCritical',
    colorInteractive: 'Polaris-Icon--colorInteractive',
    colorWarning: 'Polaris-Icon--colorWarning',
    colorHighlight: 'Polaris-Icon--colorHighlight',
    colorSuccess: 'Polaris-Icon--colorSuccess',
    colorPrimary: 'Polaris-Icon--colorPrimary',
    Svg: 'Polaris-Icon__Svg',
    Img: 'Polaris-Icon__Img',
    Placeholder: 'Polaris-Icon__Placeholder',
};

const COLORS_WITH_BACKDROPS = ['base', 'critical', 'highlight', 'success', 'warning'];
function Icon({ source, color, backdrop, accessibilityLabel }) {
    let sourceType;

    if (typeof source === 'function') {
        sourceType = 'function';
    } else if (source === 'placeholder') {
        sourceType = 'placeholder';
    } else {
        sourceType = 'external';
    }

    if (color && sourceType === 'external' && 'production' === 'development') {
        // eslint-disable-next-line no-console
        console.warn('Recoloring external SVGs is not supported. Set the intended color on your SVG instead.');
    }

    if (backdrop && color && !COLORS_WITH_BACKDROPS.includes(color) && 'production' === 'development') {
        // eslint-disable-next-line no-console
        console.warn(`The ${color} variant does not have a supported backdrop color`);
    }

    const className = classNames(styles$12.Icon, color && styles$12[variationName('color', color)], color && styles$12.applyColor, backdrop && styles$12.hasBackdrop);
    const SourceComponent = source;
    const contentMarkup = {
        function: /*#__PURE__*/ React.createElement(SourceComponent, {
            className: styles$12.Svg,
            focusable: 'false',
            'aria-hidden': 'true',
        }),
        placeholder: /*#__PURE__*/ React.createElement('div', {
            className: styles$12.Placeholder,
        }),
        external: /*#__PURE__*/ React.createElement('img', {
            className: styles$12.Img,
            src: `data:image/svg+xml;utf8,${source}`,
            alt: '',
            'aria-hidden': 'true',
        }),
    };
    return /*#__PURE__*/ React.createElement(
        'span',
        {
            className: className,
        },
        /*#__PURE__*/ React.createElement(VisuallyHidden, null, accessibilityLabel),
        contentMarkup[sourceType]
    );
}

var styles$11 = {
    variationPositive: 'Polaris-TextStyle--variationPositive',
    variationNegative: 'Polaris-TextStyle--variationNegative',
    variationWarning: 'Polaris-TextStyle--variationWarning',
    variationCode: 'Polaris-TextStyle--variationCode',
    variationStrong: 'Polaris-TextStyle--variationStrong',
    variationSubdued: 'Polaris-TextStyle--variationSubdued',
};

var VariationValue;

(function (VariationValue) {
    VariationValue['Positive'] = 'positive';
    VariationValue['Negative'] = 'negative';
    VariationValue['Warning'] = 'warning';
    VariationValue['Strong'] = 'strong';
    VariationValue['Subdued'] = 'subdued';
    VariationValue['Code'] = 'code';
})(VariationValue || (VariationValue = {}));

function TextStyle({ variation, children }) {
    const className = classNames(variation && styles$11[variationName('variation', variation)], variation === VariationValue.Code && styles$11.code);
    const Element = variationElement(variation);
    return /*#__PURE__*/ React.createElement(
        Element,
        {
            className: className,
        },
        children
    );
}

function variationElement(variation) {
    return variation === VariationValue.Code ? 'code' : 'span';
}

const WithinFilterContext = /*#__PURE__*/ react.exports.createContext(false);

var styles$10 = {
    Badge: 'Polaris-Badge',
    sizeSmall: 'Polaris-Badge--sizeSmall',
    statusSuccess: 'Polaris-Badge--statusSuccess',
    statusInfo: 'Polaris-Badge--statusInfo',
    statusAttention: 'Polaris-Badge--statusAttention',
    statusWarning: 'Polaris-Badge--statusWarning',
    statusCritical: 'Polaris-Badge--statusCritical',
    statusNew: 'Polaris-Badge--statusNew',
    Pip: 'Polaris-Badge__Pip',
    progressIncomplete: 'Polaris-Badge--progressIncomplete',
    progressPartiallyComplete: 'Polaris-Badge--progressPartiallyComplete',
    progressComplete: 'Polaris-Badge--progressComplete',
    withinFilter: 'Polaris-Badge--withinFilter',
};

function useI18n() {
    const i18n = react.exports.useContext(I18nContext);

    if (!i18n) {
        throw new MissingAppProviderError('No i18n was provided.');
    }

    return i18n;
}

const PROGRESS_LABELS = {
    incomplete: 'incomplete',
    partiallyComplete: 'partiallyComplete',
    complete: 'complete',
};
const STATUS_LABELS = {
    info: 'info',
    success: 'success',
    warning: 'warning',
    critical: 'critical',
    attention: 'attention',
    new: 'new',
};
const DEFAULT_SIZE$1 = 'medium';

function Badge({ children, status, progress, size = DEFAULT_SIZE$1, statusAndProgressLabelOverride }) {
    const i18n = useI18n();
    const withinFilter = react.exports.useContext(WithinFilterContext);
    const className = classNames(styles$10.Badge, status && styles$10[variationName('status', status)], progress && styles$10[variationName('progress', progress)], size && size !== DEFAULT_SIZE$1 && styles$10[variationName('size', size)], withinFilter && styles$10.withinFilter);
    let progressLabel = '';

    switch (progress) {
        case PROGRESS_LABELS.incomplete:
            progressLabel = i18n.translate('Polaris.Badge.PROGRESS_LABELS.incomplete');
            break;

        case PROGRESS_LABELS.partiallyComplete:
            progressLabel = i18n.translate('Polaris.Badge.PROGRESS_LABELS.partiallyComplete');
            break;

        case PROGRESS_LABELS.complete:
            progressLabel = i18n.translate('Polaris.Badge.PROGRESS_LABELS.complete');
            break;
    }

    let statusLabel = '';

    switch (status) {
        case STATUS_LABELS.info:
            statusLabel = i18n.translate('Polaris.Badge.STATUS_LABELS.info');
            break;

        case STATUS_LABELS.success:
            statusLabel = i18n.translate('Polaris.Badge.STATUS_LABELS.success');
            break;

        case STATUS_LABELS.warning:
            statusLabel = i18n.translate('Polaris.Badge.STATUS_LABELS.warning');
            break;

        case STATUS_LABELS.critical:
            statusLabel = i18n.translate('Polaris.Badge.STATUS_LABELS.critical');
            break;

        case STATUS_LABELS.attention:
            statusLabel = i18n.translate('Polaris.Badge.STATUS_LABELS.attention');
            break;

        case STATUS_LABELS.new:
            statusLabel = i18n.translate('Polaris.Badge.STATUS_LABELS.new');
            break;
    }

    const accessibilityLabel = statusAndProgressLabelOverride
        ? statusAndProgressLabelOverride
        : i18n.translate('Polaris.Badge.progressAndStatus', {
              progressLabel,
              statusLabel,
          });
    const hasAccessibilityLabel = progressLabel || statusLabel || statusAndProgressLabelOverride;

    let accessibilityMarkup =
        hasAccessibilityLabel &&
        /*#__PURE__*/

        /*#__PURE__*/
        jsx(VisuallyHidden, {
            children: accessibilityLabel,
        });

    if (progressLabel) {
        accessibilityMarkup =
            /*#__PURE__*/

            /*#__PURE__*/
            jsx('span', {
                className: styles$10.Pip,
                children: accessibilityMarkup,
            });
    }

    return (
        /*#__PURE__*/

        /*#__PURE__*/
        jsxs('span', {
            className: className,
            children: [accessibilityMarkup, children],
        })
    );
}

function useLink() {
    return react.exports.useContext(LinkContext);
}

const UnstyledLink = /*#__PURE__*/ react.exports.memo(
    /*#__PURE__*/ react.exports.forwardRef(function UnstyledLink(props, _ref) {
        const LinkComponent = useLink();

        if (LinkComponent) {
            return (
                /*#__PURE__*/

                /*#__PURE__*/
                jsx(LinkComponent, { ...Object.assign({}, unstyled.props, props) })
            );
        }

        const { external, url, ...rest } = props;
        const target = external ? '_blank' : undefined;
        const rel = external ? 'noopener noreferrer' : undefined;
        return (
            /*#__PURE__*/

            /*#__PURE__*/
            jsx('a', {
                ...Object.assign(
                    {
                        target: target,
                    },
                    rest,
                    {
                        href: url,
                        rel: rel,
                    },
                    unstyled.props
                ),
            })
        );
    })
);

function Item$6({ id, badge, content, accessibilityLabel, helpText, url, onAction, icon, image, prefix, suffix, disabled, external, destructive, ellipsis, active, role }) {
    const className = classNames(styles$13.Item, disabled && styles$13.disabled, destructive && styles$13.destructive, active && styles$13.active);
    let prefixMarkup = null;

    if (prefix) {
        prefixMarkup = /*#__PURE__*/ React.createElement(
            'span',
            {
                className: styles$13.Prefix,
            },
            prefix
        );
    } else if (icon) {
        prefixMarkup = /*#__PURE__*/ React.createElement(
            'span',
            {
                className: styles$13.Prefix,
            },
            /*#__PURE__*/ React.createElement(Icon, {
                source: icon,
            })
        );
    } else if (image) {
        prefixMarkup = /*#__PURE__*/ React.createElement('span', {
            role: 'presentation',
            className: styles$13.Prefix,
            style: {
                backgroundImage: `url(${image}`,
            },
        });
    }

    const contentText = ellipsis && content ? `${content}…` : content;
    const contentMarkup = helpText
        ? /*#__PURE__*/ React.createElement(
              'span',
              {
                  className: styles$13.ContentBlock,
              },
              /*#__PURE__*/ React.createElement(
                  'span',
                  {
                      className: styles$13.ContentBlockInner,
                  },
                  contentText
              ),
              /*#__PURE__*/ React.createElement(
                  TextStyle,
                  {
                      variation: 'subdued',
                  },
                  helpText
              )
          )
        : contentText;
    const badgeMarkup =
        badge &&
        /*#__PURE__*/ React.createElement(
            'span',
            {
                className: styles$13.Suffix,
            },
            /*#__PURE__*/ React.createElement(
                Badge,
                {
                    status: badge.status,
                },
                badge.content
            )
        );
    const suffixMarkup =
        suffix &&
        /*#__PURE__*/ React.createElement(
            'span',
            {
                className: styles$13.Suffix,
            },
            suffix
        );
    const textMarkup = /*#__PURE__*/ React.createElement(
        'span',
        {
            className: styles$13.Text,
        },
        contentMarkup
    );
    const contentElement = /*#__PURE__*/ React.createElement(
        'span',
        {
            className: styles$13.Content,
        },
        prefixMarkup,
        textMarkup,
        badgeMarkup,
        suffixMarkup
    );
    const scrollMarkup = active ? /*#__PURE__*/ React.createElement(Scrollable.ScrollTo, null) : null;
    const control = url
        ? /*#__PURE__*/ React.createElement(
              UnstyledLink,
              {
                  id: id,
                  url: disabled ? null : url,
                  className: className,
                  external: external,
                  'aria-label': accessibilityLabel,
                  onClick: disabled ? null : onAction,
                  role: role,
              },
              contentElement
          )
        : /*#__PURE__*/ React.createElement(
              'button',
              {
                  id: id,
                  type: 'button',
                  className: className,
                  disabled: disabled,
                  'aria-label': accessibilityLabel,
                  onClick: onAction,
                  onMouseUp: handleMouseUpByBlurring,
                  role: role,
              },
              contentElement
          );
    return /*#__PURE__*/ React.createElement(
        'li',
        {
            role: role === 'menuitem' ? 'presentation' : undefined,
        },
        scrollMarkup,
        control
    );
}

function Section$3({ section, hasMultipleSections, actionRole, firstSection, onActionAnyItem }) {
    const handleAction = (itemOnAction) => {
        return () => {
            if (itemOnAction) {
                itemOnAction();
            }

            if (onActionAnyItem) {
                onActionAnyItem();
            }
        };
    };

    const actionMarkup = section.items.map(({ content, helpText, onAction, ...item }, index) => {
        return /*#__PURE__*/ React.createElement(
            Item$6,
            Object.assign(
                {
                    key: `${content}-${index}`,
                    content: content,
                    helpText: helpText,
                    role: actionRole,
                    onAction: handleAction(onAction),
                },
                item
            )
        );
    });
    const className = section.title ? undefined : styles$13['Section-withoutTitle'];
    const titleClassName = classNames(styles$13.Title, firstSection && styles$13.firstSectionWithTitle);
    const titleMarkup = section.title
        ? /*#__PURE__*/ React.createElement(
              'p',
              {
                  className: titleClassName,
              },
              section.title
          )
        : null;
    let sectionRole;

    switch (actionRole) {
        case 'option':
            sectionRole = 'presentation';
            break;

        case 'menuitem':
            sectionRole = !hasMultipleSections ? 'menu' : 'presentation';
            break;

        default:
            sectionRole = undefined;
            break;
    }

    const sectionMarkup = /*#__PURE__*/ React.createElement(
        'div',
        {
            className: className,
        },
        titleMarkup,
        /*#__PURE__*/ React.createElement(
            'ul',
            {
                className: styles$13.Actions,
                role: sectionRole,
                tabIndex: !hasMultipleSections ? -1 : undefined,
            },
            actionMarkup
        )
    );
    return hasMultipleSections
        ? /*#__PURE__*/ React.createElement(
              'li',
              {
                  className: styles$13.Section,
                  role: 'presentation',
              },
              sectionMarkup
          )
        : sectionMarkup;
}

function ActionList({ items, sections = [], actionRole, onActionAnyItem }) {
    let finalSections = [];
    const actionListRef = react.exports.useRef(null);

    if (items) {
        finalSections = [
            {
                items,
            },
            ...sections,
        ];
    } else if (sections) {
        finalSections = sections;
    }

    const className = classNames(styles$13.ActionList);
    const hasMultipleSections = finalSections.length > 1;
    const Element = hasMultipleSections ? 'ul' : 'div';
    const elementRole = hasMultipleSections && actionRole === 'menuitem' ? 'menu' : undefined;
    const elementTabIndex = hasMultipleSections && actionRole === 'menuitem' ? -1 : undefined;
    const sectionMarkup = finalSections.map((section, index) => {
        return section.items.length > 0
            ? /*#__PURE__*/

              /*#__PURE__*/
              jsx(
                  Section$3,
                  {
                      firstSection: index === 0,
                      section: section,
                      hasMultipleSections: hasMultipleSections,
                      actionRole: actionRole,
                      onActionAnyItem: onActionAnyItem,
                  },
                  section.title || index
              )
            : null;
    });

    const handleFocusPreviousItem = (evt) => {
        evt.preventDefault();

        if (actionListRef.current && evt.target) {
            if (actionListRef.current.contains(evt.target)) {
                wrapFocusPreviousFocusableMenuItem(actionListRef.current, evt.target);
            }
        }
    };

    const handleFocusNextItem = (evt) => {
        evt.preventDefault();

        if (actionListRef.current && evt.target) {
            if (actionListRef.current.contains(evt.target)) {
                wrapFocusNextFocusableMenuItem(actionListRef.current, evt.target);
            }
        }
    };

    const listeners =
        actionRole === 'menuitem'
            ? /*#__PURE__*/

              /*#__PURE__*/
              jsxs(Fragment, {
                  children: [
                      /*#__PURE__*/ jsx(KeypressListener, {
                          keyEvent: 'keydown',
                          keyCode: Key.DownArrow,
                          handler: handleFocusNextItem,
                      }),
                      /*#__PURE__*/ jsx(KeypressListener, {
                          keyEvent: 'keydown',
                          keyCode: Key.UpArrow,
                          handler: handleFocusPreviousItem,
                      }),
                  ],
              })
            : null;
    return (
        /*#__PURE__*/

        /*#__PURE__*/
        jsxs(Element, {
            ref: actionListRef,
            className: className,
            role: elementRole,
            tabIndex: elementTabIndex,
            children: [listeners, sectionMarkup],
        })
    );
}

function UnstyledButton({ id, children, className, url, external, download, submit, disabled, loading, pressed, accessibilityLabel, role, ariaControls, ariaExpanded, ariaDescribedBy, onClick, onFocus, onBlur, onKeyDown, onKeyPress, onKeyUp, onMouseEnter, onTouchStart, ...rest }) {
    let buttonMarkup;
    const commonProps = {
        id,
        className,
        'aria-label': accessibilityLabel,
    };
    const interactiveProps = { ...commonProps, role, onClick, onFocus, onBlur, onMouseUp: handleMouseUpByBlurring, onMouseEnter, onTouchStart };

    if (url) {
        buttonMarkup = disabled
            ? /*#__PURE__*/
              // Render an `<a>` so toggling disabled/enabled state changes only the
              // `href` attribute instead of replacing the whole element.
              React.createElement('a', commonProps, children)
            : /*#__PURE__*/ React.createElement(
                  UnstyledLink,
                  Object.assign(
                      {},
                      interactiveProps,
                      {
                          url: url,
                          external: external,
                          download: download,
                      },
                      rest
                  ),
                  children
              );
    } else {
        buttonMarkup = /*#__PURE__*/ React.createElement(
            'button',
            Object.assign(
                {},
                interactiveProps,
                {
                    type: submit ? 'submit' : 'button',
                    disabled: disabled,
                    'aria-busy': loading ? true : undefined,
                    'aria-controls': ariaControls,
                    'aria-expanded': ariaExpanded,
                    'aria-describedby': ariaDescribedBy,
                    'aria-pressed': pressed,
                    onKeyDown: onKeyDown,
                    onKeyUp: onKeyUp,
                    onKeyPress: onKeyPress,
                },
                rest
            ),
            children
        );
    }

    return buttonMarkup;
}

const DEFAULT_SIZE = 'medium';

function Button({
    id,
    children,
    url,
    disabled,
    external,
    download,
    submit,
    loading,
    pressed,
    accessibilityLabel,
    role,
    ariaControls,
    ariaExpanded,
    ariaDescribedBy,
    onClick,
    onFocus,
    onBlur,
    onKeyDown,
    onKeyPress,
    onKeyUp,
    onMouseEnter,
    onTouchStart,
    icon,
    primary,
    outline,
    destructive,
    disclosure,
    plain,
    monochrome,
    removeUnderline,
    size = DEFAULT_SIZE,
    textAlign,
    fullWidth,
    connectedDisclosure,
}) {
    const i18n = useI18n();
    const isDisabled = disabled || loading;
    const className = classNames(
        styles$19.Button,
        primary && styles$19.primary,
        outline && styles$19.outline,
        destructive && styles$19.destructive,
        isDisabled && styles$19.disabled,
        loading && styles$19.loading,
        plain && styles$19.plain,
        pressed && !disabled && !url && styles$19.pressed,
        monochrome && styles$19.monochrome,
        size && size !== DEFAULT_SIZE && styles$19[variationName('size', size)],
        textAlign && styles$19[variationName('textAlign', textAlign)],
        fullWidth && styles$19.fullWidth,
        icon && children == null && styles$19.iconOnly,
        connectedDisclosure && styles$19.connectedDisclosure,
        removeUnderline && styles$19.removeUnderline
    );
    const disclosureMarkup = disclosure
        ? /*#__PURE__*/

          /*#__PURE__*/
          jsx('span', {
              className: styles$19.Icon,
              children: /*#__PURE__*/ jsx('div', {
                  className: classNames(styles$19.DisclosureIcon, loading && styles$19.hidden),
                  children: /*#__PURE__*/ jsx(Icon, {
                      source: loading ? 'placeholder' : getDisclosureIconSource(disclosure),
                  }),
              }),
          })
        : null;
    const iconSource = isIconSource(icon)
        ? /*#__PURE__*/

          /*#__PURE__*/
          jsx(Icon, {
              source: loading ? 'placeholder' : icon,
          })
        : icon;
    const iconMarkup = iconSource
        ? /*#__PURE__*/

          /*#__PURE__*/
          jsx('span', {
              className: classNames(styles$19.Icon, loading && styles$19.hidden),
              children: iconSource,
          })
        : null;
    const childMarkup = children
        ? /*#__PURE__*/

          /*#__PURE__*/
          jsx(
              'span',
              {
                  className: classNames(styles$19.Text, removeUnderline && styles$19.removeUnderline),
                  children: children,
              },
              disabled ? 'text-disabled' : 'text'
          )
        : null;
    const spinnerSVGMarkup = loading
        ? /*#__PURE__*/

          /*#__PURE__*/
          jsx('span', {
              className: styles$19.Spinner,
              children: /*#__PURE__*/ jsx(Spinner$1, {
                  size: 'small',
                  accessibilityLabel: i18n.translate('Polaris.Button.spinnerAccessibilityLabel'),
              }),
          })
        : null;
    const [disclosureActive, setDisclosureActive] = react.exports.useState(false);
    const toggleDisclosureActive = react.exports.useCallback(() => {
        setDisclosureActive((disclosureActive) => !disclosureActive);
    }, []);
    let connectedDisclosureMarkup;

    if (connectedDisclosure) {
        const connectedDisclosureClassName = classNames(
            styles$19.Button,
            primary && styles$19.primary,
            outline && styles$19.outline,
            size && size !== DEFAULT_SIZE && styles$19[variationName('size', size)],
            textAlign && styles$19[variationName('textAlign', textAlign)],
            destructive && styles$19.destructive,
            connectedDisclosure.disabled && styles$19.disabled,
            styles$19.iconOnly,
            styles$19.ConnectedDisclosure,
            monochrome && styles$19.monochrome
        );
        const defaultLabel = i18n.translate('Polaris.Button.connectedDisclosureAccessibilityLabel');
        const { disabled, accessibilityLabel: disclosureLabel = defaultLabel } = connectedDisclosure;

        const connectedDisclosureActivator =
            /*#__PURE__*/

            /*#__PURE__*/
            jsx('button', {
                type: 'button',
                className: connectedDisclosureClassName,
                disabled: disabled,
                'aria-label': disclosureLabel,
                'aria-describedby': ariaDescribedBy,
                onClick: toggleDisclosureActive,
                onMouseUp: handleMouseUpByBlurring,
                children: /*#__PURE__*/ jsx('span', {
                    className: styles$19.Icon,
                    children: /*#__PURE__*/ jsx(Icon, {
                        source: SvgCaretDownMinor,
                    }),
                }),
            });

        connectedDisclosureMarkup =
            /*#__PURE__*/

            /*#__PURE__*/
            jsx(Popover, {
                active: disclosureActive,
                onClose: toggleDisclosureActive,
                activator: connectedDisclosureActivator,
                preferredAlignment: 'right',
                children: /*#__PURE__*/ jsx(ActionList, {
                    items: connectedDisclosure.actions,
                    onActionAnyItem: toggleDisclosureActive,
                }),
            });
    }

    const commonProps = {
        id,
        className,
        accessibilityLabel,
        ariaDescribedBy,
        role,
        onClick,
        onFocus,
        onBlur,
        onMouseUp: handleMouseUpByBlurring,
        onMouseEnter,
        onTouchStart,
    };
    const linkProps = {
        url,
        external,
        download,
    };
    const actionProps = {
        submit,
        disabled: isDisabled,
        loading,
        ariaControls,
        ariaExpanded,
        pressed,
        onKeyDown,
        onKeyUp,
        onKeyPress,
    };

    const buttonMarkup =
        /*#__PURE__*/

        /*#__PURE__*/
        jsx(UnstyledButton, {
            ...Object.assign({}, commonProps, linkProps, actionProps),
            children: /*#__PURE__*/ jsxs('span', {
                className: styles$19.Content,
                children: [spinnerSVGMarkup, iconMarkup, childMarkup, disclosureMarkup],
            }),
        });

    return connectedDisclosureMarkup
        ? /*#__PURE__*/

          /*#__PURE__*/
          jsxs('div', {
              className: styles$19.ConnectedDisclosureWrapper,
              children: [buttonMarkup, connectedDisclosureMarkup],
          })
        : buttonMarkup;
}

function isIconSource(x) {
    return typeof x === 'string' || (typeof x === 'object' && x.body) || typeof x === 'function';
}

function getDisclosureIconSource(disclosure) {
    if (disclosure === 'select') {
        return SvgSelectMinor;
    }

    return disclosure === 'up' ? SvgCaretUpMinor : SvgCaretDownMinor;
}

function buttonsFrom(actions, overrides = {}) {
    if (Array.isArray(actions)) {
        return actions.map((action, index) => buttonFrom(action, overrides, index));
    } else {
        const action = actions;
        return buttonFrom(action, overrides);
    }
}
function buttonFrom({ content, onAction, ...action }, overrides, key) {
    return /*#__PURE__*/ React.createElement(
        Button,
        Object.assign(
            {
                key: key,
                onClick: onAction,
            },
            action,
            overrides
        ),
        content
    );
}

var styles$$ = {
    ButtonGroup: 'Polaris-ButtonGroup',
    Item: 'Polaris-ButtonGroup__Item',
    'Item-plain': 'Polaris-ButtonGroup__Item--plain',
    segmented: 'Polaris-ButtonGroup--segmented',
    'Item-focused': 'Polaris-ButtonGroup__Item--focused',
    fullWidth: 'Polaris-ButtonGroup--fullWidth',
    extraTight: 'Polaris-ButtonGroup--extraTight',
    tight: 'Polaris-ButtonGroup--tight',
    loose: 'Polaris-ButtonGroup--loose',
};

function Item$5({ button }) {
    const { value: focused, setTrue: forceTrueFocused, setFalse: forceFalseFocused } = useToggle(false);
    const className = classNames(styles$$.Item, focused && styles$$['Item-focused'], button.props.plain && styles$$['Item-plain']);
    return /*#__PURE__*/ React.createElement(
        'div',
        {
            className: className,
            onFocus: forceTrueFocused,
            onBlur: forceFalseFocused,
        },
        button
    );
}

function ButtonGroup({ children, spacing, segmented, fullWidth, connectedTop }) {
    const className = classNames(styles$$.ButtonGroup, spacing && styles$$[spacing], segmented && styles$$.segmented, fullWidth && styles$$.fullWidth);
    const contents = elementChildren(children).map((child, index) =>
        /*#__PURE__*/ React.createElement(Item$5, {
            button: child,
            key: index,
        })
    );
    return /*#__PURE__*/ React.createElement(
        'div',
        {
            className: className,
            'data-buttongroup-segmented': segmented,
            'data-buttongroup-connected-top': connectedTop,
            'data-buttongroup-full-width': fullWidth,
        },
        contents
    );
}

var styles$_ = {
    Stack: 'Polaris-Stack',
    Item: 'Polaris-Stack__Item',
    noWrap: 'Polaris-Stack--noWrap',
    spacingNone: 'Polaris-Stack--spacingNone',
    spacingExtraTight: 'Polaris-Stack--spacingExtraTight',
    spacingTight: 'Polaris-Stack--spacingTight',
    spacingBaseTight: 'Polaris-Stack--spacingBaseTight',
    spacingLoose: 'Polaris-Stack--spacingLoose',
    spacingExtraLoose: 'Polaris-Stack--spacingExtraLoose',
    distributionLeading: 'Polaris-Stack--distributionLeading',
    distributionTrailing: 'Polaris-Stack--distributionTrailing',
    distributionCenter: 'Polaris-Stack--distributionCenter',
    distributionEqualSpacing: 'Polaris-Stack--distributionEqualSpacing',
    distributionFill: 'Polaris-Stack--distributionFill',
    distributionFillEvenly: 'Polaris-Stack--distributionFillEvenly',
    alignmentLeading: 'Polaris-Stack--alignmentLeading',
    alignmentTrailing: 'Polaris-Stack--alignmentTrailing',
    alignmentCenter: 'Polaris-Stack--alignmentCenter',
    alignmentFill: 'Polaris-Stack--alignmentFill',
    alignmentBaseline: 'Polaris-Stack--alignmentBaseline',
    vertical: 'Polaris-Stack--vertical',
    'Item-fill': 'Polaris-Stack__Item--fill',
};

function Item$4({ children, fill }) {
    const className = classNames(styles$_.Item, fill && styles$_['Item-fill']);
    return /*#__PURE__*/ React.createElement(
        'div',
        {
            className: className,
        },
        children
    );
}

const Stack$2 = /*#__PURE__*/ react.exports.memo(function Stack({ children, vertical, spacing, distribution, alignment, wrap }) {
    const className = classNames(
        styles$_.Stack,
        vertical && styles$_.vertical,
        spacing && styles$_[variationName('spacing', spacing)],
        distribution && styles$_[variationName('distribution', distribution)],
        alignment && styles$_[variationName('alignment', alignment)],
        wrap === false && styles$_.noWrap
    );
    const itemMarkup = elementChildren(children).map((child, index) => {
        const props = {
            key: index,
        };
        return wrapWithComponent(child, Item$4, props);
    });
    return (
        /*#__PURE__*/

        /*#__PURE__*/
        jsx('div', {
            className: className,
            children: itemMarkup,
        })
    );
});
Stack$2.Item = Item$4;

var styles$Z = {
    Heading: 'Polaris-Heading',
};

function Heading({ element: Element = 'h2', children, id }) {
    return /*#__PURE__*/ React.createElement(
        Element,
        {
            className: styles$Z.Heading,
            id: id,
        },
        children
    );
}

function Header$2({ children, title, actions }) {
    const actionMarkup = actions
        ? /*#__PURE__*/

          /*#__PURE__*/
          jsx(ButtonGroup, {
              children: buttonsFrom(actions, {
                  plain: true,
              }),
          })
        : null;
    const titleMarkup = /*#__PURE__*/ react.exports.isValidElement(title)
        ? title
        : /*#__PURE__*/

          /*#__PURE__*/
          jsx(Heading, {
              children: title,
          });
    const headingMarkup =
        actionMarkup || children
            ? /*#__PURE__*/

              /*#__PURE__*/
              jsxs(Stack$2, {
                  alignment: 'baseline',
                  children: [
                      /*#__PURE__*/ jsx(Stack$2.Item, {
                          fill: true,
                          children: titleMarkup,
                      }),
                      actionMarkup,
                      children,
                  ],
              })
            : titleMarkup;
    return (
        /*#__PURE__*/

        /*#__PURE__*/
        jsx('div', {
            className: styles$1a.Header,
            children: headingMarkup,
        })
    );
}

var styles$Y = {
    Subheading: 'Polaris-Subheading',
};

function Subheading({ element: Element = 'h3', children }) {
    const ariaLabel = typeof children === 'string' ? children : undefined;
    return /*#__PURE__*/ React.createElement(
        Element,
        {
            'aria-label': ariaLabel,
            className: styles$Y.Subheading,
        },
        children
    );
}

function Section$2({ children, title, subdued, flush, fullWidth, actions, hideOnPrint }) {
    const className = classNames(styles$1a.Section, flush && styles$1a['Section-flush'], subdued && styles$1a['Section-subdued'], fullWidth && styles$1a['Section-fullWidth'], hideOnPrint && styles$1a['Section-hideOnPrint']);
    const actionMarkup = actions
        ? /*#__PURE__*/ React.createElement(
              ButtonGroup,
              null,
              buttonsFrom(actions, {
                  plain: true,
              })
          )
        : null;
    const titleMarkup = typeof title === 'string' ? /*#__PURE__*/ React.createElement(Subheading, null, title) : title;
    const titleAreaMarkup =
        titleMarkup || actionMarkup
            ? /*#__PURE__*/ React.createElement(
                  'div',
                  {
                      className: styles$1a.SectionHeader,
                  },
                  actionMarkup
                      ? /*#__PURE__*/ React.createElement(
                            Stack$2,
                            {
                                alignment: 'baseline',
                            },
                            /*#__PURE__*/ React.createElement(
                                Stack$2.Item,
                                {
                                    fill: true,
                                },
                                titleMarkup
                            ),
                            actionMarkup
                        )
                      : titleMarkup
              )
            : null;
    return /*#__PURE__*/ React.createElement(
        'div',
        {
            className: className,
        },
        titleAreaMarkup,
        children
    );
}

function Subsection({ children }) {
    return /*#__PURE__*/ React.createElement(
        'div',
        {
            className: styles$1a.Subsection,
        },
        children
    );
}

// TypeScript can't generate types that correctly infer the typing of
// subcomponents so explicitly state the subcomponents in the type definition.
// Letting this be implicit works in this project but fails in projects that use
// generated *.d.ts files.
const Card = function Card({ children, hideOnPrint, title, subdued, sectioned, actions, primaryFooterAction, secondaryFooterActions, secondaryFooterActionsDisclosureText, footerActionAlignment = 'right' }) {
    const i18n = useI18n();
    const { value: secondaryActionsPopoverOpen, toggle: toggleSecondaryActionsPopoverOpen } = useToggle(false);
    const className = classNames(styles$1a.Card, subdued && styles$1a.subdued, hideOnPrint && styles$1a.hideOnPrint);
    const headerMarkup =
        title || actions
            ? /*#__PURE__*/ React.createElement(Header$2, {
                  actions: actions,
                  title: title,
              })
            : null;
    const content = sectioned ? /*#__PURE__*/ React.createElement(Section$2, null, children) : children;
    const primaryFooterActionMarkup = primaryFooterAction
        ? buttonFrom(primaryFooterAction, {
              primary: true,
          })
        : null;
    let secondaryFooterActionsMarkup = null;

    if (secondaryFooterActions && secondaryFooterActions.length) {
        if (secondaryFooterActions.length === 1) {
            secondaryFooterActionsMarkup = buttonFrom(secondaryFooterActions[0]);
        } else {
            secondaryFooterActionsMarkup = /*#__PURE__*/ React.createElement(
                React.Fragment,
                null,
                /*#__PURE__*/ React.createElement(
                    Popover,
                    {
                        active: secondaryActionsPopoverOpen,
                        activator: /*#__PURE__*/ React.createElement(
                            Button,
                            {
                                disclosure: true,
                                onClick: toggleSecondaryActionsPopoverOpen,
                            },
                            secondaryFooterActionsDisclosureText || i18n.translate('Polaris.Common.more')
                        ),
                        onClose: toggleSecondaryActionsPopoverOpen,
                    },
                    /*#__PURE__*/ React.createElement(ActionList, {
                        items: secondaryFooterActions,
                    })
                )
            );
        }
    }

    const footerMarkup =
        primaryFooterActionMarkup || secondaryFooterActionsMarkup
            ? /*#__PURE__*/ React.createElement(
                  'div',
                  {
                      className: classNames(styles$1a.Footer, footerActionAlignment === 'left' && styles$1a.LeftJustified),
                  },
                  footerActionAlignment === 'right' ? /*#__PURE__*/ React.createElement(ButtonGroup, null, secondaryFooterActionsMarkup, primaryFooterActionMarkup) : /*#__PURE__*/ React.createElement(ButtonGroup, null, primaryFooterActionMarkup, secondaryFooterActionsMarkup)
              )
            : null;
    return /*#__PURE__*/ React.createElement(
        WithinContentContext.Provider,
        {
            value: true,
        },
        /*#__PURE__*/ React.createElement(
            'div',
            {
                className: className,
            },
            headerMarkup,
            content,
            footerMarkup
        )
    );
};
Card.Header = Header$2;
Card.Section = Section$2;
Card.Subsection = Subsection;

var styles$X = {
    Avatar: 'Polaris-Avatar',
    hidden: 'Polaris-Avatar--hidden',
    sizeExtraSmall: 'Polaris-Avatar--sizeExtraSmall',
    sizeSmall: 'Polaris-Avatar--sizeSmall',
    sizeMedium: 'Polaris-Avatar--sizeMedium',
    sizeLarge: 'Polaris-Avatar--sizeLarge',
    styleOne: 'Polaris-Avatar--styleOne',
    styleTwo: 'Polaris-Avatar--styleTwo',
    styleThree: 'Polaris-Avatar--styleThree',
    styleFour: 'Polaris-Avatar--styleFour',
    styleFive: 'Polaris-Avatar--styleFive',
    hasImage: 'Polaris-Avatar--hasImage',
    Image: 'Polaris-Avatar__Image',
    Initials: 'Polaris-Avatar__Initials',
    Svg: 'Polaris-Avatar__Svg',
};

function Image({ sourceSet, source, crossOrigin, ...rest }) {
    const finalSourceSet = sourceSet ? sourceSet.map(({ source: subSource, descriptor }) => `${subSource} ${descriptor}`).join(',') : null;
    return finalSourceSet
        ? /*#__PURE__*/
          // eslint-disable-next-line jsx-a11y/alt-text
          React.createElement(
              'img',
              Object.assign(
                  {
                      src: source,
                      srcSet: finalSourceSet,
                      crossOrigin: crossOrigin,
                  },
                  rest
              )
          )
        : /*#__PURE__*/
          // eslint-disable-next-line jsx-a11y/alt-text
          React.createElement(
              'img',
              Object.assign(
                  {
                      src: source,
                  },
                  rest,
                  {
                      crossOrigin: crossOrigin,
                  }
              )
          );
}

var Status;

(function (Status) {
    Status['Pending'] = 'PENDING';
    Status['Loaded'] = 'LOADED';
    Status['Errored'] = 'ERRORED';
})(Status || (Status = {}));

const STYLE_CLASSES = ['one', 'two', 'three', 'four', 'five'];

function Avatar({ name, source, onError, initials, customer, size = 'medium', accessibilityLabel }) {
    const i18n = useI18n();
    const isAfterInitialMount = useIsAfterInitialMount();

    function styleClass(name) {
        return name ? STYLE_CLASSES[name.charCodeAt(0) % STYLE_CLASSES.length] : STYLE_CLASSES[0];
    }

    const [status, setStatus] = react.exports.useState(Status.Pending); // If the source changes, set the status back to pending

    react.exports.useEffect(() => {
        setStatus(Status.Pending);
    }, [source]);
    const handleError = react.exports.useCallback(() => {
        setStatus(Status.Errored);

        if (onError) {
            onError();
        }
    }, [onError]);
    const handleLoad = react.exports.useCallback(() => {
        setStatus(Status.Loaded);
    }, []);
    const hasImage = source && status !== Status.Errored;
    const nameString = name || initials;
    let label;

    if (accessibilityLabel) {
        label = accessibilityLabel;
    } else if (name) {
        label = name;
    } else if (initials) {
        const splitInitials = initials.split('').join(' ');
        label = i18n.translate('Polaris.Avatar.labelWithInitials', {
            initials: splitInitials,
        });
    } else {
        label = i18n.translate('Polaris.Avatar.label');
    }

    const className = classNames(styles$X.Avatar, size && styles$X[variationName('size', size)], !customer && styles$X[variationName('style', styleClass(nameString))], (hasImage || (initials && initials.length === 0)) && status !== Status.Loaded && styles$X.hidden, hasImage && styles$X.hasImage);
    const imageMarkUp =
        source && isAfterInitialMount && status !== Status.Errored
            ? /*#__PURE__*/

              /*#__PURE__*/
              jsx(Image, {
                  className: styles$X.Image,
                  source: source,
                  alt: '',
                  role: 'presentation',
                  onLoad: handleLoad,
                  onError: handleError,
              })
            : null; // Use `dominant-baseline: central` instead of `dy` when Edge supports it.

    const verticalOffset = '0.35em';
    const avatarBody =
        customer || !initials
            ? /*#__PURE__*/

              /*#__PURE__*/
              jsx('path', {
                  fill: 'currentColor',
                  d: 'M8.28 27.5A14.95 14.95 0 0120 21.8c4.76 0 8.97 2.24 11.72 5.7a14.02 14.02 0 01-8.25 5.91 14.82 14.82 0 01-6.94 0 14.02 14.02 0 01-8.25-5.9zM13.99 12.78a6.02 6.02 0 1112.03 0 6.02 6.02 0 01-12.03 0z',
              })
            : /*#__PURE__*/

              /*#__PURE__*/
              jsx('text', {
                  x: '50%',
                  y: '50%',
                  dy: verticalOffset,
                  fill: 'currentColor',
                  fontSize: '20',
                  textAnchor: 'middle',
                  children: initials,
              });
    const svgMarkup = !hasImage
        ? /*#__PURE__*/

          /*#__PURE__*/
          jsx('span', {
              className: styles$X.Initials,
              children: /*#__PURE__*/ jsx('svg', {
                  className: styles$X.Svg,
                  viewBox: '0 0 40 40',
                  children: avatarBody,
              }),
          })
        : null;
    return (
        /*#__PURE__*/

        /*#__PURE__*/
        jsxs('span', {
            'aria-label': label,
            role: 'img',
            className: className,
            children: [svgMarkup, imageMarkUp],
        })
    );
}

var styles$W = {
    ActionMenu: 'Polaris-ActionMenu',
};

var styles$V = {
    RollupActivator: 'Polaris-ActionMenu-RollupActions__RollupActivator',
};

function RollupActions({ accessibilityLabel, items = [], sections = [] }) {
    const i18n = useI18n();
    const { value: rollupOpen, toggle: toggleRollupOpen } = useToggle(false);

    if (items.length === 0 && sections.length === 0) {
        return null;
    }

    const activatorMarkup = /*#__PURE__*/ React.createElement(
        'div',
        {
            className: styles$V.RollupActivator,
        },
        /*#__PURE__*/ React.createElement(Button, {
            outline: true,
            icon: SvgHorizontalDotsMinor,
            accessibilityLabel: accessibilityLabel || i18n.translate('Polaris.ActionMenu.RollupActions.rollupButton'),
            onClick: toggleRollupOpen,
        })
    );
    return /*#__PURE__*/ React.createElement(
        Popover,
        {
            active: rollupOpen,
            activator: activatorMarkup,
            preferredAlignment: 'right',
            onClose: toggleRollupOpen,
            hideOnPrint: true,
        },
        /*#__PURE__*/ React.createElement(ActionList, {
            items: items,
            sections: sections,
            onActionAnyItem: toggleRollupOpen,
        })
    );
}

var styles$U = {
    ActionsLayout: 'Polaris-ActionMenu-Actions__ActionsLayout',
};

var styles$T = {
    Details: 'Polaris-ActionMenu-MenuGroup__Details',
};

var styles$S = {
    SecondaryAction: 'Polaris-ActionMenu-SecondaryAction',
    destructive: 'Polaris-ActionMenu-SecondaryAction--destructive',
};

function SecondaryAction({ children, destructive, onAction, getOffsetWidth, ...rest }) {
    const secondaryActionsRef = react.exports.useRef(null);
    react.exports.useEffect(() => {
        var _secondaryActionsRef$;

        if (!getOffsetWidth || !secondaryActionsRef.current) return;
        getOffsetWidth((_secondaryActionsRef$ = secondaryActionsRef.current) === null || _secondaryActionsRef$ === void 0 ? void 0 : _secondaryActionsRef$.offsetWidth);
    }, [getOffsetWidth]);
    return (
        /*#__PURE__*/

        /*#__PURE__*/
        jsx('span', {
            className: classNames(styles$S.SecondaryAction, destructive && styles$S.destructive),
            ref: secondaryActionsRef,
            children: /*#__PURE__*/ jsx(Button, {
                ...Object.assign(
                    {
                        onClick: onAction,
                    },
                    rest
                ),
                children: children,
            }),
        })
    );
}

function MenuGroup({ accessibilityLabel, active, actions, details, title, icon, onClose, onOpen, getOffsetWidth }) {
    const handleClose = react.exports.useCallback(() => {
        onClose(title);
    }, [onClose, title]);
    const handleOpen = react.exports.useCallback(() => {
        onOpen(title);
    }, [onOpen, title]);
    const handleOffsetWidth = react.exports.useCallback(
        (width) => {
            if (!getOffsetWidth) return;
            getOffsetWidth(width);
        },
        [getOffsetWidth]
    );

    const popoverActivator =
        /*#__PURE__*/

        /*#__PURE__*/
        jsx(SecondaryAction, {
            disclosure: true,
            icon: icon,
            accessibilityLabel: accessibilityLabel,
            onClick: handleOpen,
            getOffsetWidth: handleOffsetWidth,
            children: title,
        });

    return (
        /*#__PURE__*/

        /*#__PURE__*/
        jsxs(Popover, {
            active: Boolean(active),
            activator: popoverActivator,
            preferredAlignment: 'left',
            onClose: handleClose,
            hideOnPrint: true,
            children: [
                /*#__PURE__*/ jsx(ActionList, {
                    items: actions,
                    onActionAnyItem: handleClose,
                }),
                details &&
                    /*#__PURE__*/

                    /*#__PURE__*/
                    jsx('div', {
                        className: styles$T.Details,
                        children: details,
                    }),
            ],
        })
    );
}

const ACTION_SPACING = 8;

function Actions({ actions = [], groups = [] }) {
    const i18n = useI18n();
    const actionsLayoutRef = react.exports.useRef(null);
    const menuGroupWidthRef = react.exports.useRef(0);
    const availableWidthRef = react.exports.useRef(0);
    const actionsAndGroupsLengthRef = react.exports.useRef(0);
    const timesMeasured = react.exports.useRef(0);
    const actionWidthsRef = react.exports.useRef([]);
    const [activeMenuGroup, setActiveMenuGroup] = react.exports.useState(undefined);
    const [measuredActions, setMeasuredActions] = react.exports.useState({
        showable: [],
        rolledUp: [],
    });
    const defaultRollupGroup = {
        title: i18n.translate('Polaris.ActionMenu.Actions.moreActions'),
        actions: [],
    };
    const lastMenuGroup = [...groups].pop();
    const lastMenuGroupWidth = [...actionWidthsRef.current].pop() || 0;
    const handleActionsOffsetWidth = react.exports.useCallback((width) => {
        actionWidthsRef.current = [...actionWidthsRef.current, width];
    }, []);
    const handleMenuGroupToggle = react.exports.useCallback((group) => setActiveMenuGroup(activeMenuGroup ? undefined : group), [activeMenuGroup]);
    const handleMenuGroupClose = react.exports.useCallback(() => setActiveMenuGroup(undefined), []);
    const updateActions = react.exports.useCallback(() => {
        let actionsAndGroups = [...actions, ...groups];

        if (groups.length > 0) {
            // We don't want to include actions from the last group
            // since it is always rendered with its own actions
            actionsAndGroups = [...actionsAndGroups].slice(0, actionsAndGroups.length - 1);
        }

        const showable = actionsAndGroups.slice(0, measuredActions.showable.length);
        const rolledUp = actionsAndGroups.slice(measuredActions.showable.length, actionsAndGroups.length);
        setMeasuredActions({
            showable,
            rolledUp,
        });
    }, [actions, groups, measuredActions.showable.length]);
    const measureActions = react.exports.useCallback(() => {
        if (actionWidthsRef.current.length === 0 || availableWidthRef.current === 0) {
            return;
        }

        const actionsAndGroups = [...actions, ...groups];

        if (actionsAndGroups.length === 1) {
            setMeasuredActions({
                showable: actionsAndGroups,
                rolledUp: [],
            });
            return;
        }

        let currentAvailableWidth = availableWidthRef.current;
        let newShowableActions = [];
        let newRolledUpActions = [];
        actionsAndGroups.forEach((action, index) => {
            const canFitAction = actionWidthsRef.current[index] + menuGroupWidthRef.current + ACTION_SPACING + lastMenuGroupWidth <= currentAvailableWidth;

            if (canFitAction) {
                currentAvailableWidth -= actionWidthsRef.current[index] + ACTION_SPACING * 2;
                newShowableActions = [...newShowableActions, action];
            } else {
                currentAvailableWidth = 0; // Find last group if it exists and always render it as a rolled up action below

                if (action === lastMenuGroup) return;
                newRolledUpActions = [...newRolledUpActions, action];
            }
        });
        setMeasuredActions({
            showable: newShowableActions,
            rolledUp: newRolledUpActions,
        });
        timesMeasured.current += 1;
        actionsAndGroupsLengthRef.current = actionsAndGroups.length;
    }, [actions, groups, lastMenuGroup, lastMenuGroupWidth]);
    const handleResize = react.exports.useMemo(
        () =>
            debounce_1(
                () => {
                    if (!actionsLayoutRef.current) return;
                    availableWidthRef.current = actionsLayoutRef.current.offsetWidth; // Set timesMeasured to 0 to allow re-measuring

                    timesMeasured.current = 0;
                    measureActions();
                },
                50,
                {
                    leading: false,
                    trailing: true,
                }
            ),
        [measureActions]
    );
    react.exports.useEffect(() => {
        if (!actionsLayoutRef.current) {
            return;
        }

        availableWidthRef.current = actionsLayoutRef.current.offsetWidth;

        if (
            // Allow measuring twice
            // This accounts for the initial paint and re-flow
            timesMeasured.current >= 2 &&
            [...actions, ...groups].length === actionsAndGroupsLengthRef.current
        ) {
            updateActions();
            return;
        }

        measureActions();
    }, [actions, groups, measureActions, updateActions]);
    const actionsMarkup = actions.map((action) => {
        if (measuredActions.showable.length > 0 || measuredActions.rolledUp.includes(action)) return null;
        const { content, onAction, ...rest } = action;
        return (
            /*#__PURE__*/

            /*#__PURE__*/
            jsx(SecondaryAction, {
                ...Object.assign(
                    {
                        key: content,
                        onClick: onAction,
                    },
                    rest,
                    {
                        getOffsetWidth: handleActionsOffsetWidth,
                    }
                ),
                children: content,
            })
        );
    });
    const rollUppableActionsMarkup =
        measuredActions.showable.length > 0
            ? measuredActions.showable.map(
                  (action) =>
                      action.content &&
                      /*#__PURE__*/

                      /*#__PURE__*/
                      jsx(SecondaryAction, {
                          ...Object.assign(
                              {
                                  key: action.content,
                              },
                              action,
                              {
                                  getOffsetWidth: handleActionsOffsetWidth,
                              }
                          ),
                          children: action.content,
                      })
              )
            : null;
    const filteredGroups = [...groups, defaultRollupGroup].filter((group) => {
        return groups.length === 0 ? group : group === lastMenuGroup || !measuredActions.rolledUp.some((rolledUpGroup) => isMenuGroup(rolledUpGroup) && rolledUpGroup.title === group.title);
    });
    const groupsMarkup = filteredGroups.map((group) => {
        const { title, actions: groupActions, ...rest } = group;
        const isDefaultGroup = group === defaultRollupGroup;
        const isLastMenuGroup = group === lastMenuGroup;
        const finalRolledUpActions = measuredActions.rolledUp.reduce((memo, action) => {
            memo.push(...(isMenuGroup(action) ? action.actions : [action]));
            return memo;
        }, []);

        if (!isDefaultGroup && !isLastMenuGroup) {
            // Render a normal MenuGroup with just its actions
            return (
                /*#__PURE__*/

                /*#__PURE__*/
                jsx(MenuGroup, {
                    ...Object.assign(
                        {
                            key: title,
                            title: title,
                            active: title === activeMenuGroup,
                            actions: groupActions,
                        },
                        rest,
                        {
                            onOpen: handleMenuGroupToggle,
                            onClose: handleMenuGroupClose,
                            getOffsetWidth: handleActionsOffsetWidth,
                        }
                    ),
                })
            );
        } else if (!isDefaultGroup && isLastMenuGroup) {
            // render the last, rollup group with its actions and finalRolledupActions
            return (
                /*#__PURE__*/

                /*#__PURE__*/
                jsx(MenuGroup, {
                    ...Object.assign(
                        {
                            key: title,
                            title: title,
                            active: title === activeMenuGroup,
                            actions: [...finalRolledUpActions, ...groupActions],
                        },
                        rest,
                        {
                            onOpen: handleMenuGroupToggle,
                            onClose: handleMenuGroupClose,
                            getOffsetWidth: handleActionsOffsetWidth,
                        }
                    ),
                })
            );
        } else if (isDefaultGroup && groups.length === 0 && finalRolledUpActions.length) {
            // Render the default group to rollup into if one does not exist
            return (
                /*#__PURE__*/

                /*#__PURE__*/
                jsx(MenuGroup, {
                    ...Object.assign(
                        {
                            key: title,
                            title: title,
                            active: title === activeMenuGroup,
                            actions: finalRolledUpActions,
                        },
                        rest,
                        {
                            onOpen: handleMenuGroupToggle,
                            onClose: handleMenuGroupClose,
                            getOffsetWidth: handleActionsOffsetWidth,
                        }
                    ),
                })
            );
        }
    });

    const groupedActionsMarkup =
        /*#__PURE__*/

        /*#__PURE__*/
        jsxs(ButtonGroup, {
            spacing: 'extraTight',
            children: [rollUppableActionsMarkup, actionsMarkup, groupsMarkup],
        });

    return (
        /*#__PURE__*/

        /*#__PURE__*/
        jsxs('div', {
            className: styles$U.ActionsLayout,
            ref: actionsLayoutRef,
            children: [
                groupedActionsMarkup,
                /*#__PURE__*/ jsx(EventListener, {
                    event: 'resize',
                    handler: handleResize,
                }),
            ],
        })
    );
}

function isMenuGroup(actionOrMenuGroup) {
    return 'title' in actionOrMenuGroup;
}

function ActionMenu({ actions = [], groups = [], rollup, rollupActionsLabel }) {
    if (actions.length === 0 && groups.length === 0) {
        return null;
    }

    const actionMenuClassNames = classNames(styles$W.ActionMenu, rollup && styles$W.rollup);
    const rollupSections = groups.map((group) => convertGroupToSection(group));
    return /*#__PURE__*/ React.createElement(
        'div',
        {
            className: actionMenuClassNames,
        },
        rollup
            ? /*#__PURE__*/ React.createElement(RollupActions, {
                  accessibilityLabel: rollupActionsLabel,
                  items: actions,
                  sections: rollupSections,
              })
            : /*#__PURE__*/ React.createElement(Actions, {
                  actions: actions,
                  groups: groups,
              })
    );
}
function hasGroupsWithActions(groups = []) {
    return groups.length === 0 ? false : groups.some((group) => group.actions.length > 0);
}

function convertGroupToSection({ title, actions }) {
    return {
        title,
        items: actions,
    };
}

const WithinListboxContext = /*#__PURE__*/ react.exports.createContext(false);

var styles$R = {
    Checkbox: 'Polaris-Checkbox',
    Input: 'Polaris-Checkbox__Input',
    keyFocused: 'Polaris-Checkbox--keyFocused',
    Backdrop: 'Polaris-Checkbox__Backdrop',
    'Input-indeterminate': 'Polaris-Checkbox__Input--indeterminate',
    Icon: 'Polaris-Checkbox__Icon',
    hover: 'Polaris-Checkbox--hover',
    error: 'Polaris-Checkbox--error',
};

var styles$Q = {
    Choice: 'Polaris-Choice',
    labelHidden: 'Polaris-Choice--labelHidden',
    Label: 'Polaris-Choice__Label',
    Control: 'Polaris-Choice__Control',
    disabled: 'Polaris-Choice--disabled',
    Descriptions: 'Polaris-Choice__Descriptions',
    HelpText: 'Polaris-Choice__HelpText',
};

var styles$P = {
    InlineError: 'Polaris-InlineError',
    Icon: 'Polaris-InlineError__Icon',
};

function InlineError({ message, fieldID }) {
    if (!message) {
        return null;
    }

    return /*#__PURE__*/ React.createElement(
        'div',
        {
            id: errorTextID(fieldID),
            className: styles$P.InlineError,
        },
        /*#__PURE__*/ React.createElement(
            'div',
            {
                className: styles$P.Icon,
            },
            /*#__PURE__*/ React.createElement(Icon, {
                source: SvgAlertMinor,
            })
        ),
        message
    );
}
function errorTextID(id) {
    return `${id}Error`;
}

function Choice({ id, label, disabled, error, children, labelHidden, helpText, onClick, onMouseOut, onMouseOver }) {
    const className = classNames(styles$Q.Choice, labelHidden && styles$Q.labelHidden, disabled && styles$Q.disabled);
    const labelMarkup = /*#__PURE__*/ React.createElement(
        'label',
        {
            className: className,
            htmlFor: id,
            onClick: onClick,
            onMouseOver: onMouseOver,
            onMouseOut: onMouseOut,
        },
        /*#__PURE__*/ React.createElement(
            'span',
            {
                className: styles$Q.Control,
            },
            children
        ),
        /*#__PURE__*/ React.createElement(
            'span',
            {
                className: styles$Q.Label,
            },
            label
        )
    );
    const helpTextMarkup = helpText
        ? /*#__PURE__*/ React.createElement(
              'div',
              {
                  className: styles$Q.HelpText,
                  id: helpTextID$1(id),
              },
              helpText
          )
        : null;
    const errorMarkup =
        error &&
        typeof error !== 'boolean' &&
        /*#__PURE__*/ React.createElement(
            'div',
            {
                className: styles$Q.Error,
            },
            /*#__PURE__*/ React.createElement(InlineError, {
                message: error,
                fieldID: id,
            })
        );
    const descriptionMarkup =
        helpTextMarkup || errorMarkup
            ? /*#__PURE__*/ React.createElement(
                  'div',
                  {
                      className: styles$Q.Descriptions,
                  },
                  errorMarkup,
                  helpTextMarkup
              )
            : null;
    return descriptionMarkup ? /*#__PURE__*/ React.createElement('div', null, labelMarkup, descriptionMarkup) : labelMarkup;
}
function helpTextID$1(id) {
    return `${id}HelpText`;
}

const Checkbox$1 = /*#__PURE__*/ react.exports.forwardRef(function Checkbox({ ariaControls, ariaDescribedBy: ariaDescribedByProp, label, labelHidden, checked = false, helpText, disabled, id: idProp, name, value, error, onChange, onFocus, onBlur }, ref) {
    const inputNode = react.exports.useRef(null);
    const id = useUniqueId('Checkbox', idProp);
    const { value: mouseOver, setTrue: handleMouseOver, setFalse: handleMouseOut } = useToggle(false);
    const [keyFocused, setKeyFocused] = react.exports.useState(false);
    const isWithinListbox = react.exports.useContext(WithinListboxContext);
    react.exports.useImperativeHandle(ref, () => ({
        focus: () => {
            if (inputNode.current) {
                inputNode.current.focus();
            }
        },
    }));

    const handleBlur = () => {
        onBlur && onBlur();
        setKeyFocused(false);
    };

    const handleKeyUp = (event) => {
        const { keyCode } = event;

        if (keyCode === Key.Space || keyCode === Key.Tab) {
            !keyFocused && setKeyFocused(true);
        }
    };

    const handleOnClick = () => {
        if (onChange == null || inputNode.current == null || disabled) {
            return;
        }

        onChange(inputNode.current.checked, id);
        inputNode.current.focus();
    };

    const describedBy = [];

    if (error && typeof error !== 'boolean') {
        describedBy.push(errorTextID(id));
    }

    if (helpText) {
        describedBy.push(helpTextID$1(id));
    }

    if (ariaDescribedByProp) {
        describedBy.push(ariaDescribedByProp);
    }

    const ariaDescribedBy = describedBy.length ? describedBy.join(' ') : undefined;
    const wrapperClassName = classNames(styles$R.Checkbox, error && styles$R.error);
    const backdropClassName = classNames(styles$R.Backdrop, mouseOver && styles$R.hover);
    const isIndeterminate = checked === 'indeterminate';
    const isChecked = !isIndeterminate && Boolean(checked);
    const indeterminateAttributes = isIndeterminate
        ? {
              indeterminate: 'true',
              'aria-checked': 'mixed',
          }
        : {
              'aria-checked': isChecked,
          };
    const iconSource = isIndeterminate ? SvgMinusMinor : SvgTickSmallMinor;
    const inputClassName = classNames(styles$R.Input, isIndeterminate && styles$R['Input-indeterminate'], keyFocused && styles$R.keyFocused);
    return (
        /*#__PURE__*/

        /*#__PURE__*/
        jsx(Choice, {
            id: id,
            label: label,
            labelHidden: labelHidden,
            helpText: helpText,
            error: error,
            disabled: disabled,
            onMouseOver: handleMouseOver,
            onMouseOut: handleMouseOut,
            children: /*#__PURE__*/ jsxs('span', {
                className: wrapperClassName,
                children: [
                    /*#__PURE__*/ jsx('input', {
                        ...Object.assign(
                            {
                                ref: inputNode,
                                id: id,
                                name: name,
                                value: value,
                                type: 'checkbox',
                                checked: isChecked,
                                disabled: disabled,
                                className: inputClassName,
                                onBlur: handleBlur,
                                onChange: noop$9,
                                onClick: handleOnClick,
                                onFocus: onFocus,
                                onKeyUp: handleKeyUp,
                                'aria-invalid': error != null,
                                'aria-controls': ariaControls,
                                'aria-describedby': ariaDescribedBy,
                                role: isWithinListbox ? 'presentation' : 'checkbox',
                            },
                            indeterminateAttributes
                        ),
                    }),
                    /*#__PURE__*/ jsx('span', {
                        className: backdropClassName,
                        onClick: stopPropagation$2,
                        onKeyUp: stopPropagation$2,
                    }),
                    /*#__PURE__*/ jsx('span', {
                        className: styles$R.Icon,
                        children: /*#__PURE__*/ jsx(Icon, {
                            source: iconSource,
                        }),
                    }),
                ],
            }),
        })
    );
});

function noop$9() {}

function stopPropagation$2(event) {
    event.stopPropagation();
}

var styles$O = {
    TextField: 'Polaris-TextField',
    multiline: 'Polaris-TextField--multiline',
    Input: 'Polaris-TextField__Input',
    hasValue: 'Polaris-TextField--hasValue',
    focus: 'Polaris-TextField--focus',
    Backdrop: 'Polaris-TextField__Backdrop',
    error: 'Polaris-TextField--error',
    readOnly: 'Polaris-TextField--readOnly',
    disabled: 'Polaris-TextField--disabled',
    Prefix: 'Polaris-TextField__Prefix',
    'Input-hasClearButton': 'Polaris-TextField__Input--hasClearButton',
    'Input-suffixed': 'Polaris-TextField__Input--suffixed',
    'Input-alignRight': 'Polaris-TextField__Input--alignRight',
    'Input-alignLeft': 'Polaris-TextField__Input--alignLeft',
    'Input-alignCenter': 'Polaris-TextField__Input--alignCenter',
    Suffix: 'Polaris-TextField__Suffix',
    CharacterCount: 'Polaris-TextField__CharacterCount',
    AlignFieldBottom: 'Polaris-TextField__AlignFieldBottom',
    ClearButton: 'Polaris-TextField__ClearButton',
    Hidden: 'Polaris-TextField__Hidden',
    Spinner: 'Polaris-TextField__Spinner',
    SpinnerIcon: 'Polaris-TextField__SpinnerIcon',
    Resizer: 'Polaris-TextField__Resizer',
    DummyInput: 'Polaris-TextField__DummyInput',
    Segment: 'Polaris-TextField__Segment',
    monospaced: 'Polaris-TextField--monospaced',
};

var styles$N = {
    hidden: 'Polaris-Labelled--hidden',
    LabelWrapper: 'Polaris-Labelled__LabelWrapper',
    HelpText: 'Polaris-Labelled__HelpText',
    Error: 'Polaris-Labelled__Error',
    Action: 'Polaris-Labelled__Action',
};

var styles$M = {
    Label: 'Polaris-Label',
    hidden: 'Polaris-Label--hidden',
    Text: 'Polaris-Label__Text',
    RequiredIndicator: 'Polaris-Label__RequiredIndicator',
};

function labelID(id) {
    return `${id}Label`;
}
function Label({ children, id, hidden, requiredIndicator }) {
    const className = classNames(styles$M.Label, hidden && styles$M.hidden);
    return /*#__PURE__*/ React.createElement(
        'div',
        {
            className: className,
        },
        /*#__PURE__*/ React.createElement(
            'label',
            {
                id: labelID(id),
                htmlFor: id,
                className: classNames(styles$M.Text, requiredIndicator && styles$M.RequiredIndicator),
            },
            children
        )
    );
}

function Labelled({ id, label, error, action, helpText, children, labelHidden, requiredIndicator, ...rest }) {
    const className = classNames(labelHidden && styles$N.hidden);
    const actionMarkup = action
        ? /*#__PURE__*/ React.createElement(
              'div',
              {
                  className: styles$N.Action,
              },
              buttonFrom(action, {
                  plain: true,
              })
          )
        : null;
    const helpTextMarkup = helpText
        ? /*#__PURE__*/ React.createElement(
              'div',
              {
                  className: styles$N.HelpText,
                  id: helpTextID(id),
              },
              helpText
          )
        : null;
    const errorMarkup =
        error &&
        typeof error !== 'boolean' &&
        /*#__PURE__*/ React.createElement(
            'div',
            {
                className: styles$N.Error,
            },
            /*#__PURE__*/ React.createElement(InlineError, {
                message: error,
                fieldID: id,
            })
        );
    const labelMarkup = label
        ? /*#__PURE__*/ React.createElement(
              'div',
              {
                  className: styles$N.LabelWrapper,
              },
              /*#__PURE__*/ React.createElement(
                  Label,
                  Object.assign(
                      {
                          id: id,
                          requiredIndicator: requiredIndicator,
                      },
                      rest,
                      {
                          hidden: false,
                      }
                  ),
                  label
              ),
              actionMarkup
          )
        : null;
    return /*#__PURE__*/ React.createElement(
        'div',
        {
            className: className,
        },
        labelMarkup,
        children,
        errorMarkup,
        helpTextMarkup
    );
}
function helpTextID(id) {
    return `${id}HelpText`;
}

var styles$L = {
    Connected: 'Polaris-Connected',
    Item: 'Polaris-Connected__Item',
    'Item-primary': 'Polaris-Connected__Item--primary',
    'Item-focused': 'Polaris-Connected__Item--focused',
};

function Item$3({ children, position }) {
    const { value: focused, setTrue: forceTrueFocused, setFalse: forceFalseFocused } = useToggle(false);
    const className = classNames(styles$L.Item, focused && styles$L['Item-focused'], position === 'primary' ? styles$L['Item-primary'] : styles$L['Item-connection']);
    return /*#__PURE__*/ React.createElement(
        'div',
        {
            onBlur: forceFalseFocused,
            onFocus: forceTrueFocused,
            className: className,
        },
        children
    );
}

function Connected({ children, left, right }) {
    const leftConnectionMarkup = left
        ? /*#__PURE__*/ React.createElement(
              Item$3,
              {
                  position: 'left',
              },
              left
          )
        : null;
    const rightConnectionMarkup = right
        ? /*#__PURE__*/ React.createElement(
              Item$3,
              {
                  position: 'right',
              },
              right
          )
        : null;
    return /*#__PURE__*/ React.createElement(
        'div',
        {
            className: styles$L.Connected,
        },
        leftConnectionMarkup,
        /*#__PURE__*/ React.createElement(
            Item$3,
            {
                position: 'primary',
            },
            children
        ),
        rightConnectionMarkup
    );
}

function Spinner({ onChange, onClick, onMouseDown, onMouseUp }) {
    function handleStep(step) {
        return () => onChange(step);
    }

    function handleMouseDown(onChange) {
        return (event) => {
            if (event.button !== 0) return;
            onMouseDown(onChange);
        };
    }

    return /*#__PURE__*/ React.createElement(
        'div',
        {
            className: styles$O.Spinner,
            onClick: onClick,
            'aria-hidden': true,
        },
        /*#__PURE__*/ React.createElement(
            'div',
            {
                role: 'button',
                className: styles$O.Segment,
                tabIndex: -1,
                onClick: handleStep(1),
                onMouseDown: handleMouseDown(handleStep(1)),
                onMouseUp: onMouseUp,
            },
            /*#__PURE__*/ React.createElement(
                'div',
                {
                    className: styles$O.SpinnerIcon,
                },
                /*#__PURE__*/ React.createElement(Icon, {
                    source: SvgCaretUpMinor,
                })
            )
        ),
        /*#__PURE__*/ React.createElement(
            'div',
            {
                role: 'button',
                className: styles$O.Segment,
                tabIndex: -1,
                onClick: handleStep(-1),
                onMouseDown: handleMouseDown(handleStep(-1)),
                onMouseUp: onMouseUp,
            },
            /*#__PURE__*/ React.createElement(
                'div',
                {
                    className: styles$O.SpinnerIcon,
                },
                /*#__PURE__*/ React.createElement(Icon, {
                    source: SvgCaretDownMinor,
                })
            )
        )
    );
}

function Resizer({ contents, currentHeight: currentHeightProp = null, minimumLines, onHeightChange }) {
    const contentNode = react.exports.useRef(null);
    const minimumLinesNode = react.exports.useRef(null);
    const animationFrame = react.exports.useRef();
    const currentHeight = react.exports.useRef(currentHeightProp);

    if (currentHeightProp !== currentHeight.current) {
        currentHeight.current = currentHeightProp;
    }

    react.exports.useEffect(() => {
        return () => {
            if (animationFrame.current) {
                cancelAnimationFrame(animationFrame.current);
            }
        };
    }, []);
    const minimumLinesMarkup = minimumLines
        ? /*#__PURE__*/

          /*#__PURE__*/
          jsx('div', {
              ref: minimumLinesNode,
              className: styles$O.DummyInput,
              dangerouslySetInnerHTML: {
                  __html: getContentsForMinimumLines(minimumLines),
              },
          })
        : null;
    const handleHeightCheck = react.exports.useCallback(() => {
        if (animationFrame.current) {
            cancelAnimationFrame(animationFrame.current);
        }

        animationFrame.current = requestAnimationFrame(() => {
            if (!contentNode.current || !minimumLinesNode.current) {
                return;
            }

            const newHeight = Math.max(contentNode.current.offsetHeight, minimumLinesNode.current.offsetHeight);

            if (newHeight !== currentHeight.current) {
                onHeightChange(newHeight);
            }
        });
    }, [onHeightChange]);
    react.exports.useLayoutEffect(() => {
        handleHeightCheck();
    });
    return (
        /*#__PURE__*/

        /*#__PURE__*/
        jsxs('div', {
            'aria-hidden': true,
            className: styles$O.Resizer,
            children: [
                /*#__PURE__*/ jsx(EventListener, {
                    event: 'resize',
                    handler: handleHeightCheck,
                }),
                /*#__PURE__*/ jsx('div', {
                    ref: contentNode,
                    className: styles$O.DummyInput,
                    dangerouslySetInnerHTML: {
                        __html: getFinalContents(contents),
                    },
                }),
                minimumLinesMarkup,
            ],
        })
    );
}

const ENTITIES_TO_REPLACE = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '\n': '<br>',
    '\r': '',
};
const REPLACE_REGEX = new RegExp(`[${Object.keys(ENTITIES_TO_REPLACE).join()}]`, 'g');

function replaceEntity(entity) {
    return ENTITIES_TO_REPLACE[entity];
}

function getContentsForMinimumLines(minimumLines) {
    let content = '';

    for (let line = 0; line < minimumLines; line++) {
        content += '<br>';
    }

    return content;
}

function getFinalContents(contents) {
    return contents ? `${contents.replace(REPLACE_REGEX, replaceEntity)}<br>` : '<br>';
}

function TextField({
    prefix,
    suffix,
    placeholder,
    value,
    helpText,
    label,
    labelAction,
    labelHidden,
    disabled,
    clearButton,
    readOnly,
    autoFocus,
    focused,
    multiline,
    error,
    connectedRight,
    connectedLeft,
    type,
    name,
    id: idProp,
    role,
    step,
    autoComplete,
    max,
    maxLength,
    maxHeight,
    min,
    minLength,
    pattern,
    inputMode,
    spellCheck,
    ariaOwns,
    ariaControls,
    ariaExpanded,
    ariaActiveDescendant,
    ariaAutocomplete,
    showCharacterCount,
    align,
    onClearButtonClick,
    onChange,
    onFocus,
    onBlur,
    requiredIndicator,
    monospaced,
    selectTextOnFocus,
}) {
    const i18n = useI18n();
    const [height, setHeight] = react.exports.useState(null);
    const [focus, setFocus] = react.exports.useState(Boolean(focused));
    const isAfterInitial = useIsAfterInitialMount();
    const id = useUniqueId('TextField', idProp);
    const inputRef = react.exports.useRef(null);
    const prefixRef = react.exports.useRef(null);
    const suffixRef = react.exports.useRef(null);
    const buttonPressTimer = react.exports.useRef();
    react.exports.useEffect(() => {
        const input = inputRef.current;
        if (!input || focused === undefined) return;
        focused ? input.focus() : input.blur();
    }, [focused]); // Use a typeof check here as Typescript mostly protects us from non-stringy
    // values but overzealous usage of `any` in consuming apps means people have
    // been known to pass a number in, so make it clear that doesn't work.

    const normalizedValue = typeof value === 'string' ? value : '';
    const normalizedStep = step != null ? step : 1;
    const normalizedMax = max != null ? max : Infinity;
    const normalizedMin = min != null ? min : -Infinity;
    const className = classNames(styles$O.TextField, Boolean(normalizedValue) && styles$O.hasValue, disabled && styles$O.disabled, readOnly && styles$O.readOnly, error && styles$O.error, multiline && styles$O.multiline, focus && styles$O.focus);
    const inputType = type === 'currency' ? 'text' : type;
    const prefixMarkup = prefix
        ? /*#__PURE__*/

          /*#__PURE__*/
          jsx('div', {
              className: styles$O.Prefix,
              id: `${id}Prefix`,
              ref: prefixRef,
              children: prefix,
          })
        : null;
    const suffixMarkup = suffix
        ? /*#__PURE__*/

          /*#__PURE__*/
          jsx('div', {
              className: styles$O.Suffix,
              id: `${id}Suffix`,
              ref: suffixRef,
              children: suffix,
          })
        : null;
    let characterCountMarkup = null;

    if (showCharacterCount) {
        const characterCount = normalizedValue.length;
        const characterCountLabel = maxLength
            ? i18n.translate('Polaris.TextField.characterCountWithMaxLength', {
                  count: characterCount,
                  limit: maxLength,
              })
            : i18n.translate('Polaris.TextField.characterCount', {
                  count: characterCount,
              });
        const characterCountClassName = classNames(styles$O.CharacterCount, multiline && styles$O.AlignFieldBottom);
        const characterCountText = !maxLength ? characterCount : `${characterCount}/${maxLength}`;
        characterCountMarkup =
            /*#__PURE__*/

            /*#__PURE__*/
            jsx('div', {
                id: `${id}CharacterCounter`,
                className: characterCountClassName,
                'aria-label': characterCountLabel,
                'aria-live': focus ? 'polite' : 'off',
                'aria-atomic': 'true',
                children: characterCountText,
            });
    }

    const clearButtonVisible = normalizedValue !== '';
    const clearButtonClassNames = classNames(styles$O.ClearButton, !clearButtonVisible && styles$O.Hidden);
    const clearButtonMarkup = clearButton
        ? /*#__PURE__*/

          /*#__PURE__*/
          jsxs('button', {
              type: 'button',
              className: clearButtonClassNames,
              onClick: handleClearButtonPress,
              disabled: disabled,
              children: [
                  /*#__PURE__*/ jsx(VisuallyHidden, {
                      children: i18n.translate('Polaris.Common.clear'),
                  }),
                  /*#__PURE__*/ jsx(Icon, {
                      source: SvgCircleCancelMinor,
                      color: 'base',
                  }),
              ],
          })
        : null;
    const handleNumberChange = react.exports.useCallback(
        (steps) => {
            if (onChange == null) {
                return;
            } // Returns the length of decimal places in a number

            const dpl = (num) => (num.toString().split('.')[1] || []).length;

            const numericValue = value ? parseFloat(value) : 0;

            if (isNaN(numericValue)) {
                return;
            } // Making sure the new value has the same length of decimal places as the
            // step / value has.

            const decimalPlaces = Math.max(dpl(numericValue), dpl(normalizedStep));
            const newValue = Math.min(Number(normalizedMax), Math.max(numericValue + steps * normalizedStep, Number(normalizedMin)));
            onChange(String(newValue.toFixed(decimalPlaces)), id);
        },
        [id, normalizedMax, normalizedMin, onChange, normalizedStep, value]
    );
    const handleButtonRelease = react.exports.useCallback(() => {
        clearTimeout(buttonPressTimer.current);
    }, []);
    const handleButtonPress = react.exports.useCallback(
        (onChange) => {
            const minInterval = 50;
            const decrementBy = 10;
            let interval = 200;

            const onChangeInterval = () => {
                if (interval > minInterval) interval -= decrementBy;
                onChange(0);
                buttonPressTimer.current = window.setTimeout(onChangeInterval, interval);
            };

            buttonPressTimer.current = window.setTimeout(onChangeInterval, interval);
            document.addEventListener('mouseup', handleButtonRelease, {
                once: true,
            });
        },
        [handleButtonRelease]
    );
    const spinnerMarkup =
        type === 'number' && step !== 0 && !disabled && !readOnly
            ? /*#__PURE__*/

              /*#__PURE__*/
              jsx(Spinner, {
                  onChange: handleNumberChange,
                  onMouseDown: handleButtonPress,
                  onMouseUp: handleButtonRelease,
              })
            : null;
    const style =
        multiline && height
            ? {
                  height,
                  maxHeight,
              }
            : null;
    const handleExpandingResize = react.exports.useCallback((height) => {
        setHeight(height);
    }, []);
    const resizer =
        multiline && isAfterInitial
            ? /*#__PURE__*/

              /*#__PURE__*/
              jsx(Resizer, {
                  contents: normalizedValue || placeholder,
                  currentHeight: height,
                  minimumLines: typeof multiline === 'number' ? multiline : 1,
                  onHeightChange: handleExpandingResize,
              })
            : null;
    const describedBy = [];

    if (error) {
        describedBy.push(`${id}Error`);
    }

    if (helpText) {
        describedBy.push(helpTextID(id));
    }

    if (showCharacterCount) {
        describedBy.push(`${id}CharacterCounter`);
    }

    const labelledBy = [];

    if (prefix) {
        labelledBy.push(`${id}Prefix`);
    }

    if (suffix) {
        labelledBy.push(`${id}Suffix`);
    }

    labelledBy.unshift(labelID(id));
    const inputClassName = classNames(styles$O.Input, align && styles$O[variationName('Input-align', align)], suffix && styles$O['Input-suffixed'], clearButton && styles$O['Input-hasClearButton'], monospaced && styles$O.monospaced);

    const handleOnFocus = (event) => {
        if (selectTextOnFocus) {
            var _inputRef$current;

            (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.select();
        }

        if (onFocus) {
            onFocus(event);
        }
    };

    const input = /*#__PURE__*/ react.exports.createElement(multiline ? 'textarea' : 'input', {
        name,
        id,
        disabled,
        readOnly,
        role,
        autoFocus,
        value: normalizedValue,
        placeholder,
        onFocus: handleOnFocus,
        onBlur,
        onKeyPress: handleKeyPress,
        style,
        autoComplete,
        className: inputClassName,
        onChange: handleChange,
        ref: inputRef,
        min,
        max,
        step,
        minLength,
        maxLength,
        spellCheck,
        pattern,
        inputMode,
        type: inputType,
        rows: getRows(multiline),
        'aria-describedby': describedBy.length ? describedBy.join(' ') : undefined,
        'aria-labelledby': labelledBy.join(' '),
        'aria-invalid': Boolean(error),
        'aria-owns': ariaOwns,
        'aria-activedescendant': ariaActiveDescendant,
        'aria-autocomplete': ariaAutocomplete,
        'aria-controls': ariaControls,
        'aria-expanded': ariaExpanded,
        'aria-required': requiredIndicator,
        ...normalizeAriaMultiline(multiline),
    });
    const backdropClassName = classNames(styles$O.Backdrop, connectedLeft && styles$O['Backdrop-connectedLeft'], connectedRight && styles$O['Backdrop-connectedRight']);
    return (
        /*#__PURE__*/

        /*#__PURE__*/
        jsx(Labelled, {
            label: label,
            id: id,
            error: error,
            action: labelAction,
            labelHidden: labelHidden,
            helpText: helpText,
            requiredIndicator: requiredIndicator,
            children: /*#__PURE__*/ jsx(Connected, {
                left: connectedLeft,
                right: connectedRight,
                children: /*#__PURE__*/ jsxs('div', {
                    className: className,
                    onFocus: handleFocus,
                    onBlur: handleBlur,
                    onClick: handleClick,
                    children: [
                        prefixMarkup,
                        input,
                        suffixMarkup,
                        characterCountMarkup,
                        clearButtonMarkup,
                        spinnerMarkup,
                        /*#__PURE__*/ jsx('div', {
                            className: backdropClassName,
                        }),
                        resizer,
                    ],
                }),
            }),
        })
    );

    function handleClearButtonPress() {
        onClearButtonClick && onClearButtonClick(id);
    }

    function handleKeyPress(event) {
        const { key, which } = event;
        const numbersSpec = /[\d.eE+-]$/;

        if (type !== 'number' || which === Key.Enter || numbersSpec.test(key)) {
            return;
        }

        event.preventDefault();
    }

    function containsAffix(target) {
        return target instanceof HTMLElement && ((prefixRef.current && prefixRef.current.contains(target)) || (suffixRef.current && suffixRef.current.contains(target)));
    }

    function handleChange(event) {
        onChange && onChange(event.currentTarget.value, id);
    }

    function handleFocus({ target }) {
        if (containsAffix(target)) {
            return;
        }

        setFocus(true);
    }

    function handleBlur() {
        setFocus(false);
    }

    function handleClick({ target }) {
        var _inputRef$current2;

        if (containsAffix(target) || focus) {
            return;
        }

        (_inputRef$current2 = inputRef.current) === null || _inputRef$current2 === void 0 ? void 0 : _inputRef$current2.focus();
    }
}

function normalizeAriaMultiline(multiline) {
    if (!multiline) return undefined;
    return Boolean(multiline) || multiline > 0
        ? {
              'aria-multiline': true,
          }
        : undefined;
}

function getRows(multiline) {
    if (!multiline) return undefined;
    return typeof multiline === 'number' ? multiline : 1;
}

var styles$K = {
    Backdrop: 'Polaris-Backdrop',
    'fade-in': 'Polaris-Backdrop__fade--in',
    transparent: 'Polaris-Backdrop--transparent',
    belowNavigation: 'Polaris-Backdrop--belowNavigation',
};

function useScrollLockManager() {
    const scrollLockManager = react.exports.useContext(ScrollLockManagerContext);

    if (!scrollLockManager) {
        throw new MissingAppProviderError('No ScrollLockManager was provided.');
    }

    return scrollLockManager;
}

// Even though this has no args, reference ScrollLockProps so the prop explorer
// in the styleguide works without warnings about unfound props
function ScrollLock(_) {
    const scrollLockManager = useScrollLockManager();
    react.exports.useEffect(() => {
        scrollLockManager.registerScrollLock();
        return () => {
            scrollLockManager.unregisterScrollLock();
        };
    }, [scrollLockManager]);
    return null;
}

function Backdrop(props) {
    const { onClick, onTouchStart, belowNavigation, transparent } = props;
    const className = classNames(styles$K.Backdrop, belowNavigation && styles$K.belowNavigation, transparent && styles$K.transparent);
    return /*#__PURE__*/ React.createElement(
        React.Fragment,
        null,
        /*#__PURE__*/ React.createElement(ScrollLock, null),
        /*#__PURE__*/ React.createElement('div', {
            className: className,
            onClick: onClick,
            onTouchStart: onTouchStart,
        })
    );
}

const BannerContext = /*#__PURE__*/ react.exports.createContext(false);

var styles$J = {
    Banner: 'Polaris-Banner',
    statusCritical: 'Polaris-Banner--statusCritical',
    PrimaryAction: 'Polaris-Banner__PrimaryAction',
    Button: 'Polaris-Banner__Button',
    statusWarning: 'Polaris-Banner--statusWarning',
    statusInfo: 'Polaris-Banner--statusInfo',
    statusSuccess: 'Polaris-Banner--statusSuccess',
    ContentWrapper: 'Polaris-Banner__ContentWrapper',
    withinContentContainer: 'Polaris-Banner--withinContentContainer',
    Dismiss: 'Polaris-Banner__Dismiss',
    Ribbon: 'Polaris-Banner__Ribbon',
    keyFocused: 'Polaris-Banner--keyFocused',
    Actions: 'Polaris-Banner__Actions',
    withinPage: 'Polaris-Banner--withinPage',
    hasDismiss: 'Polaris-Banner--hasDismiss',
    Heading: 'Polaris-Banner__Heading',
    Content: 'Polaris-Banner__Content',
    SecondaryAction: 'Polaris-Banner__SecondaryAction',
    Text: 'Polaris-Banner__Text',
    pressed: 'Polaris-Banner--pressed',
    loading: 'Polaris-Banner--loading',
    Spinner: 'Polaris-Banner__Spinner',
};

function unstyledButtonFrom({ content, onAction, ...action }, overrides, key) {
    return /*#__PURE__*/ React.createElement(
        UnstyledButton,
        Object.assign(
            {
                key: key,
                onClick: onAction,
            },
            action,
            overrides
        ),
        content
    );
}

const Banner = /*#__PURE__*/ react.exports.forwardRef(function Banner({ icon, action, secondaryAction, title, children, status, onDismiss, stopAnnouncements }, bannerRef) {
    const withinContentContainer = react.exports.useContext(WithinContentContext);
    const id = useUniqueId('Banner');
    const i18n = useI18n();
    const { wrapperRef, handleKeyUp, handleBlur, handleMouseUp, shouldShowFocus } = useBannerFocus(bannerRef);
    const { defaultIcon, iconColor, ariaRoleType } = useBannerAttributes(status);
    const iconName = icon || defaultIcon;
    const className = classNames(styles$J.Banner, status && styles$J[variationName('status', status)], onDismiss && styles$J.hasDismiss, shouldShowFocus && styles$J.keyFocused, withinContentContainer ? styles$J.withinContentContainer : styles$J.withinPage);
    let headingMarkup = null;
    let headingID;

    if (title) {
        headingID = `${id}Heading`;
        headingMarkup =
            /*#__PURE__*/

            /*#__PURE__*/
            jsx('div', {
                className: styles$J.Heading,
                id: headingID,
                children: /*#__PURE__*/ jsx(Heading, {
                    element: 'p',
                    children: title,
                }),
            });
    }

    const spinnerMarkup =
        action !== null && action !== void 0 && action.loading
            ? /*#__PURE__*/

              /*#__PURE__*/
              jsxs('button', {
                  disabled: true,
                  'aria-busy': true,
                  className: classNames(styles$J.Button, styles$J.loading),
                  children: [
                      /*#__PURE__*/ jsx('span', {
                          className: styles$J.Spinner,
                          children: /*#__PURE__*/ jsx(Spinner$1, {
                              size: 'small',
                              accessibilityLabel: i18n.translate('Polaris.Button.spinnerAccessibilityLabel'),
                          }),
                      }),
                      action.content,
                  ],
              })
            : null;
    const primaryActionMarkup = action
        ? /*#__PURE__*/

          /*#__PURE__*/
          jsx('div', {
              className: styles$J.PrimaryAction,
              children: action.loading
                  ? spinnerMarkup
                  : unstyledButtonFrom(action, {
                        className: styles$J.Button,
                    }),
          })
        : null;
    const secondaryActionMarkup = secondaryAction
        ? /*#__PURE__*/

          /*#__PURE__*/
          jsx(SecondaryActionFrom, {
              action: secondaryAction,
          })
        : null;
    const actionMarkup =
        action || secondaryAction
            ? /*#__PURE__*/

              /*#__PURE__*/
              jsx('div', {
                  className: styles$J.Actions,
                  children: /*#__PURE__*/ jsxs(ButtonGroup, {
                      children: [primaryActionMarkup, secondaryActionMarkup],
                  }),
              })
            : null;
    let contentMarkup = null;
    let contentID;

    if (children || actionMarkup) {
        contentID = `${id}Content`;
        contentMarkup =
            /*#__PURE__*/

            /*#__PURE__*/
            jsxs('div', {
                className: styles$J.Content,
                id: contentID,
                children: [children, actionMarkup],
            });
    }

    const dismissButton =
        onDismiss &&
        /*#__PURE__*/

        /*#__PURE__*/
        jsx('div', {
            className: styles$J.Dismiss,
            children: /*#__PURE__*/ jsx(Button, {
                plain: true,
                icon: SvgCancelSmallMinor,
                onClick: onDismiss,
                accessibilityLabel: 'Dismiss notification',
            }),
        });

    return (
        /*#__PURE__*/

        /*#__PURE__*/
        jsx(BannerContext.Provider, {
            value: true,
            children: /*#__PURE__*/ jsxs('div', {
                className: className,
                tabIndex: 0,
                ref: wrapperRef,
                role: ariaRoleType,
                'aria-live': stopAnnouncements ? 'off' : 'polite',
                onMouseUp: handleMouseUp,
                onKeyUp: handleKeyUp,
                onBlur: handleBlur,
                'aria-labelledby': headingID,
                'aria-describedby': contentID,
                children: [
                    dismissButton,
                    /*#__PURE__*/ jsx('div', {
                        className: styles$J.Ribbon,
                        children: /*#__PURE__*/ jsx(Icon, {
                            source: iconName,
                            color: iconColor,
                        }),
                    }),
                    /*#__PURE__*/ jsxs('div', {
                        className: styles$J.ContentWrapper,
                        children: [headingMarkup, contentMarkup],
                    }),
                ],
            }),
        })
    );
});

function SecondaryActionFrom({ action }) {
    if (action.url) {
        return (
            /*#__PURE__*/

            /*#__PURE__*/
            jsx(UnstyledLink, {
                className: styles$J.SecondaryAction,
                url: action.url,
                external: action.external,
                children: /*#__PURE__*/ jsx('span', {
                    className: styles$J.Text,
                    children: action.content,
                }),
            })
        );
    }

    return (
        /*#__PURE__*/

        /*#__PURE__*/
        jsx(UnstyledButton, {
            className: styles$J.SecondaryAction,
            onClick: action.onAction,
            children: /*#__PURE__*/ jsx('span', {
                className: styles$J.Text,
                children: action.content,
            }),
        })
    );
}

function useBannerAttributes(status) {
    switch (status) {
        case 'success':
            return {
                defaultIcon: SvgCircleTickMajor,
                iconColor: 'success',
                ariaRoleType: 'status',
            };

        case 'info':
            return {
                defaultIcon: SvgCircleInformationMajor,
                iconColor: 'highlight',
                ariaRoleType: 'status',
            };

        case 'warning':
            return {
                defaultIcon: SvgCircleAlertMajor,
                iconColor: 'warning',
                ariaRoleType: 'alert',
            };

        case 'critical':
            return {
                defaultIcon: SvgDiamondAlertMajor,
                iconColor: 'critical',
                ariaRoleType: 'alert',
            };

        default:
            return {
                defaultIcon: SvgCircleInformationMajor,
                iconColor: 'base',
                ariaRoleType: 'status',
            };
    }
}

function useBannerFocus(bannerRef) {
    const wrapperRef = react.exports.useRef(null);
    const [shouldShowFocus, setShouldShowFocus] = react.exports.useState(false);
    react.exports.useImperativeHandle(
        bannerRef,
        () => ({
            focus: () => {
                var _wrapperRef$current;

                (_wrapperRef$current = wrapperRef.current) === null || _wrapperRef$current === void 0 ? void 0 : _wrapperRef$current.focus();
                setShouldShowFocus(true);
            },
        }),
        []
    );

    const handleKeyUp = (event) => {
        if (event.target === wrapperRef.current) {
            setShouldShowFocus(true);
        }
    };

    const handleBlur = () => setShouldShowFocus(false);

    const handleMouseUp = (event) => {
        event.currentTarget.blur();
        setShouldShowFocus(false);
    };

    return {
        wrapperRef,
        handleKeyUp,
        handleBlur,
        handleMouseUp,
        shouldShowFocus,
    };
}

var styles$I = {
    Breadcrumb: 'Polaris-Breadcrumbs__Breadcrumb',
    Icon: 'Polaris-Breadcrumbs__Icon',
    Content: 'Polaris-Breadcrumbs__Content',
};

function Breadcrumbs({ breadcrumbs }) {
    const breadcrumb = breadcrumbs[breadcrumbs.length - 1];

    if (breadcrumb == null) {
        return null;
    }

    const { content } = breadcrumb;
    const contentMarkup = /*#__PURE__*/ React.createElement(
        React.Fragment,
        null,
        /*#__PURE__*/ React.createElement(
            'span',
            {
                className: styles$I.Icon,
            },
            /*#__PURE__*/ React.createElement(Icon, {
                source: SvgArrowLeftMinor,
            })
        ),
        /*#__PURE__*/ React.createElement(VisuallyHidden, null, content)
    );
    const breadcrumbMarkup =
        'url' in breadcrumb
            ? /*#__PURE__*/ React.createElement(
                  UnstyledLink,
                  {
                      key: content,
                      url: breadcrumb.url,
                      className: styles$I.Breadcrumb,
                      onMouseUp: handleMouseUpByBlurring,
                      'aria-label': breadcrumb.accessibilityLabel,
                  },
                  contentMarkup
              )
            : /*#__PURE__*/ React.createElement(
                  'button',
                  {
                      key: content,
                      className: styles$I.Breadcrumb,
                      onClick: breadcrumb.onAction,
                      onMouseUp: handleMouseUpByBlurring,
                      type: 'button',
                      'aria-label': breadcrumb.accessibilityLabel,
                  },
                  contentMarkup
              );
    return /*#__PURE__*/ React.createElement(
        'nav',
        {
            role: 'navigation',
        },
        breadcrumbMarkup
    );
}

function _extends() {
    _extends =
        Object.assign ||
        function (target) {
            for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i];

                for (var key in source) {
                    if (Object.prototype.hasOwnProperty.call(source, key)) {
                        target[key] = source[key];
                    }
                }
            }

            return target;
        };

    return _extends.apply(this, arguments);
}

function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;

    for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }

    return target;
}

function _setPrototypeOf(o, p) {
    _setPrototypeOf =
        Object.setPrototypeOf ||
        function _setPrototypeOf(o, p) {
            o.__proto__ = p;
            return o;
        };

    return _setPrototypeOf(o, p);
}

function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    _setPrototypeOf(subClass, superClass);
}

/**
 * Checks if a given element has a CSS class.
 *
 * @param element the element
 * @param className the CSS class name
 */
function hasClass(element, className) {
    if (element.classList) return !!className && element.classList.contains(className);
    return (' ' + (element.className.baseVal || element.className) + ' ').indexOf(' ' + className + ' ') !== -1;
}

/**
 * Adds a CSS class to a given element.
 *
 * @param element the element
 * @param className the CSS class name
 */

function addClass(element, className) {
    if (element.classList) element.classList.add(className);
    else if (!hasClass(element, className))
        if (typeof element.className === 'string') element.className = element.className + ' ' + className;
        else element.setAttribute('class', ((element.className && element.className.baseVal) || '') + ' ' + className);
}

function replaceClassName(origClass, classToRemove) {
    return origClass
        .replace(new RegExp('(^|\\s)' + classToRemove + '(?:\\s|$)', 'g'), '$1')
        .replace(/\s+/g, ' ')
        .replace(/^\s*|\s*$/g, '');
}
/**
 * Removes a CSS class from a given element.
 *
 * @param element the element
 * @param className the CSS class name
 */

function removeClass$1(element, className) {
    if (element.classList) {
        element.classList.remove(className);
    } else if (typeof element.className === 'string') {
        element.className = replaceClassName(element.className, className);
    } else {
        element.setAttribute('class', replaceClassName((element.className && element.className.baseVal) || '', className));
    }
}

var config = {
    disabled: false,
};

var TransitionGroupContext = React.createContext(null);

var UNMOUNTED = 'unmounted';
var EXITED = 'exited';
var ENTERING = 'entering';
var ENTERED = 'entered';
var EXITING = 'exiting';
/**
 * The Transition component lets you describe a transition from one component
 * state to another _over time_ with a simple declarative API. Most commonly
 * it's used to animate the mounting and unmounting of a component, but can also
 * be used to describe in-place transition states as well.
 *
 * ---
 *
 * **Note**: `Transition` is a platform-agnostic base component. If you're using
 * transitions in CSS, you'll probably want to use
 * [`CSSTransition`](https://reactcommunity.org/react-transition-group/css-transition)
 * instead. It inherits all the features of `Transition`, but contains
 * additional features necessary to play nice with CSS transitions (hence the
 * name of the component).
 *
 * ---
 *
 * By default the `Transition` component does not alter the behavior of the
 * component it renders, it only tracks "enter" and "exit" states for the
 * components. It's up to you to give meaning and effect to those states. For
 * example we can add styles to a component when it enters or exits:
 *
 * ```jsx
 * import { Transition } from 'react-transition-group';
 *
 * const duration = 300;
 *
 * const defaultStyle = {
 *   transition: `opacity ${duration}ms ease-in-out`,
 *   opacity: 0,
 * }
 *
 * const transitionStyles = {
 *   entering: { opacity: 1 },
 *   entered:  { opacity: 1 },
 *   exiting:  { opacity: 0 },
 *   exited:  { opacity: 0 },
 * };
 *
 * const Fade = ({ in: inProp }) => (
 *   <Transition in={inProp} timeout={duration}>
 *     {state => (
 *       <div style={{
 *         ...defaultStyle,
 *         ...transitionStyles[state]
 *       }}>
 *         I'm a fade Transition!
 *       </div>
 *     )}
 *   </Transition>
 * );
 * ```
 *
 * There are 4 main states a Transition can be in:
 *  - `'entering'`
 *  - `'entered'`
 *  - `'exiting'`
 *  - `'exited'`
 *
 * Transition state is toggled via the `in` prop. When `true` the component
 * begins the "Enter" stage. During this stage, the component will shift from
 * its current transition state, to `'entering'` for the duration of the
 * transition and then to the `'entered'` stage once it's complete. Let's take
 * the following example (we'll use the
 * [useState](https://reactjs.org/docs/hooks-reference.html#usestate) hook):
 *
 * ```jsx
 * function App() {
 *   const [inProp, setInProp] = useState(false);
 *   return (
 *     <div>
 *       <Transition in={inProp} timeout={500}>
 *         {state => (
 *           // ...
 *         )}
 *       </Transition>
 *       <button onClick={() => setInProp(true)}>
 *         Click to Enter
 *       </button>
 *     </div>
 *   );
 * }
 * ```
 *
 * When the button is clicked the component will shift to the `'entering'` state
 * and stay there for 500ms (the value of `timeout`) before it finally switches
 * to `'entered'`.
 *
 * When `in` is `false` the same thing happens except the state moves from
 * `'exiting'` to `'exited'`.
 */

var Transition = /*#__PURE__*/ (function (_React$Component) {
    _inheritsLoose(Transition, _React$Component);

    function Transition(props, context) {
        var _this;

        _this = _React$Component.call(this, props, context) || this;
        var parentGroup = context; // In the context of a TransitionGroup all enters are really appears

        var appear = parentGroup && !parentGroup.isMounting ? props.enter : props.appear;
        var initialStatus;
        _this.appearStatus = null;

        if (props.in) {
            if (appear) {
                initialStatus = EXITED;
                _this.appearStatus = ENTERING;
            } else {
                initialStatus = ENTERED;
            }
        } else {
            if (props.unmountOnExit || props.mountOnEnter) {
                initialStatus = UNMOUNTED;
            } else {
                initialStatus = EXITED;
            }
        }

        _this.state = {
            status: initialStatus,
        };
        _this.nextCallback = null;
        return _this;
    }

    Transition.getDerivedStateFromProps = function getDerivedStateFromProps(_ref, prevState) {
        var nextIn = _ref.in;

        if (nextIn && prevState.status === UNMOUNTED) {
            return {
                status: EXITED,
            };
        }

        return null;
    }; // getSnapshotBeforeUpdate(prevProps) {
    //   let nextStatus = null
    //   if (prevProps !== this.props) {
    //     const { status } = this.state
    //     if (this.props.in) {
    //       if (status !== ENTERING && status !== ENTERED) {
    //         nextStatus = ENTERING
    //       }
    //     } else {
    //       if (status === ENTERING || status === ENTERED) {
    //         nextStatus = EXITING
    //       }
    //     }
    //   }
    //   return { nextStatus }
    // }

    var _proto = Transition.prototype;

    _proto.componentDidMount = function componentDidMount() {
        this.updateStatus(true, this.appearStatus);
    };

    _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
        var nextStatus = null;

        if (prevProps !== this.props) {
            var status = this.state.status;

            if (this.props.in) {
                if (status !== ENTERING && status !== ENTERED) {
                    nextStatus = ENTERING;
                }
            } else {
                if (status === ENTERING || status === ENTERED) {
                    nextStatus = EXITING;
                }
            }
        }

        this.updateStatus(false, nextStatus);
    };

    _proto.componentWillUnmount = function componentWillUnmount() {
        this.cancelNextCallback();
    };

    _proto.getTimeouts = function getTimeouts() {
        var timeout = this.props.timeout;
        var exit, enter, appear;
        exit = enter = appear = timeout;

        if (timeout != null && typeof timeout !== 'number') {
            exit = timeout.exit;
            enter = timeout.enter; // TODO: remove fallback for next major

            appear = timeout.appear !== undefined ? timeout.appear : enter;
        }

        return {
            exit: exit,
            enter: enter,
            appear: appear,
        };
    };

    _proto.updateStatus = function updateStatus(mounting, nextStatus) {
        if (mounting === void 0) {
            mounting = false;
        }

        if (nextStatus !== null) {
            // nextStatus will always be ENTERING or EXITING.
            this.cancelNextCallback();

            if (nextStatus === ENTERING) {
                this.performEnter(mounting);
            } else {
                this.performExit();
            }
        } else if (this.props.unmountOnExit && this.state.status === EXITED) {
            this.setState({
                status: UNMOUNTED,
            });
        }
    };

    _proto.performEnter = function performEnter(mounting) {
        var _this2 = this;

        var enter = this.props.enter;
        var appearing = this.context ? this.context.isMounting : mounting;

        var _ref2 = this.props.nodeRef ? [appearing] : [ReactDOM.findDOMNode(this), appearing],
            maybeNode = _ref2[0],
            maybeAppearing = _ref2[1];

        var timeouts = this.getTimeouts();
        var enterTimeout = appearing ? timeouts.appear : timeouts.enter; // no enter animation skip right to ENTERED
        // if we are mounting and running this it means appear _must_ be set

        if ((!mounting && !enter) || config.disabled) {
            this.safeSetState(
                {
                    status: ENTERED,
                },
                function () {
                    _this2.props.onEntered(maybeNode);
                }
            );
            return;
        }

        this.props.onEnter(maybeNode, maybeAppearing);
        this.safeSetState(
            {
                status: ENTERING,
            },
            function () {
                _this2.props.onEntering(maybeNode, maybeAppearing);

                _this2.onTransitionEnd(enterTimeout, function () {
                    _this2.safeSetState(
                        {
                            status: ENTERED,
                        },
                        function () {
                            _this2.props.onEntered(maybeNode, maybeAppearing);
                        }
                    );
                });
            }
        );
    };

    _proto.performExit = function performExit() {
        var _this3 = this;

        var exit = this.props.exit;
        var timeouts = this.getTimeouts();
        var maybeNode = this.props.nodeRef ? undefined : ReactDOM.findDOMNode(this); // no exit animation skip right to EXITED

        if (!exit || config.disabled) {
            this.safeSetState(
                {
                    status: EXITED,
                },
                function () {
                    _this3.props.onExited(maybeNode);
                }
            );
            return;
        }

        this.props.onExit(maybeNode);
        this.safeSetState(
            {
                status: EXITING,
            },
            function () {
                _this3.props.onExiting(maybeNode);

                _this3.onTransitionEnd(timeouts.exit, function () {
                    _this3.safeSetState(
                        {
                            status: EXITED,
                        },
                        function () {
                            _this3.props.onExited(maybeNode);
                        }
                    );
                });
            }
        );
    };

    _proto.cancelNextCallback = function cancelNextCallback() {
        if (this.nextCallback !== null) {
            this.nextCallback.cancel();
            this.nextCallback = null;
        }
    };

    _proto.safeSetState = function safeSetState(nextState, callback) {
        // This shouldn't be necessary, but there are weird race conditions with
        // setState callbacks and unmounting in testing, so always make sure that
        // we can cancel any pending setState callbacks after we unmount.
        callback = this.setNextCallback(callback);
        this.setState(nextState, callback);
    };

    _proto.setNextCallback = function setNextCallback(callback) {
        var _this4 = this;

        var active = true;

        this.nextCallback = function (event) {
            if (active) {
                active = false;
                _this4.nextCallback = null;
                callback(event);
            }
        };

        this.nextCallback.cancel = function () {
            active = false;
        };

        return this.nextCallback;
    };

    _proto.onTransitionEnd = function onTransitionEnd(timeout, handler) {
        this.setNextCallback(handler);
        var node = this.props.nodeRef ? this.props.nodeRef.current : ReactDOM.findDOMNode(this);
        var doesNotHaveTimeoutOrListener = timeout == null && !this.props.addEndListener;

        if (!node || doesNotHaveTimeoutOrListener) {
            setTimeout(this.nextCallback, 0);
            return;
        }

        if (this.props.addEndListener) {
            var _ref3 = this.props.nodeRef ? [this.nextCallback] : [node, this.nextCallback],
                maybeNode = _ref3[0],
                maybeNextCallback = _ref3[1];

            this.props.addEndListener(maybeNode, maybeNextCallback);
        }

        if (timeout != null) {
            setTimeout(this.nextCallback, timeout);
        }
    };

    _proto.render = function render() {
        var status = this.state.status;

        if (status === UNMOUNTED) {
            return null;
        }

        var _this$props = this.props,
            children = _this$props.children;
        _this$props.in;
        _this$props.mountOnEnter;
        _this$props.unmountOnExit;
        _this$props.appear;
        _this$props.enter;
        _this$props.exit;
        _this$props.timeout;
        _this$props.addEndListener;
        _this$props.onEnter;
        _this$props.onEntering;
        _this$props.onEntered;
        _this$props.onExit;
        _this$props.onExiting;
        _this$props.onExited;
        _this$props.nodeRef;
        var childProps = _objectWithoutPropertiesLoose(_this$props, ['children', 'in', 'mountOnEnter', 'unmountOnExit', 'appear', 'enter', 'exit', 'timeout', 'addEndListener', 'onEnter', 'onEntering', 'onEntered', 'onExit', 'onExiting', 'onExited', 'nodeRef']);

        return (
            /*#__PURE__*/
            // allows for nested Transitions
            React.createElement(
                TransitionGroupContext.Provider,
                {
                    value: null,
                },
                typeof children === 'function' ? children(status, childProps) : React.cloneElement(React.Children.only(children), childProps)
            )
        );
    };

    return Transition;
})(React.Component);

Transition.contextType = TransitionGroupContext;
Transition.propTypes = {}; // Name the function so it is clearer in the documentation

function noop$8() {}

Transition.defaultProps = {
    in: false,
    mountOnEnter: false,
    unmountOnExit: false,
    appear: false,
    enter: true,
    exit: true,
    onEnter: noop$8,
    onEntering: noop$8,
    onEntered: noop$8,
    onExit: noop$8,
    onExiting: noop$8,
    onExited: noop$8,
};
Transition.UNMOUNTED = UNMOUNTED;
Transition.EXITED = EXITED;
Transition.ENTERING = ENTERING;
Transition.ENTERED = ENTERED;
Transition.EXITING = EXITING;
var Transition$1 = Transition;

var _addClass = function addClass$1(node, classes) {
    return (
        node &&
        classes &&
        classes.split(' ').forEach(function (c) {
            return addClass(node, c);
        })
    );
};

var removeClass = function removeClass(node, classes) {
    return (
        node &&
        classes &&
        classes.split(' ').forEach(function (c) {
            return removeClass$1(node, c);
        })
    );
};
/**
 * A transition component inspired by the excellent
 * [ng-animate](https://docs.angularjs.org/api/ngAnimate) library, you should
 * use it if you're using CSS transitions or animations. It's built upon the
 * [`Transition`](https://reactcommunity.org/react-transition-group/transition)
 * component, so it inherits all of its props.
 *
 * `CSSTransition` applies a pair of class names during the `appear`, `enter`,
 * and `exit` states of the transition. The first class is applied and then a
 * second `*-active` class in order to activate the CSS transition. After the
 * transition, matching `*-done` class names are applied to persist the
 * transition state.
 *
 * ```jsx
 * function App() {
 *   const [inProp, setInProp] = useState(false);
 *   return (
 *     <div>
 *       <CSSTransition in={inProp} timeout={200} classNames="my-node">
 *         <div>
 *           {"I'll receive my-node-* classes"}
 *         </div>
 *       </CSSTransition>
 *       <button type="button" onClick={() => setInProp(true)}>
 *         Click to Enter
 *       </button>
 *     </div>
 *   );
 * }
 * ```
 *
 * When the `in` prop is set to `true`, the child component will first receive
 * the class `example-enter`, then the `example-enter-active` will be added in
 * the next tick. `CSSTransition` [forces a
 * reflow](https://github.com/reactjs/react-transition-group/blob/5007303e729a74be66a21c3e2205e4916821524b/src/CSSTransition.js#L208-L215)
 * between before adding the `example-enter-active`. This is an important trick
 * because it allows us to transition between `example-enter` and
 * `example-enter-active` even though they were added immediately one after
 * another. Most notably, this is what makes it possible for us to animate
 * _appearance_.
 *
 * ```css
 * .my-node-enter {
 *   opacity: 0;
 * }
 * .my-node-enter-active {
 *   opacity: 1;
 *   transition: opacity 200ms;
 * }
 * .my-node-exit {
 *   opacity: 1;
 * }
 * .my-node-exit-active {
 *   opacity: 0;
 *   transition: opacity 200ms;
 * }
 * ```
 *
 * `*-active` classes represent which styles you want to animate **to**, so it's
 * important to add `transition` declaration only to them, otherwise transitions
 * might not behave as intended! This might not be obvious when the transitions
 * are symmetrical, i.e. when `*-enter-active` is the same as `*-exit`, like in
 * the example above (minus `transition`), but it becomes apparent in more
 * complex transitions.
 *
 * **Note**: If you're using the
 * [`appear`](http://reactcommunity.org/react-transition-group/transition#Transition-prop-appear)
 * prop, make sure to define styles for `.appear-*` classes as well.
 */

var CSSTransition = /*#__PURE__*/ (function (_React$Component) {
    _inheritsLoose(CSSTransition, _React$Component);

    function CSSTransition() {
        var _this;

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
        _this.appliedClasses = {
            appear: {},
            enter: {},
            exit: {},
        };

        _this.onEnter = function (maybeNode, maybeAppearing) {
            var _this$resolveArgument = _this.resolveArguments(maybeNode, maybeAppearing),
                node = _this$resolveArgument[0],
                appearing = _this$resolveArgument[1];

            _this.removeClasses(node, 'exit');

            _this.addClass(node, appearing ? 'appear' : 'enter', 'base');

            if (_this.props.onEnter) {
                _this.props.onEnter(maybeNode, maybeAppearing);
            }
        };

        _this.onEntering = function (maybeNode, maybeAppearing) {
            var _this$resolveArgument2 = _this.resolveArguments(maybeNode, maybeAppearing),
                node = _this$resolveArgument2[0],
                appearing = _this$resolveArgument2[1];

            var type = appearing ? 'appear' : 'enter';

            _this.addClass(node, type, 'active');

            if (_this.props.onEntering) {
                _this.props.onEntering(maybeNode, maybeAppearing);
            }
        };

        _this.onEntered = function (maybeNode, maybeAppearing) {
            var _this$resolveArgument3 = _this.resolveArguments(maybeNode, maybeAppearing),
                node = _this$resolveArgument3[0],
                appearing = _this$resolveArgument3[1];

            var type = appearing ? 'appear' : 'enter';

            _this.removeClasses(node, type);

            _this.addClass(node, type, 'done');

            if (_this.props.onEntered) {
                _this.props.onEntered(maybeNode, maybeAppearing);
            }
        };

        _this.onExit = function (maybeNode) {
            var _this$resolveArgument4 = _this.resolveArguments(maybeNode),
                node = _this$resolveArgument4[0];

            _this.removeClasses(node, 'appear');

            _this.removeClasses(node, 'enter');

            _this.addClass(node, 'exit', 'base');

            if (_this.props.onExit) {
                _this.props.onExit(maybeNode);
            }
        };

        _this.onExiting = function (maybeNode) {
            var _this$resolveArgument5 = _this.resolveArguments(maybeNode),
                node = _this$resolveArgument5[0];

            _this.addClass(node, 'exit', 'active');

            if (_this.props.onExiting) {
                _this.props.onExiting(maybeNode);
            }
        };

        _this.onExited = function (maybeNode) {
            var _this$resolveArgument6 = _this.resolveArguments(maybeNode),
                node = _this$resolveArgument6[0];

            _this.removeClasses(node, 'exit');

            _this.addClass(node, 'exit', 'done');

            if (_this.props.onExited) {
                _this.props.onExited(maybeNode);
            }
        };

        _this.resolveArguments = function (maybeNode, maybeAppearing) {
            return _this.props.nodeRef
                ? [_this.props.nodeRef.current, maybeNode] // here `maybeNode` is actually `appearing`
                : [maybeNode, maybeAppearing];
        };

        _this.getClassNames = function (type) {
            var classNames = _this.props.classNames;
            var isStringClassNames = typeof classNames === 'string';
            var prefix = isStringClassNames && classNames ? classNames + '-' : '';
            var baseClassName = isStringClassNames ? '' + prefix + type : classNames[type];
            var activeClassName = isStringClassNames ? baseClassName + '-active' : classNames[type + 'Active'];
            var doneClassName = isStringClassNames ? baseClassName + '-done' : classNames[type + 'Done'];
            return {
                baseClassName: baseClassName,
                activeClassName: activeClassName,
                doneClassName: doneClassName,
            };
        };

        return _this;
    }

    var _proto = CSSTransition.prototype;

    _proto.addClass = function addClass(node, type, phase) {
        var className = this.getClassNames(type)[phase + 'ClassName'];

        var _this$getClassNames = this.getClassNames('enter'),
            doneClassName = _this$getClassNames.doneClassName;

        if (type === 'appear' && phase === 'done' && doneClassName) {
            className += ' ' + doneClassName;
        } // This is to force a repaint,
        // which is necessary in order to transition styles when adding a class name.

        if (phase === 'active') {
            /* eslint-disable no-unused-expressions */
            node && node.scrollTop;
        }

        if (className) {
            this.appliedClasses[type][phase] = className;

            _addClass(node, className);
        }
    };

    _proto.removeClasses = function removeClasses(node, type) {
        var _this$appliedClasses$ = this.appliedClasses[type],
            baseClassName = _this$appliedClasses$.base,
            activeClassName = _this$appliedClasses$.active,
            doneClassName = _this$appliedClasses$.done;
        this.appliedClasses[type] = {};

        if (baseClassName) {
            removeClass(node, baseClassName);
        }

        if (activeClassName) {
            removeClass(node, activeClassName);
        }

        if (doneClassName) {
            removeClass(node, doneClassName);
        }
    };

    _proto.render = function render() {
        var _this$props = this.props;
        _this$props.classNames;
        var props = _objectWithoutPropertiesLoose(_this$props, ['classNames']);

        return /*#__PURE__*/ React.createElement(
            Transition$1,
            _extends({}, props, {
                onEnter: this.onEnter,
                onEntered: this.onEntered,
                onEntering: this.onEntering,
                onExit: this.onExit,
                onExiting: this.onExiting,
                onExited: this.onExited,
            })
        );
    };

    return CSSTransition;
})(React.Component);

CSSTransition.defaultProps = {
    classNames: '',
};
CSSTransition.propTypes = {};
var CSSTransition$1 = CSSTransition;

function _assertThisInitialized(self) {
    if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return self;
}

/**
 * Given `this.props.children`, return an object mapping key to child.
 *
 * @param {*} children `this.props.children`
 * @return {object} Mapping of key to child
 */

function getChildMapping(children, mapFn) {
    var mapper = function mapper(child) {
        return mapFn && react.exports.isValidElement(child) ? mapFn(child) : child;
    };

    var result = Object.create(null);
    if (children)
        react.exports.Children.map(children, function (c) {
            return c;
        }).forEach(function (child) {
            // run the map function here instead so that the key is the computed one
            result[child.key] = mapper(child);
        });
    return result;
}
/**
 * When you're adding or removing children some may be added or removed in the
 * same render pass. We want to show *both* since we want to simultaneously
 * animate elements in and out. This function takes a previous set of keys
 * and a new set of keys and merges them with its best guess of the correct
 * ordering. In the future we may expose some of the utilities in
 * ReactMultiChild to make this easy, but for now React itself does not
 * directly have this concept of the union of prevChildren and nextChildren
 * so we implement it here.
 *
 * @param {object} prev prev children as returned from
 * `ReactTransitionChildMapping.getChildMapping()`.
 * @param {object} next next children as returned from
 * `ReactTransitionChildMapping.getChildMapping()`.
 * @return {object} a key set that contains all keys in `prev` and all keys
 * in `next` in a reasonable order.
 */

function mergeChildMappings(prev, next) {
    prev = prev || {};
    next = next || {};

    function getValueForKey(key) {
        return key in next ? next[key] : prev[key];
    } // For each key of `next`, the list of keys to insert before that key in
    // the combined list

    var nextKeysPending = Object.create(null);
    var pendingKeys = [];

    for (var prevKey in prev) {
        if (prevKey in next) {
            if (pendingKeys.length) {
                nextKeysPending[prevKey] = pendingKeys;
                pendingKeys = [];
            }
        } else {
            pendingKeys.push(prevKey);
        }
    }

    var i;
    var childMapping = {};

    for (var nextKey in next) {
        if (nextKeysPending[nextKey]) {
            for (i = 0; i < nextKeysPending[nextKey].length; i++) {
                var pendingNextKey = nextKeysPending[nextKey][i];
                childMapping[nextKeysPending[nextKey][i]] = getValueForKey(pendingNextKey);
            }
        }

        childMapping[nextKey] = getValueForKey(nextKey);
    } // Finally, add the keys which didn't appear before any key in `next`

    for (i = 0; i < pendingKeys.length; i++) {
        childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);
    }

    return childMapping;
}

function getProp(child, prop, props) {
    return props[prop] != null ? props[prop] : child.props[prop];
}

function getInitialChildMapping(props, onExited) {
    return getChildMapping(props.children, function (child) {
        return react.exports.cloneElement(child, {
            onExited: onExited.bind(null, child),
            in: true,
            appear: getProp(child, 'appear', props),
            enter: getProp(child, 'enter', props),
            exit: getProp(child, 'exit', props),
        });
    });
}
function getNextChildMapping(nextProps, prevChildMapping, onExited) {
    var nextChildMapping = getChildMapping(nextProps.children);
    var children = mergeChildMappings(prevChildMapping, nextChildMapping);
    Object.keys(children).forEach(function (key) {
        var child = children[key];
        if (!react.exports.isValidElement(child)) return;
        var hasPrev = key in prevChildMapping;
        var hasNext = key in nextChildMapping;
        var prevChild = prevChildMapping[key];
        var isLeaving = react.exports.isValidElement(prevChild) && !prevChild.props.in; // item is new (entering)

        if (hasNext && (!hasPrev || isLeaving)) {
            // console.log('entering', key)
            children[key] = react.exports.cloneElement(child, {
                onExited: onExited.bind(null, child),
                in: true,
                exit: getProp(child, 'exit', nextProps),
                enter: getProp(child, 'enter', nextProps),
            });
        } else if (!hasNext && hasPrev && !isLeaving) {
            // item is old (exiting)
            // console.log('leaving', key)
            children[key] = react.exports.cloneElement(child, {
                in: false,
            });
        } else if (hasNext && hasPrev && react.exports.isValidElement(prevChild)) {
            // item hasn't changed transition states
            // copy over the last transition props;
            // console.log('unchanged', key)
            children[key] = react.exports.cloneElement(child, {
                onExited: onExited.bind(null, child),
                in: prevChild.props.in,
                exit: getProp(child, 'exit', nextProps),
                enter: getProp(child, 'enter', nextProps),
            });
        }
    });
    return children;
}

var values =
    Object.values ||
    function (obj) {
        return Object.keys(obj).map(function (k) {
            return obj[k];
        });
    };

var defaultProps = {
    component: 'div',
    childFactory: function childFactory(child) {
        return child;
    },
};
/**
 * The `<TransitionGroup>` component manages a set of transition components
 * (`<Transition>` and `<CSSTransition>`) in a list. Like with the transition
 * components, `<TransitionGroup>` is a state machine for managing the mounting
 * and unmounting of components over time.
 *
 * Consider the example below. As items are removed or added to the TodoList the
 * `in` prop is toggled automatically by the `<TransitionGroup>`.
 *
 * Note that `<TransitionGroup>`  does not define any animation behavior!
 * Exactly _how_ a list item animates is up to the individual transition
 * component. This means you can mix and match animations across different list
 * items.
 */

var TransitionGroup = /*#__PURE__*/ (function (_React$Component) {
    _inheritsLoose(TransitionGroup, _React$Component);

    function TransitionGroup(props, context) {
        var _this;

        _this = _React$Component.call(this, props, context) || this;

        var handleExited = _this.handleExited.bind(_assertThisInitialized(_this)); // Initial children should all be entering, dependent on appear

        _this.state = {
            contextValue: {
                isMounting: true,
            },
            handleExited: handleExited,
            firstRender: true,
        };
        return _this;
    }

    var _proto = TransitionGroup.prototype;

    _proto.componentDidMount = function componentDidMount() {
        this.mounted = true;
        this.setState({
            contextValue: {
                isMounting: false,
            },
        });
    };

    _proto.componentWillUnmount = function componentWillUnmount() {
        this.mounted = false;
    };

    TransitionGroup.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, _ref) {
        var prevChildMapping = _ref.children,
            handleExited = _ref.handleExited,
            firstRender = _ref.firstRender;
        return {
            children: firstRender ? getInitialChildMapping(nextProps, handleExited) : getNextChildMapping(nextProps, prevChildMapping, handleExited),
            firstRender: false,
        };
    }; // node is `undefined` when user provided `nodeRef` prop

    _proto.handleExited = function handleExited(child, node) {
        var currentChildMapping = getChildMapping(this.props.children);
        if (child.key in currentChildMapping) return;

        if (child.props.onExited) {
            child.props.onExited(node);
        }

        if (this.mounted) {
            this.setState(function (state) {
                var children = _extends({}, state.children);

                delete children[child.key];
                return {
                    children: children,
                };
            });
        }
    };

    _proto.render = function render() {
        var _this$props = this.props,
            Component = _this$props.component,
            childFactory = _this$props.childFactory,
            props = _objectWithoutPropertiesLoose(_this$props, ['component', 'childFactory']);

        var contextValue = this.state.contextValue;
        var children = values(this.state.children).map(childFactory);
        delete props.appear;
        delete props.enter;
        delete props.exit;

        if (Component === null) {
            return /*#__PURE__*/ React.createElement(
                TransitionGroupContext.Provider,
                {
                    value: contextValue,
                },
                children
            );
        }

        return /*#__PURE__*/ React.createElement(
            TransitionGroupContext.Provider,
            {
                value: contextValue,
            },
            /*#__PURE__*/ React.createElement(Component, props, children)
        );
    };

    return TransitionGroup;
})(React.Component);

TransitionGroup.propTypes = {};
TransitionGroup.defaultProps = defaultProps;
var TransitionGroup$1 = TransitionGroup;

var styles$H = {
    Group: 'Polaris-BulkActions__Group',
    'Group-measuring': 'Polaris-BulkActions__Group--measuring',
    'Group-entering': 'Polaris-BulkActions__Group--entering',
    'Group-exiting': 'Polaris-BulkActions__Group--exiting',
    'Group-entered': 'Polaris-BulkActions__Group--entered',
    'Group-exited': 'Polaris-BulkActions__Group--exited',
    'Group-smallScreen': 'Polaris-BulkActions__Group--smallScreen',
    'Group-largeScreen': 'Polaris-BulkActions__Group--largeScreen',
    ButtonGroupWrapper: 'Polaris-BulkActions__ButtonGroupWrapper',
    BulkActionButton: 'Polaris-BulkActions__BulkActionButton',
    CheckableContainer: 'Polaris-BulkActions__CheckableContainer',
    disabled: 'Polaris-BulkActions--disabled',
    PaginatedSelectAll: 'Polaris-BulkActions__PaginatedSelectAll',
    Slide: 'Polaris-BulkActions__Slide',
    'Slide-appear': 'Polaris-BulkActions__Slide--appear',
    'Slide-enter': 'Polaris-BulkActions__Slide--enter',
    'Slide-exit': 'Polaris-BulkActions__Slide--exit',
    'Slide-appearing': 'Polaris-BulkActions__Slide--appearing',
    'Slide-entering': 'Polaris-BulkActions__Slide--entering',
};

/**
 * Similarly to the life-cycle method componentDidMount, useComponentDidMount
 * will be invoked after the component has mounted, and only the initial mount.
 * @param callback Defines a callback to invoke once the component has
 * initially mounted.
 * @example
 * function Playground({active}) {
 *  useComponentDidMount(() => {
 *    if (active) {
 *      console.warning(`Component has mounted.`);
 *    }
 *  });
 *
 *  return null;
 * }
 */

function useComponentDidMount(callback) {
    const isAfterInitialMount = useIsAfterInitialMount();
    const hasInvokedLifeCycle = react.exports.useRef(false);

    if (isAfterInitialMount && !hasInvokedLifeCycle.current) {
        hasInvokedLifeCycle.current = true;
        return callback();
    }
}

var styles$G = {
    Indicator: 'Polaris-Indicator',
    pulseIndicator: 'Polaris-Indicator--pulseIndicator',
    bounce: 'Polaris-Indicator--bounce',
    pulse: 'Polaris-Indicator--pulse',
};

function Indicator({ pulse = true }) {
    const className = classNames(styles$G.Indicator, pulse && styles$G.pulseIndicator);
    return /*#__PURE__*/ React.createElement('span', {
        className: className,
    });
}

function BulkActionButton({ handleMeasurement, url, external, onAction, content, disclosure, accessibilityLabel, disabled, indicator }) {
    const bulkActionButton = react.exports.useRef(null);
    useComponentDidMount(() => {
        if (handleMeasurement && bulkActionButton.current) {
            const width = bulkActionButton.current.getBoundingClientRect().width;
            handleMeasurement(width);
        }
    });
    return (
        /*#__PURE__*/

        /*#__PURE__*/
        jsxs('div', {
            className: styles$H.BulkActionButton,
            ref: bulkActionButton,
            children: [
                /*#__PURE__*/ jsx(Button, {
                    external: external,
                    url: url,
                    'aria-label': accessibilityLabel,
                    onClick: onAction,
                    disabled: disabled,
                    disclosure: disclosure,
                    children: content,
                }),
                indicator &&
                    /*#__PURE__*/

                    /*#__PURE__*/
                    jsx(Indicator, {}),
            ],
        })
    );
}

function BulkActionMenu({ title, actions, isNewBadgeInBadgeActions }) {
    const { value: isVisible, toggle: toggleMenuVisibility } = useToggle(false);
    return /*#__PURE__*/ React.createElement(
        React.Fragment,
        null,
        /*#__PURE__*/ React.createElement(
            Popover,
            {
                active: isVisible,
                activator: /*#__PURE__*/ React.createElement(BulkActionButton, {
                    disclosure: true,
                    onAction: toggleMenuVisibility,
                    content: title,
                    indicator: isNewBadgeInBadgeActions,
                }),
                onClose: toggleMenuVisibility,
                preferInputActivator: true,
            },
            /*#__PURE__*/ React.createElement(ActionList, {
                items: actions,
                onActionAnyItem: toggleMenuVisibility,
            })
        )
    );
}

var styles$F = {
    CheckableButton: 'Polaris-CheckableButton',
    'CheckableButton-measuring': 'Polaris-CheckableButton__CheckableButton--measuring',
    'CheckableButton-plain': 'Polaris-CheckableButton__CheckableButton--plain',
    'CheckableButton-selectMode': 'Polaris-CheckableButton__CheckableButton--selectMode',
    'CheckableButton-selected': 'Polaris-CheckableButton__CheckableButton--selected',
    Checkbox: 'Polaris-CheckableButton__Checkbox',
    Label: 'Polaris-CheckableButton__Label',
};

const ResourceListContext = /*#__PURE__*/ react.exports.createContext({});

function CheckableButton({ accessibilityLabel, label = '', onToggleAll, selected, selectMode, plain, measuring, disabled, smallScreen }) {
    const checkBoxRef = react.exports.useRef(null);
    const { registerCheckableButtons } = react.exports.useContext(ResourceListContext);
    let currentKey = 'bulkLg';

    if (plain) {
        currentKey = 'plain';
    } else if (smallScreen) {
        currentKey = 'bulkSm';
    }

    react.exports.useEffect(() => {
        if (checkBoxRef.current && registerCheckableButtons) {
            registerCheckableButtons(currentKey, checkBoxRef.current);
        }
    }, [currentKey, registerCheckableButtons]);
    const className = plain ? classNames(styles$F.CheckableButton, styles$F['CheckableButton-plain']) : classNames(styles$F.CheckableButton, selectMode && styles$F['CheckableButton-selectMode'], selected && styles$F['CheckableButton-selected'], measuring && styles$F['CheckableButton-measuring']);
    return (
        /*#__PURE__*/

        /*#__PURE__*/
        jsxs('div', {
            className: className,
            onClick: onToggleAll,
            children: [
                /*#__PURE__*/ jsx('div', {
                    className: styles$F.Checkbox,
                    children: /*#__PURE__*/ jsx(Checkbox$1, {
                        label: accessibilityLabel,
                        labelHidden: true,
                        checked: selected,
                        disabled: disabled,
                        onChange: onToggleAll,
                        ref: checkBoxRef,
                    }),
                }),
                /*#__PURE__*/ jsx('span', {
                    className: styles$F.Label,
                    children: label,
                }),
            ],
        })
    );
}

const MAX_PROMOTED_ACTIONS = 2;
const slideClasses = {
    appear: classNames(styles$H.Slide, styles$H['Slide-appear']),
    appearActive: classNames(styles$H.Slide, styles$H['Slide-appearing']),
    enter: classNames(styles$H.Slide, styles$H['Slide-enter']),
    enterActive: classNames(styles$H.Slide, styles$H['Slide-entering']),
    exit: classNames(styles$H.Slide, styles$H['Slide-exit']),
};

class BulkActionsInner extends react.exports.PureComponent {
    constructor(...args) {
        super(...args);
        this.state = {
            smallScreenPopoverVisible: false,
            largeScreenPopoverVisible: false,
            containerWidth: 0,
            measuring: true,
        };
        this.containerNode = null;
        this.largeScreenButtonsNode = null;
        this.moreActionsNode = null;
        this.checkableWrapperNode = /*#__PURE__*/ react.exports.createRef();
        this.largeScreenGroupNode = /*#__PURE__*/ react.exports.createRef();
        this.smallScreenGroupNode = /*#__PURE__*/ react.exports.createRef();
        this.promotedActionsWidths = [];
        this.bulkActionsWidth = 0;
        this.addedMoreActionsWidthForMeasuring = 0;
        this.handleResize = debounce_1(
            () => {
                const { smallScreenPopoverVisible, largeScreenPopoverVisible } = this.state;

                if (this.containerNode) {
                    const containerWidth = this.containerNode.getBoundingClientRect().width;

                    if (containerWidth > 0) {
                        this.setState({
                            containerWidth,
                        });
                    }
                }

                if (smallScreenPopoverVisible || largeScreenPopoverVisible) {
                    this.setState({
                        smallScreenPopoverVisible: false,
                        largeScreenPopoverVisible: false,
                    });
                }
            },
            50,
            {
                trailing: true,
            }
        );

        this.setLargeScreenButtonsNode = (node) => {
            this.largeScreenButtonsNode = node;
        };

        this.setContainerNode = (node) => {
            this.containerNode = node;
        };

        this.setMoreActionsNode = (node) => {
            this.moreActionsNode = node;
        };

        this.setSelectMode = (val) => {
            const { onSelectModeToggle } = this.props;

            if (onSelectModeToggle) {
                onSelectModeToggle(val);
            }
        };

        this.toggleSmallScreenPopover = () => {
            if (this.props.onMoreActionPopoverToggle) {
                this.props.onMoreActionPopoverToggle(this.state.smallScreenPopoverVisible);
            }

            this.setState(({ smallScreenPopoverVisible }) => ({
                smallScreenPopoverVisible: !smallScreenPopoverVisible,
            }));
        };

        this.toggleLargeScreenPopover = () => {
            if (this.props.onMoreActionPopoverToggle) {
                this.props.onMoreActionPopoverToggle(this.state.largeScreenPopoverVisible);
            }

            this.setState(({ largeScreenPopoverVisible }) => ({
                largeScreenPopoverVisible: !largeScreenPopoverVisible,
            }));
        };

        this.handleMeasurement = (width) => {
            const { measuring } = this.state;

            if (measuring) {
                this.promotedActionsWidths.push(width);
            }
        };
    }

    numberOfPromotedActionsToRender() {
        const { promotedActions } = this.props;
        const { containerWidth, measuring } = this.state;

        if (!promotedActions) {
            return 0;
        }

        if (containerWidth >= this.bulkActionsWidth || measuring) {
            return promotedActions.length;
        }

        let sufficientSpace = false;
        let counter = promotedActions.length - 1;
        let totalWidth = 0;

        while (!sufficientSpace && counter >= 0) {
            totalWidth += this.promotedActionsWidths[counter];
            const widthWithRemovedAction = this.bulkActionsWidth - totalWidth + this.addedMoreActionsWidthForMeasuring;

            if (containerWidth >= widthWithRemovedAction) {
                sufficientSpace = true;
            } else {
                counter--;
            }
        }

        return clamp(counter, 0, promotedActions.length);
    }

    hasActions() {
        const { promotedActions, actions } = this.props;
        return Boolean((promotedActions && promotedActions.length > 0) || (actions && actions.length > 0));
    }

    actionSections() {
        const { actions } = this.props;

        if (!actions || actions.length === 0) {
            return;
        }

        if (instanceOfBulkActionListSectionArray(actions)) {
            return actions;
        }

        if (instanceOfBulkActionArray(actions)) {
            return [
                {
                    items: actions,
                },
            ];
        }
    }

    rolledInPromotedActions() {
        const { promotedActions } = this.props;
        const numberOfPromotedActionsToRender = this.numberOfPromotedActionsToRender();

        if (!promotedActions || promotedActions.length === 0 || numberOfPromotedActionsToRender >= promotedActions.length) {
            return [];
        }

        const rolledInPromotedActions = promotedActions.map((action) => {
            if (instanceOfMenuGroupDescriptor(action)) {
                return {
                    items: [...action.actions],
                };
            }

            return {
                items: [action],
            };
        });
        return rolledInPromotedActions.slice(numberOfPromotedActionsToRender);
    } // eslint-disable-next-line @typescript-eslint/member-ordering

    componentDidMount() {
        const { actions, promotedActions } = this.props;

        if (promotedActions && !actions && this.moreActionsNode) {
            this.addedMoreActionsWidthForMeasuring = this.moreActionsNode.getBoundingClientRect().width;
        }

        this.bulkActionsWidth = this.largeScreenButtonsNode ? this.largeScreenButtonsNode.getBoundingClientRect().width - this.addedMoreActionsWidthForMeasuring : 0;

        if (this.containerNode) {
            this.setState({
                containerWidth: this.containerNode.getBoundingClientRect().width,
                measuring: false,
            });
        }
    } // eslint-disable-next-line @typescript-eslint/member-ordering

    render() {
        const { selectMode, accessibilityLabel, label = '', onToggleAll, selected, smallScreen, disabled, promotedActions, paginatedSelectAllText = null, paginatedSelectAllAction, i18n } = this.props;
        const actionSections = this.actionSections();

        if (promotedActions && promotedActions.length > MAX_PROMOTED_ACTIONS && 'production' === 'development') {
            // eslint-disable-next-line no-console
            console.warn(
                i18n.translate('Polaris.ResourceList.BulkActions.warningMessage', {
                    maxPromotedActions: MAX_PROMOTED_ACTIONS,
                })
            );
        }

        const { smallScreenPopoverVisible, largeScreenPopoverVisible, measuring } = this.state;
        const paginatedSelectAllActionMarkup = paginatedSelectAllAction
            ? /*#__PURE__*/

              /*#__PURE__*/
              jsx(Button, {
                  onClick: paginatedSelectAllAction.onAction,
                  plain: true,
                  disabled: disabled,
                  children: paginatedSelectAllAction.content,
              })
            : null;
        const paginatedSelectAllTextMarkup =
            paginatedSelectAllText && paginatedSelectAllAction
                ? /*#__PURE__*/

                  /*#__PURE__*/
                  jsx('span', {
                      'aria-live': 'polite',
                      children: paginatedSelectAllText,
                  })
                : paginatedSelectAllText;
        const paginatedSelectAllMarkup =
            paginatedSelectAllActionMarkup || paginatedSelectAllTextMarkup
                ? /*#__PURE__*/

                  /*#__PURE__*/
                  jsxs('div', {
                      className: styles$H.PaginatedSelectAll,
                      children: [paginatedSelectAllTextMarkup, ' ', paginatedSelectAllActionMarkup],
                  })
                : null;

        const cancelButton =
            /*#__PURE__*/

            /*#__PURE__*/
            jsx(Button, {
                onClick: this.setSelectMode.bind(this, false),
                disabled: disabled,
                children: i18n.translate('Polaris.Common.cancel'),
            });

        const numberOfPromotedActionsToRender = this.numberOfPromotedActionsToRender();
        const allActionsPopover = this.hasActions()
            ? /*#__PURE__*/

              /*#__PURE__*/
              jsx('div', {
                  className: styles$H.Popover,
                  ref: this.setMoreActionsNode,
                  children: /*#__PURE__*/ jsx(Popover, {
                      active: smallScreenPopoverVisible,
                      activator:
                          /*#__PURE__*/

                          /*#__PURE__*/
                          jsx(BulkActionButton, {
                              disclosure: true,
                              onAction: this.toggleSmallScreenPopover,
                              content: i18n.translate('Polaris.ResourceList.BulkActions.actionsActivatorLabel'),
                              disabled: disabled,
                              indicator: this.isNewBadgeInBadgeActions(),
                          }),
                      onClose: this.toggleSmallScreenPopover,
                      children: /*#__PURE__*/ jsx(ActionList, {
                          items: promotedActions,
                          sections: actionSections,
                          onActionAnyItem: this.toggleSmallScreenPopover,
                      }),
                  }),
              })
            : null;
        const promotedActionsMarkup =
            promotedActions && numberOfPromotedActionsToRender > 0
                ? [...promotedActions].slice(0, numberOfPromotedActionsToRender).map((action, index) => {
                      if (instanceOfMenuGroupDescriptor(action)) {
                          return (
                              /*#__PURE__*/

                              /*#__PURE__*/
                              jsx(BulkActionMenu, {
                                  ...Object.assign(
                                      {
                                          key: index,
                                      },
                                      action,
                                      {
                                          isNewBadgeInBadgeActions: this.isNewBadgeInBadgeActions(),
                                      }
                                  ),
                              })
                          );
                      }

                      return (
                          /*#__PURE__*/

                          /*#__PURE__*/
                          jsx(BulkActionButton, {
                              ...Object.assign(
                                  {
                                      key: index,
                                      disabled: disabled,
                                  },
                                  action,
                                  {
                                      handleMeasurement: this.handleMeasurement,
                                  }
                              ),
                          })
                      );
                  })
                : null;
        const rolledInPromotedActions = this.rolledInPromotedActions();
        const activatorLabel = !promotedActions || (promotedActions && numberOfPromotedActionsToRender === 0 && !measuring) ? i18n.translate('Polaris.ResourceList.BulkActions.actionsActivatorLabel') : i18n.translate('Polaris.ResourceList.BulkActions.moreActionsActivatorLabel');
        let combinedActions = [];

        if (actionSections && rolledInPromotedActions.length > 0) {
            combinedActions = [...rolledInPromotedActions, ...actionSections];
        } else if (actionSections) {
            combinedActions = actionSections;
        } else if (rolledInPromotedActions.length > 0) {
            combinedActions = [...rolledInPromotedActions];
        }

        const actionsPopover =
            actionSections || rolledInPromotedActions.length > 0 || measuring
                ? /*#__PURE__*/

                  /*#__PURE__*/
                  jsx('div', {
                      className: styles$H.Popover,
                      ref: this.setMoreActionsNode,
                      children: /*#__PURE__*/ jsx(Popover, {
                          active: largeScreenPopoverVisible,
                          activator:
                              /*#__PURE__*/

                              /*#__PURE__*/
                              jsx(BulkActionButton, {
                                  disclosure: true,
                                  onAction: this.toggleLargeScreenPopover,
                                  content: activatorLabel,
                                  disabled: disabled,
                                  indicator: this.isNewBadgeInBadgeActions(),
                              }),
                          onClose: this.toggleLargeScreenPopover,
                          children: /*#__PURE__*/ jsx(ActionList, {
                              sections: combinedActions,
                              onActionAnyItem: this.toggleLargeScreenPopover,
                          }),
                      }),
                  })
                : null;
        const checkableButtonProps = {
            accessibilityLabel,
            label,
            selected,
            selectMode,
            onToggleAll,
            measuring,
            disabled,
        };
        const smallScreenGroup = smallScreen
            ? /*#__PURE__*/

              /*#__PURE__*/
              jsx(
                  Transition$1,
                  {
                      timeout: 0,
                      in: selectMode,
                      nodeRef: this.smallScreenGroupNode,
                      children: (status) => {
                          const smallScreenGroupClassName = classNames(styles$H.Group, styles$H['Group-smallScreen'], styles$H[`Group-${status}`]);
                          return (
                              /*#__PURE__*/

                              /*#__PURE__*/
                              jsxs('div', {
                                  className: smallScreenGroupClassName,
                                  ref: this.smallScreenGroupNode,
                                  children: [
                                      /*#__PURE__*/ jsx('div', {
                                          className: styles$H.ButtonGroupWrapper,
                                          children: /*#__PURE__*/ jsxs(ButtonGroup, {
                                              segmented: true,
                                              children: [
                                                  /*#__PURE__*/ jsx(CSSTransition$1, {
                                                      nodeRef: this.checkableWrapperNode,
                                                      in: selectMode,
                                                      timeout: parseInt(tokens.motion['duration-200'], 10),
                                                      classNames: slideClasses,
                                                      appear: !selectMode,
                                                      children: /*#__PURE__*/ jsx('div', {
                                                          className: styles$H.CheckableContainer,
                                                          ref: this.checkableWrapperNode,
                                                          children: /*#__PURE__*/ jsx(CheckableButton, {
                                                              ...Object.assign({}, checkableButtonProps, {
                                                                  smallScreen: true,
                                                              }),
                                                          }),
                                                      }),
                                                  }),
                                                  allActionsPopover,
                                                  cancelButton,
                                              ],
                                          }),
                                      }),
                                      paginatedSelectAllMarkup,
                                  ],
                              })
                          );
                      },
                  },
                  'smallGroup'
              )
            : null;
        const largeGroupContent =
            promotedActionsMarkup || actionsPopover
                ? /*#__PURE__*/

                  /*#__PURE__*/
                  jsxs(ButtonGroup, {
                      segmented: true,
                      children: [/*#__PURE__*/ jsx(CheckableButton, { ...checkableButtonProps }), promotedActionsMarkup, actionsPopover],
                  })
                : /*#__PURE__*/

                  /*#__PURE__*/
                  jsx(CheckableButton, { ...checkableButtonProps });
        const largeScreenGroup = smallScreen
            ? null
            : /*#__PURE__*/

              /*#__PURE__*/
              jsx(
                  Transition$1,
                  {
                      timeout: 0,
                      in: selectMode,
                      nodeRef: this.largeScreenGroupNode,
                      children: (status) => {
                          const largeScreenGroupClassName = classNames(styles$H.Group, styles$H['Group-largeScreen'], !measuring && styles$H[`Group-${status}`], measuring && styles$H['Group-measuring']);
                          return (
                              /*#__PURE__*/

                              /*#__PURE__*/
                              jsxs('div', {
                                  className: largeScreenGroupClassName,
                                  ref: this.largeScreenGroupNode,
                                  children: [
                                      /*#__PURE__*/ jsx(EventListener, {
                                          event: 'resize',
                                          handler: this.handleResize,
                                      }),
                                      /*#__PURE__*/ jsx('div', {
                                          className: styles$H.ButtonGroupWrapper,
                                          ref: this.setLargeScreenButtonsNode,
                                          children: largeGroupContent,
                                      }),
                                      paginatedSelectAllMarkup,
                                  ],
                              })
                          );
                      },
                  },
                  'largeGroup'
              );
        return (
            /*#__PURE__*/

            /*#__PURE__*/
            jsxs('div', {
                ref: this.setContainerNode,
                children: [smallScreenGroup, largeScreenGroup],
            })
        );
    }

    isNewBadgeInBadgeActions() {
        const actions = this.actionSections();
        if (!actions) return false;

        for (const action of actions) {
            for (const item of action.items) {
                var _item$badge;

                if (((_item$badge = item.badge) === null || _item$badge === void 0 ? void 0 : _item$badge.status) === 'new') return true;
            }
        }

        return false;
    }
}

function instanceOfBulkActionListSectionArray(actions) {
    const validList = actions.filter((action) => {
        return action.items;
    });
    return actions.length === validList.length;
}

function instanceOfBulkActionArray(actions) {
    const validList = actions.filter((action) => {
        return !action.items;
    });
    return actions.length === validList.length;
}

function instanceOfMenuGroupDescriptor(action) {
    return 'title' in action;
}

function BulkActions(props) {
    const i18n = useI18n();
    return (
        /*#__PURE__*/

        /*#__PURE__*/
        jsx(BulkActionsInner, {
            ...Object.assign({}, props, {
                i18n: i18n,
            }),
        })
    );
}

var styles$E = {
    TextContainer: 'Polaris-TextContainer',
    spacingTight: 'Polaris-TextContainer--spacingTight',
    spacingLoose: 'Polaris-TextContainer--spacingLoose',
};

function TextContainer({ spacing, children }) {
    const className = classNames(styles$E.TextContainer, spacing && styles$E[variationName('spacing', spacing)]);
    return /*#__PURE__*/ React.createElement(
        'div',
        {
            className: className,
        },
        children
    );
}

var styles$D = {
    Collapsible: 'Polaris-Collapsible',
    isFullyClosed: 'Polaris-Collapsible--isFullyClosed',
    expandOnPrint: 'Polaris-Collapsible--expandOnPrint',
};

function Collapsible({ id, expandOnPrint, open, transition, children }) {
    const [height, setHeight] = react.exports.useState(0);
    const [isOpen, setIsOpen] = react.exports.useState(open);
    const [animationState, setAnimationState] = react.exports.useState('idle');
    const collapsibleContainer = react.exports.useRef(null);
    const isFullyOpen = animationState === 'idle' && open && isOpen;
    const isFullyClosed = animationState === 'idle' && !open && !isOpen;
    const content = expandOnPrint || !isFullyClosed ? children : null;
    const wrapperClassName = classNames(styles$D.Collapsible, isFullyClosed && styles$D.isFullyClosed, expandOnPrint && styles$D.expandOnPrint);
    const collapsibleStyles = {
        ...(transition && {
            transitionDuration: `${transition.duration}`,
            transitionTimingFunction: `${transition.timingFunction}`,
        }),
        ...{
            maxHeight: isFullyOpen ? 'none' : `${height}px`,
            overflow: isFullyOpen ? 'visible' : 'hidden',
        },
    };
    const handleCompleteAnimation = react.exports.useCallback(
        ({ target }) => {
            if (target === collapsibleContainer.current) {
                setAnimationState('idle');
                setIsOpen(open);
            }
        },
        [open]
    );
    react.exports.useEffect(() => {
        if (open !== isOpen) {
            setAnimationState('measuring');
        }
    }, [open, isOpen]);
    react.exports.useEffect(() => {
        if (!open || !collapsibleContainer.current) return; // If collapsible defaults to open, set an initial height

        setHeight(collapsibleContainer.current.scrollHeight); // eslint-disable-next-line react-hooks/exhaustive-deps
    }, []);
    react.exports.useEffect(() => {
        if (!collapsibleContainer.current) return;

        switch (animationState) {
            case 'idle':
                break;

            case 'measuring':
                setHeight(collapsibleContainer.current.scrollHeight);
                setAnimationState('animating');
                break;

            case 'animating':
                setHeight(open ? collapsibleContainer.current.scrollHeight : 0);
        }
    }, [animationState, open, isOpen]);
    return (
        /*#__PURE__*/

        /*#__PURE__*/
        jsx('div', {
            id: id,
            style: collapsibleStyles,
            ref: collapsibleContainer,
            className: wrapperClassName,
            onTransitionEnd: handleCompleteAnimation,
            'aria-expanded': open,
            children: content,
        })
    );
}

const FrameContext = /*#__PURE__*/ react.exports.createContext(undefined);

function useFrame() {
    const frame = react.exports.useContext(FrameContext);

    if (!frame) {
        throw new Error('No Frame context was provided. Your component must be wrapped in a <Frame> component. See https://polaris.shopify.com/components/structure/frame for implementation instructions.');
    }

    return frame;
}

/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */

function listCacheClear$1() {
    this.__data__ = [];
    this.size = 0;
}

var _listCacheClear = listCacheClear$1;

/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */

function eq$2(value, other) {
    return value === other || (value !== value && other !== other);
}

var eq_1 = eq$2;

var eq$1 = eq_1;

/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function assocIndexOf$4(array, key) {
    var length = array.length;
    while (length--) {
        if (eq$1(array[length][0], key)) {
            return length;
        }
    }
    return -1;
}

var _assocIndexOf = assocIndexOf$4;

var assocIndexOf$3 = _assocIndexOf;

/** Used for built-in method references. */
var arrayProto = Array.prototype;

/** Built-in value references. */
var splice = arrayProto.splice;

/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function listCacheDelete$1(key) {
    var data = this.__data__,
        index = assocIndexOf$3(data, key);

    if (index < 0) {
        return false;
    }
    var lastIndex = data.length - 1;
    if (index == lastIndex) {
        data.pop();
    } else {
        splice.call(data, index, 1);
    }
    --this.size;
    return true;
}

var _listCacheDelete = listCacheDelete$1;

var assocIndexOf$2 = _assocIndexOf;

/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function listCacheGet$1(key) {
    var data = this.__data__,
        index = assocIndexOf$2(data, key);

    return index < 0 ? undefined : data[index][1];
}

var _listCacheGet = listCacheGet$1;

var assocIndexOf$1 = _assocIndexOf;

/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function listCacheHas$1(key) {
    return assocIndexOf$1(this.__data__, key) > -1;
}

var _listCacheHas = listCacheHas$1;

var assocIndexOf = _assocIndexOf;

/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */
function listCacheSet$1(key, value) {
    var data = this.__data__,
        index = assocIndexOf(data, key);

    if (index < 0) {
        ++this.size;
        data.push([key, value]);
    } else {
        data[index][1] = value;
    }
    return this;
}

var _listCacheSet = listCacheSet$1;

var listCacheClear = _listCacheClear,
    listCacheDelete = _listCacheDelete,
    listCacheGet = _listCacheGet,
    listCacheHas = _listCacheHas,
    listCacheSet = _listCacheSet;

/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function ListCache$4(entries) {
    var index = -1,
        length = entries == null ? 0 : entries.length;

    this.clear();
    while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
    }
}

// Add methods to `ListCache`.
ListCache$4.prototype.clear = listCacheClear;
ListCache$4.prototype['delete'] = listCacheDelete;
ListCache$4.prototype.get = listCacheGet;
ListCache$4.prototype.has = listCacheHas;
ListCache$4.prototype.set = listCacheSet;

var _ListCache = ListCache$4;

var ListCache$3 = _ListCache;

/**
 * Removes all key-value entries from the stack.
 *
 * @private
 * @name clear
 * @memberOf Stack
 */
function stackClear$1() {
    this.__data__ = new ListCache$3();
    this.size = 0;
}

var _stackClear = stackClear$1;

/**
 * Removes `key` and its value from the stack.
 *
 * @private
 * @name delete
 * @memberOf Stack
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */

function stackDelete$1(key) {
    var data = this.__data__,
        result = data['delete'](key);

    this.size = data.size;
    return result;
}

var _stackDelete = stackDelete$1;

/**
 * Gets the stack value for `key`.
 *
 * @private
 * @name get
 * @memberOf Stack
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */

function stackGet$1(key) {
    return this.__data__.get(key);
}

var _stackGet = stackGet$1;

/**
 * Checks if a stack value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Stack
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */

function stackHas$1(key) {
    return this.__data__.has(key);
}

var _stackHas = stackHas$1;

var baseGetTag$3 = _baseGetTag,
    isObject$2 = isObject_1;

/** `Object#toString` result references. */
var asyncTag = '[object AsyncFunction]',
    funcTag$1 = '[object Function]',
    genTag = '[object GeneratorFunction]',
    proxyTag = '[object Proxy]';

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction$3(value) {
    if (!isObject$2(value)) {
        return false;
    }
    // The use of `Object#toString` avoids issues with the `typeof` operator
    // in Safari 9 which returns 'object' for typed arrays and other constructors.
    var tag = baseGetTag$3(value);
    return tag == funcTag$1 || tag == genTag || tag == asyncTag || tag == proxyTag;
}

var isFunction_1 = isFunction$3;

var root$6 = _root;

/** Used to detect overreaching core-js shims. */
var coreJsData$1 = root$6['__core-js_shared__'];

var _coreJsData = coreJsData$1;

var coreJsData = _coreJsData;

/** Used to detect methods masquerading as native. */
var maskSrcKey = (function () {
    var uid = /[^.]+$/.exec((coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO) || '');
    return uid ? 'Symbol(src)_1.' + uid : '';
})();

/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */
function isMasked$1(func) {
    return !!maskSrcKey && maskSrcKey in func;
}

var _isMasked = isMasked$1;

/** Used for built-in method references. */

var funcProto$1 = Function.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString$1 = funcProto$1.toString;

/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to convert.
 * @returns {string} Returns the source code.
 */
function toSource$2(func) {
    if (func != null) {
        try {
            return funcToString$1.call(func);
        } catch (e) {}
        try {
            return func + '';
        } catch (e) {}
    }
    return '';
}

var _toSource = toSource$2;

var isFunction$2 = isFunction_1,
    isMasked = _isMasked,
    isObject$1 = isObject_1,
    toSource$1 = _toSource;

/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

/** Used to detect host constructors (Safari). */
var reIsHostCtor = /^\[object .+?Constructor\]$/;

/** Used for built-in method references. */
var funcProto = Function.prototype,
    objectProto$9 = Object.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty$7 = objectProto$9.hasOwnProperty;

/** Used to detect if a method is native. */
var reIsNative = RegExp(
    '^' +
        funcToString
            .call(hasOwnProperty$7)
            .replace(reRegExpChar, '\\$&')
            .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') +
        '$'
);

/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */
function baseIsNative$1(value) {
    if (!isObject$1(value) || isMasked(value)) {
        return false;
    }
    var pattern = isFunction$2(value) ? reIsNative : reIsHostCtor;
    return pattern.test(toSource$1(value));
}

var _baseIsNative = baseIsNative$1;

/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */

function getValue$1(object, key) {
    return object == null ? undefined : object[key];
}

var _getValue = getValue$1;

var baseIsNative = _baseIsNative,
    getValue = _getValue;

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */
function getNative$6(object, key) {
    var value = getValue(object, key);
    return baseIsNative(value) ? value : undefined;
}

var _getNative = getNative$6;

var getNative$5 = _getNative,
    root$5 = _root;

/* Built-in method references that are verified to be native. */
var Map$4 = getNative$5(root$5, 'Map');

var _Map = Map$4;

var getNative$4 = _getNative;

/* Built-in method references that are verified to be native. */
var nativeCreate$4 = getNative$4(Object, 'create');

var _nativeCreate = nativeCreate$4;

var nativeCreate$3 = _nativeCreate;

/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */
function hashClear$1() {
    this.__data__ = nativeCreate$3 ? nativeCreate$3(null) : {};
    this.size = 0;
}

var _hashClear = hashClear$1;

/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */

function hashDelete$1(key) {
    var result = this.has(key) && delete this.__data__[key];
    this.size -= result ? 1 : 0;
    return result;
}

var _hashDelete = hashDelete$1;

var nativeCreate$2 = _nativeCreate;

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED$2 = '__lodash_hash_undefined__';

/** Used for built-in method references. */
var objectProto$8 = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$6 = objectProto$8.hasOwnProperty;

/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function hashGet$1(key) {
    var data = this.__data__;
    if (nativeCreate$2) {
        var result = data[key];
        return result === HASH_UNDEFINED$2 ? undefined : result;
    }
    return hasOwnProperty$6.call(data, key) ? data[key] : undefined;
}

var _hashGet = hashGet$1;

var nativeCreate$1 = _nativeCreate;

/** Used for built-in method references. */
var objectProto$7 = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$5 = objectProto$7.hasOwnProperty;

/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function hashHas$1(key) {
    var data = this.__data__;
    return nativeCreate$1 ? data[key] !== undefined : hasOwnProperty$5.call(data, key);
}

var _hashHas = hashHas$1;

var nativeCreate = _nativeCreate;

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED$1 = '__lodash_hash_undefined__';

/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */
function hashSet$1(key, value) {
    var data = this.__data__;
    this.size += this.has(key) ? 0 : 1;
    data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED$1 : value;
    return this;
}

var _hashSet = hashSet$1;

var hashClear = _hashClear,
    hashDelete = _hashDelete,
    hashGet = _hashGet,
    hashHas = _hashHas,
    hashSet = _hashSet;

/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Hash$1(entries) {
    var index = -1,
        length = entries == null ? 0 : entries.length;

    this.clear();
    while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
    }
}

// Add methods to `Hash`.
Hash$1.prototype.clear = hashClear;
Hash$1.prototype['delete'] = hashDelete;
Hash$1.prototype.get = hashGet;
Hash$1.prototype.has = hashHas;
Hash$1.prototype.set = hashSet;

var _Hash = Hash$1;

var Hash = _Hash,
    ListCache$2 = _ListCache,
    Map$3 = _Map;

/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */
function mapCacheClear$1() {
    this.size = 0;
    this.__data__ = {
        hash: new Hash(),
        map: new (Map$3 || ListCache$2)(),
        string: new Hash(),
    };
}

var _mapCacheClear = mapCacheClear$1;

/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */

function isKeyable$1(value) {
    var type = typeof value;
    return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;
}

var _isKeyable = isKeyable$1;

var isKeyable = _isKeyable;

/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */
function getMapData$4(map, key) {
    var data = map.__data__;
    return isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;
}

var _getMapData = getMapData$4;

var getMapData$3 = _getMapData;

/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function mapCacheDelete$1(key) {
    var result = getMapData$3(this, key)['delete'](key);
    this.size -= result ? 1 : 0;
    return result;
}

var _mapCacheDelete = mapCacheDelete$1;

var getMapData$2 = _getMapData;

/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function mapCacheGet$1(key) {
    return getMapData$2(this, key).get(key);
}

var _mapCacheGet = mapCacheGet$1;

var getMapData$1 = _getMapData;

/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function mapCacheHas$1(key) {
    return getMapData$1(this, key).has(key);
}

var _mapCacheHas = mapCacheHas$1;

var getMapData = _getMapData;

/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */
function mapCacheSet$1(key, value) {
    var data = getMapData(this, key),
        size = data.size;

    data.set(key, value);
    this.size += data.size == size ? 0 : 1;
    return this;
}

var _mapCacheSet = mapCacheSet$1;

var mapCacheClear = _mapCacheClear,
    mapCacheDelete = _mapCacheDelete,
    mapCacheGet = _mapCacheGet,
    mapCacheHas = _mapCacheHas,
    mapCacheSet = _mapCacheSet;

/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function MapCache$2(entries) {
    var index = -1,
        length = entries == null ? 0 : entries.length;

    this.clear();
    while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
    }
}

// Add methods to `MapCache`.
MapCache$2.prototype.clear = mapCacheClear;
MapCache$2.prototype['delete'] = mapCacheDelete;
MapCache$2.prototype.get = mapCacheGet;
MapCache$2.prototype.has = mapCacheHas;
MapCache$2.prototype.set = mapCacheSet;

var _MapCache = MapCache$2;

var ListCache$1 = _ListCache,
    Map$2 = _Map,
    MapCache$1 = _MapCache;

/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE = 200;

/**
 * Sets the stack `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Stack
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the stack cache instance.
 */
function stackSet$1(key, value) {
    var data = this.__data__;
    if (data instanceof ListCache$1) {
        var pairs = data.__data__;
        if (!Map$2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
            pairs.push([key, value]);
            this.size = ++data.size;
            return this;
        }
        data = this.__data__ = new MapCache$1(pairs);
    }
    data.set(key, value);
    this.size = data.size;
    return this;
}

var _stackSet = stackSet$1;

var ListCache = _ListCache,
    stackClear = _stackClear,
    stackDelete = _stackDelete,
    stackGet = _stackGet,
    stackHas = _stackHas,
    stackSet = _stackSet;

/**
 * Creates a stack cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Stack$1(entries) {
    var data = (this.__data__ = new ListCache(entries));
    this.size = data.size;
}

// Add methods to `Stack`.
Stack$1.prototype.clear = stackClear;
Stack$1.prototype['delete'] = stackDelete;
Stack$1.prototype.get = stackGet;
Stack$1.prototype.has = stackHas;
Stack$1.prototype.set = stackSet;

var _Stack = Stack$1;

/** Used to stand-in for `undefined` hash values. */

var HASH_UNDEFINED = '__lodash_hash_undefined__';

/**
 * Adds `value` to the array cache.
 *
 * @private
 * @name add
 * @memberOf SetCache
 * @alias push
 * @param {*} value The value to cache.
 * @returns {Object} Returns the cache instance.
 */
function setCacheAdd$1(value) {
    this.__data__.set(value, HASH_UNDEFINED);
    return this;
}

var _setCacheAdd = setCacheAdd$1;

/**
 * Checks if `value` is in the array cache.
 *
 * @private
 * @name has
 * @memberOf SetCache
 * @param {*} value The value to search for.
 * @returns {number} Returns `true` if `value` is found, else `false`.
 */

function setCacheHas$1(value) {
    return this.__data__.has(value);
}

var _setCacheHas = setCacheHas$1;

var MapCache = _MapCache,
    setCacheAdd = _setCacheAdd,
    setCacheHas = _setCacheHas;

/**
 *
 * Creates an array cache object to store unique values.
 *
 * @private
 * @constructor
 * @param {Array} [values] The values to cache.
 */
function SetCache$1(values) {
    var index = -1,
        length = values == null ? 0 : values.length;

    this.__data__ = new MapCache();
    while (++index < length) {
        this.add(values[index]);
    }
}

// Add methods to `SetCache`.
SetCache$1.prototype.add = SetCache$1.prototype.push = setCacheAdd;
SetCache$1.prototype.has = setCacheHas;

var _SetCache = SetCache$1;

/**
 * A specialized version of `_.some` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if any element passes the predicate check,
 *  else `false`.
 */

function arraySome$1(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
        if (predicate(array[index], index, array)) {
            return true;
        }
    }
    return false;
}

var _arraySome = arraySome$1;

/**
 * Checks if a `cache` value for `key` exists.
 *
 * @private
 * @param {Object} cache The cache to query.
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */

function cacheHas$1(cache, key) {
    return cache.has(key);
}

var _cacheHas = cacheHas$1;

var SetCache = _SetCache,
    arraySome = _arraySome,
    cacheHas = _cacheHas;

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG$3 = 1,
    COMPARE_UNORDERED_FLAG$1 = 2;

/**
 * A specialized version of `baseIsEqualDeep` for arrays with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Array} array The array to compare.
 * @param {Array} other The other array to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `array` and `other` objects.
 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
 */
function equalArrays$2(array, other, bitmask, customizer, equalFunc, stack) {
    var isPartial = bitmask & COMPARE_PARTIAL_FLAG$3,
        arrLength = array.length,
        othLength = other.length;

    if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
    }
    // Check that cyclic values are equal.
    var arrStacked = stack.get(array);
    var othStacked = stack.get(other);
    if (arrStacked && othStacked) {
        return arrStacked == other && othStacked == array;
    }
    var index = -1,
        result = true,
        seen = bitmask & COMPARE_UNORDERED_FLAG$1 ? new SetCache() : undefined;

    stack.set(array, other);
    stack.set(other, array);

    // Ignore non-index properties.
    while (++index < arrLength) {
        var arrValue = array[index],
            othValue = other[index];

        if (customizer) {
            var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
        }
        if (compared !== undefined) {
            if (compared) {
                continue;
            }
            result = false;
            break;
        }
        // Recursively compare arrays (susceptible to call stack limits).
        if (seen) {
            if (
                !arraySome(other, function (othValue, othIndex) {
                    if (!cacheHas(seen, othIndex) && (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                        return seen.push(othIndex);
                    }
                })
            ) {
                result = false;
                break;
            }
        } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
            result = false;
            break;
        }
    }
    stack['delete'](array);
    stack['delete'](other);
    return result;
}

var _equalArrays = equalArrays$2;

var root$4 = _root;

/** Built-in value references. */
var Uint8Array$2 = root$4.Uint8Array;

var _Uint8Array = Uint8Array$2;

/**
 * Converts `map` to its key-value pairs.
 *
 * @private
 * @param {Object} map The map to convert.
 * @returns {Array} Returns the key-value pairs.
 */

function mapToArray$1(map) {
    var index = -1,
        result = Array(map.size);

    map.forEach(function (value, key) {
        result[++index] = [key, value];
    });
    return result;
}

var _mapToArray = mapToArray$1;

/**
 * Converts `set` to an array of its values.
 *
 * @private
 * @param {Object} set The set to convert.
 * @returns {Array} Returns the values.
 */

function setToArray$1(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function (value) {
        result[++index] = value;
    });
    return result;
}

var _setToArray = setToArray$1;

var Symbol$1 = _Symbol,
    Uint8Array$1 = _Uint8Array,
    eq = eq_1,
    equalArrays$1 = _equalArrays,
    mapToArray = _mapToArray,
    setToArray = _setToArray;

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG$2 = 1,
    COMPARE_UNORDERED_FLAG = 2;

/** `Object#toString` result references. */
var boolTag$1 = '[object Boolean]',
    dateTag$1 = '[object Date]',
    errorTag$1 = '[object Error]',
    mapTag$2 = '[object Map]',
    numberTag$1 = '[object Number]',
    regexpTag$1 = '[object RegExp]',
    setTag$2 = '[object Set]',
    stringTag$1 = '[object String]',
    symbolTag = '[object Symbol]';

var arrayBufferTag$1 = '[object ArrayBuffer]',
    dataViewTag$2 = '[object DataView]';

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol$1 ? Symbol$1.prototype : undefined,
    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

/**
 * A specialized version of `baseIsEqualDeep` for comparing objects of
 * the same `toStringTag`.
 *
 * **Note:** This function only supports comparing values with tags of
 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {string} tag The `toStringTag` of the objects to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalByTag$1(object, other, tag, bitmask, customizer, equalFunc, stack) {
    switch (tag) {
        case dataViewTag$2:
            if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
                return false;
            }
            object = object.buffer;
            other = other.buffer;

        case arrayBufferTag$1:
            if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array$1(object), new Uint8Array$1(other))) {
                return false;
            }
            return true;

        case boolTag$1:
        case dateTag$1:
        case numberTag$1:
            // Coerce booleans to `1` or `0` and dates to milliseconds.
            // Invalid dates are coerced to `NaN`.
            return eq(+object, +other);

        case errorTag$1:
            return object.name == other.name && object.message == other.message;

        case regexpTag$1:
        case stringTag$1:
            // Coerce regexes to strings and treat strings, primitives and objects,
            // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
            // for more details.
            return object == other + '';

        case mapTag$2:
            var convert = mapToArray;

        case setTag$2:
            var isPartial = bitmask & COMPARE_PARTIAL_FLAG$2;
            convert || (convert = setToArray);

            if (object.size != other.size && !isPartial) {
                return false;
            }
            // Assume cyclic values are equal.
            var stacked = stack.get(object);
            if (stacked) {
                return stacked == other;
            }
            bitmask |= COMPARE_UNORDERED_FLAG;

            // Recursively compare objects (susceptible to call stack limits).
            stack.set(object, other);
            var result = equalArrays$1(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
            stack['delete'](object);
            return result;

        case symbolTag:
            if (symbolValueOf) {
                return symbolValueOf.call(object) == symbolValueOf.call(other);
            }
    }
    return false;
}

var _equalByTag = equalByTag$1;

/**
 * Appends the elements of `values` to `array`.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {Array} values The values to append.
 * @returns {Array} Returns `array`.
 */

function arrayPush$1(array, values) {
    var index = -1,
        length = values.length,
        offset = array.length;

    while (++index < length) {
        array[offset + index] = values[index];
    }
    return array;
}

var _arrayPush = arrayPush$1;

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */

var isArray$3 = Array.isArray;

var isArray_1 = isArray$3;

var arrayPush = _arrayPush,
    isArray$2 = isArray_1;

/**
 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @param {Function} symbolsFunc The function to get the symbols of `object`.
 * @returns {Array} Returns the array of property names and symbols.
 */
function baseGetAllKeys$1(object, keysFunc, symbolsFunc) {
    var result = keysFunc(object);
    return isArray$2(object) ? result : arrayPush(result, symbolsFunc(object));
}

var _baseGetAllKeys = baseGetAllKeys$1;

/**
 * A specialized version of `_.filter` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 */

function arrayFilter$1(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
            result[resIndex++] = value;
        }
    }
    return result;
}

var _arrayFilter = arrayFilter$1;

/**
 * This method returns a new empty array.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {Array} Returns the new empty array.
 * @example
 *
 * var arrays = _.times(2, _.stubArray);
 *
 * console.log(arrays);
 * // => [[], []]
 *
 * console.log(arrays[0] === arrays[1]);
 * // => false
 */

function stubArray$1() {
    return [];
}

var stubArray_1 = stubArray$1;

var arrayFilter = _arrayFilter,
    stubArray = stubArray_1;

/** Used for built-in method references. */
var objectProto$6 = Object.prototype;

/** Built-in value references. */
var propertyIsEnumerable$1 = objectProto$6.propertyIsEnumerable;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeGetSymbols = Object.getOwnPropertySymbols;

/**
 * Creates an array of the own enumerable symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */
var getSymbols$1 = !nativeGetSymbols
    ? stubArray
    : function (object) {
          if (object == null) {
              return [];
          }
          object = Object(object);
          return arrayFilter(nativeGetSymbols(object), function (symbol) {
              return propertyIsEnumerable$1.call(object, symbol);
          });
      };

var _getSymbols = getSymbols$1;

/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */

function baseTimes$1(n, iteratee) {
    var index = -1,
        result = Array(n);

    while (++index < n) {
        result[index] = iteratee(index);
    }
    return result;
}

var _baseTimes = baseTimes$1;

var baseGetTag$2 = _baseGetTag,
    isObjectLike$3 = isObjectLike_1;

/** `Object#toString` result references. */
var argsTag$2 = '[object Arguments]';

/**
 * The base implementation of `_.isArguments`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 */
function baseIsArguments$1(value) {
    return isObjectLike$3(value) && baseGetTag$2(value) == argsTag$2;
}

var _baseIsArguments = baseIsArguments$1;

var baseIsArguments = _baseIsArguments,
    isObjectLike$2 = isObjectLike_1;

/** Used for built-in method references. */
var objectProto$5 = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$4 = objectProto$5.hasOwnProperty;

/** Built-in value references. */
var propertyIsEnumerable = objectProto$5.propertyIsEnumerable;

/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */
var isArguments$1 = baseIsArguments(
    (function () {
        return arguments;
    })()
)
    ? baseIsArguments
    : function (value) {
          return isObjectLike$2(value) && hasOwnProperty$4.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
      };

var isArguments_1 = isArguments$1;

var isBuffer$2 = { exports: {} };

/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */

function stubFalse() {
    return false;
}

var stubFalse_1 = stubFalse;

(function (module, exports) {
    var root = _root,
        stubFalse = stubFalse_1;

    /** Detect free variable `exports`. */
    var freeExports = exports && !exports.nodeType && exports;

    /** Detect free variable `module`. */
    var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

    /** Detect the popular CommonJS extension `module.exports`. */
    var moduleExports = freeModule && freeModule.exports === freeExports;

    /** Built-in value references. */
    var Buffer = moduleExports ? root.Buffer : undefined;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;

    /**
     * Checks if `value` is a buffer.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
     * @example
     *
     * _.isBuffer(new Buffer(2));
     * // => true
     *
     * _.isBuffer(new Uint8Array(2));
     * // => false
     */
    var isBuffer = nativeIsBuffer || stubFalse;

    module.exports = isBuffer;
})(isBuffer$2, isBuffer$2.exports);

/** Used as references for various `Number` constants. */

var MAX_SAFE_INTEGER$1 = 9007199254740991;

/** Used to detect unsigned integer values. */
var reIsUint = /^(?:0|[1-9]\d*)$/;

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */
function isIndex$1(value, length) {
    var type = typeof value;
    length = length == null ? MAX_SAFE_INTEGER$1 : length;

    return !!length && (type == 'number' || (type != 'symbol' && reIsUint.test(value))) && value > -1 && value % 1 == 0 && value < length;
}

var _isIndex = isIndex$1;

/** Used as references for various `Number` constants. */

var MAX_SAFE_INTEGER = 9007199254740991;

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */
function isLength$2(value) {
    return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

var isLength_1 = isLength$2;

var baseGetTag$1 = _baseGetTag,
    isLength$1 = isLength_1,
    isObjectLike$1 = isObjectLike_1;

/** `Object#toString` result references. */
var argsTag$1 = '[object Arguments]',
    arrayTag$1 = '[object Array]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    funcTag = '[object Function]',
    mapTag$1 = '[object Map]',
    numberTag = '[object Number]',
    objectTag$2 = '[object Object]',
    regexpTag = '[object RegExp]',
    setTag$1 = '[object Set]',
    stringTag = '[object String]',
    weakMapTag$1 = '[object WeakMap]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag$1 = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/** Used to identify `toStringTag` values of typed arrays. */
var typedArrayTags = {};
typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
typedArrayTags[argsTag$1] =
    typedArrayTags[arrayTag$1] =
    typedArrayTags[arrayBufferTag] =
    typedArrayTags[boolTag] =
    typedArrayTags[dataViewTag$1] =
    typedArrayTags[dateTag] =
    typedArrayTags[errorTag] =
    typedArrayTags[funcTag] =
    typedArrayTags[mapTag$1] =
    typedArrayTags[numberTag] =
    typedArrayTags[objectTag$2] =
    typedArrayTags[regexpTag] =
    typedArrayTags[setTag$1] =
    typedArrayTags[stringTag] =
    typedArrayTags[weakMapTag$1] =
        false;

/**
 * The base implementation of `_.isTypedArray` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 */
function baseIsTypedArray$1(value) {
    return isObjectLike$1(value) && isLength$1(value.length) && !!typedArrayTags[baseGetTag$1(value)];
}

var _baseIsTypedArray = baseIsTypedArray$1;

/**
 * The base implementation of `_.unary` without support for storing metadata.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 */

function baseUnary$1(func) {
    return function (value) {
        return func(value);
    };
}

var _baseUnary = baseUnary$1;

var _nodeUtil = { exports: {} };

(function (module, exports) {
    var freeGlobal = _freeGlobal;

    /** Detect free variable `exports`. */
    var freeExports = exports && !exports.nodeType && exports;

    /** Detect free variable `module`. */
    var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

    /** Detect the popular CommonJS extension `module.exports`. */
    var moduleExports = freeModule && freeModule.exports === freeExports;

    /** Detect free variable `process` from Node.js. */
    var freeProcess = moduleExports && freeGlobal.process;

    /** Used to access faster Node.js helpers. */
    var nodeUtil = (function () {
        try {
            // Use `util.types` for Node.js 10+.
            var types = freeModule && freeModule.require && freeModule.require('util').types;

            if (types) {
                return types;
            }

            // Legacy `process.binding('util')` for Node.js < 10.
            return freeProcess && freeProcess.binding && freeProcess.binding('util');
        } catch (e) {}
    })();

    module.exports = nodeUtil;
})(_nodeUtil, _nodeUtil.exports);

var baseIsTypedArray = _baseIsTypedArray,
    baseUnary = _baseUnary,
    nodeUtil = _nodeUtil.exports;

/* Node.js helper references. */
var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

/**
 * Checks if `value` is classified as a typed array.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 * @example
 *
 * _.isTypedArray(new Uint8Array);
 * // => true
 *
 * _.isTypedArray([]);
 * // => false
 */
var isTypedArray$2 = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

var isTypedArray_1 = isTypedArray$2;

var baseTimes = _baseTimes,
    isArguments = isArguments_1,
    isArray$1 = isArray_1,
    isBuffer$1 = isBuffer$2.exports,
    isIndex = _isIndex,
    isTypedArray$1 = isTypedArray_1;

/** Used for built-in method references. */
var objectProto$4 = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$3 = objectProto$4.hasOwnProperty;

/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */
function arrayLikeKeys$1(value, inherited) {
    var isArr = isArray$1(value),
        isArg = !isArr && isArguments(value),
        isBuff = !isArr && !isArg && isBuffer$1(value),
        isType = !isArr && !isArg && !isBuff && isTypedArray$1(value),
        skipIndexes = isArr || isArg || isBuff || isType,
        result = skipIndexes ? baseTimes(value.length, String) : [],
        length = result.length;

    for (var key in value) {
        if (
            (inherited || hasOwnProperty$3.call(value, key)) &&
            !(
                skipIndexes &&
                // Safari 9 has enumerable `arguments.length` in strict mode.
                (key == 'length' ||
                    // Node.js 0.10 has enumerable non-index properties on buffers.
                    (isBuff && (key == 'offset' || key == 'parent')) ||
                    // PhantomJS 2 has enumerable non-index properties on typed arrays.
                    (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
                    // Skip index properties.
                    isIndex(key, length))
            )
        ) {
            result.push(key);
        }
    }
    return result;
}

var _arrayLikeKeys = arrayLikeKeys$1;

/** Used for built-in method references. */

var objectProto$3 = Object.prototype;

/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */
function isPrototype$1(value) {
    var Ctor = value && value.constructor,
        proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto$3;

    return value === proto;
}

var _isPrototype = isPrototype$1;

/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */

function overArg$1(func, transform) {
    return function (arg) {
        return func(transform(arg));
    };
}

var _overArg = overArg$1;

var overArg = _overArg;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeKeys$1 = overArg(Object.keys, Object);

var _nativeKeys = nativeKeys$1;

var isPrototype = _isPrototype,
    nativeKeys = _nativeKeys;

/** Used for built-in method references. */
var objectProto$2 = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$2 = objectProto$2.hasOwnProperty;

/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeys$1(object) {
    if (!isPrototype(object)) {
        return nativeKeys(object);
    }
    var result = [];
    for (var key in Object(object)) {
        if (hasOwnProperty$2.call(object, key) && key != 'constructor') {
            result.push(key);
        }
    }
    return result;
}

var _baseKeys = baseKeys$1;

var isFunction$1 = isFunction_1,
    isLength = isLength_1;

/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */
function isArrayLike$1(value) {
    return value != null && isLength(value.length) && !isFunction$1(value);
}

var isArrayLike_1 = isArrayLike$1;

var arrayLikeKeys = _arrayLikeKeys,
    baseKeys = _baseKeys,
    isArrayLike = isArrayLike_1;

/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */
function keys$1(object) {
    return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
}

var keys_1 = keys$1;

var baseGetAllKeys = _baseGetAllKeys,
    getSymbols = _getSymbols,
    keys = keys_1;

/**
 * Creates an array of own enumerable property names and symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */
function getAllKeys$1(object) {
    return baseGetAllKeys(object, keys, getSymbols);
}

var _getAllKeys = getAllKeys$1;

var getAllKeys = _getAllKeys;

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG$1 = 1;

/** Used for built-in method references. */
var objectProto$1 = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$1 = objectProto$1.hasOwnProperty;

/**
 * A specialized version of `baseIsEqualDeep` for objects with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalObjects$1(object, other, bitmask, customizer, equalFunc, stack) {
    var isPartial = bitmask & COMPARE_PARTIAL_FLAG$1,
        objProps = getAllKeys(object),
        objLength = objProps.length,
        othProps = getAllKeys(other),
        othLength = othProps.length;

    if (objLength != othLength && !isPartial) {
        return false;
    }
    var index = objLength;
    while (index--) {
        var key = objProps[index];
        if (!(isPartial ? key in other : hasOwnProperty$1.call(other, key))) {
            return false;
        }
    }
    // Check that cyclic values are equal.
    var objStacked = stack.get(object);
    var othStacked = stack.get(other);
    if (objStacked && othStacked) {
        return objStacked == other && othStacked == object;
    }
    var result = true;
    stack.set(object, other);
    stack.set(other, object);

    var skipCtor = isPartial;
    while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key],
            othValue = other[key];

        if (customizer) {
            var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
        }
        // Recursively compare objects (susceptible to call stack limits).
        if (!(compared === undefined ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
            result = false;
            break;
        }
        skipCtor || (skipCtor = key == 'constructor');
    }
    if (result && !skipCtor) {
        var objCtor = object.constructor,
            othCtor = other.constructor;

        // Non `Object` object instances with different constructors are not equal.
        if (objCtor != othCtor && 'constructor' in object && 'constructor' in other && !(typeof objCtor == 'function' && objCtor instanceof objCtor && typeof othCtor == 'function' && othCtor instanceof othCtor)) {
            result = false;
        }
    }
    stack['delete'](object);
    stack['delete'](other);
    return result;
}

var _equalObjects = equalObjects$1;

var getNative$3 = _getNative,
    root$3 = _root;

/* Built-in method references that are verified to be native. */
var DataView$1 = getNative$3(root$3, 'DataView');

var _DataView = DataView$1;

var getNative$2 = _getNative,
    root$2 = _root;

/* Built-in method references that are verified to be native. */
var Promise$2 = getNative$2(root$2, 'Promise');

var _Promise = Promise$2;

var getNative$1 = _getNative,
    root$1 = _root;

/* Built-in method references that are verified to be native. */
var Set$2 = getNative$1(root$1, 'Set');

var _Set = Set$2;

var getNative = _getNative,
    root = _root;

/* Built-in method references that are verified to be native. */
var WeakMap$2 = getNative(root, 'WeakMap');

var _WeakMap = WeakMap$2;

var DataView = _DataView,
    Map$1 = _Map,
    Promise$1 = _Promise,
    Set$1 = _Set,
    WeakMap$1 = _WeakMap,
    baseGetTag = _baseGetTag,
    toSource = _toSource;

/** `Object#toString` result references. */
var mapTag = '[object Map]',
    objectTag$1 = '[object Object]',
    promiseTag = '[object Promise]',
    setTag = '[object Set]',
    weakMapTag = '[object WeakMap]';

var dataViewTag = '[object DataView]';

/** Used to detect maps, sets, and weakmaps. */
var dataViewCtorString = toSource(DataView),
    mapCtorString = toSource(Map$1),
    promiseCtorString = toSource(Promise$1),
    setCtorString = toSource(Set$1),
    weakMapCtorString = toSource(WeakMap$1);

/**
 * Gets the `toStringTag` of `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
var getTag$1 = baseGetTag;

// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
if ((DataView && getTag$1(new DataView(new ArrayBuffer(1))) != dataViewTag) || (Map$1 && getTag$1(new Map$1()) != mapTag) || (Promise$1 && getTag$1(Promise$1.resolve()) != promiseTag) || (Set$1 && getTag$1(new Set$1()) != setTag) || (WeakMap$1 && getTag$1(new WeakMap$1()) != weakMapTag)) {
    getTag$1 = function (value) {
        var result = baseGetTag(value),
            Ctor = result == objectTag$1 ? value.constructor : undefined,
            ctorString = Ctor ? toSource(Ctor) : '';

        if (ctorString) {
            switch (ctorString) {
                case dataViewCtorString:
                    return dataViewTag;
                case mapCtorString:
                    return mapTag;
                case promiseCtorString:
                    return promiseTag;
                case setCtorString:
                    return setTag;
                case weakMapCtorString:
                    return weakMapTag;
            }
        }
        return result;
    };
}

var _getTag = getTag$1;

var Stack = _Stack,
    equalArrays = _equalArrays,
    equalByTag = _equalByTag,
    equalObjects = _equalObjects,
    getTag = _getTag,
    isArray = isArray_1,
    isBuffer = isBuffer$2.exports,
    isTypedArray = isTypedArray_1;

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1;

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    objectTag = '[object Object]';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * A specialized version of `baseIsEqual` for arrays and objects which performs
 * deep comparisons and tracks traversed objects enabling objects with circular
 * references to be compared.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function baseIsEqualDeep$1(object, other, bitmask, customizer, equalFunc, stack) {
    var objIsArr = isArray(object),
        othIsArr = isArray(other),
        objTag = objIsArr ? arrayTag : getTag(object),
        othTag = othIsArr ? arrayTag : getTag(other);

    objTag = objTag == argsTag ? objectTag : objTag;
    othTag = othTag == argsTag ? objectTag : othTag;

    var objIsObj = objTag == objectTag,
        othIsObj = othTag == objectTag,
        isSameTag = objTag == othTag;

    if (isSameTag && isBuffer(object)) {
        if (!isBuffer(other)) {
            return false;
        }
        objIsArr = true;
        objIsObj = false;
    }
    if (isSameTag && !objIsObj) {
        stack || (stack = new Stack());
        return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
    }
    if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

        if (objIsWrapped || othIsWrapped) {
            var objUnwrapped = objIsWrapped ? object.value() : object,
                othUnwrapped = othIsWrapped ? other.value() : other;

            stack || (stack = new Stack());
            return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
        }
    }
    if (!isSameTag) {
        return false;
    }
    stack || (stack = new Stack());
    return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
}

var _baseIsEqualDeep = baseIsEqualDeep$1;

var baseIsEqualDeep = _baseIsEqualDeep,
    isObjectLike = isObjectLike_1;

/**
 * The base implementation of `_.isEqual` which supports partial comparisons
 * and tracks traversed objects.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @param {boolean} bitmask The bitmask flags.
 *  1 - Unordered comparison
 *  2 - Partial comparison
 * @param {Function} [customizer] The function to customize comparisons.
 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 */
function baseIsEqual$1(value, other, bitmask, customizer, stack) {
    if (value === other) {
        return true;
    }
    if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
        return value !== value && other !== other;
    }
    return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual$1, stack);
}

var _baseIsEqual = baseIsEqual$1;

var baseIsEqual = _baseIsEqual;

/**
 * Performs a deep comparison between two values to determine if they are
 * equivalent.
 *
 * **Note:** This method supports comparing arrays, array buffers, booleans,
 * date objects, error objects, maps, numbers, `Object` objects, regexes,
 * sets, strings, symbols, and typed arrays. `Object` objects are compared
 * by their own, not inherited, enumerable properties. Functions and DOM
 * nodes are compared by strict equality, i.e. `===`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.isEqual(object, other);
 * // => true
 *
 * object === other;
 * // => false
 */
function isEqual(value, other) {
    return baseIsEqual(value, other);
}

var isEqual_1 = isEqual;

var styles$C = {
    DisplayText: 'Polaris-DisplayText',
    sizeSmall: 'Polaris-DisplayText--sizeSmall',
    sizeMedium: 'Polaris-DisplayText--sizeMedium',
    sizeLarge: 'Polaris-DisplayText--sizeLarge',
    sizeExtraLarge: 'Polaris-DisplayText--sizeExtraLarge',
};

function DisplayText({ element: Element = 'p', children, size = 'medium' }) {
    const className = classNames(styles$C.DisplayText, size && styles$C[variationName('size', size)]);
    return /*#__PURE__*/ React.createElement(
        Element,
        {
            className: className,
        },
        children
    );
}

const img =
    "data:image/svg+xml,%3csvg width='60' height='60' fill='none' xmlns='http://www.w3.org/2000/svg'%3e%3cpath fill-rule='evenodd' clip-rule='evenodd' d='M41.87 24a17.87 17.87 0 11-35.74 0 17.87 17.87 0 0135.74 0zm-3.15 18.96a24 24 0 114.24-4.24L59.04 54.8a3 3 0 11-4.24 4.24L38.72 42.96z' fill='%238C9196'/%3e%3c/svg%3e";
var emptySearch = img;

function EmptySearchResult({ title, description, withIllustration }) {
    const i18n = useI18n();
    const altText = i18n.translate('Polaris.EmptySearchResult.altText');
    const descriptionMarkup = description ? /*#__PURE__*/ React.createElement('p', null, description) : null;
    const illustrationMarkup = withIllustration
        ? /*#__PURE__*/ React.createElement(Image, {
              alt: altText,
              source: emptySearch,
              draggable: false,
          })
        : null;
    return /*#__PURE__*/ React.createElement(
        Stack$2,
        {
            alignment: 'center',
            vertical: true,
        },
        illustrationMarkup,
        /*#__PURE__*/ React.createElement(
            DisplayText,
            {
                size: 'small',
            },
            title
        ),
        /*#__PURE__*/ React.createElement(
            TextStyle,
            {
                variation: 'subdued',
            },
            descriptionMarkup
        )
    );
}

var styles$B = {
    EmptyState: 'Polaris-EmptyState',
    Section: 'Polaris-EmptyState__Section',
    Details: 'Polaris-EmptyState__Details',
    Image: 'Polaris-EmptyState__Image',
    ImageContainer: 'Polaris-EmptyState__ImageContainer',
    DetailsContainer: 'Polaris-EmptyState__DetailsContainer',
    withinContentContainer: 'Polaris-EmptyState--withinContentContainer',
    Content: 'Polaris-EmptyState__Content',
    imageContained: 'Polaris-EmptyState--imageContained',
    fullWidth: 'Polaris-EmptyState--fullWidth',
    Actions: 'Polaris-EmptyState__Actions',
    FooterContent: 'Polaris-EmptyState__FooterContent',
};

function EmptyState({ children, heading, image, largeImage, imageContained, fullWidth = false, action, secondaryAction, footerContent }) {
    const withinContentContainer = react.exports.useContext(WithinContentContext);
    const className = classNames(styles$B.EmptyState, fullWidth && styles$B.fullWidth, imageContained && styles$B.imageContained, withinContentContainer && styles$B.withinContentContainer);
    const imageMarkup = largeImage
        ? /*#__PURE__*/

          /*#__PURE__*/
          jsx(Image, {
              alt: '',
              role: 'presentation',
              className: styles$B.Image,
              source: largeImage,
              sourceSet: [
                  {
                      source: image,
                      descriptor: '568w',
                  },
                  {
                      source: largeImage,
                      descriptor: '1136w',
                  },
              ],
              sizes: '(max-width: 568px) 60vw',
          })
        : /*#__PURE__*/

          /*#__PURE__*/
          jsx(Image, {
              role: 'presentation',
              alt: '',
              className: styles$B.Image,
              source: image,
          });
    const secondaryActionMarkup = secondaryAction ? buttonFrom(secondaryAction, {}) : null;
    const footerContentMarkup = footerContent
        ? /*#__PURE__*/

          /*#__PURE__*/
          jsx('div', {
              className: styles$B.FooterContent,
              children: /*#__PURE__*/ jsx(TextContainer, {
                  children: footerContent,
              }),
          })
        : null;
    const headingSize = withinContentContainer ? 'small' : 'medium';
    const primaryActionMarkup = action
        ? buttonFrom(action, {
              primary: true,
              size: 'medium',
          })
        : null;
    const headingMarkup = heading
        ? /*#__PURE__*/

          /*#__PURE__*/
          jsx(DisplayText, {
              size: headingSize,
              children: heading,
          })
        : null;
    const childrenMarkup = children
        ? /*#__PURE__*/

          /*#__PURE__*/
          jsx('div', {
              className: styles$B.Content,
              children: children,
          })
        : null;
    const textContentMarkup =
        headingMarkup || children
            ? /*#__PURE__*/

              /*#__PURE__*/
              jsxs(TextContainer, {
                  children: [headingMarkup, childrenMarkup],
              })
            : null;
    const actionsMarkup =
        primaryActionMarkup || secondaryActionMarkup
            ? /*#__PURE__*/

              /*#__PURE__*/
              jsx('div', {
                  className: styles$B.Actions,
                  children: /*#__PURE__*/ jsxs(Stack$2, {
                      alignment: 'center',
                      distribution: 'center',
                      spacing: 'tight',
                      children: [primaryActionMarkup, secondaryActionMarkup],
                  }),
              })
            : null;
    const detailsMarkup =
        textContentMarkup || actionsMarkup || footerContentMarkup
            ? /*#__PURE__*/

              /*#__PURE__*/
              jsx('div', {
                  className: styles$B.DetailsContainer,
                  children: /*#__PURE__*/ jsxs('div', {
                      className: styles$B.Details,
                      children: [textContentMarkup, actionsMarkup, footerContentMarkup],
                  }),
              })
            : /*#__PURE__*/

              /*#__PURE__*/
              jsx('div', {
                  className: styles$B.DetailsContainer,
              });
    return (
        /*#__PURE__*/

        /*#__PURE__*/
        jsx('div', {
            className: className,
            children: /*#__PURE__*/ jsxs('div', {
                className: styles$B.Section,
                children: [
                    detailsMarkup,
                    /*#__PURE__*/ jsx('div', {
                        className: styles$B.ImageContainer,
                        children: imageMarkup,
                    }),
                ],
            }),
        })
    );
}

var styles$A = {
    Filters: 'Polaris-Filters',
    FiltersContainer: 'Polaris-Filters__FiltersContainer',
    FiltersContainerHeader: 'Polaris-Filters__FiltersContainerHeader',
    FiltersDesktopContainerContent: 'Polaris-Filters__FiltersDesktopContainerContent',
    FiltersMobileContainerContent: 'Polaris-Filters__FiltersMobileContainerContent',
    FiltersContainerFooter: 'Polaris-Filters__FiltersContainerFooter',
    FiltersMobileContainerFooter: 'Polaris-Filters__FiltersMobileContainerFooter',
    EmptyFooterState: 'Polaris-Filters__EmptyFooterState',
    FilterTriggerContainer: 'Polaris-Filters__FilterTriggerContainer',
    FilterTrigger: 'Polaris-Filters__FilterTrigger',
    FilterTriggerTitle: 'Polaris-Filters__FilterTriggerTitle',
    AppliedFilterBadgeContainer: 'Polaris-Filters__AppliedFilterBadgeContainer',
    open: 'Polaris-Filters--open',
    FilterTriggerLabelContainer: 'Polaris-Filters__FilterTriggerLabelContainer',
    first: 'Polaris-Filters--first',
    last: 'Polaris-Filters--last',
    FilterNodeContainer: 'Polaris-Filters__FilterNodeContainer',
    SearchIcon: 'Polaris-Filters__SearchIcon',
    Backdrop: 'Polaris-Filters__Backdrop',
    HelpText: 'Polaris-Filters__HelpText',
    TagsContainer: 'Polaris-Filters__TagsContainer',
};

var styles$z = {
    ConnectedFilterControl: 'Polaris-Filters-ConnectedFilterControl',
    CenterContainer: 'Polaris-Filters-ConnectedFilterControl__CenterContainer',
    right: 'Polaris-Filters-ConnectedFilterControl--right',
    Item: 'Polaris-Filters-ConnectedFilterControl__Item',
    'Item-focused': 'Polaris-Filters-ConnectedFilterControl__Item--focused',
    ProxyButtonContainer: 'Polaris-Filters-ConnectedFilterControl__ProxyButtonContainer',
    RightContainer: 'Polaris-Filters-ConnectedFilterControl__RightContainer',
    MoreFiltersButtonContainer: 'Polaris-Filters-ConnectedFilterControl__MoreFiltersButtonContainer',
    queryFieldHidden: 'Polaris-Filters-ConnectedFilterControl--queryFieldHidden',
    RightContainerWithoutMoreFilters: 'Polaris-Filters-ConnectedFilterControl__RightContainerWithoutMoreFilters',
    onlyButtonVisible: 'Polaris-Filters-ConnectedFilterControl--onlyButtonVisible',
    Wrapper: 'Polaris-Filters-ConnectedFilterControl__Wrapper',
    AuxiliaryContainer: 'Polaris-Filters-ConnectedFilterControl__AuxiliaryContainer',
};

function Item$2({ children }) {
    const { value: focused, setTrue: forceTrueFocused, setFalse: forceFalseFocused } = useToggle(false);
    const className = classNames(styles$z.Item, focused && styles$z['Item-focused']);
    return /*#__PURE__*/ React.createElement(
        'div',
        {
            onBlur: forceFalseFocused,
            onFocus: forceTrueFocused,
            className: className,
        },
        children
    );
}

const FILTER_FIELD_MIN_WIDTH = 150;

class ConnectedFilterControl extends react.exports.Component {
    constructor(...args) {
        super(...args);
        this.state = {
            availableWidth: 0,
            proxyButtonsWidth: {},
        };
        this.container = /*#__PURE__*/ react.exports.createRef();
        this.proxyButtonContainer = /*#__PURE__*/ react.exports.createRef();
        this.moreFiltersButtonContainer = /*#__PURE__*/ react.exports.createRef();
        this.handleResize = debounce_1(
            () => {
                this.measureProxyButtons();
                this.measureAvailableWidth();
            },
            40,
            {
                leading: true,
                trailing: true,
                maxWait: 40,
            }
        );
    }

    componentDidMount() {
        this.handleResize();
    }

    render() {
        const { children, rightPopoverableActions, rightAction, auxiliary, forceShowMorefiltersButton = true, queryFieldHidden } = this.props;
        const actionsToRender = rightPopoverableActions != null ? this.getActionsToRender(rightPopoverableActions) : [];
        const className = classNames(styles$z.ConnectedFilterControl, rightPopoverableActions && styles$z.right);
        const shouldRenderMoreFiltersButton = forceShowMorefiltersButton || (rightPopoverableActions && rightPopoverableActions.length !== actionsToRender.length);
        const RightContainerClassName = classNames(styles$z.RightContainer, !shouldRenderMoreFiltersButton && styles$z.RightContainerWithoutMoreFilters, queryFieldHidden && styles$z.queryFieldHidden);
        const rightMarkup =
            actionsToRender.length > 0
                ? /*#__PURE__*/

                  /*#__PURE__*/
                  jsx('div', {
                      className: RightContainerClassName,
                      children: this.popoverFrom(actionsToRender),
                  })
                : null;
        const moreFiltersButtonContainerClassname = classNames(styles$z.MoreFiltersButtonContainer, actionsToRender.length === 0 && styles$z.onlyButtonVisible);
        const rightActionMarkup = rightAction
            ? /*#__PURE__*/

              /*#__PURE__*/
              jsx('div', {
                  ref: this.moreFiltersButtonContainer,
                  className: moreFiltersButtonContainerClassname,
                  children:
                      shouldRenderMoreFiltersButton &&
                      /*#__PURE__*/

                      /*#__PURE__*/
                      jsx(Item$2, {
                          children: rightAction,
                      }),
              })
            : null;
        const proxyButtonMarkup = rightPopoverableActions
            ? /*#__PURE__*/

              /*#__PURE__*/
              jsx('div', {
                  className: styles$z.ProxyButtonContainer,
                  ref: this.proxyButtonContainer,
                  'aria-hidden': true,
                  children: rightPopoverableActions.map((action) =>
                      /*#__PURE__*/

                      /*#__PURE__*/
                      jsx(
                          'div',
                          {
                              'data-key': action.key,
                              children: this.activatorButtonFrom(action, {
                                  proxy: true,
                              }),
                          },
                          action.key
                      )
                  ),
              })
            : null;
        const auxMarkup = auxiliary
            ? /*#__PURE__*/

              /*#__PURE__*/
              jsx('div', {
                  className: styles$z.AuxiliaryContainer,
                  children: auxiliary,
              })
            : null;
        return (
            /*#__PURE__*/

            /*#__PURE__*/
            jsxs(Fragment, {
                children: [
                    proxyButtonMarkup,
                    /*#__PURE__*/ jsxs('div', {
                        className: styles$z.Wrapper,
                        children: [
                            /*#__PURE__*/ jsxs('div', {
                                className: className,
                                ref: this.container,
                                children: [
                                    children
                                        ? /*#__PURE__*/

                                          /*#__PURE__*/
                                          jsx('div', {
                                              className: styles$z.CenterContainer,
                                              children: /*#__PURE__*/ jsx(Item$2, {
                                                  children: children,
                                              }),
                                          })
                                        : null,
                                    rightMarkup,
                                    rightActionMarkup,
                                    /*#__PURE__*/ jsx(EventListener, {
                                        event: 'resize',
                                        handler: this.handleResize,
                                    }),
                                ],
                            }),
                            auxMarkup,
                        ],
                    }),
                ],
            })
        );
    }

    measureProxyButtons() {
        if (this.proxyButtonContainer.current) {
            const proxyButtonsWidth = {}; // this number is magical, but tweaking it solved the problem of items overlapping

            const tolerance = 78;

            if (this.proxyButtonContainer.current) {
                Array.from(this.proxyButtonContainer.current.children).forEach((element) => {
                    const buttonWidth = element.getBoundingClientRect().width + tolerance;
                    const buttonKey = element instanceof HTMLElement && element.dataset.key;

                    if (buttonKey) {
                        proxyButtonsWidth[buttonKey] = buttonWidth;
                    }
                });
            }

            this.setState({
                proxyButtonsWidth,
            });
        }
    }

    measureAvailableWidth() {
        if (this.container.current && this.moreFiltersButtonContainer.current) {
            const containerWidth = this.container.current.getBoundingClientRect().width;
            const moreFiltersButtonWidth = this.moreFiltersButtonContainer.current.getBoundingClientRect().width;
            const filtersActionWidth = 0;
            const filterFieldMinWidth = this.props.queryFieldHidden ? 0 : FILTER_FIELD_MIN_WIDTH;
            const availableWidth = containerWidth - filterFieldMinWidth - moreFiltersButtonWidth - filtersActionWidth;
            this.setState({
                availableWidth,
            });
        }
    }

    getActionsToRender(actions) {
        let remainingWidth = this.state.availableWidth;
        const actionsToReturn = [];

        for (let i = 0; remainingWidth > 0 && i < actions.length; i++) {
            const action = actions[i];
            const actionWidth = this.state.proxyButtonsWidth[action.key];

            if (actionWidth <= remainingWidth) {
                actionsToReturn.push(action);
                remainingWidth -= actionWidth;
            } else {
                // When we can't fit an action, we break the loop.
                // The ones that didn't fit will be accessible through the "More filters" button
                break;
            }
        }

        return actionsToReturn;
    }

    activatorButtonFrom(action, options) {
        const id = options !== null && options !== void 0 && options.proxy ? undefined : `Activator-${action.key}`;
        return (
            /*#__PURE__*/

            /*#__PURE__*/
            jsx(Button, {
                onClick: action.onAction,
                disclosure: true,
                disabled: this.props.disabled || action.disabled,
                id: id,
                children: action.content,
            })
        );
    }

    popoverFrom(actions) {
        return actions.map((action) => {
            return (
                /*#__PURE__*/

                /*#__PURE__*/
                jsx(
                    Item$2,
                    {
                        children: /*#__PURE__*/ jsx(Popover, {
                            active: action.popoverOpen,
                            activator: this.activatorButtonFrom(action),
                            onClose: action.onAction,
                            preferredAlignment: 'left',
                            sectioned: true,
                            children: action.popoverContent,
                        }),
                    },
                    action.key
                )
            );
        });
    }
}

function TagsWrapper({ children, hidden }) {
    if (hidden) {
        return /*#__PURE__*/ React.createElement(VisuallyHidden, null, children);
    }

    return /*#__PURE__*/ React.createElement(React.Fragment, null, children);
}

var styles$y = {
    Tag: 'Polaris-Tag',
    disabled: 'Polaris-Tag--disabled',
    clickable: 'Polaris-Tag--clickable',
    removable: 'Polaris-Tag--removable',
    linkable: 'Polaris-Tag--linkable',
    TagText: 'Polaris-Tag__TagText',
    Button: 'Polaris-Tag__Button',
    segmented: 'Polaris-Tag--segmented',
    Link: 'Polaris-Tag__Link',
    LinkText: 'Polaris-Tag__LinkText',
};

function Tag({ children, disabled = false, onClick, onRemove, accessibilityLabel, url }) {
    const i18n = useI18n();
    const segmented = onRemove && url;
    const className = classNames(styles$y.Tag, disabled && styles$y.disabled, onClick && styles$y.clickable, onRemove && styles$y.removable, url && !disabled && styles$y.linkable, segmented && styles$y.segmented);

    if (onClick) {
        return /*#__PURE__*/ React.createElement(
            'button',
            {
                type: 'button',
                disabled: disabled,
                className: className,
                onClick: onClick,
            },
            children
        );
    }

    let tagTitle = accessibilityLabel;

    if (!tagTitle) {
        tagTitle = typeof children === 'string' ? children : undefined;
    }

    const ariaLabel = i18n.translate('Polaris.Tag.ariaLabel', {
        children: tagTitle || '',
    });
    const removeButton = onRemove
        ? /*#__PURE__*/ React.createElement(
              'button',
              {
                  type: 'button',
                  'aria-label': ariaLabel,
                  className: classNames(styles$y.Button, segmented && styles$y.segmented),
                  onClick: onRemove,
                  onMouseUp: handleMouseUpByBlurring,
                  disabled: disabled,
              },
              /*#__PURE__*/ React.createElement(Icon, {
                  source: SvgCancelSmallMinor,
              })
          )
        : null;
    const tagContent =
        url && !disabled
            ? /*#__PURE__*/ React.createElement(
                  'a',
                  {
                      className: classNames(styles$y.Link, segmented && styles$y.segmented),
                      href: url,
                  },
                  /*#__PURE__*/ React.createElement(
                      'span',
                      {
                          title: tagTitle,
                          className: styles$y.LinkText,
                      },
                      children
                  )
              )
            : /*#__PURE__*/ React.createElement(
                  'span',
                  {
                      title: tagTitle,
                      className: styles$y.TagText,
                  },
                  children
              );
    return /*#__PURE__*/ React.createElement(
        'span',
        {
            className: className,
        },
        tagContent,
        removeButton
    );
}

var styles$x = {
    Sheet: 'Polaris-Sheet',
    Container: 'Polaris-Sheet__Container',
    Bottom: 'Polaris-Sheet__Bottom',
    enterBottom: 'Polaris-Sheet--enterBottom',
    enterBottomActive: 'Polaris-Sheet--enterBottomActive',
    exitBottom: 'Polaris-Sheet--exitBottom',
    exitBottomActive: 'Polaris-Sheet--exitBottomActive',
    Right: 'Polaris-Sheet__Right',
    enterRight: 'Polaris-Sheet--enterRight',
    enterRightActive: 'Polaris-Sheet--enterRightActive',
    exitRight: 'Polaris-Sheet--exitRight',
    exitRightActive: 'Polaris-Sheet--exitRightActive',
};

function useMediaQuery() {
    const mediaQuery = react.exports.useContext(MediaQueryContext);

    if (!mediaQuery) {
        throw new Error('No mediaQuery was provided. Your application must be wrapped in an <AppProvider> component. See https://polaris.shopify.com/components/structure/app-provider for implementation instructions.');
    }

    return mediaQuery;
}

function useFocusManager({ trapping }) {
    const focusManager = react.exports.useContext(FocusManagerContext);
    const id = useUniqueId();

    if (!focusManager) {
        throw new MissingAppProviderError('No FocusManager was provided.');
    }

    const { trapFocusList, add: addFocusItem, remove: removeFocusItem } = focusManager;
    const canSafelyFocus = trapFocusList[0] === id;
    const value = react.exports.useMemo(
        () => ({
            canSafelyFocus,
        }),
        [canSafelyFocus]
    );
    react.exports.useEffect(() => {
        if (!trapping) return;
        addFocusItem(id);
        return () => {
            removeFocusItem(id);
        };
    }, [addFocusItem, id, removeFocusItem, trapping]);
    return value;
}

const Focus = /*#__PURE__*/ react.exports.memo(function Focus({ children, disabled, root }) {
    react.exports.useEffect(() => {
        if (disabled || !root) {
            return;
        }

        const node = isRef$2(root) ? root.current : root;

        if (!node || node.querySelector('[autofocus]')) {
            return;
        }

        focusFirstFocusableNode(node, false);
    }, [disabled, root]);
    return (
        /*#__PURE__*/

        /*#__PURE__*/
        jsx(Fragment, {
            children: children,
        })
    );
});

function isRef$2(ref) {
    return ref.current !== undefined;
}

function TrapFocus({ trapping = true, children }) {
    const { canSafelyFocus } = useFocusManager({
        trapping,
    });
    const focusTrapWrapper = react.exports.useRef(null);
    const [disableFocus, setDisableFocus] = react.exports.useState(true);
    react.exports.useEffect(() => {
        const disable = canSafelyFocus && !(focusTrapWrapper.current && focusTrapWrapper.current.contains(document.activeElement)) ? !trapping : true;
        setDisableFocus(disable);
    }, [canSafelyFocus, trapping]);

    const handleFocusIn = (event) => {
        const containerContentsHaveFocus = focusTrapWrapper.current && focusTrapWrapper.current.contains(document.activeElement);

        if (trapping === false || !focusTrapWrapper.current || containerContentsHaveFocus || (event.target instanceof Element && event.target.matches(`${portal.selector} *`))) {
            return;
        }

        if (canSafelyFocus && event.target instanceof HTMLElement && focusTrapWrapper.current !== event.target && !focusTrapWrapper.current.contains(event.target)) {
            focusFirstFocusableNode(focusTrapWrapper.current);
        }
    };

    const handleTab = (event) => {
        if (trapping === false || !focusTrapWrapper.current) {
            return;
        }

        const firstFocusableNode = findFirstKeyboardFocusableNode(focusTrapWrapper.current);
        const lastFocusableNode = findLastKeyboardFocusableNode(focusTrapWrapper.current);

        if (event.target === lastFocusableNode && !event.shiftKey) {
            event.preventDefault();
            focusFirstKeyboardFocusableNode(focusTrapWrapper.current);
        }

        if (event.target === firstFocusableNode && event.shiftKey) {
            event.preventDefault();
            focusLastKeyboardFocusableNode(focusTrapWrapper.current);
        }
    };

    return (
        /*#__PURE__*/

        /*#__PURE__*/
        jsx(Focus, {
            disabled: disableFocus,
            root: focusTrapWrapper.current,
            children: /*#__PURE__*/ jsxs('div', {
                ref: focusTrapWrapper,
                children: [
                    /*#__PURE__*/ jsx(EventListener, {
                        event: 'focusin',
                        handler: handleFocusIn,
                    }),
                    /*#__PURE__*/ jsx(KeypressListener, {
                        keyCode: Key.Tab,
                        keyEvent: 'keydown',
                        handler: handleTab,
                    }),
                    children,
                ],
            }),
        })
    );
}

const BOTTOM_CLASS_NAMES = {
    enter: classNames(styles$x.Bottom, styles$x.enterBottom),
    enterActive: classNames(styles$x.Bottom, styles$x.enterBottomActive),
    exit: classNames(styles$x.Bottom, styles$x.exitBottom),
    exitActive: classNames(styles$x.Bottom, styles$x.exitBottomActive),
};
const RIGHT_CLASS_NAMES = {
    enter: classNames(styles$x.Right, styles$x.enterRight),
    enterActive: classNames(styles$x.Right, styles$x.enterRightActive),
    exit: classNames(styles$x.Right, styles$x.exitRight),
    exitActive: classNames(styles$x.Right, styles$x.exitRightActive),
};
/** @deprecated Use <Modal /> instead or avoid modal patterns all together. */

function Sheet({ children, open, onClose, onEntered, onExit, accessibilityLabel, activator }) {
    const { isNavigationCollapsed } = useMediaQuery();
    const container = react.exports.useRef(null);
    const activatorRef = react.exports.useRef(null);
    const handleClose = react.exports.useCallback(() => {
        onClose();
        const activatorElement = activator && isRef$1(activator) ? activator && activator.current : activatorRef.current;

        if (activatorElement) {
            requestAnimationFrame(() => focusFirstFocusableNode(activatorElement));
        }
    }, [activator, onClose]);
    react.exports.useEffect(() => {}, []);
    const activatorMarkup =
        activator && !isRef$1(activator)
            ? /*#__PURE__*/

              /*#__PURE__*/
              jsx('div', {
                  ref: activatorRef,
                  children: activator,
              })
            : null;
    return (
        /*#__PURE__*/

        /*#__PURE__*/
        jsxs(Fragment, {
            children: [
                activatorMarkup,
                /*#__PURE__*/ jsxs(Portal, {
                    idPrefix: 'sheet',
                    children: [
                        /*#__PURE__*/ jsx(CSSTransition$1, {
                            nodeRef: container,
                            classNames: isNavigationCollapsed ? BOTTOM_CLASS_NAMES : RIGHT_CLASS_NAMES,
                            timeout: parseInt(tokens.motion['duration-300'], 10),
                            in: open,
                            mountOnEnter: true,
                            unmountOnExit: true,
                            onEntered: onEntered,
                            onExit: onExit,
                            children: /*#__PURE__*/ jsx('div', {
                                ...Object.assign(
                                    {
                                        className: styles$x.Container,
                                    },
                                    layer.props,
                                    overlay$2.props,
                                    {
                                        ref: container,
                                    }
                                ),
                                children: /*#__PURE__*/ jsx(TrapFocus, {
                                    trapping: open,
                                    children: /*#__PURE__*/ jsx('div', {
                                        role: 'dialog',
                                        'aria-modal': true,
                                        tabIndex: -1,
                                        className: styles$x.Sheet,
                                        'aria-label': accessibilityLabel,
                                        children: children,
                                    }),
                                }),
                            }),
                        }),
                        /*#__PURE__*/ jsx(KeypressListener, {
                            keyCode: Key.Escape,
                            handler: handleClose,
                        }),
                        open &&
                            /*#__PURE__*/

                            /*#__PURE__*/
                            jsx(Backdrop, {
                                transparent: true,
                                onClick: handleClose,
                            }),
                    ],
                }),
            ],
        })
    );
}

function isRef$1(ref) {
    return Object.prototype.hasOwnProperty.call(ref, 'current');
}

var Suffix;

(function (Suffix) {
    Suffix['Filter'] = 'Filter';
    Suffix['Shortcut'] = 'Shortcut';
})(Suffix || (Suffix = {}));

class FiltersInner extends react.exports.Component {
    constructor(...args) {
        super(...args);
        this.state = {
            open: false,
            readyForFocus: false,
        };
        this.moreFiltersButtonContainer = /*#__PURE__*/ react.exports.createRef();
        this.moreFiltersDoneButtonContainer = /*#__PURE__*/ react.exports.createRef();
        this.focusNode = /*#__PURE__*/ react.exports.createRef();

        this.closeFilters = () => {
            this.setState(
                {
                    open: false,
                },
                () => {
                    if (this.moreFiltersButtonContainer.current) {
                        focusFirstFocusableNode(this.moreFiltersButtonContainer.current, false);
                    }
                }
            );
        };

        this.toggleFilters = () => {
            if (this.state.open === true) {
                this.closeFilters();
            } else {
                this.openFilters();
            }
        };

        this.setReadyForFocus = (newState) => () => {
            this.setState({
                readyForFocus: newState,
            });
        };

        this.handleClearAll = () => {
            this.props.onClearAll();
            this.moreFiltersDoneButtonContainer.current && focusFirstFocusableNode(this.moreFiltersDoneButtonContainer.current, false);
        };
    }

    render() {
        const {
            filters,
            queryValue,
            onQueryBlur,
            onQueryChange,
            onQueryFocus,
            focused,
            onClearAll,
            appliedFilters,
            onQueryClear,
            queryPlaceholder,
            children,
            disabled = false,
            helpText,
            hideTags,
            hideQueryField,
            i18n,
            mediaQuery: { isNavigationCollapsed },
        } = this.props;
        const { resourceName } = this.context;
        const { open, readyForFocus } = this.state;
        const backdropMarkup = open
            ? /*#__PURE__*/

              /*#__PURE__*/
              jsxs(Fragment, {
                  children: [
                      /*#__PURE__*/ jsx(ScrollLock, {}),
                      /*#__PURE__*/ jsx('div', {
                          className: styles$A.Backdrop,
                          onClick: this.closeFilters,
                      }),
                  ],
              })
            : null;
        const filtersContentMarkup = filters.map((filter, index) => {
            const filterIsOpen = this.state[`${filter.key}${Suffix.Filter}`] === true;
            const icon = filterIsOpen ? SvgChevronUpMinor : SvgChevronDownMinor;
            const className = classNames(styles$A.FilterTriggerContainer, filterIsOpen && styles$A.open, index === 0 && styles$A.first, filters.length !== 1 && index === filters.length - 1 && styles$A.last);
            const appliedFilterContent = this.getAppliedFilterContent(filter.key);
            const appliedFilterBadgeMarkup = appliedFilterContent
                ? /*#__PURE__*/

                  /*#__PURE__*/
                  jsx('div', {
                      className: styles$A.AppliedFilterBadgeContainer,
                      children: /*#__PURE__*/ jsx(Badge, {
                          size: 'small',
                          status: 'new',
                          children: appliedFilterContent,
                      }),
                  })
                : null;
            const collapsibleID = `${filter.key}Collapsible`;
            const buttonClassName = classNames(styles$A.FilterTrigger);
            return (
                /*#__PURE__*/

                /*#__PURE__*/
                jsxs(
                    'div',
                    {
                        className: className,
                        children: [
                            /*#__PURE__*/ jsxs('button', {
                                onClick: () => this.toggleFilter(filter.key),
                                className: buttonClassName,
                                id: `${filter.key}ToggleButton`,
                                type: 'button',
                                'aria-controls': collapsibleID,
                                'aria-expanded': filterIsOpen,
                                children: [
                                    /*#__PURE__*/ jsxs('div', {
                                        className: styles$A.FilterTriggerLabelContainer,
                                        children: [
                                            /*#__PURE__*/ jsx('h3', {
                                                className: styles$A.FilterTriggerTitle,
                                                children: /*#__PURE__*/ jsx(TextStyle, {
                                                    variation: this.props.disabled || filter.disabled ? 'subdued' : undefined,
                                                    children: filter.label,
                                                }),
                                            }),
                                            /*#__PURE__*/ jsx('span', {
                                                className: styles$A.FilterTriggerIcon,
                                                children: /*#__PURE__*/ jsx(Icon, {
                                                    source: icon,
                                                    color: 'base',
                                                }),
                                            }),
                                        ],
                                    }),
                                    appliedFilterBadgeMarkup,
                                ],
                            }),
                            /*#__PURE__*/ jsx(Collapsible, {
                                id: collapsibleID,
                                open: filterIsOpen,
                                children: /*#__PURE__*/ jsx('div', {
                                    className: styles$A.FilterNodeContainer,
                                    children: /*#__PURE__*/ jsx(Focus, {
                                        disabled: !filterIsOpen || !readyForFocus || !open,
                                        root: this.focusNode,
                                        children: this.generateFilterMarkup(filter),
                                    }),
                                }),
                            }),
                        ],
                    },
                    filter.key
                )
            );
        });
        const appliedFiltersCount = appliedFilters ? appliedFilters.length : 0;
        const moreFiltersLabel =
            hideTags && appliedFiltersCount > 0
                ? i18n.translate('Polaris.Filters.moreFiltersWithCount', {
                      count: appliedFiltersCount,
                  })
                : i18n.translate('Polaris.Filters.moreFilters');
        const rightActionMarkup = filters.length
            ? /*#__PURE__*/

              /*#__PURE__*/
              jsx('div', {
                  ref: this.moreFiltersButtonContainer,
                  children: /*#__PURE__*/ jsx(Button, {
                      onClick: this.toggleFilters,
                      disabled: disabled,
                      children: moreFiltersLabel,
                  }),
              })
            : null;
        const filterResourceName = resourceName || {
            singular: i18n.translate('Polaris.ResourceList.defaultItemSingular'),
            plural: i18n.translate('Polaris.ResourceList.defaultItemPlural'),
        };
        const transformedFilters = this.transformFilters(filters);

        const filtersControlMarkup =
            /*#__PURE__*/

            /*#__PURE__*/
            jsx(ConnectedFilterControl, {
                rightPopoverableActions: transformedFilters,
                rightAction: rightActionMarkup,
                auxiliary: children,
                disabled: disabled,
                forceShowMorefiltersButton: filters.length > transformedFilters.length,
                queryFieldHidden: hideQueryField,
                children: hideQueryField
                    ? null
                    : /*#__PURE__*/

                      /*#__PURE__*/
                      jsx(TextField, {
                          placeholder:
                              queryPlaceholder ||
                              i18n.translate('Polaris.Filters.filter', {
                                  resourceName: filterResourceName.plural,
                              }),
                          onChange: onQueryChange,
                          onBlur: onQueryBlur,
                          onFocus: onQueryFocus,
                          value: queryValue,
                          focused: focused,
                          label:
                              queryPlaceholder ||
                              i18n.translate('Polaris.Filters.filter', {
                                  resourceName: filterResourceName.plural,
                              }),
                          labelHidden: true,
                          prefix:
                              /*#__PURE__*/

                              /*#__PURE__*/
                              jsx('span', {
                                  className: styles$A.SearchIcon,
                                  children: /*#__PURE__*/ jsx(Icon, {
                                      source: SvgSearchMinor,
                                  }),
                              }),
                          clearButton: true,
                          onClearButtonClick: onQueryClear,
                          disabled: disabled,
                          autoComplete: 'off',
                      }),
            });

        const filtersContainerHeaderClassname = classNames(styles$A.FiltersContainerHeader);

        const filtersDesktopHeaderMarkup =
            /*#__PURE__*/

            /*#__PURE__*/
            jsxs('div', {
                className: filtersContainerHeaderClassname,
                children: [
                    /*#__PURE__*/ jsx(DisplayText, {
                        size: 'small',
                        element: 'h3',
                        children: moreFiltersLabel,
                    }),
                    /*#__PURE__*/ jsx(Button, {
                        icon: SvgCancelSmallMinor,
                        plain: true,
                        accessibilityLabel: i18n.translate('Polaris.Filters.cancel'),
                        onClick: this.closeFilters,
                    }),
                ],
            });

        const filtersMobileHeaderMarkup =
            /*#__PURE__*/

            /*#__PURE__*/
            jsxs('div', {
                className: filtersContainerHeaderClassname,
                children: [
                    /*#__PURE__*/ jsx(Button, {
                        icon: SvgCancelSmallMinor,
                        plain: true,
                        accessibilityLabel: i18n.translate('Polaris.Filters.cancel'),
                        onClick: this.closeFilters,
                    }),
                    /*#__PURE__*/ jsx(DisplayText, {
                        size: 'small',
                        element: 'h3',
                        children: moreFiltersLabel,
                    }),
                    /*#__PURE__*/ jsx(Button, {
                        onClick: this.closeFilters,
                        primary: true,
                        children: i18n.translate('Polaris.Filters.done'),
                    }),
                ],
            });

        const filtersDesktopFooterClassname = classNames(styles$A.FiltersContainerFooter);

        const filtersDesktopFooterMarkup =
            /*#__PURE__*/

            /*#__PURE__*/
            jsxs('div', {
                className: filtersDesktopFooterClassname,
                children: [
                    /*#__PURE__*/ jsx(Button, {
                        onClick: this.handleClearAll,
                        disabled: !this.hasAppliedFilters(),
                        children: i18n.translate('Polaris.Filters.clearAllFilters'),
                    }),
                    /*#__PURE__*/ jsx('div', {
                        ref: this.moreFiltersDoneButtonContainer,
                        children: /*#__PURE__*/ jsx(Button, {
                            onClick: this.closeFilters,
                            primary: true,
                            children: i18n.translate('Polaris.Filters.done'),
                        }),
                    }),
                ],
            });

        const filtersMobileFooterMarkup =
            /*#__PURE__*/

            /*#__PURE__*/
            jsx('div', {
                className: styles$A.FiltersMobileContainerFooter,
                children: this.hasAppliedFilters()
                    ? /*#__PURE__*/

                      /*#__PURE__*/
                      jsx(Button, {
                          onClick: onClearAll,
                          fullWidth: true,
                          children: i18n.translate('Polaris.Filters.clearAllFilters'),
                      })
                    : /*#__PURE__*/

                      /*#__PURE__*/
                      jsx('div', {
                          className: styles$A.EmptyFooterState,
                          children: /*#__PURE__*/ jsx(TextStyle, {
                              variation: 'subdued',
                              children: /*#__PURE__*/ jsx('p', {
                                  children: i18n.translate('Polaris.Filters.noFiltersApplied'),
                              }),
                          }),
                      }),
            });

        const shouldHideTagsContainer = !appliedFilters || appliedFilters.length < 1;
        const tagsMarkup = !hideTags
            ? /*#__PURE__*/

              /*#__PURE__*/
              jsx(TagsWrapper, {
                  hidden: shouldHideTagsContainer,
                  children: /*#__PURE__*/ jsx('div', {
                      className: styles$A.TagsContainer,
                      'aria-live': 'polite',
                      children: (appliedFilters || []).map((filter) => {
                          return (
                              /*#__PURE__*/

                              /*#__PURE__*/
                              jsx(
                                  Tag,
                                  {
                                      onRemove: () => {
                                          filter.onRemove(filter.key);
                                      },
                                      disabled: disabled,
                                      children: filter.label,
                                  },
                                  filter.key
                              )
                          );
                      }),
                  }),
              })
            : null;
        const filtersMobileContainerContentClassName = classNames(styles$A.FiltersMobileContainerContent);
        const filtersDesktopContainerContentClassName = classNames(styles$A.FiltersDesktopContainerContent);
        const filtersContainerMarkup = isNavigationCollapsed
            ? /*#__PURE__*/

              /*#__PURE__*/
              jsxs(Sheet, {
                  accessibilityLabel: moreFiltersLabel,
                  open: open,
                  onClose: this.closeFilters,
                  onEntered: this.setReadyForFocus(true),
                  onExit: this.setReadyForFocus(false),
                  children: [
                      filtersMobileHeaderMarkup,
                      /*#__PURE__*/ jsxs(Scrollable, {
                          className: filtersMobileContainerContentClassName,
                          shadow: true,
                          children: [filtersContentMarkup, filtersMobileFooterMarkup],
                      }),
                  ],
              })
            : /*#__PURE__*/

              /*#__PURE__*/
              jsx(Sheet, {
                  accessibilityLabel: moreFiltersLabel,
                  open: open,
                  onClose: this.closeFilters,
                  onEntered: this.setReadyForFocus(true),
                  onExit: this.setReadyForFocus(false),
                  children: /*#__PURE__*/ jsxs('div', {
                      className: styles$A.FiltersContainer,
                      children: [
                          filtersDesktopHeaderMarkup,
                          /*#__PURE__*/ jsx(Scrollable, {
                              className: filtersDesktopContainerContentClassName,
                              shadow: true,
                              children: filtersContentMarkup,
                          }),
                          filtersDesktopFooterMarkup,
                      ],
                  }),
              });
        const helpTextMarkup = helpText
            ? /*#__PURE__*/

              /*#__PURE__*/
              jsx('div', {
                  id: 'FiltersHelpText',
                  className: styles$A.HelpText,
                  children: /*#__PURE__*/ jsx(TextStyle, {
                      variation: 'subdued',
                      children: helpText,
                  }),
              })
            : null;
        return (
            /*#__PURE__*/

            /*#__PURE__*/
            jsx(WithinFilterContext.Provider, {
                value: true,
                children: /*#__PURE__*/ jsxs('div', {
                    className: styles$A.Filters,
                    children: [
                        filtersControlMarkup,
                        filtersContainerMarkup,
                        tagsMarkup,
                        helpTextMarkup,
                        backdropMarkup,
                        /*#__PURE__*/ jsx(KeypressListener, {
                            keyCode: Key.Escape,
                            handler: this.closeFilters,
                        }),
                    ],
                }),
            })
        );
    }

    hasAppliedFilters() {
        const { appliedFilters, queryValue } = this.props;
        const filtersApplied = Boolean(appliedFilters && appliedFilters.length > 0);
        const queryApplied = Boolean(queryValue && queryValue !== '');
        return filtersApplied || queryApplied;
    }

    getAppliedFilterContent(key) {
        const { appliedFilters } = this.props;

        if (!appliedFilters) {
            return undefined;
        }

        const filter = appliedFilters.find((filter) => filter.key === key);
        return filter == null ? undefined : filter.label;
    }

    getAppliedFilterRemoveHandler(key) {
        const { appliedFilters } = this.props;

        if (!appliedFilters) {
            return undefined;
        }

        const filter = appliedFilters.find((filter) => filter.key === key);
        return filter == null ? undefined : filter.onRemove;
    }

    openFilters() {
        this.setState({
            open: true,
        });
    }

    openFilter(key) {
        this.setState({
            [`${key}${Suffix.Filter}`]: true,
        });
    }

    closeFilter(key) {
        this.setState({
            [`${key}${Suffix.Filter}`]: false,
        });
    }

    toggleFilter(key) {
        if (this.state[`${key}${Suffix.Filter}`] === true) {
            this.closeFilter(key);
        } else {
            this.openFilter(key);
        }
    }

    openFilterShortcut(key) {
        this.setState({
            [`${key}${Suffix.Shortcut}`]: true,
        });
    }

    closeFilterShortcut(key) {
        this.setState({
            [`${key}${Suffix.Shortcut}`]: false,
        });
    }

    toggleFilterShortcut(key) {
        if (this.state[`${key}${Suffix.Shortcut}`] === true) {
            this.closeFilterShortcut(key);
        } else {
            this.openFilterShortcut(key);
        }
    }

    transformFilters(filters) {
        const transformedActions = [];
        getShortcutFilters(filters).forEach((filter) => {
            const { key, label, disabled } = filter;
            transformedActions.push({
                popoverContent: this.generateFilterMarkup(filter),
                popoverOpen: Boolean(this.state[`${key}${Suffix.Shortcut}`]),
                key,
                content: label,
                disabled,
                onAction: () => this.toggleFilterShortcut(key),
            });
        });
        return transformedActions;
    }

    generateFilterMarkup(filter) {
        const i18n = this.props.i18n;
        const removeCallback = this.getAppliedFilterRemoveHandler(filter.key);
        const removeHandler =
            removeCallback == null
                ? undefined
                : () => {
                      removeCallback(filter.key);
                  };

        const clearButtonMarkup =
            !filter.hideClearButton &&
            /*#__PURE__*/

            /*#__PURE__*/
            jsx(Button, {
                plain: true,
                disabled: removeHandler == null,
                onClick: removeHandler,
                accessibilityLabel: i18n.translate('Polaris.Filters.clearLabel', {
                    filterName: filter.label,
                }),
                children: i18n.translate('Polaris.Filters.clear'),
            });

        return (
            /*#__PURE__*/

            /*#__PURE__*/
            jsx('div', {
                ref: this.focusNode,
                children: /*#__PURE__*/ jsxs(Stack$2, {
                    vertical: true,
                    spacing: 'tight',
                    children: [filter.filter, clearButtonMarkup],
                }),
            })
        );
    }
}

FiltersInner.contextType = ResourceListContext;

function getShortcutFilters(filters) {
    return filters.filter((filter) => filter.shortcut === true);
}

function Filters(props) {
    const i18n = useI18n();
    const mediaQuery = useMediaQuery();
    return (
        /*#__PURE__*/

        /*#__PURE__*/
        jsx(FiltersInner, {
            ...Object.assign({}, props, {
                i18n: i18n,
                mediaQuery: mediaQuery,
            }),
        })
    );
}

function Form({ acceptCharset, action, autoComplete, children, encType, implicitSubmit = true, method = 'post', name, noValidate, preventDefault = true, target, onSubmit }) {
    const i18n = useI18n();
    const handleSubmit = react.exports.useCallback(
        (event) => {
            if (!preventDefault) {
                return;
            }

            event.preventDefault();
            onSubmit(event);
        },
        [onSubmit, preventDefault]
    );
    const autoCompleteInputs = normalizeAutoComplete(autoComplete);
    const submitMarkup = implicitSubmit
        ? /*#__PURE__*/

          /*#__PURE__*/
          jsx(VisuallyHidden, {
              children: /*#__PURE__*/ jsx('button', {
                  type: 'submit',
                  'aria-hidden': 'true',
                  tabIndex: -1,
                  children: i18n.translate('Polaris.Common.submit'),
              }),
          })
        : null;
    return (
        /*#__PURE__*/

        /*#__PURE__*/
        jsxs('form', {
            acceptCharset: acceptCharset,
            action: action,
            autoComplete: autoCompleteInputs,
            encType: encType,
            method: method,
            name: name,
            noValidate: noValidate,
            target: target,
            onSubmit: handleSubmit,
            children: [submitMarkup, children],
        })
    );
}

function normalizeAutoComplete(autoComplete) {
    if (autoComplete == null) {
        return autoComplete;
    }

    return autoComplete ? 'on' : 'off';
}

var styles$w = {
    FormLayout: 'Polaris-FormLayout',
    Title: 'Polaris-FormLayout__Title',
    Items: 'Polaris-FormLayout__Items',
    HelpText: 'Polaris-FormLayout__HelpText',
    Item: 'Polaris-FormLayout__Item',
    grouped: 'Polaris-FormLayout--grouped',
    condensed: 'Polaris-FormLayout--condensed',
};

function Item$1(props) {
    return /*#__PURE__*/ React.createElement(
        'div',
        {
            className: styles$w.Item,
        },
        props.children
    );
}

function Group({ children, condensed, title, helpText }) {
    const className = classNames(condensed ? styles$w.condensed : styles$w.grouped);
    const id = useUniqueId('FormLayoutGroup');
    let helpTextElement = null;
    let helpTextID;
    let titleElement = null;
    let titleID;

    if (helpText) {
        helpTextID = `${id}HelpText`;
        helpTextElement =
            /*#__PURE__*/

            /*#__PURE__*/
            jsx('div', {
                id: helpTextID,
                className: styles$w.HelpText,
                children: helpText,
            });
    }

    if (title) {
        titleID = `${id}Title`;
        titleElement =
            /*#__PURE__*/

            /*#__PURE__*/
            jsx('div', {
                id: titleID,
                className: styles$w.Title,
                children: title,
            });
    }

    const itemsMarkup = react.exports.Children.map(children, (child) => wrapWithComponent(child, Item$1, {}));
    return (
        /*#__PURE__*/

        /*#__PURE__*/
        jsxs('div', {
            role: 'group',
            className: className,
            'aria-labelledby': titleID,
            'aria-describedby': helpTextID,
            children: [
                titleElement,
                /*#__PURE__*/ jsx('div', {
                    className: styles$w.Items,
                    children: itemsMarkup,
                }),
                helpTextElement,
            ],
        })
    );
}

const FormLayout = /*#__PURE__*/ react.exports.memo(function FormLayout({ children }) {
    return (
        /*#__PURE__*/

        /*#__PURE__*/
        jsx('div', {
            className: styles$w.FormLayout,
            children: react.exports.Children.map(children, wrapChildren),
        })
    );
});
FormLayout.Group = Group;

function wrapChildren(child, index) {
    if (isElementOfType(child, Group)) {
        return child;
    }

    const props = {
        key: index,
    };
    return wrapWithComponent(child, Item$1, props);
}

function setRootProperty(name, value, node) {
    if (!document) return;
    const element = node || document.documentElement;
    element.style.setProperty(name, value);
}

var styles$v = {
    Frame: 'Polaris-Frame',
    Navigation: 'Polaris-Frame__Navigation',
    hasTopBar: 'Polaris-Frame--hasTopBar',
    'Navigation-enter': 'Polaris-Frame__Navigation--enter',
    'Navigation-enterActive': 'Polaris-Frame__Navigation--enterActive',
    'Navigation-exit': 'Polaris-Frame__Navigation--exit',
    'Navigation-exitActive': 'Polaris-Frame__Navigation--exitActive',
    NavigationDismiss: 'Polaris-Frame__NavigationDismiss',
    'Navigation-visible': 'Polaris-Frame__Navigation--visible',
    TopBar: 'Polaris-Frame__TopBar',
    ContextualSaveBar: 'Polaris-Frame__ContextualSaveBar',
    Main: 'Polaris-Frame__Main',
    hasNav: 'Polaris-Frame--hasNav',
    Content: 'Polaris-Frame__Content',
    GlobalRibbonContainer: 'Polaris-Frame__GlobalRibbonContainer',
    LoadingBar: 'Polaris-Frame__LoadingBar',
    Skip: 'Polaris-Frame__Skip',
    focused: 'Polaris-Frame--focused',
    pressed: 'Polaris-Frame--pressed',
};

/**
 * Returns a MutatableRefObject containing a boolean value that
 * represents a components mounted status.
 * @returns MutableRefObject<boolean> The mounted status
 */

function useIsMountedRef() {
    const isMounted = react.exports.useRef(false);
    react.exports.useEffect(() => {
        isMounted.current = true;
        return () => {
            isMounted.current = false;
        };
    }, []);
    return isMounted;
}

var styles$u = {
    Loading: 'Polaris-Frame-Loading',
    Level: 'Polaris-Frame-Loading__Level',
};

const STUCK_THRESHOLD = 99;

function Loading$1() {
    const i18n = useI18n();
    const isMountedRef = useIsMountedRef();
    const [progress, setProgress] = react.exports.useState(0);
    const [animating, setAnimating] = react.exports.useState(false);
    react.exports.useEffect(() => {
        if (progress >= STUCK_THRESHOLD || animating) {
            return;
        }

        requestAnimationFrame(() => {
            if (!isMountedRef.current) return;
            const step = Math.max((STUCK_THRESHOLD - progress) / 10, 1);
            setAnimating(true);
            setProgress(progress + step);
        });
    }, [progress, animating, isMountedRef]);
    const customStyles = {
        transform: `scaleX(${Math.floor(progress) / 100})`,
    };
    return (
        /*#__PURE__*/

        /*#__PURE__*/
        jsx('div', {
            className: styles$u.Loading,
            'aria-valuenow': progress,
            'aria-valuemin': 0,
            'aria-valuemax': 100,
            role: 'progressbar',
            'aria-label': i18n.translate('Polaris.Loading.label'),
            children: /*#__PURE__*/ jsx('div', {
                className: styles$u.Level,
                style: customStyles,
                onTransitionEnd: () => setAnimating(false),
            }),
        })
    );
}

var styles$t = {
    startFade: 'Polaris-Frame-CSSAnimation--startFade',
    endFade: 'Polaris-Frame-CSSAnimation--endFade',
};

var TransitionStatus;

(function (TransitionStatus) {
    TransitionStatus['Entering'] = 'entering';
    TransitionStatus['Entered'] = 'entered';
    TransitionStatus['Exiting'] = 'exiting';
    TransitionStatus['Exited'] = 'exited';
})(TransitionStatus || (TransitionStatus = {}));

function CSSAnimation({ in: inProp, className, type, children }) {
    const [transitionStatus, setTransitionStatus] = react.exports.useState(inProp ? TransitionStatus.Entering : TransitionStatus.Exited);
    const isMounted = react.exports.useRef(false);
    const node = react.exports.useRef(null);
    react.exports.useEffect(() => {
        if (!isMounted.current) return;
        transitionStatus === TransitionStatus.Entering && changeTransitionStatus(TransitionStatus.Entered);
    }, [transitionStatus]);
    react.exports.useEffect(() => {
        if (!isMounted.current) return;
        inProp && changeTransitionStatus(TransitionStatus.Entering);
        !inProp && changeTransitionStatus(TransitionStatus.Exiting);
    }, [inProp]);
    react.exports.useEffect(() => {
        isMounted.current = true;
    }, []);
    const wrapperClassName = classNames(className, styles$t[variationName('start', type)], inProp && styles$t[variationName('end', type)]);
    const content = transitionStatus === TransitionStatus.Exited && !inProp ? null : children;
    return (
        /*#__PURE__*/

        /*#__PURE__*/
        jsx('div', {
            className: wrapperClassName,
            ref: node,
            onTransitionEnd: handleTransitionEnd,
            children: content,
        })
    );

    function handleTransitionEnd() {
        transitionStatus === TransitionStatus.Exiting && changeTransitionStatus(TransitionStatus.Exited);
    }

    function changeTransitionStatus(transitionStatus) {
        setTransitionStatus(transitionStatus); // Forcing a reflow to enable the animation

        if (transitionStatus === TransitionStatus.Entering) node.current && node.current.getBoundingClientRect();
    }
}

function isObject(value) {
    const type = typeof value;
    return value != null && (type === 'object' || type === 'function');
}

function pluckDeep(obj, key) {
    if (!obj) {
        return null;
    }

    const keys = Object.keys(obj);

    for (const currKey of keys) {
        if (currKey === key) {
            return obj[key];
        }

        if (isObject(obj[currKey])) {
            const plucked = pluckDeep(obj[currKey], key);

            if (plucked) {
                return plucked;
            }
        }
    }

    return null;
}

function getWidth(value = {}, defaultWidth = 0, key = 'width') {
    const width = typeof value === 'number' ? value : pluckDeep(value, key);
    return width ? `${width}px` : `${defaultWidth}px`;
}

var styles$s = {
    ContextualSaveBar: 'Polaris-Frame-ContextualSaveBar',
    LogoContainer: 'Polaris-Frame-ContextualSaveBar__LogoContainer',
    ContextControl: 'Polaris-Frame-ContextualSaveBar__ContextControl',
    Message: 'Polaris-Frame-ContextualSaveBar__Message',
    Contents: 'Polaris-Frame-ContextualSaveBar__Contents',
    fullWidth: 'Polaris-Frame-ContextualSaveBar--fullWidth',
    ActionContainer: 'Polaris-Frame-ContextualSaveBar__ActionContainer',
    Action: 'Polaris-Frame-ContextualSaveBar__Action',
};

var styles$r = {
    BodyWrapper: 'Polaris-Modal__BodyWrapper',
    Body: 'Polaris-Modal__Body',
    IFrame: 'Polaris-Modal__IFrame',
    Spinner: 'Polaris-Modal__Spinner',
};

var styles$q = {
    Container: 'Polaris-Modal-Dialog__Container',
    Dialog: 'Polaris-Modal-Dialog',
    Modal: 'Polaris-Modal-Dialog__Modal',
    limitHeight: 'Polaris-Modal-Dialog--limitHeight',
    sizeSmall: 'Polaris-Modal-Dialog--sizeSmall',
    sizeLarge: 'Polaris-Modal-Dialog--sizeLarge',
    animateFadeUp: 'Polaris-Modal-Dialog--animateFadeUp',
    entering: 'Polaris-Modal-Dialog--entering',
    exiting: 'Polaris-Modal-Dialog--exiting',
    exited: 'Polaris-Modal-Dialog--exited',
    entered: 'Polaris-Modal-Dialog--entered',
};

function Dialog({ instant, labelledBy, children, onClose, onExited, onEntered, large, small, limitHeight, ...props }) {
    const containerNode = react.exports.useRef(null);
    const classes = classNames(styles$q.Modal, small && styles$q.sizeSmall, large && styles$q.sizeLarge, limitHeight && styles$q.limitHeight);
    const TransitionChild = instant ? Transition$1 : FadeUp;
    react.exports.useEffect(() => {
        containerNode.current && !containerNode.current.contains(document.activeElement) && focusFirstFocusableNode(containerNode.current);
    }, []);
    return (
        /*#__PURE__*/

        /*#__PURE__*/
        jsx(TransitionChild, {
            ...Object.assign({}, props, {
                nodeRef: containerNode,
                mountOnEnter: true,
                unmountOnExit: true,
                timeout: parseInt(tokens.motion['duration-200'], 10),
                onEntered: onEntered,
                onExited: onExited,
            }),
            children: /*#__PURE__*/ jsx('div', {
                className: styles$q.Container,
                'data-polaris-layer': true,
                'data-polaris-overlay': true,
                ref: containerNode,
                children: /*#__PURE__*/ jsx(TrapFocus, {
                    children: /*#__PURE__*/ jsx('div', {
                        role: 'dialog',
                        'aria-modal': true,
                        'aria-labelledby': labelledBy,
                        tabIndex: -1,
                        className: styles$q.Dialog,
                        children: /*#__PURE__*/ jsxs('div', {
                            className: classes,
                            children: [
                                /*#__PURE__*/ jsx(KeypressListener, {
                                    keyCode: Key.Escape,
                                    handler: onClose,
                                }),
                                children,
                            ],
                        }),
                    }),
                }),
            }),
        })
    );
}

const fadeUpClasses = {
    appear: classNames(styles$q.animateFadeUp, styles$q.entering),
    appearActive: classNames(styles$q.animateFadeUp, styles$q.entered),
    enter: classNames(styles$q.animateFadeUp, styles$q.entering),
    enterActive: classNames(styles$q.animateFadeUp, styles$q.entered),
    exit: classNames(styles$q.animateFadeUp, styles$q.exiting),
    exitActive: classNames(styles$q.animateFadeUp, styles$q.exited),
};

function FadeUp({ children, ...props }) {
    return (
        /*#__PURE__*/

        /*#__PURE__*/
        jsx(CSSTransition$1, {
            ...Object.assign({}, props, {
                classNames: fadeUpClasses,
            }),
            children: children,
        })
    );
}

var styles$p = {
    Header: 'Polaris-Modal-Header',
    titleHidden: 'Polaris-Modal-Header--titleHidden',
    Title: 'Polaris-Modal-Header__Title',
};

var styles$o = {
    CloseButton: 'Polaris-Modal-CloseButton',
};

function CloseButton({ onClick }) {
    const i18n = useI18n();
    return /*#__PURE__*/ React.createElement(
        'button',
        {
            onClick: onClick,
            className: styles$o.CloseButton,
            'aria-label': i18n.translate('Polaris.Common.close'),
        },
        /*#__PURE__*/ React.createElement(Icon, {
            source: SvgMobileCancelMajor,
            color: 'base',
        })
    );
}

function Header$1({ id, titleHidden, children, onClose }) {
    return /*#__PURE__*/ React.createElement(
        'div',
        {
            className: titleHidden || !children ? styles$p.titleHidden : styles$p.Header,
        },
        /*#__PURE__*/ React.createElement(
            'div',
            {
                id: id,
                className: styles$p.Title,
            },
            /*#__PURE__*/ React.createElement(
                DisplayText,
                {
                    element: 'h2',
                    size: 'small',
                },
                children
            )
        ),
        /*#__PURE__*/ React.createElement(CloseButton, {
            onClick: onClose,
        })
    );
}

var styles$n = {
    Section: 'Polaris-Modal-Section',
    subdued: 'Polaris-Modal-Section--subdued',
    flush: 'Polaris-Modal-Section--flush',
};

function Section$1({ children, flush = false, subdued = false }) {
    const className = classNames(styles$n.Section, flush && styles$n.flush, subdued && styles$n.subdued);
    return /*#__PURE__*/ React.createElement(
        'section',
        {
            className: className,
        },
        children
    );
}

var styles$m = {
    Footer: 'Polaris-Modal-Footer',
    FooterContent: 'Polaris-Modal-Footer__FooterContent',
};

function Footer({ primaryAction, secondaryActions, children }) {
    const primaryActionButton =
        (primaryAction &&
            buttonsFrom(primaryAction, {
                primary: true,
            })) ||
        null;
    const secondaryActionButtons = (secondaryActions && buttonsFrom(secondaryActions)) || null;
    const actions = primaryActionButton || secondaryActionButtons ? /*#__PURE__*/ React.createElement(ButtonGroup, null, secondaryActionButtons, primaryActionButton) : null;
    return /*#__PURE__*/ React.createElement(
        'div',
        {
            className: styles$m.Footer,
        },
        /*#__PURE__*/ React.createElement(
            'div',
            {
                className: styles$m.FooterContent,
            },
            /*#__PURE__*/ React.createElement(
                Stack$2,
                {
                    alignment: 'center',
                },
                /*#__PURE__*/ React.createElement(
                    Stack$2.Item,
                    {
                        fill: true,
                    },
                    children
                ),
                actions
            )
        )
    );
}

const IFRAME_LOADING_HEIGHT = 200;
const DEFAULT_IFRAME_CONTENT_HEIGHT = 400;

const Modal = function Modal({ children, title, titleHidden = false, src, iFrameName, open, instant, sectioned, loading, large, small, limitHeight, footer, primaryAction, secondaryActions, onScrolledToBottom, activator, onClose, onIFrameLoad, onTransitionEnd, noScroll }) {
    const [iframeHeight, setIframeHeight] = react.exports.useState(IFRAME_LOADING_HEIGHT);
    const headerId = useUniqueId('modal-header');
    const activatorRef = react.exports.useRef(null);
    const i18n = useI18n();
    const iframeTitle = i18n.translate('Polaris.Modal.iFrameTitle');
    let dialog;
    let backdrop;
    const handleEntered = react.exports.useCallback(() => {
        if (onTransitionEnd) {
            onTransitionEnd();
        }
    }, [onTransitionEnd]);
    const handleExited = react.exports.useCallback(() => {
        setIframeHeight(IFRAME_LOADING_HEIGHT);
        const activatorElement = activator && isRef(activator) ? activator && activator.current : activatorRef.current;

        if (activatorElement) {
            requestAnimationFrame(() => focusFirstFocusableNode(activatorElement));
        }
    }, [activator]);
    const handleIFrameLoad = react.exports.useCallback(
        (evt) => {
            const iframe = evt.target;

            if (iframe && iframe.contentWindow) {
                try {
                    setIframeHeight(iframe.contentWindow.document.body.scrollHeight);
                } catch (_error) {
                    setIframeHeight(DEFAULT_IFRAME_CONTENT_HEIGHT);
                }
            }

            if (onIFrameLoad != null) {
                onIFrameLoad(evt);
            }
        },
        [onIFrameLoad]
    );

    if (open) {
        const footerMarkup =
            !footer && !primaryAction && !secondaryActions
                ? null
                : /*#__PURE__*/

                  /*#__PURE__*/
                  jsx(Footer, {
                      primaryAction: primaryAction,
                      secondaryActions: secondaryActions,
                      children: footer,
                  });
        const content = sectioned ? wrapWithComponent(children, Section$1, {}) : children;
        const body = loading
            ? /*#__PURE__*/

              /*#__PURE__*/
              jsx('div', {
                  className: styles$r.Spinner,
                  children: /*#__PURE__*/ jsx(Spinner$1, {}),
              })
            : content;
        const scrollContainerMarkup = noScroll
            ? /*#__PURE__*/

              /*#__PURE__*/
              jsx('div', {
                  className: styles$r.Body,
                  children: body,
              })
            : /*#__PURE__*/

              /*#__PURE__*/
              jsx(Scrollable, {
                  shadow: true,
                  className: styles$r.Body,
                  onScrolledToBottom: onScrolledToBottom,
                  children: body,
              });
        const bodyMarkup = src
            ? /*#__PURE__*/

              /*#__PURE__*/
              jsx('iframe', {
                  name: iFrameName,
                  title: iframeTitle,
                  src: src,
                  className: styles$r.IFrame,
                  onLoad: handleIFrameLoad,
                  style: {
                      height: `${iframeHeight}px`,
                  },
              })
            : scrollContainerMarkup;
        dialog =
            /*#__PURE__*/

            /*#__PURE__*/
            jsxs(Dialog, {
                instant: instant,
                labelledBy: headerId,
                onClose: onClose,
                onEntered: handleEntered,
                onExited: handleExited,
                large: large,
                small: small,
                limitHeight: limitHeight,
                children: [
                    /*#__PURE__*/ jsx(Header$1, {
                        titleHidden: titleHidden,
                        id: headerId,
                        onClose: onClose,
                        children: title,
                    }),
                    /*#__PURE__*/ jsx('div', {
                        className: styles$r.BodyWrapper,
                        children: bodyMarkup,
                    }),
                    footerMarkup,
                ],
            });
        backdrop =
            /*#__PURE__*/

            /*#__PURE__*/
            jsx(Backdrop, {});
    }

    const animated = !instant;
    const activatorMarkup =
        activator && !isRef(activator)
            ? /*#__PURE__*/

              /*#__PURE__*/
              jsx('div', {
                  ref: activatorRef,
                  children: activator,
              })
            : null;
    return (
        /*#__PURE__*/

        /*#__PURE__*/
        jsxs(WithinContentContext.Provider, {
            value: true,
            children: [
                activatorMarkup,
                /*#__PURE__*/ jsxs(Portal, {
                    idPrefix: 'modal',
                    children: [
                        /*#__PURE__*/ jsx(TransitionGroup$1, {
                            appear: animated,
                            enter: animated,
                            exit: animated,
                            children: dialog,
                        }),
                        backdrop,
                    ],
                }),
            ],
        })
    );
};

function isRef(ref) {
    return Object.prototype.hasOwnProperty.call(ref, 'current');
}

Modal.Section = Section$1;

function DiscardConfirmationModal({ open, onDiscard, onCancel }) {
    const i18n = useI18n();
    return /*#__PURE__*/ React.createElement(
        Modal,
        {
            title: i18n.translate('Polaris.DiscardConfirmationModal.title'),
            open: open,
            onClose: onCancel,
            primaryAction: {
                content: i18n.translate('Polaris.DiscardConfirmationModal.primaryAction'),
                destructive: true,
                onAction: onDiscard,
            },
            secondaryActions: [
                {
                    content: i18n.translate('Polaris.DiscardConfirmationModal.secondaryAction'),
                    onAction: onCancel,
                },
            ],
            sectioned: true,
        },
        i18n.translate('Polaris.DiscardConfirmationModal.message')
    );
}

function ContextualSaveBar({ alignContentFlush, message, saveAction, discardAction, fullWidth, contextControl, secondaryMenu }) {
    const i18n = useI18n();
    const { logo } = useFrame();
    const { value: discardConfirmationModalVisible, toggle: toggleDiscardConfirmationModal, setFalse: closeDiscardConfirmationModal } = useToggle(false);
    const handleDiscardAction = react.exports.useCallback(() => {
        if (discardAction && discardAction.onAction) {
            discardAction.onAction();
        }

        closeDiscardConfirmationModal();
    }, [closeDiscardConfirmationModal, discardAction]);
    const discardActionContent = discardAction && discardAction.content ? discardAction.content : i18n.translate('Polaris.ContextualSaveBar.discard');
    let discardActionHandler;

    if (discardAction && discardAction.discardConfirmationModal) {
        discardActionHandler = toggleDiscardConfirmationModal;
    } else if (discardAction) {
        discardActionHandler = discardAction.onAction;
    }

    const discardConfirmationModalMarkup =
        discardAction &&
        discardAction.onAction &&
        discardAction.discardConfirmationModal &&
        /*#__PURE__*/

        /*#__PURE__*/
        jsx(DiscardConfirmationModal, {
            open: discardConfirmationModalVisible,
            onCancel: toggleDiscardConfirmationModal,
            onDiscard: handleDiscardAction,
        });

    const discardActionMarkup =
        discardAction &&
        /*#__PURE__*/

        /*#__PURE__*/
        jsx(Button, {
            url: discardAction.url,
            onClick: discardActionHandler,
            loading: discardAction.loading,
            disabled: discardAction.disabled,
            accessibilityLabel: discardAction.content,
            children: discardActionContent,
        });

    const saveActionContent = saveAction && saveAction.content ? saveAction.content : i18n.translate('Polaris.ContextualSaveBar.save');

    const saveActionMarkup =
        saveAction &&
        /*#__PURE__*/

        /*#__PURE__*/
        jsx(Button, {
            primary: true,
            url: saveAction.url,
            onClick: saveAction.onAction,
            loading: saveAction.loading,
            disabled: saveAction.disabled,
            accessibilityLabel: saveAction.content,
            children: saveActionContent,
        });

    const width = getWidth(logo, 104);

    const imageMarkup =
        logo &&
        /*#__PURE__*/

        /*#__PURE__*/
        jsx(Image, {
            style: {
                width,
            },
            source: logo.contextualSaveBarSource || '',
            alt: '',
        });

    const logoMarkup =
        alignContentFlush || contextControl
            ? null
            : /*#__PURE__*/

              /*#__PURE__*/
              jsx('div', {
                  className: styles$s.LogoContainer,
                  style: {
                      width,
                  },
                  children: imageMarkup,
              });
    const contextControlMarkup = contextControl
        ? /*#__PURE__*/

          /*#__PURE__*/
          jsx('div', {
              className: styles$s.ContextControl,
              children: contextControl,
          })
        : null;
    const contentsClassName = classNames(styles$s.Contents, fullWidth && styles$s.fullWidth);
    return (
        /*#__PURE__*/

        /*#__PURE__*/
        jsxs(Fragment, {
            children: [
                /*#__PURE__*/ jsx(CustomProperties, {
                    colorScheme: 'dark',
                    children: /*#__PURE__*/ jsxs('div', {
                        className: styles$s.ContextualSaveBar,
                        children: [
                            contextControlMarkup,
                            logoMarkup,
                            /*#__PURE__*/ jsxs('div', {
                                className: contentsClassName,
                                children: [
                                    /*#__PURE__*/ jsx('h2', {
                                        className: styles$s.Message,
                                        children: message,
                                    }),
                                    /*#__PURE__*/ jsx('div', {
                                        className: styles$s.ActionContainer,
                                        children: /*#__PURE__*/ jsxs(Stack$2, {
                                            spacing: 'tight',
                                            wrap: false,
                                            children: [secondaryMenu, discardActionMarkup, saveActionMarkup],
                                        }),
                                    }),
                                ],
                            }),
                        ],
                    }),
                }),
                discardConfirmationModalMarkup,
            ],
        })
    );
}

/**
 * Allows for custom or deep comparison of a dependency list. Useful to keep a consistent dependency
 * list across reference changes.
 * @param dependencies A dependency array similar to React's useEffect / useCallback / useMemo
 * @param comparator An optional function to compare dependencies that'll default to a deep comparison
 * @returns A dependency list
 * @see {@link https://github.com/Shopify/polaris-react/blob/main/src/utilities/use-deep-effect.tsx}
 * @see {@link https://github.com/Shopify/polaris-react/blob/main/src/utilities/use-deep-callback.tsx}
 * @example
 * function useDeepEffectExample(callback, dependencies, customCompare) {
 *  useEffect(callback, useDeepCompareRef(dependencies, customCompare));
 * }
 */
function useDeepCompareRef(dependencies, comparator = isEqual_1) {
    const dependencyList = react.exports.useRef(dependencies);

    if (!comparator(dependencyList.current, dependencies)) {
        dependencyList.current = dependencies;
    }

    return dependencyList.current;
}

/**
 * A replacement for React's useEffect that'll allow for custom and deep
 * compares of the dependency list.
 * @see {@link https://reactjs.org/docs/hooks-reference.html#useeffect}
 * @param callback Accepts a callback that's forwarded to React's useEffect
 * @param dependencies A dependency array similar to React's useEffect however it utilizes a deep compare
 * @param customCompare Opportunity to provide a custom compare function
 * @example
 * function ComponentExample() {
 *  const [, forceUpdate] = useState();
 *  const obj = {a: 1};
 *
 *  useDeepEffect(() => {
 *    console.log('useDeepEffect invocation');
 *    forceUpdate(obj);
 *  }, [obj]);
 *
 *  return null;
 * }
 */
function useDeepEffect(callback, dependencies, customCompare) {
    // eslint-disable-next-line react-hooks/exhaustive-deps
    react.exports.useEffect(callback, useDeepCompareRef(dependencies, customCompare));
}

/**
 * A replacement for React's useCallback that'll allow for custom and deep compares.
 * @see {@link https://reactjs.org/docs/hooks-reference.html#usecallback}
 * @param callback Accepts a callback that's forwarded to React's useCallback
 * @param dependencies A dependency array similar to React's useCallback however it utilizes a deep compare
 * @param customCompare Opportunity to provide a custom compare function
 * @returns A memoized callback
 * @example
 * const Child = memo(function Child({onClick}) {
 *   console.log('Child has rendered.');
 *   return <button onClick={onClick}>Click me</button>;
 * });
 *
 * function ComponentExample() {
 *   const [timesClicked, setTimesClicked] = useState(0);
 *
 *   const handleClick = useDeepCallback(() => {
 *     setTimesClicked((timesClicked) => timesClicked + 1);
 *     // New reference every render
 *   }, [{}]);
 *
 *   return (
 *     <>
 *       <div>Times clicked: {timesClicked}</div>
 *       <Child onClick={handleClick} />
 *     </>
 *   );
 * }
 */

function useDeepCallback(callback, dependencies, customCompare) {
    // eslint-disable-next-line react-hooks/exhaustive-deps
    return react.exports.useCallback(callback, useDeepCompareRef(dependencies, customCompare));
}

var styles$l = {
    ToastManager: 'Polaris-Frame-ToastManager',
    ToastWrapper: 'Polaris-Frame-ToastManager__ToastWrapper',
    'ToastWrapper-enter': 'Polaris-Frame-ToastManager__ToastWrapper--enter',
    'ToastWrapper-exit': 'Polaris-Frame-ToastManager__ToastWrapper--exit',
    'ToastWrapper-enter-done': 'Polaris-Frame-ToastManager--toastWrapperEnterDone',
};

var styles$k = {
    Toast: 'Polaris-Frame-Toast',
    Action: 'Polaris-Frame-Toast__Action',
    error: 'Polaris-Frame-Toast--error',
    CloseButton: 'Polaris-Frame-Toast__CloseButton',
};

const DEFAULT_TOAST_DURATION = 5000;
const DEFAULT_TOAST_DURATION_WITH_ACTION = 10000;

function Toast$1({ content, onDismiss, duration, error, action }) {
    react.exports.useEffect(() => {
        let timeoutDuration = duration || DEFAULT_TOAST_DURATION;

        if (action && !duration) {
            timeoutDuration = DEFAULT_TOAST_DURATION_WITH_ACTION;
        } else if (action && duration && duration < DEFAULT_TOAST_DURATION_WITH_ACTION) {
            // eslint-disable-next-line no-console
            console.log('Toast with action should persist for at least 10,000 milliseconds to give the merchant enough time to act on it.');
        }

        const timer = setTimeout(onDismiss, timeoutDuration);
        return () => {
            clearTimeout(timer);
        };
    }, [action, duration, onDismiss]);

    const dismissMarkup =
        /*#__PURE__*/

        /*#__PURE__*/
        jsx('button', {
            type: 'button',
            className: styles$k.CloseButton,
            onClick: onDismiss,
            children: /*#__PURE__*/ jsx(Icon, {
                source: SvgMobileCancelMajor,
            }),
        });

    const actionMarkup = action
        ? /*#__PURE__*/

          /*#__PURE__*/
          jsx('div', {
              className: styles$k.Action,
              children: /*#__PURE__*/ jsx(Button, {
                  plain: true,
                  monochrome: true,
                  onClick: action.onAction,
                  children: action.content,
              }),
          })
        : null;
    const className = classNames(styles$k.Toast, error && styles$k.error);
    return (
        /*#__PURE__*/

        /*#__PURE__*/
        jsx(CustomProperties, {
            colorScheme: 'dark',
            children: /*#__PURE__*/ jsxs('div', {
                className: className,
                children: [
                    /*#__PURE__*/ jsx(KeypressListener, {
                        keyCode: Key.Escape,
                        handler: onDismiss,
                    }),
                    content,
                    actionMarkup,
                    dismissMarkup,
                ],
            }),
        })
    );
}

const ToastManager = /*#__PURE__*/ react.exports.memo(function ToastManager({ toastMessages }) {
    const toastNodes = [];
    const updateToasts = useDeepCallback(() => {
        let targetInPos = 0;
        toastMessages.forEach((_, index) => {
            const currentToast = toastNodes[index];
            if (!currentToast.current) return;
            targetInPos += currentToast.current.clientHeight;
            currentToast.current.style.setProperty('--pc-toast-manager-translate-y-in', `-${targetInPos}px`);
            currentToast.current.style.setProperty('--pc-toast-manager-translate-y-out', `${-targetInPos + 150}px`);
        });
    }, [toastMessages, toastNodes]);
    useDeepEffect(() => {
        updateToasts();
    }, [toastMessages]);
    const toastsMarkup = toastMessages.map((toast, index) => {
        const toastNode = /*#__PURE__*/ react.exports.createRef();
        toastNodes[index] = toastNode;
        return (
            /*#__PURE__*/

            /*#__PURE__*/
            jsx(
                CSSTransition$1,
                {
                    nodeRef: toastNodes[index],
                    timeout: {
                        enter: 0,
                        exit: 400,
                    },
                    classNames: toastClasses,
                    children: /*#__PURE__*/ jsx('div', {
                        ref: toastNode,
                        children: /*#__PURE__*/ jsx(Toast$1, { ...toast }),
                    }),
                },
                toast.id
            )
        );
    });
    return (
        /*#__PURE__*/

        /*#__PURE__*/
        jsxs(Portal, {
            children: [
                /*#__PURE__*/ jsx(EventListener, {
                    event: 'resize',
                    handler: updateToasts,
                }),
                /*#__PURE__*/ jsx('div', {
                    className: styles$l.ToastManager,
                    'aria-live': 'assertive',
                    children: /*#__PURE__*/ jsx(TransitionGroup$1, {
                        component: null,
                        children: toastsMarkup,
                    }),
                }),
            ],
        })
    );
});
const toastClasses = {
    enter: classNames(styles$l.ToastWrapper, styles$l['ToastWrapper-enter']),
    enterDone: classNames(styles$l.ToastWrapper, styles$l['ToastWrapper-enter-done']),
    exit: classNames(styles$l.ToastWrapper, styles$l['ToastWrapper-exit']),
};

const APP_FRAME_MAIN = 'AppFrameMain';
const APP_FRAME_NAV = 'AppFrameNav';
const APP_FRAME_TOP_BAR = 'AppFrameTopBar';
const APP_FRAME_LOADING_BAR = 'AppFrameLoadingBar';

class FrameInner extends react.exports.PureComponent {
    constructor(...args) {
        super(...args);
        this.state = {
            skipFocused: false,
            globalRibbonHeight: 0,
            loadingStack: 0,
            toastMessages: [],
            showContextualSaveBar: false,
        };
        this.contextualSaveBar = null;
        this.globalRibbonContainer = null;
        this.navigationNode = /*#__PURE__*/ react.exports.createRef();

        this.setGlobalRibbonHeight = () => {
            const { globalRibbonContainer } = this;

            if (globalRibbonContainer) {
                this.setState(
                    {
                        globalRibbonHeight: globalRibbonContainer.offsetHeight,
                    },
                    this.setGlobalRibbonRootProperty
                );
            }
        };

        this.setOffset = () => {
            const { offset = '0px' } = this.props;
            setRootProperty('--pc-frame-offset', offset);
        };

        this.setGlobalRibbonRootProperty = () => {
            const { globalRibbonHeight } = this.state;
            setRootProperty('--pc-frame-global-ribbon-height', `${globalRibbonHeight}px`);
        };

        this.showToast = (toast) => {
            this.setState(({ toastMessages }) => {
                const hasToastById = toastMessages.find(({ id }) => id === toast.id) != null;
                return {
                    toastMessages: hasToastById ? toastMessages : [...toastMessages, toast],
                };
            });
        };

        this.hideToast = ({ id }) => {
            this.setState(({ toastMessages }) => {
                return {
                    toastMessages: toastMessages.filter(({ id: toastId }) => id !== toastId),
                };
            });
        };

        this.setContextualSaveBar = (props) => {
            const { showContextualSaveBar } = this.state;
            this.contextualSaveBar = { ...props };

            if (showContextualSaveBar === true) {
                this.forceUpdate();
            } else {
                this.setState({
                    showContextualSaveBar: true,
                });
            }
        };

        this.removeContextualSaveBar = () => {
            this.contextualSaveBar = null;
            this.setState({
                showContextualSaveBar: false,
            });
        };

        this.startLoading = () => {
            this.setState(({ loadingStack }) => ({
                loadingStack: loadingStack + 1,
            }));
        };

        this.stopLoading = () => {
            this.setState(({ loadingStack }) => ({
                loadingStack: Math.max(0, loadingStack - 1),
            }));
        };

        this.handleResize = () => {
            if (this.props.globalRibbon) {
                this.setGlobalRibbonHeight();
            }
        };

        this.handleFocus = () => {
            this.setState({
                skipFocused: true,
            });
        };

        this.handleBlur = () => {
            this.setState({
                skipFocused: false,
            });
        };

        this.handleClick = (event) => {
            const { skipToContentTarget } = this.props;

            if (skipToContentTarget && skipToContentTarget.current) {
                skipToContentTarget.current.focus();
                event === null || event === void 0 ? void 0 : event.preventDefault();
            }
        };

        this.handleNavigationDismiss = () => {
            const { onNavigationDismiss } = this.props;

            if (onNavigationDismiss != null) {
                onNavigationDismiss();
            }
        };

        this.setGlobalRibbonContainer = (node) => {
            this.globalRibbonContainer = node;
        };

        this.handleNavKeydown = (event) => {
            const { key } = event;
            const {
                mediaQuery: { isNavigationCollapsed },
                showMobileNavigation,
            } = this.props;
            const mobileNavShowing = isNavigationCollapsed && showMobileNavigation;

            if (mobileNavShowing && key === 'Escape') {
                this.handleNavigationDismiss();
            }
        };
    }

    componentDidMount() {
        this.handleResize();

        if (this.props.globalRibbon) {
            return;
        }

        this.setGlobalRibbonRootProperty();
        this.setOffset();
    }

    componentDidUpdate(prevProps) {
        if (this.props.globalRibbon !== prevProps.globalRibbon) {
            this.setGlobalRibbonHeight();
        }

        this.setOffset();
    }

    render() {
        const { skipFocused, loadingStack, toastMessages, showContextualSaveBar } = this.state;
        const {
            logo,
            children,
            navigation,
            topBar,
            globalRibbon,
            showMobileNavigation = false,
            skipToContentTarget,
            i18n,
            mediaQuery: { isNavigationCollapsed },
        } = this.props;
        const navClassName = classNames(styles$v.Navigation, showMobileNavigation && styles$v['Navigation-visible']);
        const mobileNavHidden = isNavigationCollapsed && !showMobileNavigation;
        const mobileNavShowing = isNavigationCollapsed && showMobileNavigation;
        const tabIndex = mobileNavShowing ? 0 : -1;
        const mobileNavAttributes = {
            ...(mobileNavShowing && {
                'aria-modal': true,
                role: 'dialog',
            }),
        };
        const navigationMarkup = navigation
            ? /*#__PURE__*/

              /*#__PURE__*/
              jsx(TrapFocus, {
                  trapping: mobileNavShowing,
                  children: /*#__PURE__*/ jsx(CSSTransition$1, {
                      nodeRef: this.navigationNode,
                      appear: isNavigationCollapsed,
                      exit: isNavigationCollapsed,
                      in: showMobileNavigation,
                      timeout: parseInt(tokens.motion['duration-300'], 10),
                      classNames: navTransitionClasses,
                      children: /*#__PURE__*/ jsxs('div', {
                          ...Object.assign(
                              {
                                  key: 'NavContent',
                              },
                              mobileNavAttributes,
                              {
                                  'aria-label': i18n.translate('Polaris.Frame.navigationLabel'),
                                  ref: this.navigationNode,
                                  className: navClassName,
                                  onKeyDown: this.handleNavKeydown,
                                  id: APP_FRAME_NAV,
                                  hidden: mobileNavHidden,
                              }
                          ),
                          children: [
                              navigation,
                              /*#__PURE__*/ jsx('button', {
                                  type: 'button',
                                  className: styles$v.NavigationDismiss,
                                  onClick: this.handleNavigationDismiss,
                                  'aria-hidden': mobileNavHidden || (!isNavigationCollapsed && !showMobileNavigation),
                                  'aria-label': i18n.translate('Polaris.Frame.Navigation.closeMobileNavigationLabel'),
                                  tabIndex: tabIndex,
                                  children: /*#__PURE__*/ jsx(Icon, {
                                      source: SvgMobileCancelMajor,
                                  }),
                              }),
                          ],
                      }),
                  }),
              })
            : null;
        const loadingMarkup =
            loadingStack > 0
                ? /*#__PURE__*/

                  /*#__PURE__*/
                  jsx('div', {
                      className: styles$v.LoadingBar,
                      id: APP_FRAME_LOADING_BAR,
                      children: /*#__PURE__*/ jsx(Loading$1, {}),
                  })
                : null;

        const contextualSaveBarMarkup =
            /*#__PURE__*/

            /*#__PURE__*/
            jsx(CSSAnimation, {
                in: showContextualSaveBar,
                className: styles$v.ContextualSaveBar,
                type: 'fade',
                children: /*#__PURE__*/ jsx(ContextualSaveBar, { ...this.contextualSaveBar }),
            });

        const topBarMarkup = topBar
            ? /*#__PURE__*/

              /*#__PURE__*/
              jsx('div', {
                  ...Object.assign(
                      {
                          className: styles$v.TopBar,
                      },
                      layer.props,
                      dataPolarisTopBar.props,
                      {
                          id: APP_FRAME_TOP_BAR,
                      }
                  ),
                  children: topBar,
              })
            : null;
        const globalRibbonMarkup = globalRibbon
            ? /*#__PURE__*/

              /*#__PURE__*/
              jsx('div', {
                  className: styles$v.GlobalRibbonContainer,
                  ref: this.setGlobalRibbonContainer,
                  children: globalRibbon,
              })
            : null;
        const skipClassName = classNames(styles$v.Skip, skipFocused && styles$v.focused);
        const skipTarget = skipToContentTarget !== null && skipToContentTarget !== void 0 && skipToContentTarget.current ? skipToContentTarget.current.id : APP_FRAME_MAIN;

        const skipMarkup =
            /*#__PURE__*/

            /*#__PURE__*/
            jsx('div', {
                className: skipClassName,
                children: /*#__PURE__*/ jsx('a', {
                    href: `#${skipTarget}`,
                    onFocus: this.handleFocus,
                    onBlur: this.handleBlur,
                    onClick: this.handleClick,
                    children: i18n.translate('Polaris.Frame.skipToContent'),
                }),
            });

        const navigationAttributes = navigation
            ? {
                  'data-has-navigation': true,
              }
            : {};
        const frameClassName = classNames(styles$v.Frame, navigation && styles$v.hasNav, topBar && styles$v.hasTopBar);
        const navigationOverlayMarkup =
            showMobileNavigation && isNavigationCollapsed
                ? /*#__PURE__*/

                  /*#__PURE__*/
                  jsx(Backdrop, {
                      belowNavigation: true,
                      onClick: this.handleNavigationDismiss,
                      onTouchStart: this.handleNavigationDismiss,
                  })
                : null; // This is probably a legit error but I don't have the time to refactor this
        // eslint-disable-next-line react/jsx-no-constructed-context-values

        const context = {
            logo,
            showToast: this.showToast,
            hideToast: this.hideToast,
            startLoading: this.startLoading,
            stopLoading: this.stopLoading,
            setContextualSaveBar: this.setContextualSaveBar,
            removeContextualSaveBar: this.removeContextualSaveBar,
        };
        return (
            /*#__PURE__*/

            /*#__PURE__*/
            jsx(FrameContext.Provider, {
                value: context,
                children: /*#__PURE__*/ jsxs('div', {
                    ...Object.assign(
                        {
                            className: frameClassName,
                        },
                        layer.props,
                        navigationAttributes
                    ),
                    children: [
                        skipMarkup,
                        topBarMarkup,
                        navigationMarkup,
                        contextualSaveBarMarkup,
                        loadingMarkup,
                        navigationOverlayMarkup,
                        /*#__PURE__*/ jsx('main', {
                            className: styles$v.Main,
                            id: APP_FRAME_MAIN,
                            'data-has-global-ribbon': Boolean(globalRibbon),
                            children: /*#__PURE__*/ jsx('div', {
                                className: styles$v.Content,
                                children: children,
                            }),
                        }),
                        /*#__PURE__*/ jsx(ToastManager, {
                            toastMessages: toastMessages,
                        }),
                        globalRibbonMarkup,
                        /*#__PURE__*/ jsx(EventListener, {
                            event: 'resize',
                            handler: this.handleResize,
                        }),
                    ],
                }),
            })
        );
    }
}

const navTransitionClasses = {
    enter: classNames(styles$v['Navigation-enter']),
    enterActive: classNames(styles$v['Navigation-enterActive']),
    enterDone: classNames(styles$v['Navigation-enterActive']),
    exit: classNames(styles$v['Navigation-exit']),
    exitActive: classNames(styles$v['Navigation-exitActive']),
};

function Frame(props) {
    const i18n = useI18n();
    const mediaQuery = useMediaQuery();
    return (
        /*#__PURE__*/

        /*#__PURE__*/
        jsx(FrameInner, {
            ...Object.assign({}, props, {
                i18n: i18n,
                mediaQuery: mediaQuery,
            }),
        })
    );
}

var styles$j = {
    IndexTable: 'Polaris-IndexTable',
    'LoadingContainer-enter': 'Polaris-IndexTable__LoadingContainer--enter',
    'LoadingContainer-enter-active': 'Polaris-IndexTable--loadingContainerEnterActive',
    'LoadingContainer-exit': 'Polaris-IndexTable__LoadingContainer--exit',
    'LoadingContainer-exit-active': 'Polaris-IndexTable--loadingContainerExitActive',
    LoadingPanel: 'Polaris-IndexTable__LoadingPanel',
    LoadingPanelRow: 'Polaris-IndexTable__LoadingPanelRow',
    LoadingPanelText: 'Polaris-IndexTable__LoadingPanelText',
    Table: 'Polaris-IndexTable__Table',
    'Table-scrolling': 'Polaris-IndexTable__Table--scrolling',
    'TableCell-first': 'Polaris-IndexTable__TableCell--first',
    TableCell: 'Polaris-IndexTable__TableCell',
    'TableHeading-first': 'Polaris-IndexTable__TableHeading--first',
    'TableHeading-second': 'Polaris-IndexTable__TableHeading--second',
    'Table-unselectable': 'Polaris-IndexTable__Table--unselectable',
    TableRow: 'Polaris-IndexTable__TableRow',
    'TableRow-unclickable': 'Polaris-IndexTable__TableRow--unclickable',
    statusSuccess: 'Polaris-IndexTable--statusSuccess',
    statusSubdued: 'Polaris-IndexTable--statusSubdued',
    'TableRow-hovered': 'Polaris-IndexTable__TableRow--hovered',
    'TableRow-selected': 'Polaris-IndexTable__TableRow--selected',
    'TableRow-subdued': 'Polaris-IndexTable__TableRow--subdued',
    TableHeading: 'Polaris-IndexTable__TableHeading',
    ColumnHeaderCheckboxWrapper: 'Polaris-IndexTable__ColumnHeaderCheckboxWrapper',
    FirstStickyHeaderElement: 'Polaris-IndexTable__FirstStickyHeaderElement',
    'TableHeading-unselectable': 'Polaris-IndexTable__TableHeading--unselectable',
    'TableCell-flush': 'Polaris-IndexTable__TableCell--flush',
    'Table-sticky-scrolling': 'Polaris-IndexTable--tableStickyScrolling',
    'TableHeading-last': 'Polaris-IndexTable__TableHeading--last',
    'Table-sticky-last': 'Polaris-IndexTable--tableStickyLast',
    StickyTable: 'Polaris-IndexTable__StickyTable',
    StickyTableHeader: 'Polaris-IndexTable__StickyTableHeader',
    'StickyTableHeader-isSticky': 'Polaris-IndexTable__StickyTableHeader--isSticky',
    StickyTableColumnHeader: 'Polaris-IndexTable__StickyTableColumnHeader',
    'StickyTableColumnHeader-isScrolling': 'Polaris-IndexTable__StickyTableColumnHeader--isScrolling',
    StickyTableHeadings: 'Polaris-IndexTable__StickyTableHeadings',
    'StickyTableHeading-second': 'Polaris-IndexTable__StickyTableHeading--second',
    unselectable: 'Polaris-IndexTable--unselectable',
    'StickyTableHeading-second-scrolling': 'Polaris-IndexTable--stickyTableHeadingSecondScrolling',
    ScrollLeft: 'Polaris-IndexTable__ScrollLeft',
    ScrollRight: 'Polaris-IndexTable__ScrollRight',
    'ScrollRight-onboarding': 'Polaris-IndexTable__ScrollRight--onboarding',
    BulkActionsWrapper: 'Polaris-IndexTable__BulkActionsWrapper',
    ScrollBarContainer: 'Polaris-IndexTable__ScrollBarContainer',
    scrollBarContainerCondensed: 'Polaris-IndexTable--scrollBarContainerCondensed',
    ScrollBar: 'Polaris-IndexTable__ScrollBar',
    disableTextSelection: 'Polaris-IndexTable--disableTextSelection',
    selectMode: 'Polaris-IndexTable--selectMode',
    EmptySearchResultWrapper: 'Polaris-IndexTable__EmptySearchResultWrapper',
    condensedRow: 'Polaris-IndexTable--condensedRow',
    CondensedList: 'Polaris-IndexTable__CondensedList',
    HeaderWrapper: 'Polaris-IndexTable__HeaderWrapper',
    'StickyTable-condensed': 'Polaris-IndexTable__StickyTable--condensed',
    'StickyTableHeader-condensed': 'Polaris-IndexTable__StickyTableHeader--condensed',
    ScrollBarContent: 'Polaris-IndexTable__ScrollBarContent',
};

const SELECT_ALL_ITEMS$1 = 'All';
let SelectionType;

(function (SelectionType) {
    SelectionType['All'] = 'all';
    SelectionType['Page'] = 'page';
    SelectionType['Multi'] = 'multi';
    SelectionType['Single'] = 'single';
})(SelectionType || (SelectionType = {}));

const IndexContext = /*#__PURE__*/ react.exports.createContext(undefined);
const IndexSelectionChangeContext = /*#__PURE__*/ react.exports.createContext(undefined);
const IndexRowContext = /*#__PURE__*/ react.exports.createContext(undefined);

function useIndexSelectionChange() {
    const onSelectionChange = react.exports.useContext(IndexSelectionChangeContext);

    if (!onSelectionChange) {
        throw new Error(`Missing IndexProvider context`);
    }

    return onSelectionChange;
}
function useIndexRow() {
    const indexRow = react.exports.useContext(IndexRowContext);

    if (!indexRow) {
        throw new Error(`Missing IndexProvider context`);
    }

    return indexRow;
}
function useIndexValue() {
    const index = react.exports.useContext(IndexContext);

    if (!index) {
        throw new Error(`Missing IndexProvider context`);
    }

    return index;
}
function useBulkSelectionData({ selectedItemsCount, itemCount, hasMoreItems, resourceName: passedResourceName }) {
    const i18n = useI18n();
    const selectable = Boolean(selectedItemsCount);
    const selectMode = selectedItemsCount === 'All' || selectedItemsCount > 0;
    const defaultResourceName = {
        singular: i18n.translate('Polaris.IndexProvider.defaultItemSingular'),
        plural: i18n.translate('Polaris.IndexProvider.defaultItemPlural'),
    };
    const resourceName = passedResourceName ? passedResourceName : defaultResourceName;
    const paginatedSelectAllText = getPaginatedSelectAllText();
    const bulkActionsLabel = getBulkActionsLabel();
    const bulkActionsAccessibilityLabel = getBulkActionsAccessibilityLabel();
    let bulkSelectState = 'indeterminate';

    if (!selectedItemsCount || selectedItemsCount === 0) {
        bulkSelectState = undefined;
    } else if (selectedItemsCount === SELECT_ALL_ITEMS$1 || selectedItemsCount === itemCount) {
        bulkSelectState = true;
    }

    return {
        paginatedSelectAllText,
        bulkActionsLabel,
        bulkActionsAccessibilityLabel,
        resourceName,
        selectMode,
        bulkSelectState,
        selectable,
    };

    function getPaginatedSelectAllText() {
        if (!selectable || !hasMoreItems) {
            return;
        }

        if (selectedItemsCount === SELECT_ALL_ITEMS$1) {
            return i18n.translate('Polaris.IndexProvider.allItemsSelected', {
                itemsLength: itemCount,
                resourceNamePlural: resourceName.plural.toLocaleLowerCase(),
            });
        }
    }

    function getBulkActionsLabel() {
        const selectedItemsCountLabel = selectedItemsCount === SELECT_ALL_ITEMS$1 ? `${itemCount}+` : selectedItemsCount;
        return i18n.translate('Polaris.IndexProvider.selected', {
            selectedItemsCount: selectedItemsCountLabel,
        });
    }

    function getBulkActionsAccessibilityLabel() {
        const totalItemsCount = itemCount;
        const allSelected = selectedItemsCount === totalItemsCount;

        if (totalItemsCount === 1 && allSelected) {
            return i18n.translate('Polaris.IndexProvider.a11yCheckboxDeselectAllSingle', {
                resourceNameSingular: resourceName.singular,
            });
        } else if (totalItemsCount === 1) {
            return i18n.translate('Polaris.IndexProvider.a11yCheckboxSelectAllSingle', {
                resourceNameSingular: resourceName.singular,
            });
        } else if (allSelected) {
            return i18n.translate('Polaris.IndexProvider.a11yCheckboxDeselectAllMultiple', {
                itemsLength: itemCount,
                resourceNamePlural: resourceName.plural,
            });
        } else {
            return i18n.translate('Polaris.IndexProvider.a11yCheckboxSelectAllMultiple', {
                itemsLength: itemCount,
                resourceNamePlural: resourceName.plural,
            });
        }
    }
}
function useHandleBulkSelection({ onSelectionChange = () => {} }) {
    const lastSelected = react.exports.useRef(null);
    const handleSelectionChange = react.exports.useCallback(
        (selectionType, toggleType, selection, sortOrder) => {
            const prevSelected = lastSelected.current;

            if (SelectionType.Multi && typeof sortOrder === 'number') {
                lastSelected.current = sortOrder;
            }

            if (selectionType === SelectionType.Single || (selectionType === SelectionType.Multi && (typeof prevSelected !== 'number' || typeof sortOrder !== 'number'))) {
                onSelectionChange(SelectionType.Single, toggleType, selection);
            } else if (selectionType === SelectionType.Multi) {
                const min = Math.min(prevSelected, sortOrder);
                const max = Math.max(prevSelected, sortOrder);
                onSelectionChange(selectionType, toggleType, [min, max]);
            } else if (selectionType === SelectionType.Page || selectionType === SelectionType.All) {
                onSelectionChange(selectionType, toggleType);
            }
        },
        [onSelectionChange]
    );
    return handleSelectionChange;
}

function IndexProvider({ children, resourceName: passedResourceName, loading, onSelectionChange, selectedItemsCount = 0, itemCount, hasMoreItems, condensed, selectable: isSelectableIndex = true }) {
    const { paginatedSelectAllText, bulkActionsLabel, bulkActionsAccessibilityLabel, resourceName, selectMode, bulkSelectState } = useBulkSelectionData({
        selectedItemsCount,
        itemCount,
        hasMoreItems,
        resourceName: passedResourceName,
    });
    const handleSelectionChange = useHandleBulkSelection({
        onSelectionChange,
    });
    const contextValue = react.exports.useMemo(
        () => ({
            itemCount,
            selectMode: selectMode && isSelectableIndex,
            selectable: isSelectableIndex,
            resourceName,
            loading,
            paginatedSelectAllText,
            hasMoreItems,
            bulkActionsLabel,
            bulkActionsAccessibilityLabel,
            bulkSelectState,
            selectedItemsCount,
            condensed,
        }),
        [itemCount, selectMode, isSelectableIndex, resourceName, loading, paginatedSelectAllText, hasMoreItems, bulkActionsLabel, bulkActionsAccessibilityLabel, bulkSelectState, selectedItemsCount, condensed]
    );
    const rowContextValue = react.exports.useMemo(
        () => ({
            selectable: isSelectableIndex,
            selectMode: selectMode && isSelectableIndex,
            condensed,
        }),
        [condensed, selectMode, isSelectableIndex]
    );
    return (
        /*#__PURE__*/

        /*#__PURE__*/
        jsx(IndexContext.Provider, {
            value: contextValue,
            children: /*#__PURE__*/ jsx(IndexRowContext.Provider, {
                value: rowContextValue,
                children: /*#__PURE__*/ jsx(IndexSelectionChangeContext.Provider, {
                    value: handleSelectionChange,
                    children: children,
                }),
            }),
        })
    );
}

const Cell = /*#__PURE__*/ react.exports.memo(function Cell({ children, flush }) {
    const cellClassName = classNames(styles$j.TableCell, flush && styles$j['TableCell-flush']);
    return (
        /*#__PURE__*/

        /*#__PURE__*/
        jsx('td', {
            className: cellClassName,
            children: children,
        })
    );
});

var styles$i = {
    TableCellContentContainer: 'Polaris-IndexTable-Checkbox__TableCellContentContainer',
    Wrapper: 'Polaris-IndexTable-Checkbox__Wrapper',
    expanded: 'Polaris-IndexTable-Checkbox--expanded',
    condensed: 'Polaris-IndexTable-Checkbox--condensed',
};

const RowContext = /*#__PURE__*/ react.exports.createContext({});
const RowHoveredContext = /*#__PURE__*/ react.exports.createContext(undefined);
const scrollDefaultContext = {
    scrollableContainer: null,
    canScrollLeft: false,
    canScrollRight: false,
};
const ScrollContext = /*#__PURE__*/ react.exports.createContext(scrollDefaultContext);

const Checkbox = /*#__PURE__*/ react.exports.memo(function Checkbox() {
    const i18n = useI18n();
    const { resourceName, condensed } = useIndexValue();
    const { itemId, selected, onInteraction } = react.exports.useContext(RowContext);
    const wrapperClassName = classNames(styles$i.Wrapper, condensed ? styles$i.condensed : styles$i.expanded);
    const Wrapper = condensed ? react.exports.Fragment : CheckboxWrapper;
    return (
        /*#__PURE__*/

        /*#__PURE__*/
        jsx(Wrapper, {
            children: /*#__PURE__*/ jsx('div', {
                className: styles$i.TableCellContentContainer,
                children: /*#__PURE__*/ jsx('div', {
                    className: wrapperClassName,
                    onClick: onInteraction,
                    onKeyUp: noop$7,
                    children: /*#__PURE__*/ jsx(Checkbox$1, {
                        id: itemId,
                        label: i18n.translate('Polaris.IndexTable.selectItem', {
                            resourceName: resourceName.singular,
                        }),
                        labelHidden: true,
                        checked: selected,
                    }),
                }),
            }),
        })
    );
});

function CheckboxWrapper({ children }) {
    const checkboxNode = react.exports.useRef(null);
    const handleResize = react.exports.useCallback(() => {
        if (!checkboxNode.current) return;
        const { width } = checkboxNode.current.getBoundingClientRect();
        setRootProperty('--pc-checkbox-offset', `${width}px`);
    }, []);
    react.exports.useEffect(() => {
        handleResize();
    }, [handleResize]);
    react.exports.useEffect(() => {
        if (!checkboxNode.current) return;
        window.addEventListener('resize', handleResize);
        return () => {
            window.removeEventListener('resize', handleResize);
        };
    }, [handleResize]);
    const checkboxClassName = classNames(styles$j.TableCell, styles$j['TableCell-first']);
    return (
        /*#__PURE__*/

        /*#__PURE__*/
        jsx('td', {
            className: checkboxClassName,
            ref: checkboxNode,
            children: children,
        })
    );
}

function noop$7() {}

const Row = /*#__PURE__*/ react.exports.memo(function Row({ children, selected, id, position, subdued, status, onNavigation }) {
    const { selectable, selectMode, condensed } = useIndexRow();
    const onSelectionChange = useIndexSelectionChange();
    const { value: hovered, setTrue: setHoverIn, setFalse: setHoverOut } = useToggle(false);
    const handleInteraction = react.exports.useCallback(
        (event) => {
            event.stopPropagation();
            if (('key' in event && event.key !== ' ') || !onSelectionChange) return;
            const selectionType = event.nativeEvent.shiftKey ? SelectionType.Multi : SelectionType.Single;
            onSelectionChange(selectionType, !selected, id, position);
        },
        [id, onSelectionChange, position, selected]
    );
    const contextValue = react.exports.useMemo(
        () => ({
            itemId: id,
            selected,
            onInteraction: handleInteraction,
        }),
        [id, selected, handleInteraction]
    );
    const primaryLinkElement = react.exports.useRef(null);
    const isNavigating = react.exports.useRef(false);
    const tableRowRef = react.exports.useRef(null);
    const tableRowCallbackRef = react.exports.useCallback((node) => {
        tableRowRef.current = node;
        const el = node === null || node === void 0 ? void 0 : node.querySelector('[data-primary-link]');

        if (el) {
            primaryLinkElement.current = el;
        }
    }, []);
    const rowClassName = classNames(
        styles$j.TableRow,
        selectable && condensed && styles$j.condensedRow,
        selected && styles$j['TableRow-selected'],
        subdued && styles$j['TableRow-subdued'],
        hovered && styles$j['TableRow-hovered'],
        status && styles$j[variationName('status', status)],
        !selectable && !primaryLinkElement.current && styles$j['TableRow-unclickable']
    );
    let handleRowClick;

    if (selectable || primaryLinkElement.current) {
        handleRowClick = (event) => {
            if (!tableRowRef.current || isNavigating.current) {
                return;
            }

            event.stopPropagation();
            event.preventDefault();

            if (primaryLinkElement.current && !selectMode) {
                isNavigating.current = true;
                const { ctrlKey, metaKey } = event.nativeEvent;

                if (onNavigation) {
                    onNavigation(id);
                }

                if ((ctrlKey || metaKey) && primaryLinkElement.current instanceof HTMLAnchorElement) {
                    isNavigating.current = false;
                    window.open(primaryLinkElement.current.href, '_blank');
                    return;
                }

                primaryLinkElement.current.dispatchEvent(new MouseEvent(event.type, event.nativeEvent));
            } else {
                isNavigating.current = false;
                handleInteraction(event);
            }
        };
    }

    const RowWrapper = condensed ? 'li' : 'tr';
    const checkboxMarkup = selectable
        ? /*#__PURE__*/

          /*#__PURE__*/
          jsx(Checkbox, {})
        : null;
    return (
        /*#__PURE__*/

        /*#__PURE__*/
        jsx(RowContext.Provider, {
            value: contextValue,
            children: /*#__PURE__*/ jsx(RowHoveredContext.Provider, {
                value: hovered,
                children: /*#__PURE__*/ jsxs(
                    RowWrapper,
                    {
                        className: rowClassName,
                        onMouseEnter: setHoverIn,
                        onMouseLeave: setHoverOut,
                        onClick: handleRowClick,
                        ref: tableRowCallbackRef,
                        children: [checkboxMarkup, children],
                    },
                    id
                ),
            }),
        })
    );
});

function getTableHeadingsBySelector(wrapperElement, selector) {
    return wrapperElement ? Array.from(wrapperElement.querySelectorAll(selector)) : [];
}

function AfterInitialMount({ children, fallback = null }) {
    const isMounted = useIsAfterInitialMount();
    const content = isMounted ? children : fallback;
    return /*#__PURE__*/ React.createElement(React.Fragment, null, content);
}

var styles$h = {
    ScrollContainer: 'Polaris-IndexTable-ScrollContainer',
};

function ScrollContainer({ children, scrollableContainerRef, onScroll }) {
    react.exports.useEffect(() => {
        if (!scrollableContainerRef.current) return;
        scrollableContainerRef.current.dispatchEvent(new Event('scroll'));
    }, [scrollableContainerRef]);
    const [containerScroll, setContainerScroll] = react.exports.useState(scrollDefaultContext); // eslint-disable-next-line react-hooks/exhaustive-deps

    const handleScroll = react.exports.useCallback(
        debounce_1(
            () => {
                if (!scrollableContainerRef.current) {
                    return;
                }

                const availableScrollAmount = scrollableContainerRef.current.scrollWidth - scrollableContainerRef.current.offsetWidth;
                const canScrollLeft = scrollableContainerRef.current.scrollLeft > 0;
                const canScrollRight = scrollableContainerRef.current.scrollLeft < availableScrollAmount;
                onScroll(canScrollLeft, canScrollRight);
                setContainerScroll({
                    scrollableContainer: scrollableContainerRef.current,
                    canScrollLeft,
                    canScrollRight,
                });
            },
            40,
            {
                trailing: true,
                leading: true,
                maxWait: 40,
            }
        ),
        [onScroll, scrollableContainerRef]
    );
    return (
        /*#__PURE__*/

        /*#__PURE__*/
        jsx(ScrollContext.Provider, {
            value: containerScroll,
            children: /*#__PURE__*/ jsx('div', {
                className: styles$h.ScrollContainer,
                ref: scrollableContainerRef,
                onScroll: handleScroll,
                children: children,
            }),
        })
    );
}

function useStickyManager() {
    const stickyManager = react.exports.useContext(StickyManagerContext);

    if (!stickyManager) {
        throw new MissingAppProviderError('No StickyManager was provided.');
    }

    return stickyManager;
}

class StickyInner extends react.exports.Component {
    constructor(...args) {
        super(...args);
        this.state = {
            isSticky: false,
            style: {},
        };
        this.placeHolderNode = null;
        this.stickyNode = null;

        this.setPlaceHolderNode = (node) => {
            this.placeHolderNode = node;
        };

        this.setStickyNode = (node) => {
            this.stickyNode = node;
        };

        this.handlePositioning = (stick, top = 0, left = 0, width = 0) => {
            const { isSticky } = this.state;

            if ((stick && !isSticky) || (!stick && isSticky)) {
                this.adjustPlaceHolderNode(stick);
                this.setState({
                    isSticky: !isSticky,
                });
            }

            const style = stick
                ? {
                      position: 'fixed',
                      top,
                      left,
                      width,
                  }
                : {};
            this.setState({
                style,
            });
        };

        this.adjustPlaceHolderNode = (add) => {
            if (this.placeHolderNode && this.stickyNode) {
                this.placeHolderNode.style.paddingBottom = add ? `${getRectForNode(this.stickyNode).height}px` : '0px';
            }
        };
    }

    componentDidMount() {
        const { boundingElement, offset = false, disableWhenStacked = false, stickyManager } = this.props;
        if (!this.stickyNode || !this.placeHolderNode) return;
        stickyManager.registerStickyItem({
            stickyNode: this.stickyNode,
            placeHolderNode: this.placeHolderNode,
            handlePositioning: this.handlePositioning,
            offset,
            boundingElement,
            disableWhenStacked,
        });
    }

    componentWillUnmount() {
        const { stickyManager } = this.props;
        if (!this.stickyNode) return;
        stickyManager.unregisterStickyItem(this.stickyNode);
    }

    render() {
        const { style, isSticky } = this.state;
        const { children } = this.props;
        const childrenContent = isFunction(children) ? children(isSticky) : children;
        return (
            /*#__PURE__*/

            /*#__PURE__*/
            jsxs('div', {
                children: [
                    /*#__PURE__*/ jsx('div', {
                        ref: this.setPlaceHolderNode,
                    }),
                    /*#__PURE__*/ jsx('div', {
                        ref: this.setStickyNode,
                        style: style,
                        children: childrenContent,
                    }),
                ],
            })
        );
    }
} // This should have a typeguard instead of using Function
// eslint-disable-next-line @typescript-eslint/ban-types

function isFunction(arg) {
    return typeof arg === 'function';
}

function Sticky(props) {
    const stickyManager = useStickyManager();
    return (
        /*#__PURE__*/

        /*#__PURE__*/
        jsx(StickyInner, {
            ...Object.assign({}, props, {
                stickyManager: stickyManager,
            }),
        })
    );
}

const SCROLL_BAR_PADDING = 4;
const SIXTY_FPS = 1000 / 60;
const SCROLL_BAR_DEBOUNCE_PERIOD = 300;
const SMALL_SCREEN_WIDTH$1 = 458;

function IndexTableBase({ headings, bulkActions = [], promotedBulkActions = [], children, emptyState, sort, lastColumnSticky = false }) {
    const { loading, bulkSelectState, resourceName, bulkActionsAccessibilityLabel, selectable, selectMode, paginatedSelectAllText, itemCount, hasMoreItems, selectedItemsCount, condensed } = useIndexValue();
    const handleSelectionChange = useIndexSelectionChange();
    const i18n = useI18n();
    const { value: hasMoreLeftColumns, toggle: toggleHasMoreLeftColumns } = useToggle(false);
    const tablePosition = react.exports.useRef({
        top: 0,
        left: 0,
    });
    const tableHeadingRects = react.exports.useRef([]);
    const scrollableContainerElement = react.exports.useRef(null);
    const tableElement = react.exports.useRef(null);
    const condensedListElement = react.exports.useRef(null);
    const [tableInitialized, setTableInitialized] = react.exports.useState(false);
    const [isSmallScreenSelectable, setIsSmallScreenSelectable] = react.exports.useState(false);
    const [stickyWrapper, setStickyWrapper] = react.exports.useState(null);
    const tableHeadings = react.exports.useRef([]);
    const stickyTableHeadings = react.exports.useRef([]);
    const stickyHeaderWrapperElement = react.exports.useRef(null);
    const firstStickyHeaderElement = react.exports.useRef(null);
    const stickyHeaderElement = react.exports.useRef(null);
    const scrollBarElement = react.exports.useRef(null);
    const scrollingWithBar = react.exports.useRef(false);
    const scrollingContainer = react.exports.useRef(false);
    const tableBodyRef = react.exports.useCallback(
        (node) => {
            if (node !== null && !tableInitialized) {
                setTableInitialized(true);
            }
        },
        [tableInitialized]
    );
    const toggleIsSmallScreenSelectable = react.exports.useCallback(() => {
        setIsSmallScreenSelectable((value) => !value);
    }, []);
    const handleSelectAllItemsInStore = react.exports.useCallback(() => {
        handleSelectionChange(selectedItemsCount === SELECT_ALL_ITEMS$1 ? SelectionType.Page : SelectionType.All, true);
    }, [handleSelectionChange, selectedItemsCount]);
    const calculateFirstHeaderOffset = react.exports.useCallback(() => {
        if (!selectable) {
            return tableHeadingRects.current[0].offsetWidth;
        }

        return condensed ? tableHeadingRects.current[0].offsetWidth : tableHeadingRects.current[0].offsetWidth + tableHeadingRects.current[1].offsetWidth;
    }, [condensed, selectable]);
    const resizeTableHeadings = react.exports.useMemo(
        () =>
            debounce_1(
                () => {
                    if (!tableElement.current || !scrollableContainerElement.current) {
                        return;
                    }

                    const boundingRect = scrollableContainerElement.current.getBoundingClientRect();
                    tablePosition.current = {
                        top: boundingRect.top,
                        left: boundingRect.left,
                    };
                    tableHeadingRects.current = tableHeadings.current.map((heading) => ({
                        offsetWidth: heading.offsetWidth || 0,
                        offsetLeft: heading.offsetLeft || 0,
                    }));

                    if (tableHeadings.current.length === 0) {
                        return;
                    } // update left offset for first column

                    if (selectable && tableHeadings.current.length > 1) tableHeadings.current[1].style.left = `${tableHeadingRects.current[0].offsetWidth}px`; // update the min width of the checkbox to be the be the un-padded width of the first heading

                    if (selectable && firstStickyHeaderElement !== null && firstStickyHeaderElement !== void 0 && firstStickyHeaderElement.current) {
                        const elementStyle = getComputedStyle(tableHeadings.current[0]);
                        const boxWidth = tableHeadings.current[0].offsetWidth;
                        firstStickyHeaderElement.current.style.minWidth = `calc(${boxWidth}px - ${elementStyle.paddingLeft} - ${elementStyle.paddingRight} + 2px)`;
                    } // update sticky header min-widths

                    stickyTableHeadings.current.forEach((heading, index) => {
                        let minWidth = 0;

                        if (index === 0 && (!isSmallScreen$1() || !selectable)) {
                            minWidth = calculateFirstHeaderOffset();
                        } else if (selectable && tableHeadingRects.current.length > index) {
                            var _tableHeadingRects$cu;

                            minWidth = ((_tableHeadingRects$cu = tableHeadingRects.current[index]) === null || _tableHeadingRects$cu === void 0 ? void 0 : _tableHeadingRects$cu.offsetWidth) || 0;
                        } else if (!selectable && tableHeadingRects.current.length >= index) {
                            var _tableHeadingRects$cu2;

                            minWidth = ((_tableHeadingRects$cu2 = tableHeadingRects.current[index - 1]) === null || _tableHeadingRects$cu2 === void 0 ? void 0 : _tableHeadingRects$cu2.offsetWidth) || 0;
                        }

                        heading.style.minWidth = `${minWidth}px`;
                    });
                },
                SIXTY_FPS,
                {
                    leading: true,
                    trailing: true,
                    maxWait: SIXTY_FPS,
                }
            ),
        [calculateFirstHeaderOffset, selectable]
    );
    const resizeTableScrollBar = react.exports.useCallback(() => {
        if (scrollBarElement.current && tableElement.current && tableInitialized) {
            scrollBarElement.current.style.setProperty('--pc-index-table-scroll-bar-content-width', `${tableElement.current.offsetWidth - SCROLL_BAR_PADDING}px`);
        }
    }, [tableInitialized]); // eslint-disable-next-line react-hooks/exhaustive-deps

    const debounceResizeTableScrollbar = react.exports.useCallback(
        debounce_1(resizeTableScrollBar, SCROLL_BAR_DEBOUNCE_PERIOD, {
            trailing: true,
        }),
        [resizeTableScrollBar]
    );
    const [canScrollRight, setCanScrollRight] = react.exports.useState(true);
    const handleCanScrollRight = react.exports.useCallback(() => {
        if (!lastColumnSticky || !tableElement.current || !scrollableContainerElement.current) {
            return;
        }

        const tableRect = tableElement.current.getBoundingClientRect();
        const scrollableRect = scrollableContainerElement.current.getBoundingClientRect();
        setCanScrollRight(tableRect.width > scrollableRect.width);
    }, [lastColumnSticky]);
    react.exports.useEffect(() => {
        handleCanScrollRight();
    }, [handleCanScrollRight]);
    const handleResize = react.exports.useCallback(() => {
        var _scrollBarElement$cur; // hide the scrollbar when resizing

        (_scrollBarElement$cur = scrollBarElement.current) === null || _scrollBarElement$cur === void 0 ? void 0 : _scrollBarElement$cur.style.setProperty('--pc-index-table-scroll-bar-content-width', `0px`);
        resizeTableHeadings();
        debounceResizeTableScrollbar();
        handleCanScrollRight();
    }, [debounceResizeTableScrollbar, resizeTableHeadings, handleCanScrollRight]);
    const handleScrollContainerScroll = react.exports.useCallback(
        (canScrollLeft, canScrollRight) => {
            if (!scrollableContainerElement.current || !scrollBarElement.current) {
                return;
            }

            if (!scrollingWithBar.current) {
                scrollingContainer.current = true;
                scrollBarElement.current.scrollLeft = scrollableContainerElement.current.scrollLeft;
            }

            scrollingWithBar.current = false;

            if (stickyHeaderElement.current) {
                stickyHeaderElement.current.scrollLeft = scrollableContainerElement.current.scrollLeft;
            }

            if ((canScrollLeft && !hasMoreLeftColumns) || (!canScrollLeft && hasMoreLeftColumns)) {
                toggleHasMoreLeftColumns();
            }

            setCanScrollRight(canScrollRight);
        },
        [hasMoreLeftColumns, toggleHasMoreLeftColumns]
    );
    const handleScrollBarScroll = react.exports.useCallback(() => {
        if (!scrollableContainerElement.current || !scrollBarElement.current) {
            return;
        }

        if (!scrollingContainer.current) {
            scrollingWithBar.current = true;
            scrollableContainerElement.current.scrollLeft = scrollBarElement.current.scrollLeft;
        }

        scrollingContainer.current = false;
    }, []);
    react.exports.useEffect(() => {
        tableHeadings.current = getTableHeadingsBySelector(tableElement.current, '[data-index-table-heading]');
        stickyTableHeadings.current = getTableHeadingsBySelector(stickyHeaderWrapperElement.current, '[data-index-table-sticky-heading]');
        resizeTableHeadings();
    }, [headings, resizeTableHeadings, firstStickyHeaderElement, tableInitialized]);
    react.exports.useEffect(() => {
        resizeTableScrollBar();
        setStickyWrapper(condensed ? condensedListElement.current : tableElement.current);
    }, [tableInitialized, resizeTableScrollBar, condensed]);
    react.exports.useEffect(() => {
        if (!condensed && isSmallScreenSelectable) {
            setIsSmallScreenSelectable(false);
        }
    }, [condensed, isSmallScreenSelectable]);
    const hasBulkActions = Boolean((promotedBulkActions && promotedBulkActions.length > 0) || (bulkActions && bulkActions.length > 0));
    const headingsMarkup = headings.map(renderHeading).reduce((acc, heading) => acc.concat(heading), []);
    const bulkActionsSelectable = Boolean(promotedBulkActions.length > 0 || bulkActions.length > 0);
    const stickyColumnHeaderStyle =
        tableHeadingRects.current && tableHeadingRects.current.length > 0
            ? {
                  minWidth: calculateFirstHeaderOffset(),
              }
            : undefined;

    const stickyColumnHeader =
        /*#__PURE__*/

        /*#__PURE__*/
        jsx(
            'div',
            {
                className: styles$j.TableHeading,
                style: stickyColumnHeaderStyle,
                'data-index-table-sticky-heading': true,
                children: /*#__PURE__*/ jsxs(Stack$2, {
                    spacing: 'none',
                    wrap: false,
                    alignment: 'center',
                    children: [
                        selectable &&
                            /*#__PURE__*/

                            /*#__PURE__*/
                            jsx('div', {
                                className: styles$j.FirstStickyHeaderElement,
                                ref: firstStickyHeaderElement,
                                children: renderCheckboxContent(),
                            }),
                        selectable &&
                            /*#__PURE__*/

                            /*#__PURE__*/
                            jsx('div', {
                                className: styles$j['StickyTableHeading-second-scrolling'],
                                children: renderHeadingContent(headings[0]),
                            }),
                        !selectable &&
                            /*#__PURE__*/

                            /*#__PURE__*/
                            jsx('div', {
                                className: styles$j.FirstStickyHeaderElement,
                                ref: firstStickyHeaderElement,
                                children: renderHeadingContent(headings[0]),
                            }),
                    ],
                }),
            },
            headings[0].title
        );

    const stickyHeadingsMarkup = headings.map(renderStickyHeading);
    const selectedItemsCountLabel = selectedItemsCount === SELECT_ALL_ITEMS$1 ? `${itemCount}+` : selectedItemsCount;
    const handleTogglePage = react.exports.useCallback(() => {
        handleSelectionChange(SelectionType.Page, Boolean(!bulkSelectState || bulkSelectState === 'indeterminate'));
    }, [bulkSelectState, handleSelectionChange]);
    const paginatedSelectAllAction = getPaginatedSelectAllAction();
    const loadingTransitionClassNames = {
        enter: styles$j['LoadingContainer-enter'],
        enterActive: styles$j['LoadingContainer-enter-active'],
        exit: styles$j['LoadingContainer-exit'],
        exitActive: styles$j['LoadingContainer-exit-active'],
    };

    const loadingMarkup =
        /*#__PURE__*/

        /*#__PURE__*/
        jsx(CSSTransition$1, {
            in: loading,
            classNames: loadingTransitionClassNames,
            timeout: parseInt(tokens.motion['duration-100'], 10),
            appear: true,
            unmountOnExit: true,
            children: /*#__PURE__*/ jsx('div', {
                className: styles$j.LoadingPanel,
                children: /*#__PURE__*/ jsxs('div', {
                    className: styles$j.LoadingPanelRow,
                    children: [
                        /*#__PURE__*/ jsx(Spinner$1, {
                            size: 'small',
                        }),
                        /*#__PURE__*/ jsx('span', {
                            className: styles$j.LoadingPanelText,
                            children: i18n.translate('Polaris.IndexTable.resourceLoadingAccessibilityLabel', {
                                resourceNamePlural: resourceName.plural.toLocaleLowerCase(),
                            }),
                        }),
                    ],
                }),
            }),
        });

    const stickyTableClassNames = classNames(styles$j.StickyTable, condensed && styles$j['StickyTable-condensed']);
    const shouldShowBulkActions = (bulkActionsSelectable && selectedItemsCount) || isSmallScreenSelectable;

    const stickyHeaderMarkup =
        /*#__PURE__*/

        /*#__PURE__*/
        jsx('div', {
            className: stickyTableClassNames,
            role: 'presentation',
            children: /*#__PURE__*/ jsx(Sticky, {
                boundingElement: stickyWrapper,
                children: (isSticky) => {
                    const stickyHeaderClassNames = classNames(styles$j.StickyTableHeader, isSticky && styles$j['StickyTableHeader-isSticky']);
                    const bulkActionClassNames = classNames(styles$j.BulkActionsWrapper, condensed && styles$j['StickyTableHeader-condensed'], isSticky && styles$j['StickyTableHeader-isSticky']);
                    const shouldShowActions = !condensed || selectedItemsCount;
                    const promotedActions = shouldShowActions ? promotedBulkActions : [];
                    const actions = shouldShowActions ? bulkActions : [];
                    const bulkActionsMarkup = shouldShowBulkActions
                        ? /*#__PURE__*/

                          /*#__PURE__*/
                          jsxs('div', {
                              className: bulkActionClassNames,
                              'data-condensed': condensed,
                              children: [
                                  loadingMarkup,
                                  /*#__PURE__*/ jsx(BulkActions, {
                                      smallScreen: condensed,
                                      label: i18n.translate('Polaris.IndexTable.selected', {
                                          selectedItemsCount: selectedItemsCountLabel,
                                      }),
                                      accessibilityLabel: bulkActionsAccessibilityLabel,
                                      selected: bulkSelectState,
                                      selectMode: selectMode || isSmallScreenSelectable,
                                      onToggleAll: handleTogglePage,
                                      promotedActions: promotedActions,
                                      actions: actions,
                                      paginatedSelectAllText: paginatedSelectAllText,
                                      paginatedSelectAllAction: paginatedSelectAllAction,
                                      onSelectModeToggle: condensed ? handleSelectModeToggle : undefined,
                                  }),
                              ],
                          })
                        : null;
                    const stickyColumnHeaderClassNames = classNames(styles$j.StickyTableColumnHeader, hasMoreLeftColumns && styles$j['StickyTableColumnHeader-isScrolling']);

                    const selectButtonMarkup =
                        /*#__PURE__*/

                        /*#__PURE__*/
                        jsx(Button, {
                            icon: SvgEnableSelectionMinor,
                            onClick: toggleIsSmallScreenSelectable,
                            children: i18n.translate('Polaris.IndexTable.selectButtonText'),
                        });

                    const headerMarkup = condensed
                        ? /*#__PURE__*/

                          /*#__PURE__*/
                          jsxs('div', {
                              className: classNames(styles$j.HeaderWrapper, !selectable && styles$j.unselectable),
                              children: [loadingMarkup, sort, selectable && selectButtonMarkup],
                          })
                        : /*#__PURE__*/

                          /*#__PURE__*/
                          jsxs('div', {
                              className: stickyHeaderClassNames,
                              ref: stickyHeaderWrapperElement,
                              children: [
                                  loadingMarkup,
                                  /*#__PURE__*/ jsx('div', {
                                      className: stickyColumnHeaderClassNames,
                                      children: stickyColumnHeader,
                                  }),
                                  /*#__PURE__*/ jsx('div', {
                                      className: styles$j.StickyTableHeadings,
                                      ref: stickyHeaderElement,
                                      children: stickyHeadingsMarkup,
                                  }),
                              ],
                          });
                    const stickyContent = bulkActionsMarkup ? bulkActionsMarkup : headerMarkup;
                    return stickyContent;
                },
            }),
        });

    const scrollBarWrapperClassNames = classNames(styles$j.ScrollBarContainer, condensed && styles$j.scrollBarContainerCondensed);
    const scrollBarClassNames = classNames(tableElement.current && tableInitialized && styles$j.ScrollBarContent);
    const scrollBarMarkup =
        itemCount > 0
            ? /*#__PURE__*/

              /*#__PURE__*/
              jsx(AfterInitialMount, {
                  children: /*#__PURE__*/ jsx('div', {
                      className: scrollBarWrapperClassNames,
                      children: /*#__PURE__*/ jsx('div', {
                          onScroll: handleScrollBarScroll,
                          className: styles$j.ScrollBar,
                          ref: scrollBarElement,
                          children: /*#__PURE__*/ jsx('div', {
                              className: scrollBarClassNames,
                          }),
                      }),
                  }),
              })
            : null;
    const tableClassNames = classNames(
        styles$j.Table,
        hasMoreLeftColumns && styles$j['Table-scrolling'],
        selectMode && styles$j.disableTextSelection,
        selectMode && shouldShowBulkActions && styles$j.selectMode,
        !selectable && styles$j['Table-unselectable'],
        lastColumnSticky && styles$j['Table-sticky-last'],
        lastColumnSticky && canScrollRight && styles$j['Table-sticky-scrolling']
    );
    const emptyStateMarkup = emptyState
        ? emptyState
        : /*#__PURE__*/

          /*#__PURE__*/
          jsx(EmptySearchResult, {
              title: i18n.translate('Polaris.IndexTable.emptySearchTitle', {
                  resourceNamePlural: resourceName.plural,
              }),
              description: i18n.translate('Polaris.IndexTable.emptySearchDescription'),
              withIllustration: true,
          });

    const sharedMarkup =
        /*#__PURE__*/

        /*#__PURE__*/
        jsxs(Fragment, {
            children: [
                /*#__PURE__*/ jsx(EventListener, {
                    event: 'resize',
                    handler: handleResize,
                }),
                /*#__PURE__*/ jsx(AfterInitialMount, {
                    children: stickyHeaderMarkup,
                }),
            ],
        });

    const bodyMarkup = condensed
        ? /*#__PURE__*/

          /*#__PURE__*/
          jsxs(Fragment, {
              children: [
                  sharedMarkup,
                  /*#__PURE__*/ jsx('ul', {
                      'data-selectmode': Boolean(selectMode || isSmallScreenSelectable),
                      className: styles$j.CondensedList,
                      ref: condensedListElement,
                      children: children,
                  }),
              ],
          })
        : /*#__PURE__*/

          /*#__PURE__*/
          jsxs(Fragment, {
              children: [
                  sharedMarkup,
                  /*#__PURE__*/ jsx(ScrollContainer, {
                      scrollableContainerRef: scrollableContainerElement,
                      onScroll: handleScrollContainerScroll,
                      children: /*#__PURE__*/ jsxs('table', {
                          ref: tableElement,
                          className: tableClassNames,
                          children: [
                              /*#__PURE__*/ jsx('thead', {
                                  children: /*#__PURE__*/ jsx('tr', {
                                      className: styles$j.HeadingRow,
                                      children: headingsMarkup,
                                  }),
                              }),
                              /*#__PURE__*/ jsx('tbody', {
                                  ref: tableBodyRef,
                                  children: children,
                              }),
                          ],
                      }),
                  }),
              ],
          });
    const tableContentMarkup =
        itemCount > 0
            ? bodyMarkup
            : /*#__PURE__*/

              /*#__PURE__*/
              jsx('div', {
                  className: styles$j.EmptySearchResultWrapper,
                  children: emptyStateMarkup,
              });
    return (
        /*#__PURE__*/

        /*#__PURE__*/
        jsxs(Fragment, {
            children: [
                /*#__PURE__*/ jsxs('div', {
                    className: styles$j.IndexTable,
                    children: [!shouldShowBulkActions && !condensed && loadingMarkup, tableContentMarkup],
                }),
                scrollBarMarkup,
            ],
        })
    );

    function renderHeading(heading, index) {
        const isSecond = index === 0;
        const isLast = index === headings.length - 1;
        const headingContentClassName = classNames(styles$j.TableHeading, isSecond && styles$j['TableHeading-second'], isLast && !heading.hidden && styles$j['TableHeading-last'], !selectable && styles$j['TableHeading-unselectable']);
        const stickyPositioningStyle =
            selectable !== false && isSecond && tableHeadingRects.current && tableHeadingRects.current.length > 0
                ? {
                      left: tableHeadingRects.current[0].offsetWidth,
                  }
                : undefined;

        const headingContent =
            /*#__PURE__*/

            /*#__PURE__*/
            jsx(
                'th',
                {
                    className: headingContentClassName,
                    'data-index-table-heading': true,
                    style: stickyPositioningStyle,
                    children: renderHeadingContent(heading),
                },
                heading.title
            );

        if (index !== 0 || !selectable) {
            return headingContent;
        }

        const checkboxClassName = classNames(styles$j.TableHeading, index === 0 && styles$j['TableHeading-first']);

        const checkboxContent =
            /*#__PURE__*/

            /*#__PURE__*/
            jsx(
                'th',
                {
                    className: checkboxClassName,
                    'data-index-table-heading': true,
                    children: renderCheckboxContent(),
                },
                `${heading}-${index}`
            );

        return [checkboxContent, headingContent];
    }

    function renderCheckboxContent() {
        return (
            /*#__PURE__*/

            /*#__PURE__*/
            jsx('div', {
                className: styles$j.ColumnHeaderCheckboxWrapper,
                children: /*#__PURE__*/ jsx(Checkbox$1, {
                    label: i18n.translate('Polaris.IndexTable.selectAllLabel', {
                        resourceNamePlural: resourceName.plural,
                    }),
                    labelHidden: true,
                    onChange: handleSelectPage,
                    checked: bulkSelectState,
                }),
            })
        );
    }

    function renderHeadingContent(heading) {
        let headingContent;

        if (heading.new) {
            headingContent =
                /*#__PURE__*/

                /*#__PURE__*/
                jsxs(Stack$2, {
                    wrap: false,
                    alignment: 'center',
                    children: [
                        /*#__PURE__*/ jsx('span', {
                            children: heading.title,
                        }),
                        /*#__PURE__*/ jsx(Badge, {
                            status: 'new',
                            children: i18n.translate('Polaris.IndexTable.onboardingBadgeText'),
                        }),
                    ],
                });
        } else if (heading.hidden) {
            headingContent =
                /*#__PURE__*/

                /*#__PURE__*/
                jsx(VisuallyHidden, {
                    children: heading.title,
                });
        } else {
            headingContent = heading.title;
        }

        return headingContent;
    }

    function handleSelectPage(checked) {
        handleSelectionChange(SelectionType.Page, checked);
    }

    function renderStickyHeading(heading, index) {
        const position = index + 1;
        const headingStyle =
            tableHeadingRects.current && tableHeadingRects.current.length > position
                ? {
                      minWidth: tableHeadingRects.current[position].offsetWidth,
                  }
                : undefined;
        const headingContent = renderHeadingContent(heading);
        const stickyHeadingClassName = classNames(styles$j.TableHeading, index === 0 && styles$j['StickyTableHeading-second'], index === 0 && !selectable && styles$j.unselectable);
        return (
            /*#__PURE__*/

            /*#__PURE__*/
            jsx(
                'div',
                {
                    className: stickyHeadingClassName,
                    style: headingStyle,
                    'data-index-table-sticky-heading': true,
                    children: headingContent,
                },
                heading.title
            )
        );
    }

    function getPaginatedSelectAllAction() {
        if (!selectable || !hasBulkActions || !hasMoreItems) {
            return;
        }

        const actionText =
            selectedItemsCount === SELECT_ALL_ITEMS$1
                ? i18n.translate('Polaris.IndexTable.undo')
                : i18n.translate('Polaris.IndexTable.selectAllItems', {
                      itemsLength: itemCount,
                      resourceNamePlural: resourceName.plural.toLocaleLowerCase(),
                  });
        return {
            content: actionText,
            onAction: handleSelectAllItemsInStore,
        };
    }

    function handleSelectModeToggle(val) {
        handleSelectionChange(SelectionType.All, false);
        setIsSmallScreenSelectable(val);
    }
}

const isSmallScreen$1 = () => {
    return typeof window === 'undefined' ? false : window.innerWidth < SMALL_SCREEN_WIDTH$1;
};

function IndexTable({ children, selectable = true, itemCount, selectedItemsCount = 0, resourceName: passedResourceName, loading, hasMoreItems, condensed, onSelectionChange, ...indexTableBaseProps }) {
    return (
        /*#__PURE__*/

        /*#__PURE__*/
        jsx(IndexProvider, {
            selectable: selectable,
            itemCount: itemCount,
            selectedItemsCount: selectedItemsCount,
            resourceName: passedResourceName,
            loading: loading,
            hasMoreItems: hasMoreItems,
            condensed: condensed,
            onSelectionChange: onSelectionChange,
            children: /*#__PURE__*/ jsx(IndexTableBase, { ...indexTableBaseProps, children: children }),
        })
    );
}

IndexTable.Cell = Cell;
IndexTable.Row = Row;

var styles$g = {
    Layout: 'Polaris-Layout',
    Section: 'Polaris-Layout__Section',
    'Section-secondary': 'Polaris-Layout__Section--secondary',
    'Section-fullWidth': 'Polaris-Layout__Section--fullWidth',
    'Section-oneHalf': 'Polaris-Layout__Section--oneHalf',
    'Section-oneThird': 'Polaris-Layout__Section--oneThird',
    AnnotatedSection: 'Polaris-Layout__AnnotatedSection',
    AnnotationWrapper: 'Polaris-Layout__AnnotationWrapper',
    AnnotationContent: 'Polaris-Layout__AnnotationContent',
    Annotation: 'Polaris-Layout__Annotation',
    AnnotationDescription: 'Polaris-Layout__AnnotationDescription',
};

function AnnotatedSection(props) {
    const { children, title, description, id } = props;
    const descriptionMarkup = typeof description === 'string' ? /*#__PURE__*/ React.createElement('p', null, description) : description;
    return /*#__PURE__*/ React.createElement(
        'div',
        {
            className: styles$g.AnnotatedSection,
        },
        /*#__PURE__*/ React.createElement(
            'div',
            {
                className: styles$g.AnnotationWrapper,
            },
            /*#__PURE__*/ React.createElement(
                'div',
                {
                    className: styles$g.Annotation,
                },
                /*#__PURE__*/ React.createElement(
                    TextContainer,
                    null,
                    /*#__PURE__*/ React.createElement(
                        Heading,
                        {
                            id: id,
                        },
                        title
                    ),
                    descriptionMarkup &&
                        /*#__PURE__*/ React.createElement(
                            'div',
                            {
                                className: styles$g.AnnotationDescription,
                            },
                            descriptionMarkup
                        )
                )
            ),
            /*#__PURE__*/ React.createElement(
                'div',
                {
                    className: styles$g.AnnotationContent,
                },
                children
            )
        )
    );
}

function Section({ children, secondary, fullWidth, oneHalf, oneThird }) {
    const className = classNames(styles$g.Section, secondary && styles$g['Section-secondary'], fullWidth && styles$g['Section-fullWidth'], oneHalf && styles$g['Section-oneHalf'], oneThird && styles$g['Section-oneThird']);
    return /*#__PURE__*/ React.createElement(
        'div',
        {
            className: className,
        },
        children
    );
}

const Layout = function Layout({ sectioned, children }) {
    const content = sectioned ? /*#__PURE__*/ React.createElement(Section, null, children) : children;
    return /*#__PURE__*/ React.createElement(
        'div',
        {
            className: styles$g.Layout,
        },
        content
    );
};
Layout.AnnotatedSection = AnnotatedSection;
Layout.Section = Section;

var styles$f = {
    Link: 'Polaris-Link',
    IconLockup: 'Polaris-Link__IconLockup',
    IconLayout: 'Polaris-Link__IconLayout',
    monochrome: 'Polaris-Link--monochrome',
    removeUnderline: 'Polaris-Link--removeUnderline',
};

function Link({ url, children, onClick, external, id, monochrome, removeUnderline, accessibilityLabel }) {
    const i18n = useI18n();
    let childrenMarkup = children;

    if (external && typeof children === 'string') {
        const iconLabel = i18n.translate('Polaris.Common.newWindowAccessibilityHint');
        childrenMarkup = /*#__PURE__*/ React.createElement(
            React.Fragment,
            null,
            children,
            /*#__PURE__*/ React.createElement(
                'span',
                {
                    className: styles$f.IconLockup,
                },
                /*#__PURE__*/ React.createElement(
                    'span',
                    {
                        className: styles$f.IconLayout,
                    },
                    /*#__PURE__*/ React.createElement(Icon, {
                        accessibilityLabel: iconLabel,
                        source: SvgExternalSmallMinor,
                    })
                )
            )
        );
    }

    return /*#__PURE__*/ React.createElement(BannerContext.Consumer, null, (BannerContext) => {
        const shouldBeMonochrome = monochrome || BannerContext;
        const className = classNames(styles$f.Link, shouldBeMonochrome && styles$f.monochrome, removeUnderline && styles$f.removeUnderline);
        return url
            ? /*#__PURE__*/ React.createElement(
                  UnstyledLink,
                  {
                      onClick: onClick,
                      className: className,
                      url: url,
                      external: external,
                      id: id,
                      'aria-label': accessibilityLabel,
                  },
                  childrenMarkup
              )
            : /*#__PURE__*/ React.createElement(
                  'button',
                  {
                      type: 'button',
                      onClick: onClick,
                      className: className,
                      id: id,
                      'aria-label': accessibilityLabel,
                  },
                  childrenMarkup
              );
    });
}

var styles$e = {
    Page: 'Polaris-Page',
    fullWidth: 'Polaris-Page--fullWidth',
    narrowWidth: 'Polaris-Page--narrowWidth',
    Content: 'Polaris-Page__Content',
    divider: 'Polaris-Page--divider',
};

var styles$d = {
    Header: 'Polaris-Page-Header',
    titleHidden: 'Polaris-Page-Header--titleHidden',
    TitleWrapper: 'Polaris-Page-Header__TitleWrapper',
    Navigation: 'Polaris-Page-Header__Navigation',
    hasActionMenu: 'Polaris-Page-Header--hasActionMenu',
    mobileView: 'Polaris-Page-Header--mobileView',
    BreadcrumbWrapper: 'Polaris-Page-Header__BreadcrumbWrapper',
    PaginationWrapper: 'Polaris-Page-Header__PaginationWrapper',
    AdditionalNavigationWrapper: 'Polaris-Page-Header__AdditionalNavigationWrapper',
    MainContent: 'Polaris-Page-Header__MainContent',
    TitleActionMenuWrapper: 'Polaris-Page-Header__TitleActionMenuWrapper',
    hasNavigation: 'Polaris-Page-Header--hasNavigation',
    PrimaryActionWrapper: 'Polaris-Page-Header__PrimaryActionWrapper',
    ActionMenuWrapper: 'Polaris-Page-Header__ActionMenuWrapper',
    Row: 'Polaris-Page-Header__Row',
    RightAlign: 'Polaris-Page-Header__RightAlign',
    LeftAlign: 'Polaris-Page-Header__LeftAlign',
    noBreadcrumbs: 'Polaris-Page-Header--noBreadcrumbs',
    AdditionalMetaData: 'Polaris-Page-Header__AdditionalMetaData',
    Actions: 'Polaris-Page-Header__Actions',
    longTitle: 'Polaris-Page-Header--longTitle',
    mediumTitle: 'Polaris-Page-Header--mediumTitle',
    isSingleRow: 'Polaris-Page-Header--isSingleRow',
};

var EditableTarget;

(function (EditableTarget) {
    EditableTarget['Input'] = 'INPUT';
    EditableTarget['Textarea'] = 'TEXTAREA';
    EditableTarget['Select'] = 'SELECT';
    EditableTarget['ContentEditable'] = 'contenteditable';
})(EditableTarget || (EditableTarget = {}));

function isInputFocused() {
    if (document == null || document.activeElement == null) {
        return false;
    }

    const { tagName } = document.activeElement;
    return tagName === EditableTarget.Input || tagName === EditableTarget.Textarea || tagName === EditableTarget.Select || document.activeElement.hasAttribute(EditableTarget.ContentEditable);
}

var styles$c = {
    TooltipOverlay: 'Polaris-Tooltip-TooltipOverlay',
    measuring: 'Polaris-Tooltip-TooltipOverlay--measuring',
    positionedAbove: 'Polaris-Tooltip-TooltipOverlay--positionedAbove',
    Content: 'Polaris-Tooltip-TooltipOverlay__Content',
};

function TooltipOverlay({ active, activator, preferredPosition = 'below', preventInteraction, id, children, accessibilityLabel }) {
    const i18n = useI18n();
    const markup = active
        ? /*#__PURE__*/ React.createElement(PositionedOverlay, {
              active: active,
              activator: activator,
              preferredPosition: preferredPosition,
              preventInteraction: preventInteraction,
              render: renderTooltip,
          })
        : null;
    return markup;

    function renderTooltip(overlayDetails) {
        const { measuring, desiredHeight, positioning } = overlayDetails;
        const containerClassName = classNames(styles$c.TooltipOverlay, measuring && styles$c.measuring, positioning === 'above' && styles$c.positionedAbove);
        const contentStyles = measuring
            ? undefined
            : {
                  minHeight: desiredHeight,
              };
        return /*#__PURE__*/ React.createElement(
            'div',
            Object.assign(
                {
                    className: containerClassName,
                },
                layer.props
            ),
            /*#__PURE__*/ React.createElement(
                'div',
                {
                    id: id,
                    role: 'tooltip',
                    className: styles$c.Content,
                    style: contentStyles,
                    'aria-label': accessibilityLabel
                        ? i18n.translate('Polaris.TooltipOverlay.accessibilityLabel', {
                              label: accessibilityLabel,
                          })
                        : undefined,
                },
                children
            )
        );
    }
}

function Tooltip({ children, content, dismissOnMouseOut, active: originalActive, preferredPosition = 'below', activatorWrapper = 'span', accessibilityLabel }) {
    const WrapperComponent = activatorWrapper;
    const { value: active, setTrue: handleFocus, setFalse: handleBlur } = useToggle(Boolean(originalActive));
    const [activatorNode, setActivatorNode] = react.exports.useState(null);
    const id = useUniqueId('TooltipContent');
    const activatorContainer = react.exports.useRef(null);
    const mouseEntered = react.exports.useRef(false);
    react.exports.useEffect(() => {
        const firstFocusable = activatorContainer.current ? findFirstFocusableNode(activatorContainer.current) : null;
        const accessibilityNode = firstFocusable || activatorContainer.current;
        if (!accessibilityNode) return;
        accessibilityNode.tabIndex = 0;
        accessibilityNode.setAttribute('aria-describedby', id);
        accessibilityNode.setAttribute('data-polaris-tooltip-activator', 'true');
    }, [id, children]);
    const handleKeyUp = react.exports.useCallback(
        (event) => {
            if (event.keyCode !== Key.Escape) return;
            handleBlur();
        },
        [handleBlur]
    );
    const portal = activatorNode
        ? /*#__PURE__*/

          /*#__PURE__*/
          jsx(Portal, {
              idPrefix: 'tooltip',
              children: /*#__PURE__*/ jsx(TooltipOverlay, {
                  id: id,
                  preferredPosition: preferredPosition,
                  activator: activatorNode,
                  active: active,
                  accessibilityLabel: accessibilityLabel,
                  onClose: noop$6,
                  preventInteraction: dismissOnMouseOut,
                  children: content,
              }),
          })
        : null;
    return (
        /*#__PURE__*/

        /*#__PURE__*/
        jsxs(WrapperComponent, {
            onFocus: handleFocus,
            onBlur: handleBlur,
            onMouseLeave: handleMouseLeave,
            onMouseOver: handleMouseEnterFix,
            onClick: stopPropagation$1,
            ref: setActivator,
            onKeyUp: handleKeyUp,
            children: [children, portal],
        })
    );

    function setActivator(node) {
        const activatorContainerRef = activatorContainer;

        if (node == null) {
            activatorContainerRef.current = null;
            setActivatorNode(null);
            return;
        }

        node.firstElementChild instanceof HTMLElement && setActivatorNode(node.firstElementChild);
        activatorContainerRef.current = node;
    }

    function handleMouseEnter() {
        mouseEntered.current = true;
        handleFocus();
    }

    function handleMouseLeave() {
        mouseEntered.current = false;
        handleBlur();
    } // https://github.com/facebook/react/issues/10109
    // Mouseenter event not triggered when cursor moves from disabled button

    function handleMouseEnterFix() {
        !mouseEntered.current && handleMouseEnter();
    }
}

function noop$6() {}

function stopPropagation$1(event) {
    event.stopPropagation();
}

function Pagination({ hasNext, hasPrevious, nextURL, previousURL, onNext, onPrevious, nextTooltip, previousTooltip, nextKeys, previousKeys, accessibilityLabel, accessibilityLabels, label }) {
    const i18n = useI18n();
    const node = /*#__PURE__*/ react.exports.createRef();
    const navLabel = accessibilityLabel || i18n.translate('Polaris.Pagination.pagination');
    const previousLabel = (accessibilityLabels === null || accessibilityLabels === void 0 ? void 0 : accessibilityLabels.previous) || i18n.translate('Polaris.Pagination.previous');
    const nextLabel = (accessibilityLabels === null || accessibilityLabels === void 0 ? void 0 : accessibilityLabels.next) || i18n.translate('Polaris.Pagination.next');

    const prev =
        /*#__PURE__*/

        /*#__PURE__*/
        jsx(Button, {
            outline: true,
            icon: SvgChevronLeftMinor,
            accessibilityLabel: previousLabel,
            url: previousURL,
            onClick: onPrevious,
            disabled: !hasPrevious,
            id: 'previousURL',
        });

    const constructedPrevious =
        previousTooltip && hasPrevious
            ? /*#__PURE__*/

              /*#__PURE__*/
              jsx(Tooltip, {
                  activatorWrapper: 'span',
                  content: previousTooltip,
                  children: prev,
              })
            : prev;

    const next =
        /*#__PURE__*/

        /*#__PURE__*/
        jsx(Button, {
            outline: true,
            icon: SvgChevronRightMinor,
            accessibilityLabel: nextLabel,
            url: nextURL,
            onClick: onNext,
            disabled: !hasNext,
            id: 'nextURL',
        });

    const constructedNext =
        nextTooltip && hasNext
            ? /*#__PURE__*/

              /*#__PURE__*/
              jsx(Tooltip, {
                  activatorWrapper: 'span',
                  content: nextTooltip,
                  children: next,
              })
            : next;
    const previousHandler = onPrevious || noop$5;
    const previousButtonEvents =
        previousKeys &&
        (previousURL || onPrevious) &&
        hasPrevious &&
        previousKeys.map((key) =>
            /*#__PURE__*/

            /*#__PURE__*/
            jsx(
                KeypressListener,
                {
                    keyCode: key,
                    handler: previousURL ? handleCallback(clickPaginationLink('previousURL', node)) : handleCallback(previousHandler),
                },
                key
            )
        );
    const nextHandler = onNext || noop$5;
    const nextButtonEvents =
        nextKeys &&
        (nextURL || onNext) &&
        hasNext &&
        nextKeys.map((key) =>
            /*#__PURE__*/

            /*#__PURE__*/
            jsx(
                KeypressListener,
                {
                    keyCode: key,
                    handler: nextURL ? handleCallback(clickPaginationLink('nextURL', node)) : handleCallback(nextHandler),
                },
                key
            )
        );
    const labelTextMarkup =
        hasNext && hasPrevious
            ? /*#__PURE__*/

              /*#__PURE__*/
              jsx(TextStyle, {
                  children: label,
              })
            : /*#__PURE__*/

              /*#__PURE__*/
              jsx(TextStyle, {
                  variation: 'subdued',
                  children: label,
              });
    const labelMarkup = label
        ? /*#__PURE__*/

          /*#__PURE__*/
          jsx('div', {
              'aria-live': 'polite',
              children: labelTextMarkup,
          })
        : null;
    return (
        /*#__PURE__*/

        /*#__PURE__*/
        jsxs('nav', {
            'aria-label': navLabel,
            ref: node,
            children: [
                previousButtonEvents,
                nextButtonEvents,
                /*#__PURE__*/ jsxs(ButtonGroup, {
                    segmented: !label,
                    children: [constructedPrevious, labelMarkup, constructedNext],
                }),
            ],
        })
    );
}

function clickPaginationLink(id, node) {
    return () => {
        if (node.current == null) {
            return;
        }

        const link = node.current.querySelector(`#${id}`);

        if (link) {
            link.click();
        }
    };
}

function handleCallback(fn) {
    return () => {
        if (isInputFocused()) {
            return;
        }

        fn();
    };
}

function noop$5() {}

var styles$b = {
    Title: 'Polaris-Header-Title',
    TitleWithSubtitle: 'Polaris-Header-Title__TitleWithSubtitle',
    SubTitle: 'Polaris-Header-Title__SubTitle',
    SubtitleCompact: 'Polaris-Header-Title__SubtitleCompact',
    TitleWithMetadataWrapper: 'Polaris-Header-Title__TitleWithMetadataWrapper',
    TitleMetadata: 'Polaris-Header-Title__TitleMetadata',
};

function Title({ title, subtitle, titleMetadata, compactTitle }) {
    const className = classNames(styles$b.Title, subtitle && styles$b.TitleWithSubtitle);
    const titleMarkup = title
        ? /*#__PURE__*/ React.createElement(
              'h1',
              {
                  className: className,
              },
              title
          )
        : null;
    const titleMetadataMarkup = titleMetadata
        ? /*#__PURE__*/ React.createElement(
              'div',
              {
                  className: styles$b.TitleMetadata,
              },
              titleMetadata
          )
        : null;
    const wrappedTitleMarkup = titleMetadata
        ? /*#__PURE__*/ React.createElement(
              'div',
              {
                  className: styles$b.TitleWithMetadataWrapper,
              },
              titleMarkup,
              titleMetadataMarkup
          )
        : titleMarkup;
    const subtitleMarkup = subtitle
        ? /*#__PURE__*/ React.createElement(
              'div',
              {
                  className: classNames(styles$b.SubTitle, compactTitle && styles$b.SubtitleCompact),
              },
              /*#__PURE__*/ React.createElement('p', null, subtitle)
          )
        : null;
    return /*#__PURE__*/ React.createElement(React.Fragment, null, wrappedTitleMarkup, subtitleMarkup);
}

function isPrimaryAction(x) {
    return !(/*#__PURE__*/ react.exports.isValidElement(x)) && x !== undefined;
}

const SHORT_TITLE = 20;
const REALLY_SHORT_TITLE = 8;
const LONG_TITLE = 34;

function Header({ title, subtitle, titleMetadata, additionalMetadata, titleHidden = false, primaryAction, pagination, additionalNavigation, breadcrumbs = [], secondaryActions = [], actionGroups = [], compactTitle = false }) {
    const i18n = useI18n();
    const { isNavigationCollapsed } = useMediaQuery();

    if (additionalNavigation && 'production' === 'development') {
        // eslint-disable-next-line no-console
        console.warn('Deprecation: The `additionalNavigation` on Page is deprecated and will be removed in the next major version.');
    }

    const isSingleRow = !primaryAction && !pagination && !secondaryActions.length && !actionGroups.length;
    const breadcrumbMarkup =
        breadcrumbs.length > 0
            ? /*#__PURE__*/

              /*#__PURE__*/
              jsx('div', {
                  className: styles$d.BreadcrumbWrapper,
                  children: /*#__PURE__*/ jsx(Breadcrumbs, {
                      breadcrumbs: breadcrumbs,
                  }),
              })
            : null;
    const paginationMarkup =
        pagination && !isNavigationCollapsed
            ? /*#__PURE__*/

              /*#__PURE__*/
              jsx('div', {
                  className: styles$d.PaginationWrapper,
                  children: /*#__PURE__*/ jsx(Pagination, { ...pagination }),
              })
            : null;
    const additionalNavigationMarkup = additionalNavigation
        ? /*#__PURE__*/

          /*#__PURE__*/
          jsx('div', {
              className: styles$d.AdditionalNavigationWrapper,
              children: additionalNavigation,
          })
        : null;
    const navigationMarkup =
        breadcrumbMarkup || paginationMarkup || additionalNavigationMarkup
            ? /*#__PURE__*/

              /*#__PURE__*/
              jsxs('div', {
                  className: styles$d.Navigation,
                  children: [breadcrumbMarkup, additionalNavigationMarkup, paginationMarkup],
              })
            : null;

    const pageTitleMarkup =
        /*#__PURE__*/

        /*#__PURE__*/
        jsx('div', {
            className: styles$d.TitleWrapper,
            children: /*#__PURE__*/ jsx(Title, {
                title: title,
                subtitle: subtitle,
                titleMetadata: titleMetadata,
                compactTitle: compactTitle,
            }),
        });

    const primaryActionMarkup = primaryAction
        ? /*#__PURE__*/

          /*#__PURE__*/
          jsx(PrimaryActionMarkup, {
              primaryAction: primaryAction,
          })
        : null;
    const actionMenuMarkup =
        secondaryActions.length > 0 || hasGroupsWithActions(actionGroups)
            ? /*#__PURE__*/

              /*#__PURE__*/
              jsx(ActionMenu, {
                  actions: secondaryActions,
                  groups: actionGroups,
                  rollup: isNavigationCollapsed,
                  rollupActionsLabel: title
                      ? i18n.translate('Polaris.Page.Header.rollupActionsLabel', {
                            title,
                        })
                      : undefined,
              })
            : null;
    const additionalMetadataMarkup = additionalMetadata
        ? /*#__PURE__*/

          /*#__PURE__*/
          jsx('div', {
              className: styles$d.AdditionalMetaData,
              children: /*#__PURE__*/ jsx(TextStyle, {
                  variation: 'subdued',
                  children: additionalMetadata,
              }),
          })
        : null;
    const headerClassNames = classNames(
        styles$d.Header,
        isSingleRow && styles$d.isSingleRow,
        titleHidden && styles$d.titleHidden,
        navigationMarkup && styles$d.hasNavigation,
        actionMenuMarkup && styles$d.hasActionMenu,
        isNavigationCollapsed && styles$d.mobileView,
        !breadcrumbs.length && styles$d.noBreadcrumbs,
        title && title.length < LONG_TITLE && styles$d.mediumTitle,
        title && title.length > LONG_TITLE && styles$d.longTitle
    );
    const { slot1, slot2, slot3, slot4, slot5, slot6 } = determineLayout({
        actionMenuMarkup,
        additionalMetadataMarkup,
        additionalNavigationMarkup,
        breadcrumbMarkup,
        isNavigationCollapsed,
        pageTitleMarkup,
        paginationMarkup,
        primaryActionMarkup,
        title,
    });
    return (
        /*#__PURE__*/

        /*#__PURE__*/
        jsxs('div', {
            className: headerClassNames,
            children: [
                /*#__PURE__*/ jsx(ConditionalRender, {
                    condition: [slot1, slot2, slot3, slot4].some(notNull),
                    children: /*#__PURE__*/ jsxs('div', {
                        className: styles$d.Row,
                        children: [
                            slot1,
                            slot2,
                            /*#__PURE__*/ jsx(ConditionalRender, {
                                condition: [slot3, slot4].some(notNull),
                                children: /*#__PURE__*/ jsx('div', {
                                    className: styles$d.RightAlign,
                                    children: /*#__PURE__*/ jsxs(ConditionalWrapper, {
                                        condition: [slot3, slot4].every(notNull),
                                        wrapper: (children) =>
                                            /*#__PURE__*/

                                            /*#__PURE__*/
                                            jsx('div', {
                                                className: styles$d.Actions,
                                                children: children,
                                            }),
                                        children: [slot3, slot4],
                                    }),
                                }),
                            }),
                        ],
                    }),
                }),
                /*#__PURE__*/ jsx(ConditionalRender, {
                    condition: [slot5, slot6].some(notNull),
                    children: /*#__PURE__*/ jsxs('div', {
                        className: styles$d.Row,
                        children: [
                            /*#__PURE__*/ jsx('div', {
                                className: styles$d.LeftAlign,
                                children: slot5,
                            }),
                            /*#__PURE__*/ jsx(ConditionalRender, {
                                condition: slot6 != null,
                                children: /*#__PURE__*/ jsx('div', {
                                    className: styles$d.RightAlign,
                                    children: slot6,
                                }),
                            }),
                        ],
                    }),
                }),
            ],
        })
    );
}

function PrimaryActionMarkup({ primaryAction }) {
    const { isNavigationCollapsed } = useMediaQuery();
    let content = primaryAction;

    if (isPrimaryAction(primaryAction)) {
        const primary = primaryAction.primary === undefined ? true : primaryAction.primary;
        content = buttonsFrom(shouldShowIconOnly(isNavigationCollapsed, primaryAction), {
            primary,
        });
    }

    return (
        /*#__PURE__*/

        /*#__PURE__*/
        jsx('div', {
            className: styles$d.PrimaryActionWrapper,
            children: content,
        })
    );
}

function shouldShowIconOnly(isMobile, action) {
    let { content, accessibilityLabel, icon } = action;
    if (icon == null) return { ...action, icon: undefined };

    if (isMobile) {
        accessibilityLabel = accessibilityLabel || content;
        content = undefined;
    } else {
        icon = undefined;
    }

    return { ...action, content, accessibilityLabel, icon };
}

function notNull(value) {
    return value != null;
}

function determineLayout({ actionMenuMarkup, additionalMetadataMarkup, additionalNavigationMarkup, breadcrumbMarkup, isNavigationCollapsed, pageTitleMarkup, paginationMarkup, primaryActionMarkup, title }) {
    //    Header Layout
    // |----------------------------------------------------|
    // | slot1 | slot2 |                    | slot3 | slot4 |
    // |----------------------------------------------------|
    // | slot5 |                                    | slot6 |
    // |----------------------------------------------------|
    //
    const layouts = {
        mobileCompact: {
            slots: {
                slot1: null,
                slot2: pageTitleMarkup,
                slot3: actionMenuMarkup,
                slot4: primaryActionMarkup,
                slot5: additionalMetadataMarkup,
                slot6: additionalNavigationMarkup,
            },
            condition: isNavigationCollapsed && breadcrumbMarkup == null && title != null && title.length <= REALLY_SHORT_TITLE,
        },
        mobileDefault: {
            slots: {
                slot1: breadcrumbMarkup,
                slot2: pageTitleMarkup,
                slot3: actionMenuMarkup,
                slot4: primaryActionMarkup,
                slot5: additionalMetadataMarkup,
                slot6: additionalNavigationMarkup,
            },
            condition: isNavigationCollapsed,
        },
        desktopCompact: {
            slots: {
                slot1: breadcrumbMarkup,
                slot2: pageTitleMarkup,
                slot3: actionMenuMarkup,
                slot4: primaryActionMarkup,
                slot5: additionalMetadataMarkup,
                slot6: additionalNavigationMarkup,
            },
            condition: !isNavigationCollapsed && paginationMarkup == null && actionMenuMarkup == null && title != null && title.length <= SHORT_TITLE,
        },
        desktopDefault: {
            slots: {
                slot1: breadcrumbMarkup,
                slot2: pageTitleMarkup,
                slot3:
                    /*#__PURE__*/

                    /*#__PURE__*/
                    jsxs(Fragment, {
                        children: [actionMenuMarkup, primaryActionMarkup],
                    }),
                slot4: paginationMarkup,
                slot5: additionalMetadataMarkup,
                slot6: additionalNavigationMarkup,
            },
            condition: !isNavigationCollapsed,
        },
    };
    const layout = Object.values(layouts).find((layout) => layout.condition) || layouts.desktopDefault;
    return layout.slots;
}

function Page({ children, fullWidth, narrowWidth, divider, ...rest }) {
    const pageClassName = classNames(styles$e.Page, fullWidth && styles$e.fullWidth, narrowWidth && styles$e.narrowWidth);
    const hasHeaderContent = (rest.title != null && rest.title !== '') || rest.primaryAction != null || (rest.secondaryActions != null && rest.secondaryActions.length > 0) || (rest.actionGroups != null && rest.actionGroups.length > 0) || (rest.breadcrumbs != null && rest.breadcrumbs.length > 0);
    const contentClassName = classNames(!hasHeaderContent && styles$e.Content, divider && hasHeaderContent && styles$e.divider);
    const headerMarkup = hasHeaderContent ? /*#__PURE__*/ React.createElement(Header, rest) : null;
    return /*#__PURE__*/ React.createElement(
        'div',
        {
            className: pageClassName,
        },
        headerMarkup,
        /*#__PURE__*/ React.createElement(
            'div',
            {
                className: contentClassName,
            },
            children
        )
    );
}

var sharedStyles = {
    RangeSlider: 'Polaris-RangeSlider',
};

var styles$a = {
    RangeSlider: 'Polaris-RangeSlider-DualThumb__RangeSlider',
    DualThumb: 'Polaris-RangeSlider-DualThumb',
    TrackWrapper: 'Polaris-RangeSlider-DualThumb__TrackWrapper',
    disabled: 'Polaris-RangeSlider-DualThumb--disabled',
    Track: 'Polaris-RangeSlider-DualThumb__Track',
    error: 'Polaris-RangeSlider-DualThumb--error',
    'Track--dashed': 'Polaris-RangeSlider-DualThumb--trackDashed',
    Thumbs: 'Polaris-RangeSlider-DualThumb__Thumbs',
    Prefix: 'Polaris-RangeSlider-DualThumb__Prefix',
    Suffix: 'Polaris-RangeSlider-DualThumb__Suffix',
    Output: 'Polaris-RangeSlider-DualThumb__Output',
    OutputBubble: 'Polaris-RangeSlider-DualThumb__OutputBubble',
    OutputText: 'Polaris-RangeSlider-DualThumb__OutputText',
};

var Control;

(function (Control) {
    Control[(Control['Lower'] = 0)] = 'Lower';
    Control[(Control['Upper'] = 1)] = 'Upper';
})(Control || (Control = {}));

class DualThumb extends react.exports.Component {
    constructor(...args) {
        super(...args);
        this.context = void 0;
        this.state = {
            value: sanitizeValue(this.props.value, this.props.min, this.props.max, this.props.step),
            trackWidth: 0,
            trackLeft: 0,
        };
        this.track = /*#__PURE__*/ react.exports.createRef();
        this.trackWrapper = /*#__PURE__*/ react.exports.createRef();
        this.thumbLower = /*#__PURE__*/ react.exports.createRef();
        this.thumbUpper = /*#__PURE__*/ react.exports.createRef();
        this.setTrackPosition = debounce_1(
            () => {
                if (this.track.current) {
                    const thumbSize = 16;
                    const { width, left } = this.track.current.getBoundingClientRect();
                    const adjustedTrackWidth = width - thumbSize;
                    const adjustedTrackLeft = left + thumbSize / 2;
                    const range = this.props.max - this.props.min;
                    const minValuePosition = (this.props.min / range) * adjustedTrackWidth;
                    this.setState({
                        trackWidth: adjustedTrackWidth,
                        trackLeft: adjustedTrackLeft - minValuePosition,
                    });
                }
            },
            40,
            {
                leading: true,
                trailing: true,
                maxWait: 40,
            }
        );

        this.handleMouseDownThumbLower = (event) => {
            if (event.button !== 0 || this.props.disabled) return;
            registerMouseMoveHandler(this.handleMouseMoveThumbLower);
            event.stopPropagation();
        };

        this.handleMouseMoveThumbLower = (event) => {
            const valueUpper = this.state.value[1];
            this.setValue([this.actualXPosition(event.clientX), valueUpper], Control.Upper);
        };

        this.handleTouchStartThumbLower = (event) => {
            if (this.props.disabled) return;
            registerTouchMoveHandler(this.handleTouchMoveThumbLower);
            event.stopPropagation();
        };

        this.handleTouchMoveThumbLower = (event) => {
            event.preventDefault();
            const valueUpper = this.state.value[1];
            this.setValue([this.actualXPosition(event.touches[0].clientX), valueUpper], Control.Upper);
        };

        this.handleMouseDownThumbUpper = (event) => {
            if (event.button !== 0 || this.props.disabled) return;
            registerMouseMoveHandler(this.handleMouseMoveThumbUpper);
            event.stopPropagation();
        };

        this.handleMouseMoveThumbUpper = (event) => {
            const valueLower = this.state.value[0];
            this.setValue([valueLower, this.actualXPosition(event.clientX)], Control.Lower);
        };

        this.handleTouchStartThumbUpper = (event) => {
            if (this.props.disabled) return;
            registerTouchMoveHandler(this.handleTouchMoveThumbUpper);
            event.stopPropagation();
        };

        this.handleTouchMoveThumbUpper = (event) => {
            event.preventDefault();
            const valueLower = this.state.value[0];
            this.setValue([valueLower, this.actualXPosition(event.touches[0].clientX)], Control.Lower);
        };

        this.handleKeypressLower = (event) => {
            if (this.props.disabled) return;
            const { incrementValueLower, decrementValueLower } = this;
            const handlerMap = {
                [Key.UpArrow]: incrementValueLower,
                [Key.RightArrow]: incrementValueLower,
                [Key.DownArrow]: decrementValueLower,
                [Key.LeftArrow]: decrementValueLower,
            };
            const handler = handlerMap[event.keyCode];

            if (handler != null) {
                event.preventDefault();
                event.stopPropagation();
                handler();
            }
        };

        this.handleKeypressUpper = (event) => {
            if (this.props.disabled) return;
            const { incrementValueUpper, decrementValueUpper } = this;
            const handlerMap = {
                [Key.UpArrow]: incrementValueUpper,
                [Key.RightArrow]: incrementValueUpper,
                [Key.DownArrow]: decrementValueUpper,
                [Key.LeftArrow]: decrementValueUpper,
            };
            const handler = handlerMap[event.keyCode];

            if (handler != null) {
                event.preventDefault();
                event.stopPropagation();
                handler();
            }
        };

        this.incrementValueLower = () => {
            this.setValue([this.state.value[0] + this.props.step, this.state.value[1]], Control.Upper);
        };

        this.decrementValueLower = () => {
            this.setValue([this.state.value[0] - this.props.step, this.state.value[1]], Control.Upper);
        };

        this.incrementValueUpper = () => {
            this.setValue([this.state.value[0], this.state.value[1] + this.props.step], Control.Lower);
        };

        this.decrementValueUpper = () => {
            this.setValue([this.state.value[0], this.state.value[1] - this.props.step], Control.Lower);
        };

        this.dispatchValue = () => {
            const { onChange, id } = this.props;
            const { value } = this.state;
            onChange(value, id);
        };

        this.setValue = (dirtyValue, control) => {
            const {
                props: { min, max, step },
                state: { value },
            } = this;
            const sanitizedValue = sanitizeValue(dirtyValue, min, max, step, control);

            if (isEqual_1(sanitizedValue, value) === false) {
                this.setState(
                    {
                        value: sanitizedValue,
                    },
                    this.dispatchValue
                );
            }
        };

        this.handleMouseDownTrack = (event) => {
            if (event.button !== 0 || this.props.disabled) return;
            event.preventDefault();
            const clickXPosition = this.actualXPosition(event.clientX);
            const { value } = this.state;
            const distanceFromLowerThumb = Math.abs(value[0] - clickXPosition);
            const distanceFromUpperThumb = Math.abs(value[1] - clickXPosition);

            if (distanceFromLowerThumb <= distanceFromUpperThumb) {
                this.setValue([clickXPosition, value[1]], Control.Upper);
                registerMouseMoveHandler(this.handleMouseMoveThumbLower);

                if (this.thumbLower.current != null) {
                    this.thumbLower.current.focus();
                }
            } else {
                this.setValue([value[0], clickXPosition], Control.Lower);
                registerMouseMoveHandler(this.handleMouseMoveThumbUpper);

                if (this.thumbUpper.current != null) {
                    this.thumbUpper.current.focus();
                }
            }
        };

        this.handleTouchStartTrack = (event) => {
            if (this.props.disabled) return;
            event.preventDefault();
            const clickXPosition = this.actualXPosition(event.touches[0].clientX);
            const { value } = this.state;
            const distanceFromLowerThumb = Math.abs(value[0] - clickXPosition);
            const distanceFromUpperThumb = Math.abs(value[1] - clickXPosition);

            if (distanceFromLowerThumb <= distanceFromUpperThumb) {
                this.setValue([clickXPosition, value[1]], Control.Upper);
                registerTouchMoveHandler(this.handleTouchMoveThumbLower);

                if (this.thumbLower.current != null) {
                    this.thumbLower.current.focus();
                }
            } else {
                this.setValue([value[0], clickXPosition], Control.Lower);
                registerTouchMoveHandler(this.handleTouchMoveThumbUpper);

                if (this.thumbUpper.current != null) {
                    this.thumbUpper.current.focus();
                }
            }
        };

        this.actualXPosition = (dirtyXPosition) => {
            if (this.track.current) {
                const { min, max } = this.props;
                const { trackLeft, trackWidth } = this.state;
                const relativeX = dirtyXPosition - trackLeft;
                const percentageOfTrack = relativeX / trackWidth;
                return percentageOfTrack * (max - min);
            } else {
                return 0;
            }
        };
    }

    static getDerivedStateFromProps(props, state) {
        const { min, step, max, value, onChange, id } = props;
        const { prevValue } = state;

        if (isEqual_1(prevValue, value)) {
            return null;
        }

        const sanitizedValue = sanitizeValue(value, min, max, step);

        if (!isEqual_1(value, sanitizedValue)) {
            onChange(sanitizedValue, id);
        }

        return {
            prevValue: value,
            value: sanitizedValue,
        };
    }

    componentDidMount() {
        this.setTrackPosition();

        if (this.trackWrapper.current != null) {
            this.trackWrapper.current.addEventListener('touchstart', this.handleTouchStartTrack, {
                passive: false,
            });
        }
    }

    componentWillUnmount() {
        if (this.trackWrapper.current != null) {
            this.trackWrapper.current.removeEventListener('touchstart', this.handleTouchStartTrack);
        }
    }

    render() {
        const { id, min, max, prefix, suffix, disabled, output, error, onFocus, onBlur, label, labelAction, labelHidden, helpText } = this.props;
        const { value } = this.state;
        const idLower = id;
        const idUpper = `${id}Upper`;
        const describedBy = [];

        if (error) {
            describedBy.push(`${id}Error`);
        }

        const ariaDescribedBy = describedBy.length ? describedBy.join(' ') : undefined;
        const trackWrapperClassName = classNames(styles$a.TrackWrapper, error && styles$a.error, disabled && styles$a.disabled);
        const thumbLowerClassName = classNames(styles$a.Thumbs, styles$a.ThumbLower, disabled && styles$a.disabled);
        const thumbUpperClassName = classNames(styles$a.Thumbs, styles$a.ThumbUpper, disabled && styles$a.disabled);
        const trackWidth = this.state.trackWidth;
        const range = max - min;
        const minValuePosition = (min / range) * trackWidth;
        const leftPositionThumbLower = (value[0] / range) * trackWidth - minValuePosition;
        const leftPositionThumbUpper = (value[1] / range) * trackWidth - minValuePosition;
        const outputLowerClassName = classNames(styles$a.Output, styles$a.OutputLower);
        const outputMarkupLower =
            !disabled && output
                ? /*#__PURE__*/

                  /*#__PURE__*/
                  jsx('output', {
                      htmlFor: idLower,
                      className: outputLowerClassName,
                      style: {
                          left: `${leftPositionThumbLower}px`,
                      },
                      children: /*#__PURE__*/ jsx('div', {
                          className: styles$a.OutputBubble,
                          children: /*#__PURE__*/ jsx('span', {
                              className: styles$a.OutputText,
                              children: value[0],
                          }),
                      }),
                  })
                : null;
        const outputUpperClassName = classNames(styles$a.Output, styles$a.OutputUpper);
        const outputMarkupUpper =
            !disabled && output
                ? /*#__PURE__*/

                  /*#__PURE__*/
                  jsx('output', {
                      htmlFor: idUpper,
                      className: outputUpperClassName,
                      style: {
                          left: `${leftPositionThumbUpper}px`,
                      },
                      children: /*#__PURE__*/ jsx('div', {
                          className: styles$a.OutputBubble,
                          children: /*#__PURE__*/ jsx('span', {
                              className: styles$a.OutputText,
                              children: value[1],
                          }),
                      }),
                  })
                : null;
        const cssVars = {
            '--pc-range-slider-progress-lower': `${leftPositionThumbLower}px`,
            '--pc-range-slider-progress-upper': `${leftPositionThumbUpper}px`,
        };

        const prefixMarkup =
            prefix &&
            /*#__PURE__*/

            /*#__PURE__*/
            jsx('div', {
                className: styles$a.Prefix,
                children: prefix,
            });

        const suffixMarkup =
            suffix &&
            /*#__PURE__*/

            /*#__PURE__*/
            jsx('div', {
                className: styles$a.Suffix,
                children: suffix,
            });

        return (
            /*#__PURE__*/

            /*#__PURE__*/
            jsxs(Fragment, {
                children: [
                    /*#__PURE__*/ jsx(Labelled, {
                        id: id,
                        label: label,
                        error: error,
                        action: labelAction,
                        labelHidden: labelHidden,
                        helpText: helpText,
                        children: /*#__PURE__*/ jsxs('div', {
                            className: classNames(styles$a.DualThumb, sharedStyles.RangeSlider),
                            children: [
                                prefixMarkup,
                                /*#__PURE__*/ jsxs('div', {
                                    className: trackWrapperClassName,
                                    onMouseDown: this.handleMouseDownTrack,
                                    ref: this.trackWrapper,
                                    children: [
                                        /*#__PURE__*/ jsx('div', {
                                            className: styles$a.Track,
                                            style: cssVars,
                                            ref: this.track,
                                        }),
                                        /*#__PURE__*/ jsx('div', {
                                            className: styles$a['Track--dashed'],
                                        }),
                                        /*#__PURE__*/ jsx('div', {
                                            id: idLower,
                                            className: thumbLowerClassName,
                                            style: {
                                                left: `${leftPositionThumbLower}px`,
                                            },
                                            role: 'slider',
                                            'aria-disabled': disabled,
                                            'aria-valuemin': min,
                                            'aria-valuemax': max,
                                            'aria-valuenow': value[0],
                                            'aria-invalid': Boolean(error),
                                            'aria-describedby': ariaDescribedBy,
                                            'aria-labelledby': labelID(id),
                                            onFocus: onFocus,
                                            onBlur: onBlur,
                                            tabIndex: 0,
                                            onKeyDown: this.handleKeypressLower,
                                            onMouseDown: this.handleMouseDownThumbLower,
                                            onTouchStart: this.handleTouchStartThumbLower,
                                            ref: this.thumbLower,
                                        }),
                                        outputMarkupLower,
                                        /*#__PURE__*/ jsx('div', {
                                            id: idUpper,
                                            className: thumbUpperClassName,
                                            style: {
                                                left: `${leftPositionThumbUpper}px`,
                                            },
                                            role: 'slider',
                                            'aria-disabled': disabled,
                                            'aria-valuemin': min,
                                            'aria-valuemax': max,
                                            'aria-valuenow': value[1],
                                            'aria-invalid': Boolean(error),
                                            'aria-describedby': ariaDescribedBy,
                                            'aria-labelledby': labelID(id),
                                            onFocus: onFocus,
                                            onBlur: onBlur,
                                            tabIndex: 0,
                                            onKeyDown: this.handleKeypressUpper,
                                            onMouseDown: this.handleMouseDownThumbUpper,
                                            onTouchStart: this.handleTouchStartThumbUpper,
                                            ref: this.thumbUpper,
                                        }),
                                        outputMarkupUpper,
                                    ],
                                }),
                                suffixMarkup,
                            ],
                        }),
                    }),
                    /*#__PURE__*/ jsx(EventListener, {
                        event: 'resize',
                        handler: this.setTrackPosition,
                    }),
                ],
            })
        );
    }
}

DualThumb.contextType = FeaturesContext;

function registerMouseMoveHandler(handler) {
    document.addEventListener('mousemove', handler);
    document.addEventListener(
        'mouseup',
        () => {
            document.removeEventListener('mousemove', handler);
        },
        {
            once: true,
        }
    );
}

function registerTouchMoveHandler(handler) {
    const removeHandler = () => {
        document.removeEventListener('touchmove', handler);
        document.removeEventListener('touchend', removeHandler);
        document.removeEventListener('touchcancel', removeHandler);
    };

    document.addEventListener('touchmove', handler, {
        passive: false,
    });
    document.addEventListener('touchend', removeHandler, {
        once: true,
    });
    document.addEventListener('touchcancel', removeHandler, {
        once: true,
    });
}

function sanitizeValue(value, min, max, step, control = Control.Upper) {
    let upperValue = inBoundsUpper(roundedToStep(value[1]));
    let lowerValue = inBoundsLower(roundedToStep(value[0]));
    const maxLowerValue = upperValue - step;
    const minUpperValue = lowerValue + step;

    if (control === Control.Upper && lowerValue > maxLowerValue) {
        lowerValue = maxLowerValue;
    } else if (control === Control.Lower && upperValue < minUpperValue) {
        upperValue = minUpperValue;
    }

    return [lowerValue, upperValue];

    function inBoundsUpper(value) {
        const lowerMin = min + step;

        if (value < lowerMin) {
            return lowerMin;
        } else if (value > max) {
            return max;
        } else {
            return value;
        }
    }

    function inBoundsLower(value) {
        const upperMax = max - step;

        if (value < min) {
            return min;
        } else if (value > upperMax) {
            return upperMax;
        } else {
            return value;
        }
    }

    function roundedToStep(value) {
        return Math.round(value / step) * step;
    }
}

var styles$9 = {
    RangeSlider: 'Polaris-RangeSlider-SingleThumb__RangeSlider',
    SingleThumb: 'Polaris-RangeSlider-SingleThumb',
    disabled: 'Polaris-RangeSlider-SingleThumb--disabled',
    InputWrapper: 'Polaris-RangeSlider-SingleThumb__InputWrapper',
    Prefix: 'Polaris-RangeSlider-SingleThumb__Prefix',
    Suffix: 'Polaris-RangeSlider-SingleThumb__Suffix',
    Input: 'Polaris-RangeSlider-SingleThumb__Input',
    error: 'Polaris-RangeSlider-SingleThumb--error',
    Output: 'Polaris-RangeSlider-SingleThumb__Output',
    OutputBubble: 'Polaris-RangeSlider-SingleThumb__OutputBubble',
    OutputText: 'Polaris-RangeSlider-SingleThumb__OutputText',
};

function invertNumber(number) {
    if (Math.sign(number) === 1) {
        return -Math.abs(number);
    } else if (Math.sign(number) === -1) {
        return Math.abs(number);
    } else {
        return 0;
    }
}

function SingleThumb(props) {
    const { id, error, helpText, value, min, max, disabled, output, prefix, suffix, label, labelAction, labelHidden, step, onBlur, onFocus } = props;
    const clampedValue = clamp(value, min, max);
    const describedBy = [];

    if (error) {
        describedBy.push(`${id}Error`);
    }

    if (helpText) {
        describedBy.push(helpTextID(id));
    }

    const ariaDescribedBy = describedBy.length ? describedBy.join(' ') : undefined;
    const sliderProgress = ((clampedValue - min) * 100) / (max - min);
    const outputFactor = invertNumber((sliderProgress - 50) / 100);
    const cssVars = {
        '--pc-range-slider-min': min,
        '--pc-range-slider-max': max,
        '--pc-range-slider-current': clampedValue,
        '--pc-range-slider-progress': `${sliderProgress}%`,
        '--pc-range-slider-output-factor': `${outputFactor}`,
    };
    const outputMarkup =
        !disabled &&
        output &&
        /*#__PURE__*/ React.createElement(
            'output',
            {
                htmlFor: id,
                className: styles$9.Output,
            },
            /*#__PURE__*/ React.createElement(
                'div',
                {
                    className: styles$9.OutputBubble,
                },
                /*#__PURE__*/ React.createElement(
                    'span',
                    {
                        className: styles$9.OutputText,
                    },
                    clampedValue
                )
            )
        );
    const prefixMarkup =
        prefix &&
        /*#__PURE__*/ React.createElement(
            'div',
            {
                className: styles$9.Prefix,
            },
            prefix
        );
    const suffixMarkup =
        suffix &&
        /*#__PURE__*/ React.createElement(
            'div',
            {
                className: styles$9.Suffix,
            },
            suffix
        );
    const className = classNames(styles$9.SingleThumb, sharedStyles.RangeSlider, error && styles$9.error, disabled && styles$9.disabled);
    /* eslint-disable @shopify/react-require-autocomplete */

    return /*#__PURE__*/ React.createElement(
        Labelled,
        {
            id: id,
            label: label,
            error: error,
            action: labelAction,
            labelHidden: labelHidden,
            helpText: helpText,
        },
        /*#__PURE__*/ React.createElement(
            'div',
            {
                className: className,
                style: cssVars,
            },
            prefixMarkup,
            /*#__PURE__*/ React.createElement(
                'div',
                {
                    className: styles$9.InputWrapper,
                },
                /*#__PURE__*/ React.createElement('input', {
                    type: 'range',
                    className: styles$9.Input,
                    id: id,
                    name: id,
                    min: min,
                    max: max,
                    step: step,
                    value: clampedValue,
                    disabled: disabled,
                    onChange: handleChange,
                    onFocus: onFocus,
                    onBlur: onBlur,
                    'aria-valuemin': min,
                    'aria-valuemax': max,
                    'aria-valuenow': clampedValue,
                    'aria-invalid': Boolean(error),
                    'aria-describedby': ariaDescribedBy,
                }),
                outputMarkup
            ),
            suffixMarkup
        )
    );
    /* eslint-enable @shopify/react-require-autocomplete */

    function handleChange(event) {
        const { onChange } = props;
        onChange && onChange(parseFloat(event.currentTarget.value), id);
    }
}

function RangeSlider({ min = 0, max = 100, step = 1, value, ...rest }) {
    const id = useUniqueId('RangeSlider');
    const sharedProps = {
        id,
        min,
        max,
        step,
        ...rest,
    };
    return isDualThumb(value)
        ? /*#__PURE__*/ React.createElement(
              DualThumb,
              Object.assign(
                  {
                      value: value,
                  },
                  sharedProps
              )
          )
        : /*#__PURE__*/ React.createElement(
              SingleThumb,
              Object.assign(
                  {
                      value: value,
                  },
                  sharedProps
              )
          );
}

function isDualThumb(value) {
    return Array.isArray(value);
}

var styles$8 = {
    CheckboxWrapper: 'Polaris-ResourceItem__CheckboxWrapper',
    ResourceItem: 'Polaris-ResourceItem',
    persistActions: 'Polaris-ResourceItem--persistActions',
    Actions: 'Polaris-ResourceItem__Actions',
    ItemWrapper: 'Polaris-ResourceItem__ItemWrapper',
    focusedInner: 'Polaris-ResourceItem--focusedInner',
    focused: 'Polaris-ResourceItem--focused',
    selected: 'Polaris-ResourceItem--selected',
    Link: 'Polaris-ResourceItem__Link',
    Button: 'Polaris-ResourceItem__Button',
    Container: 'Polaris-ResourceItem__Container',
    alignmentLeading: 'Polaris-ResourceItem--alignmentLeading',
    alignmentTrailing: 'Polaris-ResourceItem--alignmentTrailing',
    alignmentCenter: 'Polaris-ResourceItem--alignmentCenter',
    alignmentFill: 'Polaris-ResourceItem--alignmentFill',
    alignmentBaseline: 'Polaris-ResourceItem--alignmentBaseline',
    Owned: 'Polaris-ResourceItem__Owned',
    OwnedNoMedia: 'Polaris-ResourceItem__OwnedNoMedia',
    Handle: 'Polaris-ResourceItem__Handle',
    selectMode: 'Polaris-ResourceItem--selectMode',
    selectable: 'Polaris-ResourceItem--selectable',
    Media: 'Polaris-ResourceItem__Media',
    Content: 'Polaris-ResourceItem__Content',
    Disclosure: 'Polaris-ResourceItem__Disclosure',
    ListItem: 'Polaris-ResourceItem__ListItem',
};

const SELECT_ALL_ITEMS = 'All';

const getUniqueCheckboxID = globalIdGeneratorFactory('ResourceListItemCheckbox');
const getUniqueOverlayID = globalIdGeneratorFactory('ResourceListItemOverlay');

class BaseResourceItem extends react.exports.Component {
    constructor(...args) {
        super(...args);
        this.state = {
            actionsMenuVisible: false,
            focused: false,
            focusedInner: false,
            selected: isSelected(this.props.id, this.props.context.selectedItems),
        };
        this.node = null;
        this.checkboxId = getUniqueCheckboxID();
        this.overlayId = getUniqueOverlayID();
        this.buttonOverlay = /*#__PURE__*/ react.exports.createRef();

        this.setNode = (node) => {
            this.node = node;
        };

        this.handleFocus = (event) => {
            if (event.target === this.buttonOverlay.current || (this.node && event.target === this.node.querySelector(`#${this.overlayId}`))) {
                this.setState({
                    focused: true,
                    focusedInner: false,
                });
            } else if (this.node && this.node.contains(event.target)) {
                this.setState({
                    focused: true,
                    focusedInner: true,
                });
            }
        };

        this.handleBlur = ({ relatedTarget }) => {
            if (this.node && relatedTarget instanceof Element && this.node.contains(relatedTarget)) {
                return;
            }

            this.setState({
                focused: false,
                focusedInner: false,
            });
        };

        this.handleMouseOut = () => {
            this.state.focused &&
                this.setState({
                    focused: false,
                    focusedInner: false,
                });
        };

        this.handleLargerSelectionArea = (event) => {
            stopPropagation(event);
            this.handleSelection(!this.state.selected, event.nativeEvent.shiftKey);
        };

        this.handleSelection = (value, shiftKey) => {
            const {
                id,
                sortOrder,
                context: { onSelectionChange },
            } = this.props;

            if (id == null || onSelectionChange == null) {
                return;
            }

            this.setState({
                focused: value,
                focusedInner: value,
            });
            onSelectionChange(value, id, sortOrder, shiftKey);
        };

        this.handleClick = (event) => {
            stopPropagation(event);
            const {
                id,
                onClick,
                url,
                context: { selectMode },
            } = this.props;
            const { ctrlKey, metaKey } = event.nativeEvent;
            const anchor = this.node && this.node.querySelector('a');

            if (selectMode) {
                this.handleLargerSelectionArea(event);
                return;
            }

            if (anchor === event.target) {
                return;
            }

            if (onClick) {
                onClick(id);
            }

            if (url && (ctrlKey || metaKey)) {
                window.open(url, '_blank');
                return;
            }

            if (url && anchor) {
                anchor.click();
            }
        };

        this.handleKeyUp = (event) => {
            const {
                onClick = noop$4,
                context: { selectMode },
            } = this.props;
            const { key } = event;

            if (key === 'Enter' && this.props.url && !selectMode) {
                onClick();
            }
        };

        this.handleActionsClick = () => {
            this.setState(({ actionsMenuVisible }) => ({
                actionsMenuVisible: !actionsMenuVisible,
            }));
        };

        this.handleCloseRequest = () => {
            this.setState({
                actionsMenuVisible: false,
            });
        };
    }

    static getDerivedStateFromProps(nextProps, prevState) {
        const selected = isSelected(nextProps.id, nextProps.context.selectedItems);

        if (prevState.selected === selected) {
            return null;
        }

        return {
            selected,
        };
    }

    shouldComponentUpdate(nextProps, nextState) {
        const {
            children: nextChildren,
            context: { selectedItems: nextSelectedItems, ...restNextContext },
            ...restNextProps
        } = nextProps;
        const {
            children,
            context: { selectedItems, ...restContext },
            ...restProps
        } = this.props;
        const nextSelectMode = nextProps.context.selectMode;
        return !isEqual_1(this.state, nextState) || this.props.context.selectMode !== nextSelectMode || (!nextProps.context.selectMode && (!isEqual_1(restProps, restNextProps) || !isEqual_1(restContext, restNextContext)));
    }

    render() {
        const {
            children,
            url,
            external,
            media,
            shortcutActions,
            ariaControls,
            ariaExpanded,
            persistActions = false,
            accessibilityLabel,
            name,
            context: { selectable, selectMode, loading, resourceName },
            i18n,
            verticalAlignment,
            dataHref,
        } = this.props;
        const { actionsMenuVisible, focused, focusedInner, selected } = this.state;
        let ownedMarkup = null;
        let handleMarkup = null;
        const mediaMarkup = media
            ? /*#__PURE__*/

              /*#__PURE__*/
              jsx('div', {
                  className: styles$8.Media,
                  children: media,
              })
            : null;

        if (selectable) {
            const checkboxAccessibilityLabel = name || accessibilityLabel || i18n.translate('Polaris.Common.checkbox');
            handleMarkup =
                /*#__PURE__*/

                /*#__PURE__*/
                jsx('div', {
                    className: styles$8.Handle,
                    onClick: this.handleLargerSelectionArea,
                    children: /*#__PURE__*/ jsx('div', {
                        onClick: stopPropagation,
                        className: styles$8.CheckboxWrapper,
                        children: /*#__PURE__*/ jsx('div', {
                            onChange: this.handleLargerSelectionArea,
                            children: /*#__PURE__*/ jsx(Checkbox$1, {
                                id: this.checkboxId,
                                label: checkboxAccessibilityLabel,
                                labelHidden: true,
                                checked: selected,
                                disabled: loading,
                            }),
                        }),
                    }),
                });
        }

        if (media || selectable) {
            ownedMarkup =
                /*#__PURE__*/

                /*#__PURE__*/
                jsxs('div', {
                    className: classNames(styles$8.Owned, !mediaMarkup && styles$8.OwnedNoMedia),
                    children: [handleMarkup, mediaMarkup],
                });
        }

        const className = classNames(styles$8.ResourceItem, focused && styles$8.focused, selectable && styles$8.selectable, selected && styles$8.selected, selectMode && styles$8.selectMode, persistActions && styles$8.persistActions, focusedInner && styles$8.focusedInner);
        const listItemClassName = classNames(styles$8.ListItem, focused && !focusedInner && styles$8.focused);
        let actionsMarkup = null;
        let disclosureMarkup = null;

        if (shortcutActions && !loading) {
            if (persistActions) {
                actionsMarkup =
                    /*#__PURE__*/

                    /*#__PURE__*/
                    jsx('div', {
                        className: styles$8.Actions,
                        onClick: stopPropagation,
                        children: /*#__PURE__*/ jsx(ButtonGroup, {
                            children: buttonsFrom(shortcutActions, {
                                plain: true,
                            }),
                        }),
                    });
                const disclosureAccessibilityLabel = name
                    ? i18n.translate('Polaris.ResourceList.Item.actionsDropdownLabel', {
                          accessibilityLabel: name,
                      })
                    : i18n.translate('Polaris.ResourceList.Item.actionsDropdown');
                disclosureMarkup =
                    /*#__PURE__*/

                    /*#__PURE__*/
                    jsx('div', {
                        className: styles$8.Disclosure,
                        onClick: stopPropagation,
                        children: /*#__PURE__*/ jsx(Popover, {
                            activator:
                                /*#__PURE__*/

                                /*#__PURE__*/
                                jsx(Button, {
                                    accessibilityLabel: disclosureAccessibilityLabel,
                                    onClick: this.handleActionsClick,
                                    plain: true,
                                    icon: SvgHorizontalDotsMinor,
                                }),
                            onClose: this.handleCloseRequest,
                            active: actionsMenuVisible,
                            children: /*#__PURE__*/ jsx(ActionList, {
                                items: shortcutActions,
                            }),
                        }),
                    });
            } else {
                actionsMarkup =
                    /*#__PURE__*/

                    /*#__PURE__*/
                    jsx('div', {
                        className: styles$8.Actions,
                        onClick: stopPropagation,
                        children: /*#__PURE__*/ jsx(ButtonGroup, {
                            segmented: true,
                            children: buttonsFrom(shortcutActions, {
                                size: 'slim',
                            }),
                        }),
                    });
            }
        }

        const content = children
            ? /*#__PURE__*/

              /*#__PURE__*/
              jsx('div', {
                  className: styles$8.Content,
                  children: children,
              })
            : null;
        const containerClassName = classNames(styles$8.Container, verticalAlignment && styles$8[variationName('alignment', verticalAlignment)]);

        const containerMarkup =
            /*#__PURE__*/

            /*#__PURE__*/
            jsxs('div', {
                className: containerClassName,
                id: this.props.id,
                children: [ownedMarkup, content, actionsMarkup, disclosureMarkup],
            });

        const tabIndex = loading ? -1 : 0;
        const ariaLabel =
            accessibilityLabel ||
            i18n.translate('Polaris.ResourceList.Item.viewItem', {
                itemName: name || (resourceName && resourceName.singular) || '',
            });
        const accessibleMarkup = url
            ? /*#__PURE__*/

              /*#__PURE__*/
              jsx(UnstyledLink, {
                  'aria-describedby': this.props.id,
                  'aria-label': ariaLabel,
                  className: styles$8.Link,
                  url: url,
                  external: external,
                  tabIndex: tabIndex,
                  id: this.overlayId,
              })
            : /*#__PURE__*/

              /*#__PURE__*/
              jsx('button', {
                  className: styles$8.Button,
                  'aria-label': ariaLabel,
                  'aria-controls': ariaControls,
                  'aria-expanded': ariaExpanded,
                  onClick: this.handleClick,
                  tabIndex: tabIndex,
                  ref: this.buttonOverlay,
              });
        return (
            /*#__PURE__*/

            /*#__PURE__*/
            jsx('li', {
                className: listItemClassName,
                'data-href': dataHref,
                children: /*#__PURE__*/ jsx('div', {
                    className: styles$8.ItemWrapper,
                    children: /*#__PURE__*/ jsxs('div', {
                        ref: this.setNode,
                        className: className,
                        onClick: this.handleClick,
                        onFocus: this.handleFocus,
                        onBlur: this.handleBlur,
                        onKeyUp: this.handleKeyUp,
                        onMouseOut: this.handleMouseOut,
                        'data-href': url,
                        children: [accessibleMarkup, containerMarkup],
                    }),
                }),
            })
        );
    }
}

function noop$4() {}

function stopPropagation(event) {
    event.stopPropagation();
}

function isSelected(id, selectedItems) {
    return Boolean(selectedItems && ((Array.isArray(selectedItems) && selectedItems.includes(id)) || selectedItems === SELECT_ALL_ITEMS));
}

function ResourceItem(props) {
    return (
        /*#__PURE__*/

        /*#__PURE__*/
        jsx(BaseResourceItem, {
            ...Object.assign({}, props, {
                context: react.exports.useContext(ResourceListContext),
                i18n: useI18n(),
            }),
        })
    );
}

const UNIQUE_IDENTIFIER = Symbol('unique_identifier');
/**
 * useLazyRef provides a lazy initial value, similar to lazy
 * initial state the initialValue is the value used during
 * initialization and disregarded after that. Use this hook
 * for expensive initialization.
 * @param initialValue - A function that will return the initial
 * value and be disregarded after that
 * @returns MutableRefObject<T> - Returns a ref object with the
 * results from invoking initial value
 * @example
 * function ComponentExample() {
 *  const title = useLazyRef(() => someExpensiveComputation());
 *  return <h1>{title.current}</h1>;
 * }
 */

function useLazyRef(initialValue) {
    const lazyRef = react.exports.useRef(UNIQUE_IDENTIFIER);

    if (lazyRef.current === UNIQUE_IDENTIFIER) {
        lazyRef.current = initialValue();
    }

    return lazyRef;
}

var styles$7 = {
    FiltersWrapper: 'Polaris-ResourceList__FiltersWrapper',
    ResourceList: 'Polaris-ResourceList',
    HeaderOuterWrapper: 'Polaris-ResourceList__HeaderOuterWrapper',
    'HeaderWrapper-disabled': 'Polaris-ResourceList__HeaderWrapper--disabled',
    'HeaderWrapper-overlay': 'Polaris-ResourceList__HeaderWrapper--overlay',
    HeaderWrapper: 'Polaris-ResourceList__HeaderWrapper',
    'HeaderWrapper-isSticky': 'Polaris-ResourceList__HeaderWrapper--isSticky',
    HeaderContentWrapper: 'Polaris-ResourceList__HeaderContentWrapper',
    'HeaderWrapper-inSelectMode': 'Polaris-ResourceList__HeaderWrapper--inSelectMode',
    SortWrapper: 'Polaris-ResourceList__SortWrapper',
    AlternateToolWrapper: 'Polaris-ResourceList__AlternateToolWrapper',
    'HeaderWrapper-hasSelect': 'Polaris-ResourceList__HeaderWrapper--hasSelect',
    'HeaderWrapper-hasAlternateTool': 'Polaris-ResourceList__HeaderWrapper--hasAlternateTool',
    'HeaderWrapper-hasSort': 'Polaris-ResourceList__HeaderWrapper--hasSort',
    HeaderTitleWrapper: 'Polaris-ResourceList__HeaderTitleWrapper',
    BulkActionsWrapper: 'Polaris-ResourceList__BulkActionsWrapper',
    CheckableButtonWrapper: 'Polaris-ResourceList__CheckableButtonWrapper',
    SelectButtonWrapper: 'Polaris-ResourceList__SelectButtonWrapper',
    EmptySearchResultWrapper: 'Polaris-ResourceList__EmptySearchResultWrapper',
    ResourceListWrapper: 'Polaris-ResourceList__ResourceListWrapper',
    ItemWrapper: 'Polaris-ResourceList__ItemWrapper',
    'ItemWrapper-isLoading': 'Polaris-ResourceList__ItemWrapper--isLoading',
    SpinnerContainer: 'Polaris-ResourceList__SpinnerContainer',
    LoadingOverlay: 'Polaris-ResourceList__LoadingOverlay',
    DisabledPointerEvents: 'Polaris-ResourceList__DisabledPointerEvents',
    disableTextSelection: 'Polaris-ResourceList--disableTextSelection',
};

var styles$6 = {
    Select: 'Polaris-Select',
    disabled: 'Polaris-Select--disabled',
    Content: 'Polaris-Select__Content',
    InlineLabel: 'Polaris-Select__InlineLabel',
    Icon: 'Polaris-Select__Icon',
    Backdrop: 'Polaris-Select__Backdrop',
    SelectedOption: 'Polaris-Select__SelectedOption',
    Prefix: 'Polaris-Select__Prefix',
    Input: 'Polaris-Select__Input',
    error: 'Polaris-Select--error',
    hover: 'Polaris-Select--hover',
};

const PLACEHOLDER_VALUE = '';
function Select({ options: optionsProp, label, labelAction, labelHidden: labelHiddenProp, labelInline, disabled, helpText, placeholder, id: idProp, name, value = PLACEHOLDER_VALUE, error, onChange, onFocus, onBlur, requiredIndicator }) {
    const id = useUniqueId('Select', idProp);
    const labelHidden = labelInline ? true : labelHiddenProp;
    const className = classNames(styles$6.Select, error && styles$6.error, disabled && styles$6.disabled);
    const handleChange = onChange ? (event) => onChange(event.currentTarget.value, id) : undefined;
    const describedBy = [];

    if (helpText) {
        describedBy.push(helpTextID(id));
    }

    if (error) {
        describedBy.push(`${id}Error`);
    }

    const options = optionsProp || [];
    let normalizedOptions = options.map(normalizeOption);

    if (placeholder) {
        normalizedOptions = [
            {
                label: placeholder,
                value: PLACEHOLDER_VALUE,
                disabled: true,
            },
            ...normalizedOptions,
        ];
    }

    const inlineLabelMarkup =
        labelInline &&
        /*#__PURE__*/ React.createElement(
            'span',
            {
                className: styles$6.InlineLabel,
            },
            label
        );
    const selectedOption = getSelectedOption(normalizedOptions, value);
    const prefixMarkup =
        selectedOption.prefix &&
        /*#__PURE__*/ React.createElement(
            'div',
            {
                className: styles$6.Prefix,
            },
            selectedOption.prefix
        );
    const contentMarkup = /*#__PURE__*/ React.createElement(
        'div',
        {
            className: styles$6.Content,
            'aria-hidden': true,
            'aria-disabled': disabled,
        },
        inlineLabelMarkup,
        prefixMarkup,
        /*#__PURE__*/ React.createElement(
            'span',
            {
                className: styles$6.SelectedOption,
            },
            selectedOption.label
        ),
        /*#__PURE__*/ React.createElement(
            'span',
            {
                className: styles$6.Icon,
            },
            /*#__PURE__*/ React.createElement(Icon, {
                source: SvgSelectMinor,
            })
        )
    );
    const optionsMarkup = normalizedOptions.map(renderOption);
    return /*#__PURE__*/ React.createElement(
        Labelled,
        {
            id: id,
            label: label,
            error: error,
            action: labelAction,
            labelHidden: labelHidden,
            helpText: helpText,
            requiredIndicator: requiredIndicator,
        },
        /*#__PURE__*/ React.createElement(
            'div',
            {
                className: className,
            },
            /*#__PURE__*/ React.createElement(
                'select',
                {
                    id: id,
                    name: name,
                    value: value,
                    className: styles$6.Input,
                    disabled: disabled,
                    onFocus: onFocus,
                    onBlur: onBlur,
                    onChange: handleChange,
                    'aria-invalid': Boolean(error),
                    'aria-describedby': describedBy.length ? describedBy.join(' ') : undefined,
                    'aria-required': requiredIndicator,
                },
                optionsMarkup
            ),
            contentMarkup,
            /*#__PURE__*/ React.createElement('div', {
                className: styles$6.Backdrop,
            })
        )
    );
}

function isString(option) {
    return typeof option === 'string';
}

function isGroup(option) {
    return typeof option === 'object' && 'options' in option && option.options != null;
}

function normalizeStringOption(option) {
    return {
        label: option,
        value: option,
    };
}
/**
 * Converts a string option (and each string option in a Group) into
 * an Option object.
 */

function normalizeOption(option) {
    if (isString(option)) {
        return normalizeStringOption(option);
    } else if (isGroup(option)) {
        const { title, options } = option;
        return {
            title,
            options: options.map((option) => {
                return isString(option) ? normalizeStringOption(option) : option;
            }),
        };
    }

    return option;
}
/**
 * Gets the text to display in the UI, for the currently selected option
 */

function getSelectedOption(options, value) {
    const flatOptions = flattenOptions(options);
    let selectedOption = flatOptions.find((option) => value === option.value);

    if (selectedOption === undefined) {
        // Get the first visible option (not the hidden placeholder)
        selectedOption = flatOptions.find((option) => !option.hidden);
    }

    return (
        selectedOption || {
            value: '',
            label: '',
        }
    );
}
/**
 * Ungroups an options array
 */

function flattenOptions(options) {
    let flatOptions = [];
    options.forEach((optionOrGroup) => {
        if (isGroup(optionOrGroup)) {
            flatOptions = flatOptions.concat(optionOrGroup.options);
        } else {
            flatOptions.push(optionOrGroup);
        }
    });
    return flatOptions;
}

function renderSingleOption(option) {
    const { value, label, prefix: _prefix, ...rest } = option;
    return /*#__PURE__*/ React.createElement(
        'option',
        Object.assign(
            {
                key: value,
                value: value,
            },
            rest
        ),
        label
    );
}

function renderOption(optionOrGroup) {
    if (isGroup(optionOrGroup)) {
        const { title, options } = optionOrGroup;
        return /*#__PURE__*/ React.createElement(
            'optgroup',
            {
                label: title,
                key: title,
            },
            options.map(renderSingleOption)
        );
    }

    return renderSingleOption(optionOrGroup);
}

const SMALL_SCREEN_WIDTH = 458;
const SMALL_SPINNER_HEIGHT = 28;
const LARGE_SPINNER_HEIGHT = 45;

function getAllItemsOnPage(items, idForItem) {
    return items.map((item, index) => {
        return idForItem(item, index);
    });
}

const isSmallScreen = () => {
    return typeof window === 'undefined' ? false : window.innerWidth < SMALL_SCREEN_WIDTH;
};

function defaultIdForItem(item, index) {
    return Object.prototype.hasOwnProperty.call(item, 'id') ? item.id : index.toString();
}

const ResourceList = function ResourceList({
    items,
    filterControl,
    emptyState,
    emptySearchState,
    resourceName: resourceNameProp,
    promotedBulkActions,
    bulkActions,
    selectedItems = [],
    isFiltered,
    selectable,
    hasMoreItems,
    loading,
    showHeader,
    totalItemsCount,
    sortValue,
    sortOptions,
    alternateTool,
    onSortChange,
    onSelectionChange,
    renderItem,
    idForItem = defaultIdForItem,
    resolveItemId,
}) {
    const i18n = useI18n();
    const [selectMode, setSelectMode] = react.exports.useState(Boolean(selectedItems && selectedItems.length > 0));
    const [loadingPosition, setLoadingPositionState] = react.exports.useState(0);
    const [lastSelected, setLastSelected] = react.exports.useState();
    const [smallScreen, setSmallScreen] = react.exports.useState(isSmallScreen());
    const forceUpdate = react.exports.useReducer((x = 0) => x + 1, 0)[1];
    const [checkableButtons, setCheckableButtons] = react.exports.useState(new Map());
    const defaultResourceName = useLazyRef(() => ({
        singular: i18n.translate('Polaris.ResourceList.defaultItemSingular'),
        plural: i18n.translate('Polaris.ResourceList.defaultItemPlural'),
    }));
    const listRef = react.exports.useRef(null);

    const handleSelectMode = (selectMode) => {
        setSelectMode(selectMode);

        if (!selectMode && onSelectionChange) {
            onSelectionChange([]);
        }
    };

    const handleResize = debounce_1(
        () => {
            const newSmallScreen = isSmallScreen();

            if (selectedItems && selectedItems.length === 0 && selectMode && !newSmallScreen) {
                handleSelectMode(false);
            }

            if (smallScreen !== newSmallScreen) {
                setSmallScreen(newSmallScreen);
            }
        },
        50,
        {
            leading: true,
            trailing: true,
            maxWait: 50,
        }
    );
    const isSelectable = Boolean((promotedBulkActions && promotedBulkActions.length > 0) || (bulkActions && bulkActions.length > 0) || selectable);

    const bulkSelectState = () => {
        let selectState = 'indeterminate';

        if (!selectedItems || (Array.isArray(selectedItems) && selectedItems.length === 0)) {
            selectState = false;
        } else if (selectedItems === SELECT_ALL_ITEMS || (Array.isArray(selectedItems) && selectedItems.length === items.length)) {
            selectState = true;
        }

        return selectState;
    };

    const resourceName = resourceNameProp ? resourceNameProp : defaultResourceName.current;

    const headerTitle = () => {
        const itemsCount = items.length;
        const resource = !loading && ((!totalItemsCount && itemsCount === 1) || totalItemsCount === 1) ? resourceName.singular : resourceName.plural;

        if (loading) {
            return i18n.translate('Polaris.ResourceList.loading', {
                resource,
            });
        } else if (totalItemsCount) {
            return i18n.translate('Polaris.ResourceList.showingTotalCount', {
                itemsCount,
                totalItemsCount,
                resource,
            });
        } else {
            return i18n.translate('Polaris.ResourceList.showing', {
                itemsCount,
                resource,
            });
        }
    };

    const bulkActionsLabel = () => {
        const selectedItemsCount = selectedItems === SELECT_ALL_ITEMS ? `${items.length}+` : selectedItems.length;
        return i18n.translate('Polaris.ResourceList.selected', {
            selectedItemsCount,
        });
    };

    const bulkActionsAccessibilityLabel = () => {
        const selectedItemsCount = selectedItems.length;
        const totalItemsCount = items.length;
        const allSelected = selectedItemsCount === totalItemsCount;

        if (totalItemsCount === 1 && allSelected) {
            return i18n.translate('Polaris.ResourceList.a11yCheckboxDeselectAllSingle', {
                resourceNameSingular: resourceName.singular,
            });
        } else if (totalItemsCount === 1) {
            return i18n.translate('Polaris.ResourceList.a11yCheckboxSelectAllSingle', {
                resourceNameSingular: resourceName.singular,
            });
        } else if (allSelected) {
            return i18n.translate('Polaris.ResourceList.a11yCheckboxDeselectAllMultiple', {
                itemsLength: items.length,
                resourceNamePlural: resourceName.plural,
            });
        } else {
            return i18n.translate('Polaris.ResourceList.a11yCheckboxSelectAllMultiple', {
                itemsLength: items.length,
                resourceNamePlural: resourceName.plural,
            });
        }
    };

    const paginatedSelectAllText = () => {
        if (!isSelectable || !hasMoreItems) {
            return;
        }

        if (selectedItems === SELECT_ALL_ITEMS) {
            return i18n.translate(isFiltered ? 'Polaris.ResourceList.allFilteredItemsSelected' : 'Polaris.ResourceList.allItemsSelected', {
                itemsLength: items.length,
                resourceNamePlural: resourceName.plural,
            });
        }
    };

    const paginatedSelectAllAction = () => {
        if (!isSelectable || !hasMoreItems) {
            return;
        }

        const actionText =
            selectedItems === SELECT_ALL_ITEMS
                ? i18n.translate('Polaris.Common.undo')
                : i18n.translate(isFiltered ? 'Polaris.ResourceList.selectAllFilteredItems' : 'Polaris.ResourceList.selectAllItems', {
                      itemsLength: items.length,
                      resourceNamePlural: resourceName.plural,
                  });
        return {
            content: actionText,
            onAction: handleSelectAllItemsInStore,
        };
    };

    const emptySearchResultText = {
        title: i18n.translate('Polaris.ResourceList.emptySearchResultTitle', {
            resourceNamePlural: resourceName.plural,
        }),
        description: i18n.translate('Polaris.ResourceList.emptySearchResultDescription'),
    };

    const handleSelectAllItemsInStore = () => {
        const newlySelectedItems = selectedItems === SELECT_ALL_ITEMS ? getAllItemsOnPage(items, idForItem) : SELECT_ALL_ITEMS;

        if (onSelectionChange) {
            onSelectionChange(newlySelectedItems);
        }
    };

    const setLoadingPosition = react.exports.useCallback(() => {
        if (listRef.current != null) {
            if (typeof window === 'undefined') {
                return;
            }

            const overlay = listRef.current.getBoundingClientRect();
            const viewportHeight = Math.max(document.documentElement ? document.documentElement.clientHeight : 0, window.innerHeight || 0);
            const overflow = viewportHeight - overlay.height;
            const spinnerHeight = items.length === 1 ? SMALL_SPINNER_HEIGHT : LARGE_SPINNER_HEIGHT;
            const spinnerPosition = overflow > 0 ? (overlay.height - spinnerHeight) / 2 : (viewportHeight - overlay.top - spinnerHeight) / 2;
            setLoadingPositionState(spinnerPosition);
        }
    }, [listRef, items.length]);
    const itemsExist = items.length > 0;
    react.exports.useEffect(() => {
        if (loading) {
            setLoadingPosition();
        }
    }, [loading, setLoadingPosition]);
    react.exports.useEffect(() => {
        if (selectedItems && selectedItems.length > 0 && !selectMode) {
            setSelectMode(true);
        }

        if ((!selectedItems || selectedItems.length === 0) && !isSmallScreen()) {
            setSelectMode(false);
        }
    }, [selectedItems, selectMode]);
    react.exports.useEffect(() => {
        forceUpdate();
    }, [forceUpdate, items]);

    const renderItemWithId = (item, index) => {
        const id = idForItem(item, index);
        const itemContent = renderItem(item, id, index);

        return itemContent;
    };

    const handleMultiSelectionChange = (lastSelected, currentSelected, resolveItemId) => {
        const min = Math.min(lastSelected, currentSelected);
        const max = Math.max(lastSelected, currentSelected);
        return items.slice(min, max + 1).map(resolveItemId);
    };

    const handleCheckableButtonRegistration = (key, button) => {
        if (!checkableButtons.get(key)) {
            setCheckableButtons(new Map(checkableButtons).set(key, button));
        }
    };

    const handleSelectionChange = (selected, id, sortOrder, shiftKey) => {
        if (selectedItems == null || onSelectionChange == null) {
            return;
        }

        let newlySelectedItems = selectedItems === SELECT_ALL_ITEMS ? getAllItemsOnPage(items, idForItem) : [...selectedItems];

        if (sortOrder !== undefined) {
            setLastSelected(sortOrder);
        }

        const lastSelectedFromState = lastSelected;
        let selectedIds = [id];

        if (shiftKey && lastSelectedFromState != null && sortOrder !== undefined && resolveItemId) {
            selectedIds = handleMultiSelectionChange(lastSelectedFromState, sortOrder, resolveItemId);
        }

        newlySelectedItems = [...new Set([...newlySelectedItems, ...selectedIds])];

        if (!selected) {
            for (const selectedId of selectedIds) {
                newlySelectedItems.splice(newlySelectedItems.indexOf(selectedId), 1);
            }
        }

        if (newlySelectedItems.length === 0 && !isSmallScreen()) {
            handleSelectMode(false);
        } else if (newlySelectedItems.length > 0) {
            handleSelectMode(true);
        }

        if (onSelectionChange) {
            onSelectionChange(newlySelectedItems);
        }
    };

    const handleToggleAll = () => {
        let newlySelectedItems;

        if ((Array.isArray(selectedItems) && selectedItems.length === items.length) || selectedItems === SELECT_ALL_ITEMS) {
            newlySelectedItems = [];
        } else {
            newlySelectedItems = items.map((item, index) => {
                return idForItem(item, index);
            });
        }

        if (newlySelectedItems.length === 0 && !isSmallScreen()) {
            handleSelectMode(false);
        } else if (newlySelectedItems.length > 0) {
            handleSelectMode(true);
        }

        let checkbox;

        if (isSmallScreen()) {
            checkbox = checkableButtons.get('bulkSm');
        } else if (newlySelectedItems.length === 0) {
            checkbox = checkableButtons.get('plain');
        } else {
            checkbox = checkableButtons.get('bulkLg');
        }

        if (onSelectionChange) {
            onSelectionChange(newlySelectedItems);
        } // setTimeout ensures execution after the Transition on BulkActions

        setTimeout(() => {
            checkbox && checkbox.focus();
        }, 0);
    };

    const bulkActionsMarkup = isSelectable
        ? /*#__PURE__*/

          /*#__PURE__*/
          jsx('div', {
              className: styles$7.BulkActionsWrapper,
              children: /*#__PURE__*/ jsx(BulkActions, {
                  label: bulkActionsLabel(),
                  accessibilityLabel: bulkActionsAccessibilityLabel(),
                  selected: bulkSelectState(),
                  onToggleAll: handleToggleAll,
                  selectMode: selectMode,
                  onSelectModeToggle: handleSelectMode,
                  promotedActions: promotedBulkActions,
                  paginatedSelectAllAction: paginatedSelectAllAction(),
                  paginatedSelectAllText: paginatedSelectAllText(),
                  actions: bulkActions,
                  disabled: loading,
                  smallScreen: smallScreen,
              }),
          })
        : null;
    const filterControlMarkup = filterControl
        ? /*#__PURE__*/

          /*#__PURE__*/
          jsx('div', {
              className: styles$7.FiltersWrapper,
              children: filterControl,
          })
        : null;
    const sortingSelectMarkup =
        sortOptions && sortOptions.length > 0 && !alternateTool
            ? /*#__PURE__*/

              /*#__PURE__*/
              jsx('div', {
                  className: styles$7.SortWrapper,
                  children: /*#__PURE__*/ jsx(Select, {
                      label: i18n.translate('Polaris.ResourceList.sortingLabel'),
                      labelInline: !smallScreen,
                      labelHidden: smallScreen,
                      options: sortOptions,
                      onChange: onSortChange,
                      value: sortValue,
                      disabled: selectMode,
                  }),
              })
            : null;
    const alternateToolMarkup =
        alternateTool && !sortingSelectMarkup
            ? /*#__PURE__*/

              /*#__PURE__*/
              jsx('div', {
                  className: styles$7.AlternateToolWrapper,
                  children: alternateTool,
              })
            : null;

    const headerTitleMarkup =
        /*#__PURE__*/

        /*#__PURE__*/
        jsx('div', {
            className: styles$7.HeaderTitleWrapper,
            children: headerTitle(),
        });

    const selectButtonMarkup = isSelectable
        ? /*#__PURE__*/

          /*#__PURE__*/
          jsx('div', {
              className: styles$7.SelectButtonWrapper,
              children: /*#__PURE__*/ jsx(Button, {
                  disabled: selectMode,
                  icon: SvgEnableSelectionMinor,
                  onClick: () => handleSelectMode(true),
                  children: i18n.translate('Polaris.ResourceList.selectButtonText'),
              }),
          })
        : null;
    const checkableButtonMarkup = isSelectable
        ? /*#__PURE__*/

          /*#__PURE__*/
          jsx('div', {
              className: styles$7.CheckableButtonWrapper,
              children: /*#__PURE__*/ jsx(CheckableButton, {
                  accessibilityLabel: bulkActionsAccessibilityLabel(),
                  label: headerTitle(),
                  onToggleAll: handleToggleAll,
                  plain: true,
                  disabled: loading,
              }),
          })
        : null;
    const needsHeader = isSelectable || (sortOptions && sortOptions.length > 0) || alternateTool;
    const headerWrapperOverlay = loading
        ? /*#__PURE__*/

          /*#__PURE__*/
          jsx('div', {
              className: styles$7['HeaderWrapper-overlay'],
          })
        : null;
    const showEmptyState = emptyState && !itemsExist && !loading;
    const showEmptySearchState = !showEmptyState && filterControl && !itemsExist && !loading;

    const headerMarkup =
        !showEmptyState &&
        showHeader !== false &&
        !showEmptySearchState &&
        (showHeader || needsHeader) &&
        listRef.current &&
        /*#__PURE__*/

        /*#__PURE__*/
        jsx('div', {
            className: styles$7.HeaderOuterWrapper,
            children: /*#__PURE__*/ jsx(Sticky, {
                boundingElement: listRef.current,
                children: (isSticky) => {
                    const headerClassName = classNames(
                        styles$7.HeaderWrapper,
                        sortOptions && sortOptions.length > 0 && !alternateTool && styles$7['HeaderWrapper-hasSort'],
                        alternateTool && styles$7['HeaderWrapper-hasAlternateTool'],
                        isSelectable && styles$7['HeaderWrapper-hasSelect'],
                        loading && styles$7['HeaderWrapper-disabled'],
                        isSelectable && selectMode && styles$7['HeaderWrapper-inSelectMode'],
                        isSticky && styles$7['HeaderWrapper-isSticky']
                    );
                    return (
                        /*#__PURE__*/

                        /*#__PURE__*/
                        jsxs('div', {
                            className: headerClassName,
                            children: [
                                /*#__PURE__*/ jsx(EventListener, {
                                    event: 'resize',
                                    handler: handleResize,
                                }),
                                headerWrapperOverlay,
                                /*#__PURE__*/ jsxs('div', {
                                    className: styles$7.HeaderContentWrapper,
                                    children: [headerTitleMarkup, checkableButtonMarkup, alternateToolMarkup, sortingSelectMarkup, selectButtonMarkup],
                                }),
                                bulkActionsMarkup,
                            ],
                        })
                    );
                },
            }),
        });

    const emptySearchStateMarkup = showEmptySearchState
        ? emptySearchState ||
          /*#__PURE__*/

          /*#__PURE__*/
          jsx('div', {
              className: styles$7.EmptySearchResultWrapper,
              children: /*#__PURE__*/ jsx(EmptySearchResult, {
                  ...Object.assign({}, emptySearchResultText, {
                      withIllustration: true,
                  }),
              }),
          })
        : null;
    const emptyStateMarkup = showEmptyState ? emptyState : null;
    const defaultTopPadding = 8;
    const topPadding = loadingPosition > 0 ? loadingPosition : defaultTopPadding;
    const spinnerStyle = {
        paddingTop: `${topPadding}px`,
    };
    const spinnerSize = items.length < 2 ? 'small' : 'large';
    const loadingOverlay = loading
        ? /*#__PURE__*/

          /*#__PURE__*/
          jsxs(Fragment, {
              children: [
                  /*#__PURE__*/ jsx('li', {
                      className: styles$7.SpinnerContainer,
                      style: spinnerStyle,
                      children: /*#__PURE__*/ jsx(Spinner$1, {
                          size: spinnerSize,
                          accessibilityLabel: 'Items are loading',
                      }),
                  }),
                  /*#__PURE__*/ jsx('li', {
                      className: styles$7.LoadingOverlay,
                  }),
              ],
          })
        : null;
    const className = classNames(styles$7.ItemWrapper, loading && styles$7['ItemWrapper-isLoading']);
    const loadingWithoutItemsMarkup =
        loading && !itemsExist
            ? /*#__PURE__*/

              /*#__PURE__*/
              jsx('div', {
                  className: className,
                  tabIndex: -1,
                  children: loadingOverlay,
              })
            : null;
    const resourceListClassName = classNames(styles$7.ResourceList, loading && styles$7.disabledPointerEvents, selectMode && styles$7.disableTextSelection);
    const listMarkup = itemsExist
        ? /*#__PURE__*/

          /*#__PURE__*/
          jsxs('ul', {
              className: resourceListClassName,
              ref: listRef,
              'aria-live': 'polite',
              'aria-busy': loading,
              children: [loadingOverlay, react.exports.Children.toArray(items.map(renderItemWithId))],
          })
        : null; // This is probably a legit error but I don't have the time to refactor this
    // eslint-disable-next-line react/jsx-no-constructed-context-values

    const context = {
        selectable: isSelectable,
        selectedItems,
        selectMode,
        resourceName,
        loading,
        onSelectionChange: handleSelectionChange,
        registerCheckableButtons: handleCheckableButtonRegistration,
    };
    return (
        /*#__PURE__*/

        /*#__PURE__*/
        jsx(ResourceListContext.Provider, {
            value: context,
            children: /*#__PURE__*/ jsxs('div', {
                className: styles$7.ResourceListWrapper,
                children: [filterControlMarkup, headerMarkup, listMarkup, emptySearchStateMarkup, emptyStateMarkup, loadingWithoutItemsMarkup],
            }),
        })
    );
};

ResourceList.Item = ResourceItem;

var styles$5 = {
    SkeletonBodyText: 'Polaris-SkeletonBodyText',
};

function SkeletonBodyText({ lines = 3 }) {
    const bodyTextLines = [];

    for (let i = 0; i < lines; i++) {
        bodyTextLines.push(
            /*#__PURE__*/ React.createElement('div', {
                className: styles$5.SkeletonBodyText,
                key: i,
            })
        );
    }

    return /*#__PURE__*/ React.createElement(React.Fragment, null, bodyTextLines);
}

var styles$4 = {
    DisplayText: 'Polaris-SkeletonDisplayText__DisplayText',
    sizeSmall: 'Polaris-SkeletonDisplayText--sizeSmall',
    sizeMedium: 'Polaris-SkeletonDisplayText--sizeMedium',
    sizeLarge: 'Polaris-SkeletonDisplayText--sizeLarge',
    sizeExtraLarge: 'Polaris-SkeletonDisplayText--sizeExtraLarge',
};

function SkeletonDisplayText({ size = 'medium' }) {
    const className = classNames(styles$4.DisplayText, size && styles$4[variationName('size', size)]);
    return /*#__PURE__*/ React.createElement('div', {
        className: className,
    });
}

var styles$3 = {
    Page: 'Polaris-SkeletonPage__Page',
    fullWidth: 'Polaris-SkeletonPage--fullWidth',
    narrowWidth: 'Polaris-SkeletonPage--narrowWidth',
    Content: 'Polaris-SkeletonPage__Content',
    Header: 'Polaris-SkeletonPage__Header',
    BreadcrumbAction: 'Polaris-SkeletonPage__BreadcrumbAction',
    TitleAndPrimaryAction: 'Polaris-SkeletonPage__TitleAndPrimaryAction',
    TitleWrapper: 'Polaris-SkeletonPage__TitleWrapper',
    Title: 'Polaris-SkeletonPage__Title',
    SkeletonTitle: 'Polaris-SkeletonPage__SkeletonTitle',
    PrimaryAction: 'Polaris-SkeletonPage__PrimaryAction',
    Actions: 'Polaris-SkeletonPage__Actions',
    Action: 'Polaris-SkeletonPage__Action',
};

function SkeletonPage({ children, fullWidth, narrowWidth, primaryAction, title = '', breadcrumbs }) {
    const i18n = useI18n();
    const className = classNames(styles$3.Page, fullWidth && styles$3.fullWidth, narrowWidth && styles$3.narrowWidth);
    const titleContent = title
        ? /*#__PURE__*/ React.createElement(
              'h1',
              {
                  className: styles$3.Title,
              },
              title
          )
        : /*#__PURE__*/ React.createElement('div', {
              className: styles$3.SkeletonTitle,
          });
    const titleMarkup = /*#__PURE__*/ React.createElement(
        'div',
        {
            className: styles$3.TitleWrapper,
        },
        titleContent
    );
    const primaryActionMarkup = primaryAction
        ? /*#__PURE__*/ React.createElement(
              'div',
              {
                  className: styles$3.PrimaryAction,
              },
              /*#__PURE__*/ React.createElement(SkeletonDisplayText, {
                  size: 'large',
              })
          )
        : null;
    const breadcrumbMarkup = breadcrumbs
        ? /*#__PURE__*/ React.createElement(
              'div',
              {
                  className: styles$3.BreadcrumbAction,
                  style: {
                      width: 60,
                  },
              },
              /*#__PURE__*/ React.createElement(SkeletonBodyText, {
                  lines: 1,
              })
          )
        : null;
    return /*#__PURE__*/ React.createElement(
        'div',
        {
            className: className,
            role: 'status',
            'aria-label': i18n.translate('Polaris.SkeletonPage.loadingLabel'),
        },
        /*#__PURE__*/ React.createElement(
            'div',
            {
                className: styles$3.Header,
            },
            breadcrumbMarkup,
            /*#__PURE__*/ React.createElement(
                'div',
                {
                    className: styles$3.TitleAndPrimaryAction,
                },
                titleMarkup,
                primaryActionMarkup
            )
        ),
        /*#__PURE__*/ React.createElement(
            'div',
            {
                className: styles$3.Content,
            },
            children
        )
    );
}

function getVisibleAndHiddenTabIndices(tabs, selected, disclosureWidth, tabWidths, containerWidth) {
    const sumTabWidths = tabWidths.reduce((sum, width) => sum + width, 0);
    const arrayOfTabIndices = tabs.map((_, index) => {
        return index;
    });
    const visibleTabs = [];
    const hiddenTabs = [];

    if (containerWidth > sumTabWidths) {
        visibleTabs.push(...arrayOfTabIndices);
    } else {
        visibleTabs.push(selected);
        let tabListWidth = tabWidths[selected];
        arrayOfTabIndices.forEach((currentTabIndex) => {
            if (currentTabIndex !== selected) {
                const currentTabWidth = tabWidths[currentTabIndex];

                if (tabListWidth + currentTabWidth >= containerWidth - disclosureWidth) {
                    hiddenTabs.push(currentTabIndex);
                    return;
                }

                visibleTabs.push(currentTabIndex);
                tabListWidth += currentTabWidth;
            }
        });
    }

    return {
        visibleTabs,
        hiddenTabs,
    };
}

var styles$2 = {
    Tabs: 'Polaris-Tabs',
    Wrapper: 'Polaris-Tabs__Wrapper',
    fitted: 'Polaris-Tabs--fitted',
    TabContainer: 'Polaris-Tabs__TabContainer',
    Title: 'Polaris-Tabs__Title',
    fillSpace: 'Polaris-Tabs--fillSpace',
    Tab: 'Polaris-Tabs__Tab',
    'Tab-selected': 'Polaris-Tabs__Tab--selected',
    titleWithIcon: 'Polaris-Tabs--titleWithIcon',
    Panel: 'Polaris-Tabs__Panel',
    'Panel-hidden': 'Polaris-Tabs__Panel--hidden',
    List: 'Polaris-Tabs__List',
    Item: 'Polaris-Tabs__Item',
    DisclosureTab: 'Polaris-Tabs__DisclosureTab',
    'DisclosureTab-visible': 'Polaris-Tabs__DisclosureTab--visible',
    DisclosureActivator: 'Polaris-Tabs__DisclosureActivator',
    TabMeasurer: 'Polaris-Tabs__TabMeasurer',
};

function Panel({ hidden, id, tabID, children }) {
    const className = classNames(styles$2.Panel, hidden && styles$2['Panel-hidden']);
    return /*#__PURE__*/ React.createElement(
        'div',
        {
            className: className,
            id: id,
            role: 'tabpanel',
            'aria-labelledby': tabID,
            tabIndex: -1,
        },
        children
    );
}

function Tab$1({ id, focused, siblingTabHasFocus, children, onClick, selected, url, panelID, measuring, accessibilityLabel }) {
    const wasSelected = react.exports.useRef(selected);
    const panelFocused = react.exports.useRef(false);
    const node = react.exports.useRef(null); // A tab can start selected when it is moved from the disclosure dropdown
    // into the main list, so we need to send focus from the tab to the panel
    // on mount and update

    react.exports.useEffect(() => {
        if (measuring) {
            return;
        } // Because of timing issues with the render, we may still have the old,
        // in-disclosure version of the tab that has focus. Check for this
        // as a second indicator of focus

        const itemHadFocus = focused || (document.activeElement && document.activeElement.id === id); // If we just check for selected, the panel for the active tab will
        // be focused on page load, which we don’t want

        if (itemHadFocus && selected && panelID != null && !panelFocused.current) {
            focusPanelID(panelID);
            panelFocused.current = true;
        }

        if (selected && !wasSelected.current && panelID != null) {
            focusPanelID(panelID);
        } else if (focused && node.current != null) {
            focusFirstFocusableNode(node.current);
        }

        wasSelected.current = selected;
    }, [focused, id, measuring, panelID, selected]);
    const handleClick = onClick && onClick.bind(null, id);
    const className = classNames(styles$2.Tab, selected && styles$2['Tab-selected']);
    let tabIndex;

    if (selected && !siblingTabHasFocus && !measuring) {
        tabIndex = 0;
    } else if (focused && !measuring) {
        tabIndex = 0;
    } else {
        tabIndex = -1;
    }

    const tabContainerClassNames = classNames(styles$2.TabContainer, selected && styles$2.Underline);
    const markup = url
        ? /*#__PURE__*/

          /*#__PURE__*/
          jsx(UnstyledLink, {
              id: id,
              url: url,
              role: 'tab',
              tabIndex: tabIndex,
              onClick: handleClick,
              className: className,
              'aria-selected': selected,
              'aria-controls': panelID,
              'aria-label': accessibilityLabel,
              onMouseUp: handleMouseUpByBlurring,
              children: /*#__PURE__*/ jsx('span', {
                  className: styles$2.Title,
                  children: children,
              }),
          })
        : /*#__PURE__*/

          /*#__PURE__*/
          jsx('button', {
              id: id,
              role: 'tab',
              type: 'button',
              tabIndex: tabIndex,
              className: className,
              onClick: handleClick,
              'aria-selected': selected,
              'aria-controls': panelID,
              'aria-label': accessibilityLabel,
              onMouseUp: handleMouseUpByBlurring,
              children: /*#__PURE__*/ jsx('span', {
                  className: styles$2.Title,
                  children: children,
              }),
          });
    return (
        /*#__PURE__*/

        /*#__PURE__*/
        jsx('li', {
            className: tabContainerClassNames,
            ref: node,
            role: 'presentation',
            children: markup,
        })
    );
}

function focusPanelID(panelID) {
    const panel = document.getElementById(panelID);

    if (panel) {
        panel.focus({
            preventScroll: true,
        });
    }
}

const TabMeasurer = /*#__PURE__*/ react.exports.memo(function TabMeasurer({ selected, tabs, activator, tabToFocus, siblingTabHasFocus, handleMeasurement: handleMeasurementProp }) {
    const containerNode = react.exports.useRef(null);
    const animationFrame = react.exports.useRef(null);
    const handleMeasurement = react.exports.useCallback(() => {
        if (animationFrame.current) {
            cancelAnimationFrame(animationFrame.current);
        }

        animationFrame.current = requestAnimationFrame(() => {
            if (!containerNode.current) {
                return;
            }

            const containerWidth = containerNode.current.offsetWidth;
            const hiddenTabNodes = containerNode.current.children;
            const hiddenTabNodesArray = Array.from(hiddenTabNodes);
            const hiddenTabWidths = hiddenTabNodesArray.map((node) => {
                return Math.ceil(node.getBoundingClientRect().width);
            });
            const disclosureWidth = hiddenTabWidths.pop() || 0;
            handleMeasurementProp({
                containerWidth,
                disclosureWidth,
                hiddenTabWidths,
            });
        });
    }, [handleMeasurementProp]);
    react.exports.useEffect(() => {
        handleMeasurement();
    }, [handleMeasurement, tabs]);
    useComponentDidMount(() => {});
    const tabsMarkup = tabs.map((tab, index) => {
        return (
            /*#__PURE__*/

            /*#__PURE__*/
            jsx(
                Tab$1,
                {
                    measuring: true,
                    id: `${tab.id}Measurer`,
                    siblingTabHasFocus: siblingTabHasFocus,
                    focused: index === tabToFocus,
                    selected: index === selected,
                    onClick: noop$3,
                    url: tab.url,
                    children: tab.content,
                },
                `${index}${tab.id}Hidden`
            )
        );
    });
    const classname = classNames(styles$2.Tabs, styles$2.TabMeasurer);
    return (
        /*#__PURE__*/

        /*#__PURE__*/
        jsxs('div', {
            className: classname,
            ref: containerNode,
            children: [
                /*#__PURE__*/ jsx(EventListener, {
                    event: 'resize',
                    handler: handleMeasurement,
                }),
                tabsMarkup,
                activator,
            ],
        })
    );
});

function noop$3() {}

class Item extends react.exports.PureComponent {
    constructor(...args) {
        super(...args);
        this.context = void 0;
        this.focusedNode = null;

        this.setFocusedNode = (node) => {
            this.focusedNode = node;
        };
    }

    componentDidMount() {
        const { focusedNode } = this;
        const { focused } = this.props;

        if (focusedNode && focusedNode instanceof HTMLElement && focused) {
            focusedNode.focus();
        }
    }

    componentDidUpdate() {
        const { focusedNode } = this;
        const { focused } = this.props;

        if (focusedNode && focusedNode instanceof HTMLElement && focused) {
            focusedNode.focus();
        }
    }

    render() {
        const { id, panelID, children, url, accessibilityLabel, onClick = noop$2 } = this.props;
        const classname = classNames(styles$2.Item);
        const sharedProps = {
            id,
            ref: this.setFocusedNode,
            onClick,
            className: classname,
            'aria-controls': panelID,
            'aria-selected': false,
            'aria-label': accessibilityLabel,
        };
        const markup = url
            ? /*#__PURE__*/

              /*#__PURE__*/
              jsx(UnstyledLink, {
                  ...Object.assign({}, sharedProps, {
                      url: url,
                  }),
                  children: children,
              })
            : /*#__PURE__*/

              /*#__PURE__*/
              jsx('button', {
                  ...Object.assign({}, sharedProps, {
                      type: 'button',
                  }),
                  children: children,
              });
        return (
            /*#__PURE__*/

            /*#__PURE__*/
            jsx('li', {
                children: markup,
            })
        );
    }
}

Item.contextType = FeaturesContext;

function noop$2() {}

function List({ focusIndex, disclosureTabs, onClick = noop$1, onKeyPress = noop$1 }) {
    const tabs = disclosureTabs.map(({ id, content, ...tabProps }, index) => {
        return /*#__PURE__*/ React.createElement(
            Item,
            Object.assign(
                {
                    key: id,
                },
                tabProps,
                {
                    id: id,
                    focused: index === focusIndex,
                    onClick: onClick.bind(null, id),
                }
            ),
            content
        );
    });
    return /*#__PURE__*/ React.createElement(
        'ul',
        {
            className: styles$2.List,
            onKeyDown: handleKeyDown$1,
            onKeyUp: onKeyPress,
        },
        tabs
    );
}

function noop$1() {}

function handleKeyDown$1(event) {
    const { key } = event;

    if (key === 'ArrowLeft' || key === 'ArrowRight') {
        event.preventDefault();
        event.stopPropagation();
    }
}

class TabsInner extends react.exports.PureComponent {
    constructor(...args) {
        super(...args);
        this.state = {
            disclosureWidth: 0,
            containerWidth: Infinity,
            tabWidths: [],
            visibleTabs: [],
            hiddenTabs: [],
            showDisclosure: false,
            tabToFocus: -1,
        };

        this.handleKeyPress = (event) => {
            const { tabToFocus, visibleTabs, hiddenTabs, showDisclosure } = this.state;
            const key = event.key;
            const tabsArrayInOrder = showDisclosure ? visibleTabs.concat(hiddenTabs) : [...visibleTabs];
            let newFocus = tabsArrayInOrder.indexOf(tabToFocus);

            if (key === 'ArrowRight') {
                newFocus += 1;

                if (newFocus === tabsArrayInOrder.length) {
                    newFocus = 0;
                }
            }

            if (key === 'ArrowLeft') {
                if (newFocus === -1 || newFocus === 0) {
                    newFocus = tabsArrayInOrder.length - 1;
                } else {
                    newFocus -= 1;
                }
            }

            this.setState({
                tabToFocus: tabsArrayInOrder[newFocus],
            });
        };

        this.renderTabMarkup = (tab, index) => {
            const { selected, children } = this.props;
            const { tabToFocus } = this.state;
            const tabPanelID = tab.panelID || `${tab.id}-panel`;
            return (
                /*#__PURE__*/

                /*#__PURE__*/
                jsx(
                    Tab$1,
                    {
                        id: tab.id,
                        siblingTabHasFocus: tabToFocus > -1,
                        focused: index === tabToFocus,
                        selected: index === selected,
                        onClick: this.handleTabClick,
                        panelID: children ? tabPanelID : undefined,
                        accessibilityLabel: tab.accessibilityLabel,
                        url: tab.url,
                        children: tab.content,
                    },
                    `${index}-${tab.id}`
                )
            );
        };

        this.handleFocus = (event) => {
            const { selected, tabs } = this.props; // If we are explicitly focusing a non-selected tab, this focuses it

            const target = event.target;

            if (target.classList.contains(styles$2.Tab) || target.classList.contains(styles$2.Item)) {
                let tabToFocus = -1;
                tabs.every((tab, index) => {
                    if (tab.id === target.id) {
                        tabToFocus = index;
                        return false;
                    }

                    return true;
                });
                this.setState({
                    tabToFocus,
                });
                return;
            }

            if (target.classList.contains(styles$2.DisclosureActivator)) {
                return;
            } // If we are coming in from somewhere other than another tab, focus the
            // selected tab, and the focus (click) is not on the disclosure activator,
            // focus the selected tab

            if (!event.relatedTarget) {
                this.setState({
                    tabToFocus: selected,
                });
                return;
            }

            const relatedTarget = event.relatedTarget;

            if (relatedTarget instanceof HTMLElement && !relatedTarget.classList.contains(styles$2.Tab) && !relatedTarget.classList.contains(styles$2.Item) && !relatedTarget.classList.contains(styles$2.DisclosureActivator)) {
                this.setState({
                    tabToFocus: selected,
                });
            }
        };

        this.handleBlur = (event) => {
            // If we blur and the target is not another tab, forget the focus position
            if (event.relatedTarget == null) {
                this.setState({
                    tabToFocus: -1,
                });
                return;
            }

            const target = event.relatedTarget; // If we are going to anywhere other than another tab, lose the last focused tab

            if (target instanceof HTMLElement && !target.classList.contains(styles$2.Tab) && !target.classList.contains(styles$2.Item)) {
                this.setState({
                    tabToFocus: -1,
                });
            }
        };

        this.handleDisclosureActivatorClick = () => {
            this.setState(({ showDisclosure }) => ({
                showDisclosure: !showDisclosure,
            }));
        };

        this.handleClose = () => {
            this.setState({
                showDisclosure: false,
            });
        };

        this.handleMeasurement = (measurements) => {
            const { tabs, selected } = this.props;
            const { tabToFocus } = this.state;
            const { hiddenTabWidths: tabWidths, containerWidth, disclosureWidth } = measurements;
            const { visibleTabs, hiddenTabs } = getVisibleAndHiddenTabIndices(tabs, selected, disclosureWidth, tabWidths, containerWidth);
            this.setState({
                tabToFocus: tabToFocus === -1 ? -1 : selected,
                visibleTabs,
                hiddenTabs,
                disclosureWidth,
                containerWidth,
                tabWidths,
            });
        };

        this.handleTabClick = (id) => {
            const { tabs, onSelect = noop } = this.props;
            const tab = tabs.find((aTab) => aTab.id === id);

            if (tab == null) {
                return;
            }

            const selectedIndex = tabs.indexOf(tab);
            onSelect(selectedIndex);
        };
    }

    static getDerivedStateFromProps(nextProps, prevState) {
        const { disclosureWidth, tabWidths, containerWidth } = prevState;
        const { visibleTabs, hiddenTabs } = getVisibleAndHiddenTabIndices(nextProps.tabs, nextProps.selected, disclosureWidth, tabWidths, containerWidth);
        return {
            visibleTabs,
            hiddenTabs,
            selected: nextProps.selected,
        };
    }

    render() {
        const { tabs, selected, fitted, children, i18n, disclosureText } = this.props;
        const { tabToFocus, visibleTabs, hiddenTabs, showDisclosure } = this.state;
        const disclosureTabs = hiddenTabs.map((tabIndex) => tabs[tabIndex]);
        const panelMarkup = children
            ? tabs.map((_tab, index) => {
                  return selected === index
                      ? /*#__PURE__*/

                        /*#__PURE__*/
                        jsx(
                            Panel,
                            {
                                id: tabs[index].panelID || `${tabs[index].id}-panel`,
                                tabID: tabs[index].id,
                                children: children,
                            },
                            tabs[index].id
                        )
                      : /*#__PURE__*/

                        /*#__PURE__*/
                        jsx(
                            Panel,
                            {
                                id: tabs[index].panelID || `${tabs[index].id}-panel`,
                                tabID: tabs[index].id,
                                hidden: true,
                            },
                            tabs[index].id
                        );
              })
            : null;
        const tabsMarkup = visibleTabs.sort((tabA, tabB) => tabA - tabB).map((tabIndex) => this.renderTabMarkup(tabs[tabIndex], tabIndex));
        const disclosureActivatorVisible = visibleTabs.length < tabs.length;
        const hasCustomDisclosure = Boolean(disclosureText);
        const classname = classNames(styles$2.Tabs, fitted && styles$2.fitted, disclosureActivatorVisible && styles$2.fillSpace);
        const disclosureTabClassName = classNames(styles$2.DisclosureTab, disclosureActivatorVisible && styles$2['DisclosureTab-visible']);
        const disclosureButtonClassName = classNames(styles$2.DisclosureActivator, hasCustomDisclosure && styles$2.Tab);
        const disclosureButtonContentWrapperClassName = classNames(styles$2.Title, hasCustomDisclosure && styles$2.titleWithIcon);
        const disclosureButtonContent = hasCustomDisclosure
            ? /*#__PURE__*/

              /*#__PURE__*/
              jsxs(Fragment, {
                  children: [
                      disclosureText,
                      /*#__PURE__*/ jsx(Icon, {
                          source: SvgCaretDownMinor,
                          color: 'subdued',
                      }),
                  ],
              })
            : /*#__PURE__*/

              /*#__PURE__*/
              jsx(Icon, {
                  source: SvgHorizontalDotsMinor,
                  color: 'subdued',
              });

        const disclosureButton =
            /*#__PURE__*/

            /*#__PURE__*/
            jsx('button', {
                type: 'button',
                className: disclosureButtonClassName,
                onClick: this.handleDisclosureActivatorClick,
                'aria-label': i18n.translate('Polaris.Tabs.toggleTabsLabel'),
                children: /*#__PURE__*/ jsx('span', {
                    className: disclosureButtonContentWrapperClassName,
                    children: disclosureButtonContent,
                }),
            });

        const activator = disclosureText
            ? /*#__PURE__*/

              /*#__PURE__*/
              jsx('div', {
                  className: styles$2.TabContainer,
                  children: disclosureButton,
              })
            : disclosureButton;
        return (
            /*#__PURE__*/

            /*#__PURE__*/
            jsxs('div', {
                children: [
                    /*#__PURE__*/ jsxs('div', {
                        className: styles$2.Wrapper,
                        children: [
                            /*#__PURE__*/ jsx(TabMeasurer, {
                                tabToFocus: tabToFocus,
                                activator: activator,
                                selected: selected,
                                tabs: tabs,
                                siblingTabHasFocus: tabToFocus > -1,
                                handleMeasurement: this.handleMeasurement,
                            }),
                            /*#__PURE__*/ jsxs('ul', {
                                role: 'tablist',
                                className: classname,
                                onFocus: this.handleFocus,
                                onBlur: this.handleBlur,
                                onKeyDown: handleKeyDown,
                                onKeyUp: this.handleKeyPress,
                                children: [
                                    tabsMarkup,
                                    /*#__PURE__*/ jsx('li', {
                                        className: disclosureTabClassName,
                                        role: 'presentation',
                                        children: /*#__PURE__*/ jsx(Popover, {
                                            preferredPosition: 'below',
                                            activator: activator,
                                            active: disclosureActivatorVisible && showDisclosure,
                                            onClose: this.handleClose,
                                            autofocusTarget: 'first-node',
                                            children: /*#__PURE__*/ jsx(List, {
                                                focusIndex: hiddenTabs.indexOf(tabToFocus),
                                                disclosureTabs: disclosureTabs,
                                                onClick: this.handleTabClick,
                                                onKeyPress: this.handleKeyPress,
                                            }),
                                        }),
                                    }),
                                ],
                            }),
                        ],
                    }),
                    panelMarkup,
                ],
            })
        );
    }
}

function noop() {}

function handleKeyDown(event) {
    const { key } = event;

    if (key === 'ArrowLeft' || key === 'ArrowRight') {
        event.preventDefault();
        event.stopPropagation();
    }
}

function Tabs(props) {
    const i18n = useI18n();
    return (
        /*#__PURE__*/

        /*#__PURE__*/
        jsx(TabsInner, {
            ...Object.assign({}, props, {
                i18n: i18n,
            }),
        })
    );
}

var styles$1 = {
    Thumbnail: 'Polaris-Thumbnail',
    sizeSmall: 'Polaris-Thumbnail--sizeSmall',
    sizeMedium: 'Polaris-Thumbnail--sizeMedium',
    sizeLarge: 'Polaris-Thumbnail--sizeLarge',
};

function Thumbnail({ source, alt, size = 'medium' }) {
    const className = classNames(styles$1.Thumbnail, size && styles$1[variationName('size', size)]);
    const content =
        typeof source === 'string'
            ? /*#__PURE__*/ React.createElement(Image, {
                  alt: alt,
                  source: source,
              })
            : /*#__PURE__*/ React.createElement(Icon, {
                  accessibilityLabel: alt,
                  source: source,
              });
    return /*#__PURE__*/ React.createElement(
        'span',
        {
            className: className,
        },
        content
    );
}

// that the interface defining the props is defined in this file, not imported
// from elsewhere. This silly workaround ensures that the Props Explorer table
// is generated correctly.

const Toast = /*#__PURE__*/ react.exports.memo(function Toast(props) {
    const id = useUniqueId('Toast');
    const { showToast, hideToast } = useFrame();
    useDeepEffect(() => {
        showToast({
            id,
            ...props,
        });
        return () => {
            hideToast({
                id,
            });
        };
    }, [props]);
    return null;
});

const Polaris = {
    ActionMenu: {
        Actions: {
            moreActions: 'More actions',
        },
        RollupActions: {
            rollupButton: 'View actions',
        },
    },
    Avatar: {
        label: 'Avatar',
        labelWithInitials: 'Avatar with initials {initials}',
    },
    Autocomplete: {
        spinnerAccessibilityLabel: 'Loading',
        ellipsis: '{content}…',
    },
    Badge: {
        PROGRESS_LABELS: {
            incomplete: 'Incomplete',
            partiallyComplete: 'Partially complete',
            complete: 'Complete',
        },
        STATUS_LABELS: {
            info: 'Info',
            success: 'Success',
            warning: 'Warning',
            critical: 'Critical',
            attention: 'Attention',
            new: 'New',
        },
        progressAndStatus: '{statusLabel} {progressLabel}',
    },
    Button: {
        spinnerAccessibilityLabel: 'Loading',
        connectedDisclosureAccessibilityLabel: 'Related actions',
    },
    Common: {
        checkbox: 'checkbox',
        undo: 'Undo',
        cancel: 'Cancel',
        newWindowAccessibilityHint: '(opens a new window)',
        clear: 'Clear',
        close: 'Close',
        submit: 'Submit',
        more: 'More',
    },
    ContextualSaveBar: {
        save: 'Save',
        discard: 'Discard',
    },
    DataTable: {
        sortAccessibilityLabel: 'sort {direction} by',
        navAccessibilityLabel: 'Scroll table {direction} one column',
        totalsRowHeading: 'Totals',
        totalRowHeading: 'Total',
    },
    DatePicker: {
        previousMonth: 'Show previous month, {previousMonthName} {showPreviousYear}',
        nextMonth: 'Show next month, {nextMonth} {nextYear}',
        today: 'Today ',
        start: 'Start of range',
        end: 'End of range',
        months: {
            january: 'January',
            february: 'February',
            march: 'March',
            april: 'April',
            may: 'May',
            june: 'June',
            july: 'July',
            august: 'August',
            september: 'September',
            october: 'October',
            november: 'November',
            december: 'December',
        },
        days: {
            monday: 'Monday',
            tuesday: 'Tuesday',
            wednesday: 'Wednesday',
            thursday: 'Thursday',
            friday: 'Friday',
            saturday: 'Saturday',
            sunday: 'Sunday',
        },
        daysAbbreviated: {
            monday: 'Mo',
            tuesday: 'Tu',
            wednesday: 'We',
            thursday: 'Th',
            friday: 'Fr',
            saturday: 'Sa',
            sunday: 'Su',
        },
    },
    DiscardConfirmationModal: {
        title: 'Discard all unsaved changes',
        message: 'If you discard changes, you’ll delete any edits you made since you last saved.',
        primaryAction: 'Discard changes',
        secondaryAction: 'Continue editing',
    },
    DropZone: {
        single: {
            overlayTextFile: 'Drop file to upload',
            overlayTextImage: 'Drop image to upload',
            actionTitleFile: 'Add file',
            actionTitleImage: 'Add image',
            actionHintFile: 'or drop file to upload',
            actionHintImage: 'or drop image to upload',
            labelFile: 'Upload file',
            labelImage: 'Upload image',
        },
        allowMultiple: {
            overlayTextFile: 'Drop files to upload',
            overlayTextImage: 'Drop images to upload',
            actionTitleFile: 'Add files',
            actionTitleImage: 'Add images',
            actionHintFile: 'or drop files to upload',
            actionHintImage: 'or drop images to upload',
            labelFile: 'Upload files',
            labelImage: 'Upload images',
        },
        errorOverlayTextFile: 'File type is not valid',
        errorOverlayTextImage: 'Image type is not valid',
    },
    EmptySearchResult: {
        altText: 'Empty search results',
    },
    Frame: {
        skipToContent: 'Skip to content',
        navigationLabel: 'Navigation',
        Navigation: {
            closeMobileNavigationLabel: 'Close navigation',
        },
    },
    Filters: {
        moreFilters: 'More filters',
        moreFiltersWithCount: 'More filters ({count})',
        filter: 'Filter {resourceName}',
        noFiltersApplied: 'No filters applied',
        cancel: 'Cancel',
        done: 'Done',
        clearAllFilters: 'Clear all filters',
        clear: 'Clear',
        clearLabel: 'Clear {filterName}',
    },
    IndexProvider: {
        defaultItemSingular: 'Item',
        defaultItemPlural: 'Items',
        allItemsSelected: 'All {itemsLength}+ {resourceNamePlural} are selected.',
        selected: '{selectedItemsCount} selected',
        a11yCheckboxDeselectAllSingle: 'Deselect {resourceNameSingular}',
        a11yCheckboxSelectAllSingle: 'Select {resourceNameSingular}',
        a11yCheckboxDeselectAllMultiple: 'Deselect all {itemsLength} {resourceNamePlural}',
        a11yCheckboxSelectAllMultiple: 'Select all {itemsLength} {resourceNamePlural}',
    },
    IndexTable: {
        emptySearchTitle: 'No {resourceNamePlural} found',
        emptySearchDescription: 'Try changing the filters or search term',
        onboardingBadgeText: 'New',
        resourceLoadingAccessibilityLabel: 'Loading {resourceNamePlural}…',
        selectAllLabel: 'Select all {resourceNamePlural}',
        selected: '{selectedItemsCount} selected',
        undo: 'Undo',
        selectAllItems: 'Select all {itemsLength}+ {resourceNamePlural}',
        selectItem: 'Select {resourceName}',
        selectButtonText: 'Select',
    },
    Loading: {
        label: 'Page loading bar',
    },
    Modal: {
        iFrameTitle: 'body markup',
        modalWarning: 'These required properties are missing from Modal: {missingProps}',
    },
    Page: {
        Header: {
            rollupActionsLabel: 'View actions for {title}',
        },
    },
    Pagination: {
        previous: 'Previous',
        next: 'Next',
        pagination: 'Pagination',
    },
    ProgressBar: {
        negativeWarningMessage: 'Values passed to the progress prop shouldn’t be negative. Resetting {progress} to 0.',
        exceedWarningMessage: 'Values passed to the progress prop shouldn’t exceed 100. Setting {progress} to 100.',
    },
    ResourceList: {
        sortingLabel: 'Sort by',
        defaultItemSingular: 'item',
        defaultItemPlural: 'items',
        showing: 'Showing {itemsCount} {resource}',
        showingTotalCount: 'Showing {itemsCount} of {totalItemsCount} {resource}',
        loading: 'Loading {resource}',
        selected: '{selectedItemsCount} selected',
        allItemsSelected: 'All {itemsLength}+ {resourceNamePlural} in your store are selected.',
        allFilteredItemsSelected: 'All {itemsLength}+ {resourceNamePlural} in this filter are selected.',
        selectAllItems: 'Select all {itemsLength}+ {resourceNamePlural} in your store',
        selectAllFilteredItems: 'Select all {itemsLength}+ {resourceNamePlural} in this filter',
        emptySearchResultTitle: 'No {resourceNamePlural} found',
        emptySearchResultDescription: 'Try changing the filters or search term',
        selectButtonText: 'Select',
        a11yCheckboxDeselectAllSingle: 'Deselect {resourceNameSingular}',
        a11yCheckboxSelectAllSingle: 'Select {resourceNameSingular}',
        a11yCheckboxDeselectAllMultiple: 'Deselect all {itemsLength} {resourceNamePlural}',
        a11yCheckboxSelectAllMultiple: 'Select all {itemsLength} {resourceNamePlural}',
        ariaLiveSingular: '{itemsLength} item',
        ariaLivePlural: '{itemsLength} items',
        Item: {
            actionsDropdownLabel: 'Actions for {accessibilityLabel}',
            actionsDropdown: 'Actions dropdown',
            viewItem: 'View details for {itemName}',
        },
        BulkActions: {
            actionsActivatorLabel: 'Actions',
            moreActionsActivatorLabel: 'More actions',
            warningMessage: 'To provide a better user experience. There should only be a maximum of {maxPromotedActions} promoted actions.',
        },
    },
    SkeletonPage: {
        loadingLabel: 'Page loading',
    },
    Tabs: {
        toggleTabsLabel: 'More tabs',
    },
    Tag: {
        ariaLabel: 'Remove {children}',
    },
    TextField: {
        characterCount: '{count} characters',
        characterCountWithMaxLength: '{count} of {limit} characters used',
    },
    TooltipOverlay: {
        accessibilityLabel: 'Tooltip: {label}',
    },
    TopBar: {
        toggleMenuLabel: 'Toggle menu',
        SearchField: {
            clearButtonLabel: 'Clear',
            search: 'Search',
        },
    },
    MediaCard: {
        popoverButton: 'Actions',
    },
    VideoThumbnail: {
        playButtonA11yLabel: {
            default: 'Play video',
            defaultWithDuration: 'Play video of length {duration}',
            duration: {
                hours: {
                    other: {
                        only: '{hourCount} hours',
                        andMinutes: '{hourCount} hours and {minuteCount} minutes',
                        andMinute: '{hourCount} hours and {minuteCount} minute',
                        minutesAndSeconds: '{hourCount} hours, {minuteCount} minutes, and {secondCount} seconds',
                        minutesAndSecond: '{hourCount} hours, {minuteCount} minutes, and {secondCount} second',
                        minuteAndSeconds: '{hourCount} hours, {minuteCount} minute, and {secondCount} seconds',
                        minuteAndSecond: '{hourCount} hours, {minuteCount} minute, and {secondCount} second',
                        andSeconds: '{hourCount} hours and {secondCount} seconds',
                        andSecond: '{hourCount} hours and {secondCount} second',
                    },
                    one: {
                        only: '{hourCount} hour',
                        andMinutes: '{hourCount} hour and {minuteCount} minutes',
                        andMinute: '{hourCount} hour and {minuteCount} minute',
                        minutesAndSeconds: '{hourCount} hour, {minuteCount} minutes, and {secondCount} seconds',
                        minutesAndSecond: '{hourCount} hour, {minuteCount} minutes, and {secondCount} second',
                        minuteAndSeconds: '{hourCount} hour, {minuteCount} minute, and {secondCount} seconds',
                        minuteAndSecond: '{hourCount} hour, {minuteCount} minute, and {secondCount} second',
                        andSeconds: '{hourCount} hour and {secondCount} seconds',
                        andSecond: '{hourCount} hour and {secondCount} second',
                    },
                },
                minutes: {
                    other: {
                        only: '{minuteCount} minutes',
                        andSeconds: '{minuteCount} minutes and {secondCount} seconds',
                        andSecond: '{minuteCount} minutes and {secondCount} second',
                    },
                    one: {
                        only: '{minuteCount} minute',
                        andSeconds: '{minuteCount} minute and {secondCount} seconds',
                        andSecond: '{minuteCount} minute and {secondCount} second',
                    },
                },
                seconds: {
                    other: '{secondCount} seconds',
                    one: '{secondCount} second',
                },
            },
        },
    },
};
var translations = {
    Polaris: Polaris,
};

var styles = '';

/**
 * Actions represent the type of change to a location value.
 *
 * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#action
 */
var Action;

(function (Action) {
    /**
     * A POP indicates a change to an arbitrary index in the history stack, such
     * as a back or forward navigation. It does not describe the direction of the
     * navigation, only that the current index changed.
     *
     * Note: This is the default action for newly created history objects.
     */
    Action['Pop'] = 'POP';
    /**
     * A PUSH indicates a new entry being added to the history stack, such as when
     * a link is clicked and a new page loads. When this happens, all subsequent
     * entries in the stack are lost.
     */

    Action['Push'] = 'PUSH';
    /**
     * A REPLACE indicates the entry at the current index in the history stack
     * being replaced by a new one.
     */

    Action['Replace'] = 'REPLACE';
})(Action || (Action = {}));

var readOnly = function (obj) {
    return obj;
};

var BeforeUnloadEventType = 'beforeunload';
var PopStateEventType = 'popstate';
/**
 * Browser history stores the location in regular URLs. This is the standard for
 * most web apps, but it requires some configuration on the server to ensure you
 * serve the same app at multiple URLs.
 *
 * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory
 */

function createBrowserHistory(options) {
    if (options === void 0) {
        options = {};
    }

    var _options = options,
        _options$window = _options.window,
        window = _options$window === void 0 ? document.defaultView : _options$window;
    var globalHistory = window.history;

    function getIndexAndLocation() {
        var _window$location = window.location,
            pathname = _window$location.pathname,
            search = _window$location.search,
            hash = _window$location.hash;
        var state = globalHistory.state || {};
        return [
            state.idx,
            readOnly({
                pathname: pathname,
                search: search,
                hash: hash,
                state: state.usr || null,
                key: state.key || 'default',
            }),
        ];
    }

    var blockedPopTx = null;

    function handlePop() {
        if (blockedPopTx) {
            blockers.call(blockedPopTx);
            blockedPopTx = null;
        } else {
            var nextAction = Action.Pop;

            var _getIndexAndLocation = getIndexAndLocation(),
                nextIndex = _getIndexAndLocation[0],
                nextLocation = _getIndexAndLocation[1];

            if (blockers.length) {
                if (nextIndex != null) {
                    var delta = index - nextIndex;

                    if (delta) {
                        // Revert the POP
                        blockedPopTx = {
                            action: nextAction,
                            location: nextLocation,
                            retry: function retry() {
                                go(delta * -1);
                            },
                        };
                        go(delta);
                    }
                }
            } else {
                applyTx(nextAction);
            }
        }
    }

    window.addEventListener(PopStateEventType, handlePop);
    var action = Action.Pop;

    var _getIndexAndLocation2 = getIndexAndLocation(),
        index = _getIndexAndLocation2[0],
        location = _getIndexAndLocation2[1];

    var listeners = createEvents();
    var blockers = createEvents();

    if (index == null) {
        index = 0;
        globalHistory.replaceState(
            _extends({}, globalHistory.state, {
                idx: index,
            }),
            ''
        );
    }

    function createHref(to) {
        return typeof to === 'string' ? to : createPath(to);
    } // state defaults to `null` because `window.history.state` does

    function getNextLocation(to, state) {
        if (state === void 0) {
            state = null;
        }

        return readOnly(
            _extends(
                {
                    pathname: location.pathname,
                    hash: '',
                    search: '',
                },
                typeof to === 'string' ? parsePath(to) : to,
                {
                    state: state,
                    key: createKey(),
                }
            )
        );
    }

    function getHistoryStateAndUrl(nextLocation, index) {
        return [
            {
                usr: nextLocation.state,
                key: nextLocation.key,
                idx: index,
            },
            createHref(nextLocation),
        ];
    }

    function allowTx(action, location, retry) {
        return (
            !blockers.length ||
            (blockers.call({
                action: action,
                location: location,
                retry: retry,
            }),
            false)
        );
    }

    function applyTx(nextAction) {
        action = nextAction;

        var _getIndexAndLocation3 = getIndexAndLocation();

        index = _getIndexAndLocation3[0];
        location = _getIndexAndLocation3[1];
        listeners.call({
            action: action,
            location: location,
        });
    }

    function push(to, state) {
        var nextAction = Action.Push;
        var nextLocation = getNextLocation(to, state);

        function retry() {
            push(to, state);
        }

        if (allowTx(nextAction, nextLocation, retry)) {
            var _getHistoryStateAndUr = getHistoryStateAndUrl(nextLocation, index + 1),
                historyState = _getHistoryStateAndUr[0],
                url = _getHistoryStateAndUr[1]; // TODO: Support forced reloading
            // try...catch because iOS limits us to 100 pushState calls :/

            try {
                globalHistory.pushState(historyState, '', url);
            } catch (error) {
                // They are going to lose state here, but there is no real
                // way to warn them about it since the page will refresh...
                window.location.assign(url);
            }

            applyTx(nextAction);
        }
    }

    function replace(to, state) {
        var nextAction = Action.Replace;
        var nextLocation = getNextLocation(to, state);

        function retry() {
            replace(to, state);
        }

        if (allowTx(nextAction, nextLocation, retry)) {
            var _getHistoryStateAndUr2 = getHistoryStateAndUrl(nextLocation, index),
                historyState = _getHistoryStateAndUr2[0],
                url = _getHistoryStateAndUr2[1]; // TODO: Support forced reloading

            globalHistory.replaceState(historyState, '', url);
            applyTx(nextAction);
        }
    }

    function go(delta) {
        globalHistory.go(delta);
    }

    var history = {
        get action() {
            return action;
        },

        get location() {
            return location;
        },

        createHref: createHref,
        push: push,
        replace: replace,
        go: go,
        back: function back() {
            go(-1);
        },
        forward: function forward() {
            go(1);
        },
        listen: function listen(listener) {
            return listeners.push(listener);
        },
        block: function block(blocker) {
            var unblock = blockers.push(blocker);

            if (blockers.length === 1) {
                window.addEventListener(BeforeUnloadEventType, promptBeforeUnload);
            }

            return function () {
                unblock(); // Remove the beforeunload listener so the document may
                // still be salvageable in the pagehide event.
                // See https://html.spec.whatwg.org/#unloading-documents

                if (!blockers.length) {
                    window.removeEventListener(BeforeUnloadEventType, promptBeforeUnload);
                }
            };
        },
    };
    return history;
}

function promptBeforeUnload(event) {
    // Cancel the event.
    event.preventDefault(); // Chrome (and legacy IE) requires returnValue to be set.

    event.returnValue = '';
}

function createEvents() {
    var handlers = [];
    return {
        get length() {
            return handlers.length;
        },

        push: function push(fn) {
            handlers.push(fn);
            return function () {
                handlers = handlers.filter(function (handler) {
                    return handler !== fn;
                });
            };
        },
        call: function call(arg) {
            handlers.forEach(function (fn) {
                return fn && fn(arg);
            });
        },
    };
}

function createKey() {
    return Math.random().toString(36).substr(2, 8);
}
/**
 * Creates a string URL path from the given pathname, search, and hash components.
 *
 * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createpath
 */

function createPath(_ref) {
    var _ref$pathname = _ref.pathname,
        pathname = _ref$pathname === void 0 ? '/' : _ref$pathname,
        _ref$search = _ref.search,
        search = _ref$search === void 0 ? '' : _ref$search,
        _ref$hash = _ref.hash,
        hash = _ref$hash === void 0 ? '' : _ref$hash;
    if (search && search !== '?') pathname += search.charAt(0) === '?' ? search : '?' + search;
    if (hash && hash !== '#') pathname += hash.charAt(0) === '#' ? hash : '#' + hash;
    return pathname;
}
/**
 * Parses a string URL path into its separate pathname, search, and hash components.
 *
 * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#parsepath
 */

function parsePath(path) {
    var parsedPath = {};

    if (path) {
        var hashIndex = path.indexOf('#');

        if (hashIndex >= 0) {
            parsedPath.hash = path.substr(hashIndex);
            path = path.substr(0, hashIndex);
        }

        var searchIndex = path.indexOf('?');

        if (searchIndex >= 0) {
            parsedPath.search = path.substr(searchIndex);
            path = path.substr(0, searchIndex);
        }

        if (path) {
            parsedPath.pathname = path;
        }
    }

    return parsedPath;
}

/**
 * React Router v6.3.0
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */

const NavigationContext = /*#__PURE__*/ react.exports.createContext(null);

const LocationContext = /*#__PURE__*/ react.exports.createContext(null);

const RouteContext = /*#__PURE__*/ react.exports.createContext({
    outlet: null,
    matches: [],
});

function invariant(cond, message) {
    if (!cond) throw new Error(message);
}
/**
 * A RouteMatch contains info about how a route matched a URL.
 */

/**
 * Matches the given routes to a location and returns the match data.
 *
 * @see https://reactrouter.com/docs/en/v6/api#matchroutes
 */
function matchRoutes(routes, locationArg, basename) {
    if (basename === void 0) {
        basename = '/';
    }

    let location = typeof locationArg === 'string' ? parsePath(locationArg) : locationArg;
    let pathname = stripBasename(location.pathname || '/', basename);

    if (pathname == null) {
        return null;
    }

    let branches = flattenRoutes(routes);
    rankRouteBranches(branches);
    let matches = null;

    for (let i = 0; matches == null && i < branches.length; ++i) {
        matches = matchRouteBranch(branches[i], pathname);
    }

    return matches;
}

function flattenRoutes(routes, branches, parentsMeta, parentPath) {
    if (branches === void 0) {
        branches = [];
    }

    if (parentsMeta === void 0) {
        parentsMeta = [];
    }

    if (parentPath === void 0) {
        parentPath = '';
    }

    routes.forEach((route, index) => {
        let meta = {
            relativePath: route.path || '',
            caseSensitive: route.caseSensitive === true,
            childrenIndex: index,
            route,
        };

        if (meta.relativePath.startsWith('/')) {
            !meta.relativePath.startsWith(parentPath) ? invariant(false) : void 0;
            meta.relativePath = meta.relativePath.slice(parentPath.length);
        }

        let path = joinPaths([parentPath, meta.relativePath]);
        let routesMeta = parentsMeta.concat(meta); // Add the children before adding this route to the array so we traverse the
        // route tree depth-first and child routes appear before their parents in
        // the "flattened" version.

        if (route.children && route.children.length > 0) {
            !(route.index !== true) ? invariant(false) : void 0;
            flattenRoutes(route.children, branches, routesMeta, path);
        } // Routes without a path shouldn't ever match by themselves unless they are
        // index routes, so don't add them to the list of possible branches.

        if (route.path == null && !route.index) {
            return;
        }

        branches.push({
            path,
            score: computeScore(path, route.index),
            routesMeta,
        });
    });
    return branches;
}

function rankRouteBranches(branches) {
    branches.sort((a, b) =>
        a.score !== b.score
            ? b.score - a.score // Higher score first
            : compareIndexes(
                  a.routesMeta.map((meta) => meta.childrenIndex),
                  b.routesMeta.map((meta) => meta.childrenIndex)
              )
    );
}

const paramRe = /^:\w+$/;
const dynamicSegmentValue = 3;
const indexRouteValue = 2;
const emptySegmentValue = 1;
const staticSegmentValue = 10;
const splatPenalty = -2;

const isSplat = (s) => s === '*';

function computeScore(path, index) {
    let segments = path.split('/');
    let initialScore = segments.length;

    if (segments.some(isSplat)) {
        initialScore += splatPenalty;
    }

    if (index) {
        initialScore += indexRouteValue;
    }

    return segments.filter((s) => !isSplat(s)).reduce((score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === '' ? emptySegmentValue : staticSegmentValue), initialScore);
}

function compareIndexes(a, b) {
    let siblings = a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);
    return siblings // If two routes are siblings, we should try to match the earlier sibling
        ? // first. This allows people to have fine-grained control over the matching
          // behavior by simply putting routes with identical paths in the order they
          // want them tried.
          a[a.length - 1] - b[b.length - 1] // Otherwise, it doesn't really make sense to rank non-siblings by index,
        : // so they sort equally.
          0;
}

function matchRouteBranch(branch, pathname) {
    let { routesMeta } = branch;
    let matchedParams = {};
    let matchedPathname = '/';
    let matches = [];

    for (let i = 0; i < routesMeta.length; ++i) {
        let meta = routesMeta[i];
        let end = i === routesMeta.length - 1;
        let remainingPathname = matchedPathname === '/' ? pathname : pathname.slice(matchedPathname.length) || '/';
        let match = matchPath(
            {
                path: meta.relativePath,
                caseSensitive: meta.caseSensitive,
                end,
            },
            remainingPathname
        );
        if (!match) return null;
        Object.assign(matchedParams, match.params);
        let route = meta.route;
        matches.push({
            params: matchedParams,
            pathname: joinPaths([matchedPathname, match.pathname]),
            pathnameBase: normalizePathname(joinPaths([matchedPathname, match.pathnameBase])),
            route,
        });

        if (match.pathnameBase !== '/') {
            matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);
        }
    }

    return matches;
}
/**
 * A PathPattern is used to match on some portion of a URL pathname.
 */

/**
 * Performs pattern matching on a URL pathname and returns information about
 * the match.
 *
 * @see https://reactrouter.com/docs/en/v6/api#matchpath
 */
function matchPath(pattern, pathname) {
    if (typeof pattern === 'string') {
        pattern = {
            path: pattern,
            caseSensitive: false,
            end: true,
        };
    }

    let [matcher, paramNames] = compilePath(pattern.path, pattern.caseSensitive, pattern.end);
    let match = pathname.match(matcher);
    if (!match) return null;
    let matchedPathname = match[0];
    let pathnameBase = matchedPathname.replace(/(.)\/+$/, '$1');
    let captureGroups = match.slice(1);
    let params = paramNames.reduce((memo, paramName, index) => {
        // We need to compute the pathnameBase here using the raw splat value
        // instead of using params["*"] later because it will be decoded then
        if (paramName === '*') {
            let splatValue = captureGroups[index] || '';
            pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\/+$/, '$1');
        }

        memo[paramName] = safelyDecodeURIComponent(captureGroups[index] || '');
        return memo;
    }, {});
    return {
        params,
        pathname: matchedPathname,
        pathnameBase,
        pattern,
    };
}

function compilePath(path, caseSensitive, end) {
    if (caseSensitive === void 0) {
        caseSensitive = false;
    }

    if (end === void 0) {
        end = true;
    }
    let paramNames = [];
    let regexpSource =
        '^' +
        path
            .replace(/\/*\*?$/, '') // Ignore trailing / and /*, we'll handle it below
            .replace(/^\/*/, '/') // Make sure it has a leading /
            .replace(/[\\.*+^$?{}|()[\]]/g, '\\$&') // Escape special regex chars
            .replace(/:(\w+)/g, (_, paramName) => {
                paramNames.push(paramName);
                return '([^\\/]+)';
            });

    if (path.endsWith('*')) {
        paramNames.push('*');
        regexpSource +=
            path === '*' || path === '/*'
                ? '(.*)$' // Already matched the initial /, just match the rest
                : '(?:\\/(.+)|\\/*)$'; // Don't include the / in params["*"]
    } else {
        regexpSource += end
            ? '\\/*$' // When matching to the end, ignore trailing slashes
            : // Otherwise, match a word boundary or a proceeding /. The word boundary restricts
              // parent routes to matching only their own words and nothing more, e.g. parent
              // route "/home" should not match "/home2".
              // Additionally, allow paths starting with `.`, `-`, `~`, and url-encoded entities,
              // but do not consume the character in the matched path so they can match against
              // nested paths.
              '(?:(?=[.~-]|%[0-9A-F]{2})|\\b|\\/|$)';
    }

    let matcher = new RegExp(regexpSource, caseSensitive ? undefined : 'i');
    return [matcher, paramNames];
}

function safelyDecodeURIComponent(value, paramName) {
    try {
        return decodeURIComponent(value);
    } catch (error) {
        return value;
    }
}
function stripBasename(pathname, basename) {
    if (basename === '/') return pathname;

    if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {
        return null;
    }

    let nextChar = pathname.charAt(basename.length);

    if (nextChar && nextChar !== '/') {
        // pathname does not start with basename/
        return null;
    }

    return pathname.slice(basename.length) || '/';
}
const joinPaths = (paths) => paths.join('/').replace(/\/\/+/g, '/');
const normalizePathname = (pathname) => pathname.replace(/\/+$/, '').replace(/^\/*/, '/');
/**
 * Returns true if this component is a descendant of a <Router>.
 *
 * @see https://reactrouter.com/docs/en/v6/api#useinroutercontext
 */

function useInRouterContext() {
    return react.exports.useContext(LocationContext) != null;
}
/**
 * Returns the current location object, which represents the current URL in web
 * browsers.
 *
 * Note: If you're using this it may mean you're doing some of your own
 * "routing" in your app, and we'd like to know what your use case is. We may
 * be able to provide something higher-level to better suit your needs.
 *
 * @see https://reactrouter.com/docs/en/v6/api#uselocation
 */

function useLocation() {
    !useInRouterContext() ? invariant(false) : void 0;
    return react.exports.useContext(LocationContext).location;
}
/**
 * Returns the element of the route that matched the current location, prepared
 * with the correct context to render the remainder of the route tree. Route
 * elements in the tree must render an <Outlet> to render their child route's
 * element.
 *
 * @see https://reactrouter.com/docs/en/v6/api#useroutes
 */

function useRoutes(routes, locationArg) {
    !useInRouterContext() ? invariant(false) : void 0;
    let { matches: parentMatches } = react.exports.useContext(RouteContext);
    let routeMatch = parentMatches[parentMatches.length - 1];
    let parentParams = routeMatch ? routeMatch.params : {};
    routeMatch ? routeMatch.pathname : '/';
    let parentPathnameBase = routeMatch ? routeMatch.pathnameBase : '/';
    routeMatch && routeMatch.route;

    let locationFromContext = useLocation();
    let location;

    if (locationArg) {
        var _parsedLocationArg$pa;

        let parsedLocationArg = typeof locationArg === 'string' ? parsePath(locationArg) : locationArg;
        !(parentPathnameBase === '/' || ((_parsedLocationArg$pa = parsedLocationArg.pathname) == null ? void 0 : _parsedLocationArg$pa.startsWith(parentPathnameBase))) ? invariant(false) : void 0;
        location = parsedLocationArg;
    } else {
        location = locationFromContext;
    }

    let pathname = location.pathname || '/';
    let remainingPathname = parentPathnameBase === '/' ? pathname : pathname.slice(parentPathnameBase.length) || '/';
    let matches = matchRoutes(routes, {
        pathname: remainingPathname,
    });

    return _renderMatches(
        matches &&
            matches.map((match) =>
                Object.assign({}, match, {
                    params: Object.assign({}, parentParams, match.params),
                    pathname: joinPaths([parentPathnameBase, match.pathname]),
                    pathnameBase: match.pathnameBase === '/' ? parentPathnameBase : joinPaths([parentPathnameBase, match.pathnameBase]),
                })
            ),
        parentMatches
    );
}
function _renderMatches(matches, parentMatches) {
    if (parentMatches === void 0) {
        parentMatches = [];
    }

    if (matches == null) return null;
    return matches.reduceRight((outlet, match, index) => {
        return /*#__PURE__*/ react.exports.createElement(RouteContext.Provider, {
            children: match.route.element !== undefined ? match.route.element : outlet,
            value: {
                outlet,
                matches: parentMatches.concat(matches.slice(0, index + 1)),
            },
        });
    }, null);
}

/**
 * Declares an element that should be rendered at a certain URL path.
 *
 * @see https://reactrouter.com/docs/en/v6/api#route
 */
function Route(_props) {
    invariant(false);
}

/**
 * Provides location context for the rest of the app.
 *
 * Note: You usually won't render a <Router> directly. Instead, you'll render a
 * router that is more specific to your environment such as a <BrowserRouter>
 * in web browsers or a <StaticRouter> for server rendering.
 *
 * @see https://reactrouter.com/docs/en/v6/api#router
 */
function Router(_ref3) {
    let { basename: basenameProp = '/', children = null, location: locationProp, navigationType = Action.Pop, navigator, static: staticProp = false } = _ref3;
    !!useInRouterContext() ? invariant(false) : void 0;
    let basename = normalizePathname(basenameProp);
    let navigationContext = react.exports.useMemo(
        () => ({
            basename,
            navigator,
            static: staticProp,
        }),
        [basename, navigator, staticProp]
    );

    if (typeof locationProp === 'string') {
        locationProp = parsePath(locationProp);
    }

    let { pathname = '/', search = '', hash = '', state = null, key = 'default' } = locationProp;
    let location = react.exports.useMemo(() => {
        let trailingPathname = stripBasename(pathname, basename);

        if (trailingPathname == null) {
            return null;
        }

        return {
            pathname: trailingPathname,
            search,
            hash,
            state,
            key,
        };
    }, [basename, pathname, search, hash, state, key]);

    if (location == null) {
        return null;
    }

    return /*#__PURE__*/ react.exports.createElement(
        NavigationContext.Provider,
        {
            value: navigationContext,
        },
        /*#__PURE__*/ react.exports.createElement(LocationContext.Provider, {
            children: children,
            value: {
                location,
                navigationType,
            },
        })
    );
}

/**
 * A container for a nested tree of <Route> elements that renders the branch
 * that best matches the current location.
 *
 * @see https://reactrouter.com/docs/en/v6/api#routes
 */
function Routes(_ref4) {
    let { children, location } = _ref4;
    return useRoutes(createRoutesFromChildren(children), location);
} ///////////////////////////////////////////////////////////////////////////////
// UTILS
///////////////////////////////////////////////////////////////////////////////

/**
 * Creates a route config from a React "children" object, which is usually
 * either a `<Route>` element or an array of them. Used internally by
 * `<Routes>` to create a route config from its children.
 *
 * @see https://reactrouter.com/docs/en/v6/api#createroutesfromchildren
 */

function createRoutesFromChildren(children) {
    let routes = [];
    react.exports.Children.forEach(children, (element) => {
        if (!(/*#__PURE__*/ react.exports.isValidElement(element))) {
            // Ignore non-elements. This allows people to more easily inline
            // conditionals in their route config.
            return;
        }

        if (element.type === react.exports.Fragment) {
            // Transparently support React.Fragment and its children.
            routes.push.apply(routes, createRoutesFromChildren(element.props.children));
            return;
        }

        !(element.type === Route) ? invariant(false) : void 0;
        let route = {
            caseSensitive: element.props.caseSensitive,
            element: element.props.element,
            index: element.props.index,
            path: element.props.path,
        };

        if (element.props.children) {
            route.children = createRoutesFromChildren(element.props.children);
        }

        routes.push(route);
    });
    return routes;
}

/**
 * React Router DOM v6.3.0
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */
// COMPONENTS
////////////////////////////////////////////////////////////////////////////////

/**
 * A `<Router>` for use in web browsers. Provides the cleanest URLs.
 */
function BrowserRouter(_ref) {
    let { basename, children, window } = _ref;
    let historyRef = react.exports.useRef();

    if (historyRef.current == null) {
        historyRef.current = createBrowserHistory({
            window,
        });
    }

    let history = historyRef.current;
    let [state, setState] = react.exports.useState({
        action: history.action,
        location: history.location,
    });
    react.exports.useLayoutEffect(() => history.listen(setState), [history]);
    return /*#__PURE__*/ react.exports.createElement(Router, {
        basename: basename,
        children: children,
        location: state.location,
        navigationType: state.action,
        navigator: history,
    });
}

var serviceImage = '/assets/maintenance.35f97dd1.png';

function ServiceUnavailable() {
    return /* @__PURE__ */ jsx('img', {
        alt: '',
        width: '100%',
        height: '100%',
        style: {
            objectFit: 'cover',
            objectPosition: 'center',
        },
        src: serviceImage,
    });
}

var main = '';

function Loading() {
    return /* @__PURE__ */ jsx(SkeletonPage, {
        children: /* @__PURE__ */ jsx(Layout, {
            children: /* @__PURE__ */ jsx(Layout.Section, {
                children: /* @__PURE__ */ jsx(Card, {
                    sectioned: true,
                    children: /* @__PURE__ */ jsxs(TextContainer, {
                        children: [
                            /* @__PURE__ */ jsx(SkeletonDisplayText, {
                                size: 'small',
                            }),
                            /* @__PURE__ */ jsx(SkeletonBodyText, {
                                lines: 9,
                            }),
                        ],
                    }),
                }),
            }),
        }),
    });
}

function Profile() {
    const app = appBridgeReact.useAppBridge();
    const fetch = userLoggedInFetch(app);
    const [loading, setLoading] = react.exports.useState(true);
    const [sendLoading, setSendLoading] = react.exports.useState(false);
    const [loadingPage, setLoadingPage] = react.exports.useState(true);
    const [activeToast, setActiveToast] = react.exports.useState(false);
    const [toastContent, setToastContent] = react.exports.useState({
        data: '',
        error: false,
    });
    const toggleActive = react.exports.useCallback(() => setActiveToast((activeToast2) => !activeToast2), []);
    const toastMarkup = activeToast
        ? /* @__PURE__ */ jsx(Toast, {
              content: toastContent.data,
              error: toastContent.error,
              onDismiss: toggleActive,
          })
        : null;
    const getUrlList = async () => {
        setLoading(true);
        const response = await fetch('/profile-info').then((res) => res.json());
        if (response?.selectedMail) {
            setEmailMessage(response.selectedMail);
        }
        setResultStoreId(response.storeId);
        setResultCountry(response.country_name);
        setResultCity(response.address1);
        setResultFirstName(response.first_name);
        setResultSurname(response.last_name);
        setLoading(false);
        setLoadingPage(false);
    };
    const upsertEmail = async () => {
        setSendLoading(true);
        try {
            const response = await fetch('/user-mail', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    email: emailMessage,
                }),
            });
            const jsonValue = await response.json();
            setToastContent({
                data: jsonValue.data,
                error: !response.ok,
            });
            setActiveToast(true);
        } catch (e) {
            console.log(e);
            setToastContent('error');
            setActiveToast(true);
        }
        setSendLoading(false);
        await getUrlList();
    };
    const [emailMessage, setEmailMessage] = react.exports.useState(getUrlList);
    const [resultStoreId, setResultStoreId] = react.exports.useState('');
    const [resultCity, setResultCity] = react.exports.useState('');
    const [resultCountry, setResultCountry] = react.exports.useState('');
    const [resultFirstName, setResultFirstName] = react.exports.useState('');
    const [resultSurname, setResultSurname] = react.exports.useState('');
    const handleEmailChange = react.exports.useCallback((value) => setEmailMessage(value), []);
    return /* @__PURE__ */ jsxs(Page, {
        fullWidth: true,
        title: 'Profile',
        children: [
            toastMarkup,
            loadingPage
                ? /* @__PURE__ */ jsx(Loading, {})
                : /* @__PURE__ */ jsxs('div', {
                      children: [
                          /* @__PURE__ */ jsxs(Layout, {
                              children: [
                                  /* @__PURE__ */ jsx(Layout.Section, {
                                      oneThird: true,
                                      children: /* @__PURE__ */ jsx(Card, {
                                          children: /* @__PURE__ */ jsx(ResourceList, {
                                              resourceName: {
                                                  singular: 'customer',
                                                  plural: 'customers',
                                              },
                                              items: [
                                                  {
                                                      id: 1,
                                                  },
                                              ],
                                              renderItem: (item) => {
                                                  const { id } = item;
                                                  return /* @__PURE__ */ jsxs(ResourceItem, {
                                                      verticalAlignment: 'center',
                                                      id,
                                                      media: /* @__PURE__ */ jsx(Icon, {
                                                          color: 'primary',
                                                          size: 'large',
                                                          source: SvgStoreMajor,
                                                      }),
                                                      children: [
                                                          /* @__PURE__ */ jsx('h3', {
                                                              children: /* @__PURE__ */ jsx(TextStyle, {
                                                                  variation: 'strong',
                                                                  children: 'Store Id',
                                                              }),
                                                          }),
                                                          /* @__PURE__ */ jsx('div', {
                                                              children: resultStoreId,
                                                          }),
                                                      ],
                                                  });
                                              },
                                          }),
                                      }),
                                  }),
                                  /* @__PURE__ */ jsx(Layout.Section, {
                                      oneThird: true,
                                      children: /* @__PURE__ */ jsx(Card, {
                                          children: /* @__PURE__ */ jsx(ResourceList, {
                                              resourceName: {
                                                  singular: 'customer',
                                                  plural: 'customers',
                                              },
                                              items: [
                                                  {
                                                      id: 145,
                                                  },
                                              ],
                                              renderItem: (item) => {
                                                  const { id } = item;
                                                  return /* @__PURE__ */ jsxs(ResourceItem, {
                                                      verticalAlignment: 'center',
                                                      id,
                                                      media: /* @__PURE__ */ jsx(Icon, {
                                                          color: 'primary',
                                                          name: resultSurname + ', ' + resultFirstName,
                                                          source: SvgProfileMinor,
                                                      }),
                                                      children: [
                                                          /* @__PURE__ */ jsx('h3', {
                                                              children: /* @__PURE__ */ jsx(TextStyle, {
                                                                  variation: 'strong',
                                                                  children: 'Last, First Name',
                                                              }),
                                                          }),
                                                          /* @__PURE__ */ jsx('div', {
                                                              children: resultSurname + ', ' + resultFirstName,
                                                          }),
                                                      ],
                                                  });
                                              },
                                          }),
                                      }),
                                  }),
                              ],
                          }),
                          /* @__PURE__ */ jsx('br', {}),
                          /* @__PURE__ */ jsx('br', {}),
                          /* @__PURE__ */ jsxs(Layout, {
                              children: [
                                  /* @__PURE__ */ jsx(Layout.Section, {
                                      oneThird: true,
                                      children: /* @__PURE__ */ jsx(Card, {
                                          children: /* @__PURE__ */ jsx(ResourceList, {
                                              resourceName: {
                                                  singular: 'customer',
                                                  plural: 'customers',
                                              },
                                              items: [
                                                  {
                                                      id: 145,
                                                  },
                                              ],
                                              renderItem: (item) => {
                                                  const { id } = item;
                                                  return /* @__PURE__ */ jsxs(ResourceItem, {
                                                      verticalAlignment: 'center',
                                                      id,
                                                      media: /* @__PURE__ */ jsx(Icon, {
                                                          color: 'primary',
                                                          size: 'large',
                                                          source: SvgLocationMajor,
                                                      }),
                                                      children: [
                                                          /* @__PURE__ */ jsx('h3', {
                                                              children: /* @__PURE__ */ jsx(TextStyle, {
                                                                  variation: 'strong',
                                                                  children: 'Country',
                                                              }),
                                                          }),
                                                          /* @__PURE__ */ jsx('div', {
                                                              children: resultCountry,
                                                          }),
                                                      ],
                                                  });
                                              },
                                          }),
                                      }),
                                  }),
                                  /* @__PURE__ */ jsx(Layout.Section, {
                                      oneThird: true,
                                      children: /* @__PURE__ */ jsx(Card, {
                                          children: /* @__PURE__ */ jsx(ResourceList, {
                                              resourceName: {
                                                  singular: 'customer',
                                                  plural: 'customers',
                                              },
                                              items: [
                                                  {
                                                      id: 145,
                                                  },
                                              ],
                                              renderItem: (item) => {
                                                  const { id } = item;
                                                  return /* @__PURE__ */ jsxs(ResourceItem, {
                                                      verticalAlignment: 'center',
                                                      id,
                                                      media: /* @__PURE__ */ jsx(Icon, {
                                                          color: 'primary',
                                                          backdrop: true,
                                                          source: SvgLocationMajor,
                                                      }),
                                                      children: [
                                                          /* @__PURE__ */ jsx('h3', {
                                                              children: /* @__PURE__ */ jsx(TextStyle, {
                                                                  variation: 'strong',
                                                                  children: 'City',
                                                              }),
                                                          }),
                                                          /* @__PURE__ */ jsx('div', {
                                                              children: resultCity,
                                                          }),
                                                      ],
                                                  });
                                              },
                                          }),
                                      }),
                                  }),
                              ],
                          }),
                          /* @__PURE__ */ jsx('br', {}),
                          /* @__PURE__ */ jsx('br', {}),
                          /* @__PURE__ */ jsx(Card, {
                              sectioned: true,
                              title: 'E-mail Address',
                              children: /* @__PURE__ */ jsx(FormLayout, {
                                  children: /* @__PURE__ */ jsxs(FormLayout.Group, {
                                      children: [
                                          /* @__PURE__ */ jsx(TextField, {
                                              value: emailMessage,
                                              onChange: handleEmailChange,
                                              autoComplete: 'off',
                                          }),
                                          /* @__PURE__ */ jsx(Button, {
                                              onClick: () => upsertEmail(),
                                              loading: sendLoading,
                                              children: 'Save',
                                          }),
                                      ],
                                  }),
                              }),
                          }),
                      ],
                  }),
        ],
    });
}

function ContactUs() {
    const app = appBridgeReact.useAppBridge();
    const fetch = userLoggedInFetch(app);
    const [loading, setLoading] = react.exports.useState(true);
    const [sendLoading, setSendLoading] = react.exports.useState(false);
    const [activeToast, setActiveToast] = react.exports.useState(false);
    const [toastContent, setToastContent] = react.exports.useState({
        data: '',
        error: false,
    });
    const toggleActive = react.exports.useCallback(() => setActiveToast((activeToast2) => !activeToast2), []);
    const toastMarkup = activeToast
        ? /* @__PURE__ */ jsx(Toast, {
              content: toastContent.data,
              error: toastContent.error,
              onDismiss: toggleActive,
          })
        : null;
    const getUrlList = async () => {
        setLoading(true);
        const response = await fetch('/user-mail').then((res) => res.json());
        if (response?.selectedMail) {
            setEmailMessage(response.selectedMail);
        }
        setLoading(false);
    };
    const loadingPageMarkup = /* @__PURE__ */ jsx(Loading, {});
    const [emailMessage, setEmailMessage] = react.exports.useState(getUrlList);
    const [supportMessage, setSupportMessage] = react.exports.useState('');
    const handleMessageChange = react.exports.useCallback((value) => setSupportMessage(value), []);
    const handleEmailChange = react.exports.useCallback((value) => setEmailMessage(value), []);
    const [selected, setSelected] = react.exports.useState('product-alert');
    const handleSelectChange = react.exports.useCallback((value) => setSelected(value), []);
    const options = [
        {
            label: 'Product Alert',
            value: 'product-alert',
        },
        {
            label: 'Product Compare',
            value: 'product-compare',
        },
        {
            label: 'General Search',
            value: 'general-search',
        },
        {
            label: 'Other',
            value: 'other',
        },
    ];
    const saveContactSupport = async () => {
        if (emailMessage && supportMessage) {
            setSendLoading(true);
            await fetch('/contact-support', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    subject: emailMessage,
                    topic: selected,
                    message: supportMessage,
                }),
            }).then((res) => res.json());
            setToastContent({
                data: 'Message sent',
                error: false,
            });
            setActiveToast(true);
            setSupportMessage('');
            setSendLoading(false);
        }
    };
    return /* @__PURE__ */ jsxs(Page, {
        title: 'Contact Us',
        children: [
            toastMarkup,
            loading
                ? loadingPageMarkup
                : /* @__PURE__ */ jsx(Card, {
                      sectioned: true,
                      children: /* @__PURE__ */ jsxs(Form, {
                          children: [
                              /* @__PURE__ */ jsx(TextField, {
                                  label: 'E-mail Address',
                                  value: emailMessage,
                                  onChange: handleEmailChange,
                                  autoComplete: 'off',
                              }),
                              /* @__PURE__ */ jsx('br', {}),
                              /* @__PURE__ */ jsx(Select, {
                                  label: 'Topic',
                                  options,
                                  onChange: handleSelectChange,
                                  value: selected,
                              }),
                              /* @__PURE__ */ jsx('br', {}),
                              /* @__PURE__ */ jsx(TextField, {
                                  label: 'Message',
                                  value: supportMessage,
                                  onChange: handleMessageChange,
                                  multiline: 4,
                                  autoComplete: 'off',
                              }),
                              /* @__PURE__ */ jsx('br', {}),
                              /* @__PURE__ */ jsx(Button, {
                                  primary: true,
                                  onClick: () => saveContactSupport(),
                                  loading: sendLoading,
                                  children: 'Send',
                              }),
                          ],
                      }),
                  }),
        ],
    });
}

var addStore = '/assets/addstore.9bb2de5e.svg';

var addStoreGif = '/assets/addStore.99b92a47.gif';

function AddStore() {
    const app = appBridgeReact.useAppBridge();
    const fetch = userLoggedInFetch(app);
    const [showedAddStoreCoverCounter, setShowedAddStoreCoverCounter] = react.exports.useState(0);
    const [sendLoading, setSendLoading] = react.exports.useState(false);
    const [activeToast, setActiveToast] = react.exports.useState(false);
    const [toastContent, setToastContent] = react.exports.useState({
        data: '',
        error: false,
    });
    const [pageIndex, setPageIndex] = react.exports.useState(0);
    const [minPageIndex, setMinPageIndex] = react.exports.useState(true);
    const [maxPageIndex, setMaxPageIndex] = react.exports.useState(true);
    const toggleActive = react.exports.useCallback(() => setActiveToast((activeToast2) => !activeToast2), []);
    const toastMarkup = activeToast
        ? /* @__PURE__ */ jsx(Toast, {
              content: toastContent.data,
              error: toastContent.error,
              onDismiss: toggleActive,
          })
        : null;
    const [loadingUrl, setLoadingUrl] = react.exports.useState(true);
    const [showUrls, setShowUrls] = react.exports.useState(true);
    const [selectedItems, setSelectedItems] = react.exports.useState([]);
    const getUrlList = async () => {
        const response = await fetch('/user-crawl-url').then((res) => res.json());
        setUrlList(response);
        console.log(showedAddStoreCoverCounter);
        if (response.length === 0) {
            if (showedAddStoreCoverCounter === 0) {
                setShowedAddStoreCoverCounter(showedAddStoreCoverCounter + 1);
                setShowUrls(false);
            }
        }
        setLoadingUrl(false);
        setSelectedItems([]);
        setUrlFieldValue('');
    };
    const [urlFieldValue, setUrlFieldValue] = react.exports.useState('');
    const [urlList, setUrlList] = react.exports.useState(getUrlList);
    const resourceName = {
        singular: 'url',
        plural: 'urls',
    };
    const changeShowList = () => {
        setShowUrls(true);
    };
    react.exports.useEffect(() => {
        setPage(0);
    }, [urlList]);
    const handleUrlFieldChange = react.exports.useCallback((value) => {
        setUrlFieldValue(value);
        value && setIsDirty(true);
    }, []);
    const [isDirty, setIsDirty] = react.exports.useState(false);
    react.exports.useEffect(() => {
        setShowedAddStoreCoverCounter(showedAddStoreCoverCounter);
    }, [showedAddStoreCoverCounter]);
    react.exports.useEffect(() => {
        setUrlList(urlList);
    }, [urlList]);
    const removeUrl = async () => {
        setLoadingUrl(true);
        try {
            let response = await fetch('/user-crawl-url-delete', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    urls: selectedItems,
                }),
            });
            const jsonValue = await response.json();
            setToastContent({
                data: jsonValue.data,
                error: !response.ok,
            });
            setActiveToast(true);
        } catch (error) {
            setToastContent('error');
            setActiveToast(true);
        }
        await getUrlList();
    };
    const addNewUrl = async () => {
        setSendLoading(true);
        try {
            let response = await fetch('/user-crawl-url', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    url: urlFieldValue,
                }),
            });
            const jsonValue = await response.json();
            setToastContent({
                data: jsonValue.data,
                error: !response.ok,
            });
            setActiveToast(true);
        } catch (error) {
            setToastContent('error');
            setActiveToast(true);
        }
        setSendLoading(false);
        await getUrlList();
    };
    const setPage = (index) => {
        let maxIndex = Math.ceil(urlList.length / 10) - 1;
        if (index < 0) {
            index = 0;
        }
        if (index > maxIndex) {
            index = maxIndex;
        }
        if (index === 0) {
            setMinPageIndex(true);
        } else {
            setMinPageIndex(false);
        }
        if (index === maxIndex) {
            setMaxPageIndex(true);
        } else {
            setMaxPageIndex(false);
        }
        setPageIndex(index);
    };
    const emptyStateMarkup = /* @__PURE__ */ jsx(EmptySearchResult, {
        title: 'No Store Found',
        withIllustration: true,
    });
    const promotedBulkActions = [
        {
            content: 'Remove Stores',
            onAction: () => removeUrl(),
        },
    ];
    function resolveItemIds({ id }) {
        return id;
    }
    const handleKeyPress = async (event) => {
        const enterKeyPressed = event.keyCode === 13;
        if (enterKeyPressed) {
            await addNewUrl();
        }
    };
    return /* @__PURE__ */ jsxs('div', {
        children: [
            toastMarkup,
            loadingUrl
                ? /* @__PURE__ */ jsx(Loading, {})
                : /* @__PURE__ */ jsx(Page, {
                      title: 'Add Store',
                      titleMetadata: /* @__PURE__ */ jsx(Tooltip, {
                          content: /* @__PURE__ */ jsx('img', {
                              alt: '',
                              width: '100%',
                              height: '100%',
                              style: {
                                  objectFit: 'cover',
                                  objectPosition: 'center',
                              },
                              src: addStoreGif,
                          }),
                          children: /* @__PURE__ */ jsx(Icon, {
                              source: SvgQuestionMarkInverseMajor,
                              color: 'base',
                          }),
                      }),
                      subtitle: 'Enter the link of the stores you want to follow below. Add to your list by clicking the button.',
                      fullWidth: true,
                      children:
                          showUrls === false
                              ? /* @__PURE__ */ jsx(Card, {
                                    sectioned: true,
                                    children: /* @__PURE__ */ jsx(EmptyState, {
                                        heading: 'Add a url to get started',
                                        action: {
                                            content: 'Add Store',
                                            onAction: () => changeShowList(),
                                        },
                                        image: addStore,
                                        fullWidth: true,
                                        children: /* @__PURE__ */ jsx('p', {
                                            children: "Don't have a store which you follow yet. Click to add a store to your watch list",
                                        }),
                                    }),
                                })
                              : /* @__PURE__ */ jsxs('div', {
                                    children: [
                                        /* @__PURE__ */ jsx(Card, {
                                            sectioned: true,
                                            title: 'Add New Store',
                                            children: /* @__PURE__ */ jsxs(Stack$2, {
                                                children: [
                                                    /* @__PURE__ */ jsx('div', {
                                                        onKeyDown: handleKeyPress,
                                                        children: /* @__PURE__ */ jsx(TextField, {
                                                            placeholder: 'www.shopify.com',
                                                            value: urlFieldValue,
                                                            onChange: handleUrlFieldChange,
                                                        }),
                                                    }),
                                                    /* @__PURE__ */ jsx(Button, {
                                                        onClick: () => addNewUrl(),
                                                        loading: sendLoading,
                                                        children: 'Add',
                                                    }),
                                                ],
                                            }),
                                        }),
                                        /* @__PURE__ */ jsxs(Card, {
                                            sectioned: true,
                                            children: [
                                                /* @__PURE__ */ jsx(ResourceList, {
                                                    resourceName,
                                                    selectedItems,
                                                    promotedBulkActions,
                                                    onSelectionChange: setSelectedItems,
                                                    resolveItemId: resolveItemIds,
                                                    emptyState: emptyStateMarkup,
                                                    showHeader: true,
                                                    items: urlList && urlList.length > 0 ? urlList.slice(10 * pageIndex, 10 * pageIndex + 10) : [],
                                                    loading: loadingUrl,
                                                    renderItem: (item) => {
                                                        const { id, url, website, queueWebsites } = item;
                                                        const media = /* @__PURE__ */ jsx(Avatar, {
                                                            customer: true,
                                                            size: 'medium',
                                                            name: website,
                                                            source: item.websites.faviconUrl ? item.websites.faviconUrl : 'https://polaris.shopify.com/icons/DomainsMajor.svg',
                                                        });
                                                        const isLoading = queueWebsites && queueWebsites.length > 0;
                                                        return /* @__PURE__ */ jsxs(ResourceList.Item, {
                                                            id,
                                                            url,
                                                            media,
                                                            persistActions: true,
                                                            children: [
                                                                /* @__PURE__ */ jsx('h3', {
                                                                    children: /* @__PURE__ */ jsx(TextStyle, {
                                                                        variation: 'strong',
                                                                        children: website,
                                                                    }),
                                                                }),
                                                                isLoading
                                                                    ? /* @__PURE__ */ jsx(Badge, {
                                                                          progress: 'partiallyComplete',
                                                                          status: 'attention',
                                                                          children: 'Loading',
                                                                      })
                                                                    : '',
                                                            ],
                                                        });
                                                    },
                                                }),
                                                /* @__PURE__ */ jsx('div', {
                                                    style: {
                                                        marginLeft: '45%',
                                                    },
                                                    children: /* @__PURE__ */ jsx(Pagination, {
                                                        nextTooltip: 'Next',
                                                        previousTooltip: 'Previous',
                                                        onPrevious: () => setPage(pageIndex - 1),
                                                        onNext: () => setPage(pageIndex + 1),
                                                        hasPrevious: !minPageIndex,
                                                        hasNext: !maxPageIndex,
                                                    }),
                                                }),
                                            ],
                                        }),
                                    ],
                                }),
                  }),
        ],
    });
}

var setAlertGif = '/assets/setAlert.ed41cff1.gif';

function Alarm() {
    const app = appBridgeReact.useAppBridge();
    const fetch = userLoggedInFetch(app);
    const [activeToast, setActiveToast] = react.exports.useState(false);
    const [toastContent, setToastContent] = react.exports.useState({
        data: '',
        error: false,
    });
    const toggleActive = react.exports.useCallback(() => setActiveToast((activeToast2) => !activeToast2), []);
    const toastMarkup = activeToast
        ? /* @__PURE__ */ jsx(Toast, {
              content: toastContent.data,
              error: toastContent.error,
              onDismiss: toggleActive,
          })
        : null;
    const [loadingUrl, setLoadingUrl] = react.exports.useState(false);
    const [loadingPage, setLoadingPage] = react.exports.useState(true);
    const getUrlList = async () => {
        setLoadingUrl(true);
        const response = await fetch('/user-crawl-url').then((res) => res.json());
        setUrlList(response);
        setLoadingUrl(false);
        setLoadingPage(false);
    };
    const [urlList, setUrlList] = react.exports.useState(getUrlList);
    const radioButtonKeyListener = async (e, item) => {
        if (event.type !== 'mouseup' && event.type !== 'touchend') {
            return;
        }
        if (loadingUrl) {
            return;
        }
        setLoadingUrl(true);
        try {
            let response = await fetch('/user-crawl-url', {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    url: item.website,
                    alarm: item.alarm,
                    value: item.value,
                }),
            });
            const jsonValue = await response.json();
            setToastContent({
                data: jsonValue.data,
                error: !response.ok,
            });
            setActiveToast(true);
        } catch (error) {
            setToastContent({
                data: 'data',
                error: true,
            });
            setActiveToast(true);
        }
        await getUrlList();
    };
    const updateAlarm = async (item) => {
        if (loadingUrl) {
            return;
        }
        setLoadingUrl(true);
        try {
            let response = await fetch('/user-crawl-url', {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    url: item.website,
                    alarm: !item.alarm,
                    value: item.value,
                }),
            });
            const jsonValue = await response.json();
            if (item.alarm) {
                setToastContent({
                    data: 'Deactivated successfully',
                    error: !response.ok,
                });
            } else {
                setToastContent({
                    data: 'Activated successfully',
                    error: !response.ok,
                });
            }
            setActiveToast(true);
        } catch (error) {
            setToastContent('error');
            setActiveToast(true);
        }
        await getUrlList();
    };
    const [rangeValue, setRangeValue2] = react.exports.useState([
        {
            myValue: 10,
        },
    ]);
    const setRangeValue = (e, index) => {
        setRangeValue2([
            {
                myValue: e,
            },
        ]);
        let newUrlList = urlList;
        newUrlList[index].value = e;
        setUrlList(newUrlList);
    };
    const resourceName = {
        singular: 'website',
        plural: 'websites',
    };
    const suffixStyles = {
        minWidth: '24px',
        textAlign: 'right',
    };
    const rowMarkup =
        urlList && urlList.length > 0
            ? urlList.map(({ id, website, websites, location, alarm, amountSpent, value }, index) =>
                  /* @__PURE__ */ jsxs(
                      IndexTable.Row,
                      {
                          id,
                          position: index,
                          children: [
                              /* @__PURE__ */ jsx(IndexTable.Cell, {
                                  children: /* @__PURE__ */ jsx(Avatar, {
                                      customer: true,
                                      size: 'medium',
                                      name: website,
                                      source: websites && websites.faviconUrl ? websites.faviconUrl : 'https://polaris.shopify.com/icons/DomainsMajor.svg',
                                  }),
                              }),
                              /* @__PURE__ */ jsx(IndexTable.Cell, {
                                  children: /* @__PURE__ */ jsx(TextStyle, {
                                      variation: 'strong',
                                      children: website,
                                  }),
                              }),
                              /* @__PURE__ */ jsx(IndexTable.Cell, {
                                  children: /* @__PURE__ */ jsx('div', {
                                      onTouchEnd: (e) => radioButtonKeyListener(e, urlList[index]),
                                      onMouseUp: (e) => radioButtonKeyListener(e, urlList[index]),
                                      style: {
                                          cursor: 'pointer !important',
                                      },
                                      children: /* @__PURE__ */ jsx(RangeSlider, {
                                          min: 1,
                                          max: 100,
                                          value,
                                          onChange: (e) => setRangeValue(e, index),
                                          suffix: /* @__PURE__ */ jsx('p', {
                                              style: suffixStyles,
                                              children: value,
                                          }),
                                          output: true,
                                          disabled: !alarm,
                                      }),
                                  }),
                              }),
                              /* @__PURE__ */ jsx(IndexTable.Cell, {
                                  children: /* @__PURE__ */ jsx(Button, {
                                      onClick: () => updateAlarm(urlList[index]),
                                      primary: !alarm,
                                      secondary: alarm,
                                      children: !alarm ? 'Activated' : 'Deactivated',
                                  }),
                              }),
                              /* @__PURE__ */ jsx(IndexTable.Cell, {
                                  children: amountSpent,
                              }),
                          ],
                      },
                      id
                  )
              )
            : '';
    return /* @__PURE__ */ jsxs(Page, {
        title: 'Set Alarm',
        titleMetadata: /* @__PURE__ */ jsx(Tooltip, {
            content: /* @__PURE__ */ jsx('img', {
                alt: '',
                width: '100%',
                height: '100%',
                style: {
                    objectFit: 'cover',
                    objectPosition: 'center',
                },
                src: setAlertGif,
            }),
            children: /* @__PURE__ */ jsx(Icon, {
                source: SvgQuestionMarkInverseMajor,
                color: 'base',
            }),
        }),
        subtitle: 'Set alert % of each website. When you enter the alarm value, the value and above changes are sent as an e-mail.',
        children: [
            toastMarkup,
            loadingPage
                ? /* @__PURE__ */ jsx(Loading, {})
                : /* @__PURE__ */ jsxs('div', {
                      children: [
                          /* @__PURE__ */ jsx(Banner, {
                              title: 'Alarm system working every 12:00AM GMT+1. Mail will be sent the next day.',
                              status: 'warning',
                          }),
                          /* @__PURE__ */ jsx('br', {}),
                          /* @__PURE__ */ jsx(Card, {
                              children: /* @__PURE__ */ jsx(IndexTable, {
                                  loading: loadingUrl,
                                  resourceName,
                                  itemCount: urlList?.length,
                                  selectable: false,
                                  headings: [
                                      {
                                          title: '',
                                      },
                                      {
                                          title: 'Website',
                                      },
                                      {
                                          title: 'Min Price Change%',
                                      },
                                      {
                                          title: 'Alarm Status',
                                      },
                                  ],
                                  children: rowMarkup,
                              }),
                          }),
                      ],
                  }),
        ],
    });
}

const humanReadableTime = (time) => {
    let date = new Date(time);

    return date.toLocaleDateString() + ' ' + date.toLocaleTimeString();
};

function MailHistoryTab({ selectedDayIndex }) {
    const app = appBridgeReact.useAppBridge();
    const fetch = userLoggedInFetch(app);
    const [loadingUrl, setLoadingUrl] = react.exports.useState(false);
    const [pageIndex, setPageIndex] = react.exports.useState(0);
    const [minPageIndex, setMinPageIndex] = react.exports.useState(true);
    const [maxPageIndex, setMaxPageIndex] = react.exports.useState(true);
    const getMailHistory = async () => {
        setLoadingUrl(true);
        const response = await fetch('/get-mail-history', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                date_type: parseInt(selectedDayIndex),
            }),
        }).then((res) => res.json());
        setLoadingUrl(false);
        setMailList(response);
    };
    const [mailList, setMailList] = react.exports.useState([]);
    react.exports.useEffect(() => {
        setPage(0);
    }, [mailList]);
    react.exports.useEffect(async () => {
        await getMailHistory();
    }, []);
    react.exports.useEffect(async () => {
        console.log('useEffect logic ran');
        await getMailHistory();
    }, [selectedDayIndex]);
    const setPage = (index) => {
        let maxIndex = Math.ceil(mailList.length / 10) - 1;
        if (index < 0) {
            index = 0;
        }
        if (index > maxIndex) {
            index = maxIndex;
        }
        if (index === 0) {
            setMinPageIndex(true);
        } else {
            setMinPageIndex(false);
        }
        if (index === maxIndex) {
            setMaxPageIndex(true);
        } else {
            setMaxPageIndex(false);
        }
        setPageIndex(index);
    };
    const rowMarkup =
        mailList && mailList.length > 0
            ? mailList.slice(10 * pageIndex, 10 * pageIndex + 10).map(({ createDateTime, status, cachedAlarm, _id }, index) =>
                  /* @__PURE__ */ jsxs(
                      IndexTable.Row,
                      {
                          id: _id,
                          position: index,
                          children: [
                              /* @__PURE__ */ jsx(IndexTable.Cell, {
                                  children: /* @__PURE__ */ jsx(TextStyle, {
                                      variation: 'strong',
                                      children: humanReadableTime(createDateTime),
                                  }),
                              }),
                              /* @__PURE__ */ jsx(IndexTable.Cell, {
                                  children: /* @__PURE__ */ jsx(TextStyle, {
                                      variation: 'strong',
                                      children: cachedAlarm.length,
                                  }),
                              }),
                          ],
                      },
                      _id
                  )
              )
            : '';
    const resourceName = {
        singular: 'mail',
        plural: 'mails',
    };
    const emptyStateMarkup = /* @__PURE__ */ jsx(EmptySearchResult, {
        title: 'No mail yet',
        withIllustration: true,
    });
    return /* @__PURE__ */ jsxs(Card, {
        children: [
            /* @__PURE__ */ jsx(IndexTable, {
                emptyState: emptyStateMarkup,
                loading: loadingUrl,
                resourceName,
                itemCount: mailList.length,
                selectable: false,
                headings: [
                    {
                        title: 'Sending Date',
                    },
                    {
                        title: '# of Item Send',
                    },
                ],
                children: rowMarkup,
            }),
            /* @__PURE__ */ jsx('div', {
                style: {
                    marginLeft: '45%',
                },
                children: /* @__PURE__ */ jsx(Pagination, {
                    nextTooltip: 'Next',
                    previousTooltip: 'Previous',
                    onPrevious: () => setPage(pageIndex - 1),
                    onNext: () => setPage(pageIndex + 1),
                    hasPrevious: !minPageIndex,
                    hasNext: !maxPageIndex,
                }),
            }),
        ],
    });
}

function priceWithCurrency(price, currency) {
    return new Intl.NumberFormat('de-DE', { style: 'currency', currency: currency }).format(Number(price));
}

function ProductMailHistoryTab({ selectedDayIndex }) {
    const app = appBridgeReact.useAppBridge();
    const fetch = userLoggedInFetch(app);
    const [loadingUrl, setLoadingUrl] = react.exports.useState(false);
    const [pageIndex, setPageIndex] = react.exports.useState(0);
    const [minPageIndex, setMinPageIndex] = react.exports.useState(true);
    const [maxPageIndex, setMaxPageIndex] = react.exports.useState(true);
    const getProductMailHistory = async () => {
        setLoadingUrl(true);
        let response = await fetch('/product-mail-history-info', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                date_type: parseInt(selectedDayIndex),
            }),
        }).then((res) => res.json());
        setLoadingUrl(false);
        setProductMailList(response);
    };
    const [productMailList, setProductMailList] = react.exports.useState([]);
    react.exports.useEffect(() => {
        setPage(0);
    }, [productMailList]);
    react.exports.useEffect(async () => {
        console.log('useEffect logic ran');
        await getProductMailHistory();
    }, [selectedDayIndex]);
    react.exports.useEffect(async () => {
        await getProductMailHistory();
    }, []);
    const setPage = (index) => {
        let maxIndex = Math.ceil(productMailList.length / 10) - 1;
        if (index < 0) {
            index = 0;
        }
        if (index > maxIndex) {
            index = maxIndex;
        }
        if (index === 0) {
            setMinPageIndex(true);
        } else {
            setMinPageIndex(false);
        }
        if (index === maxIndex) {
            setMaxPageIndex(true);
        } else {
            setMaxPageIndex(false);
        }
        setPageIndex(index);
    };
    const rowMarkup =
        productMailList && productMailList.length > 0
            ? productMailList.slice(10 * pageIndex, 10 * pageIndex + 10).map(({ _id, url, website, imageSrc, productTitle, oldValue, newValue, currency }, index) =>
                  /* @__PURE__ */ jsxs(
                      IndexTable.Row,
                      {
                          id: _id,
                          position: index,
                          children: [
                              /* @__PURE__ */ jsx(IndexTable.Cell, {
                                  children: imageSrc
                                      ? /* @__PURE__ */ jsx('img', {
                                            style: {
                                                objectFit: 'fill',
                                                height: '5rem',
                                                width: '5rem',
                                            },
                                            src: imageSrc,
                                        })
                                      : /* @__PURE__ */ jsx('div', {
                                            style: {
                                                display: 'flex',
                                                height: '5rem',
                                                width: '5rem',
                                                alignItems: 'center',
                                                justifyContent: 'center',
                                                overflow: 'hidden',
                                            },
                                            children: /* @__PURE__ */ jsx(Icon, {
                                                color: 'primary',
                                                source: SvgProductsMajor,
                                            }),
                                        }),
                              }),
                              /* @__PURE__ */ jsxs(IndexTable.Cell, {
                                  children: [
                                      /* @__PURE__ */ jsx(TextStyle, {
                                          variation: 'strong',
                                          children: productTitle,
                                      }),
                                      /* @__PURE__ */ jsx('br', {}),
                                      /* @__PURE__ */ jsx(TextStyle, {
                                          variation: 'strong',
                                          children: website,
                                      }),
                                  ],
                              }),
                              /* @__PURE__ */ jsxs(IndexTable.Cell, {
                                  children: [
                                      'Before Price: ',
                                      /* @__PURE__ */ jsx(TextStyle, {
                                          variation: 'strong',
                                          children: priceWithCurrency(oldValue, currency),
                                      }),
                                      /* @__PURE__ */ jsx('br', {}),
                                      'After Price: ',
                                      /* @__PURE__ */ jsxs(TextStyle, {
                                          variation: 'strong',
                                          children: [' ', priceWithCurrency(newValue, currency)],
                                      }),
                                  ],
                              }),
                              /* @__PURE__ */ jsx(IndexTable.Cell, {
                                  children: /* @__PURE__ */ jsx(Link, {
                                      url,
                                      external: true,
                                      children: 'Go to Product',
                                  }),
                              }),
                          ],
                      },
                      _id
                  )
              )
            : '';
    const resourceName = {
        singular: 'productMail',
        plural: 'productMails',
    };
    const emptyStateMarkup = /* @__PURE__ */ jsx(EmptySearchResult, {
        title: 'No product yet',
        withIllustration: true,
    });
    return /* @__PURE__ */ jsxs(Card, {
        children: [
            /* @__PURE__ */ jsx(IndexTable, {
                emptyState: emptyStateMarkup,
                loading: loadingUrl,
                resourceName,
                itemCount: productMailList.length,
                selectable: false,
                headings: [
                    {
                        title: '',
                    },
                    {
                        title: 'Website',
                    },
                    {
                        title: 'Prices',
                    },
                    {
                        title: '',
                    },
                ],
                children: rowMarkup,
            }),
            /* @__PURE__ */ jsx('div', {
                style: {
                    marginLeft: '45%',
                },
                children: /* @__PURE__ */ jsx(Pagination, {
                    nextTooltip: 'Next',
                    previousTooltip: 'Previous',
                    onPrevious: () => setPage(pageIndex - 1),
                    onNext: () => setPage(pageIndex + 1),
                    hasPrevious: !minPageIndex,
                    hasNext: !maxPageIndex,
                }),
            }),
        ],
    });
}

function Tab({ selectedDayIndex }) {
    const [selected, setSelected] = react.exports.useState(0);
    const handleTabChange = react.exports.useCallback((selectedTabIndex) => {
        setSelected(selectedTabIndex);
        console.log(selected);
    }, []);
    react.exports.useEffect(() => {
        console.log('useEffect logic ran');
    }, [selectedDayIndex]);
    const tabs = [
        {
            id: '0',
            content: 'Mail History',
            accessibilityLabel: 'All customers',
            panelID: 'all-customers-content-1',
        },
        {
            id: '1',
            content: 'Product Detail',
            panelID: 'accepts-marketing-content-1',
        },
    ];
    return /* @__PURE__ */ jsx(Tabs, {
        tabs,
        selected,
        onSelect: handleTabChange,
        fitted: true,
        children: /* @__PURE__ */ jsxs(Card.Section, {
            children: [
                /* @__PURE__ */ jsx('div', {
                    style: {
                        display: selected === 0 ? 'block' : 'none',
                    },
                    children: /* @__PURE__ */ jsx(MailHistoryTab, {
                        selectedDayIndex,
                    }),
                }),
                /* @__PURE__ */ jsx('div', {
                    style: {
                        display: selected === 1 ? 'block' : 'none',
                    },
                    children: /* @__PURE__ */ jsx(ProductMailHistoryTab, {
                        selectedDayIndex,
                    }),
                }),
            ],
        }),
    });
}

function Dashboard() {
    const app = appBridgeReact.useAppBridge();
    const fetch = userLoggedInFetch(app);
    const [loading, setLoading] = react.exports.useState(true);
    const [dashboardResult, setDashboardResult] = react.exports.useState(true);
    const [selected, setSelected] = react.exports.useState('0');
    const getUrlList = async () => {
        let dashboardResult2 = await fetch('/dashboard-info', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                date_type: parseInt(selected),
            }),
        }).then((res) => res.json());
        setLoading(false);
        setDashboardResult(dashboardResult2);
        console.log(dashboardResult2);
    };
    react.exports.useEffect(async () => {
        await getUrlList();
    }, []);
    react.exports.useEffect(async () => {
        setSelected(selected);
        await getUrlList();
    }, [selected]);
    const handleSelectChange = react.exports.useCallback(async (value) => {
        setSelected(value);
    }, []);
    const options = [
        {
            label: 'Today',
            value: '0',
        },
        {
            label: 'Last 7 days',
            value: '1',
        },
        {
            label: 'Last 30 days',
            value: '2',
        },
    ];
    return /* @__PURE__ */ jsx(Page, {
        fullWidth: true,
        title: 'Dashboard',
        primaryAction: /* @__PURE__ */ jsx(Select, {
            label: 'Date range',
            options,
            onChange: handleSelectChange,
            value: selected,
        }),
        children: loading
            ? /* @__PURE__ */ jsx(Loading, {})
            : /* @__PURE__ */ jsxs('div', {
                  children: [
                      /* @__PURE__ */ jsxs(Layout, {
                          children: [
                              /* @__PURE__ */ jsx(Layout.Section, {
                                  oneThird: true,
                                  children: /* @__PURE__ */ jsx(Card, {
                                      children: /* @__PURE__ */ jsx(ResourceList, {
                                          resourceName: {
                                              singular: 'customer',
                                              plural: 'customers',
                                          },
                                          items: [dashboardResult],
                                          renderItem: (item) => {
                                              const { id, count_of_followed_store } = item;
                                              return /* @__PURE__ */ jsxs(ResourceItem, {
                                                  verticalAlignment: 'center',
                                                  id,
                                                  media: /* @__PURE__ */ jsx(Icon, {
                                                      color: 'primary',
                                                      size: 'large',
                                                      name: count_of_followed_store,
                                                      source: SvgStoreMajor,
                                                  }),
                                                  children: [
                                                      /* @__PURE__ */ jsx('h3', {
                                                          children: /* @__PURE__ */ jsx(TextStyle, {
                                                              variation: 'strong',
                                                              children: '# of Stores Followed',
                                                          }),
                                                      }),
                                                      /* @__PURE__ */ jsx('div', {
                                                          children: count_of_followed_store,
                                                      }),
                                                  ],
                                              });
                                          },
                                      }),
                                  }),
                              }),
                              /* @__PURE__ */ jsx(Layout.Section, {
                                  oneThird: true,
                                  children: /* @__PURE__ */ jsx(Card, {
                                      children: /* @__PURE__ */ jsx(ResourceList, {
                                          resourceName: {
                                              singular: 'customer',
                                              plural: 'customers',
                                          },
                                          items: [dashboardResult],
                                          renderItem: (item) => {
                                              const { id, store_mail_item_send_count } = item;
                                              return /* @__PURE__ */ jsxs(ResourceItem, {
                                                  verticalAlignment: 'center',
                                                  id,
                                                  media: /* @__PURE__ */ jsx(Icon, {
                                                      color: 'primary',
                                                      name: store_mail_item_send_count,
                                                      source: SvgProductsMajor,
                                                  }),
                                                  children: [
                                                      /* @__PURE__ */ jsx('h3', {
                                                          children: /* @__PURE__ */ jsx(TextStyle, {
                                                              variation: 'strong',
                                                              children: '# of Item Send',
                                                          }),
                                                      }),
                                                      /* @__PURE__ */ jsx('div', {
                                                          children: store_mail_item_send_count,
                                                      }),
                                                  ],
                                              });
                                          },
                                      }),
                                  }),
                              }),
                          ],
                      }),
                      /* @__PURE__ */ jsx('br', {}),
                      /* @__PURE__ */ jsx('br', {}),
                      /* @__PURE__ */ jsxs(Layout, {
                          children: [
                              /* @__PURE__ */ jsx(Layout.Section, {
                                  oneThird: true,
                                  children: /* @__PURE__ */ jsx(Card, {
                                      children: /* @__PURE__ */ jsx(ResourceList, {
                                          resourceName: {
                                              singular: 'customer',
                                              plural: 'customers',
                                          },
                                          items: [dashboardResult],
                                          renderItem: (item) => {
                                              const { id, average_price_change_as_rate } = item;
                                              return /* @__PURE__ */ jsxs(ResourceItem, {
                                                  verticalAlignment: 'center',
                                                  id,
                                                  media: /* @__PURE__ */ jsx(Icon, {
                                                      color: 'primary',
                                                      size: 'large',
                                                      name: average_price_change_as_rate,
                                                      source: SvgDiscountsMajor,
                                                  }),
                                                  children: [
                                                      /* @__PURE__ */ jsx('h3', {
                                                          children: /* @__PURE__ */ jsx(TextStyle, {
                                                              variation: 'strong',
                                                              children: '# of Average Price Change %',
                                                          }),
                                                      }),
                                                      /* @__PURE__ */ jsx('div', {
                                                          children: average_price_change_as_rate + ' %',
                                                      }),
                                                  ],
                                              });
                                          },
                                      }),
                                  }),
                              }),
                              /* @__PURE__ */ jsx(Layout.Section, {
                                  oneThird: true,
                                  children: /* @__PURE__ */ jsx(Card, {
                                      children: /* @__PURE__ */ jsx(ResourceList, {
                                          resourceName: {
                                              singular: 'customer',
                                              plural: 'customers',
                                          },
                                          items: [dashboardResult],
                                          renderItem: (item) => {
                                              const { id, average_price_change_as_price } = item;
                                              return /* @__PURE__ */ jsxs(ResourceItem, {
                                                  verticalAlignment: 'center',
                                                  id,
                                                  media: /* @__PURE__ */ jsx(Icon, {
                                                      color: 'primary',
                                                      backdrop: true,
                                                      source: SvgCashDollarMajor,
                                                  }),
                                                  children: [
                                                      /* @__PURE__ */ jsx('h3', {
                                                          children: /* @__PURE__ */ jsx(TextStyle, {
                                                              variation: 'strong',
                                                              children: '# of Average Price Change $',
                                                          }),
                                                      }),
                                                      /* @__PURE__ */ jsx('div', {
                                                          children: average_price_change_as_price + ' $',
                                                      }),
                                                  ],
                                              });
                                          },
                                      }),
                                  }),
                              }),
                          ],
                      }),
                      /* @__PURE__ */ jsx('br', {}),
                      /* @__PURE__ */ jsx('br', {}),
                      /* @__PURE__ */ jsxs(Layout, {
                          children: [
                              /* @__PURE__ */ jsx(Layout.Section, {
                                  oneThird: true,
                                  children: /* @__PURE__ */ jsx(Card, {
                                      children: /* @__PURE__ */ jsx(ResourceList, {
                                          resourceName: {
                                              singular: ' ',
                                              plural: 'customers',
                                          },
                                          items: [dashboardResult],
                                          renderItem: (item) => {
                                              const { id, max_price_change_as_rate_product_title } = item;
                                              return /* @__PURE__ */ jsxs(ResourceItem, {
                                                  verticalAlignment: 'center',
                                                  id,
                                                  media: /* @__PURE__ */ jsx(Icon, {
                                                      color: 'primary',
                                                      size: 'large',
                                                      name: max_price_change_as_rate_product_title,
                                                      source: SvgProductsMajor,
                                                  }),
                                                  children: [
                                                      /* @__PURE__ */ jsx('h3', {
                                                          children: /* @__PURE__ */ jsx(TextStyle, {
                                                              variation: 'strong',
                                                              children: 'Maximum Changing Price Product',
                                                          }),
                                                      }),
                                                      /* @__PURE__ */ jsx('div', {
                                                          children: max_price_change_as_rate_product_title,
                                                      }),
                                                  ],
                                              });
                                          },
                                      }),
                                  }),
                              }),
                              /* @__PURE__ */ jsx(Layout.Section, {
                                  oneThird: true,
                                  children: /* @__PURE__ */ jsx(Card, {
                                      children: /* @__PURE__ */ jsx(ResourceList, {
                                          resourceName: {
                                              singular: 'customer',
                                              plural: 'customers',
                                          },
                                          items: [dashboardResult],
                                          renderItem: (item) => {
                                              const { id, max_price_change_as_rate } = item;
                                              return /* @__PURE__ */ jsxs(ResourceItem, {
                                                  verticalAlignment: 'center',
                                                  id,
                                                  media: /* @__PURE__ */ jsx(Icon, {
                                                      color: 'primary',
                                                      backdrop: true,
                                                      source: SvgDiscountsMajor,
                                                  }),
                                                  children: [
                                                      /* @__PURE__ */ jsx('h3', {
                                                          children: /* @__PURE__ */ jsx(TextStyle, {
                                                              variation: 'strong',
                                                              children: 'Maximum Changing %',
                                                          }),
                                                      }),
                                                      /* @__PURE__ */ jsx('div', {
                                                          children: max_price_change_as_rate + ' %',
                                                      }),
                                                  ],
                                              });
                                          },
                                      }),
                                  }),
                              }),
                          ],
                      }),
                      /* @__PURE__ */ jsx('br', {}),
                      /* @__PURE__ */ jsx('br', {}),
                      /* @__PURE__ */ jsx(Card, {
                          children: /* @__PURE__ */ jsx(Tab, {
                              selectedDayIndex: selected,
                          }),
                      }),
                  ],
              }),
    });
}

var lodash = { exports: {} };

/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

(function (module, exports) {
    (function () {
        /** Used as a safe reference for `undefined` in pre-ES5 environments. */
        var undefined$1;

        /** Used as the semantic version number. */
        var VERSION = '4.17.21';

        /** Used as the size to enable large array optimizations. */
        var LARGE_ARRAY_SIZE = 200;

        /** Error message constants. */
        var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
            FUNC_ERROR_TEXT = 'Expected a function',
            INVALID_TEMPL_VAR_ERROR_TEXT = 'Invalid `variable` option passed into `_.template`';

        /** Used to stand-in for `undefined` hash values. */
        var HASH_UNDEFINED = '__lodash_hash_undefined__';

        /** Used as the maximum memoize cache size. */
        var MAX_MEMOIZE_SIZE = 500;

        /** Used as the internal argument placeholder. */
        var PLACEHOLDER = '__lodash_placeholder__';

        /** Used to compose bitmasks for cloning. */
        var CLONE_DEEP_FLAG = 1,
            CLONE_FLAT_FLAG = 2,
            CLONE_SYMBOLS_FLAG = 4;

        /** Used to compose bitmasks for value comparisons. */
        var COMPARE_PARTIAL_FLAG = 1,
            COMPARE_UNORDERED_FLAG = 2;

        /** Used to compose bitmasks for function metadata. */
        var WRAP_BIND_FLAG = 1,
            WRAP_BIND_KEY_FLAG = 2,
            WRAP_CURRY_BOUND_FLAG = 4,
            WRAP_CURRY_FLAG = 8,
            WRAP_CURRY_RIGHT_FLAG = 16,
            WRAP_PARTIAL_FLAG = 32,
            WRAP_PARTIAL_RIGHT_FLAG = 64,
            WRAP_ARY_FLAG = 128,
            WRAP_REARG_FLAG = 256,
            WRAP_FLIP_FLAG = 512;

        /** Used as default options for `_.truncate`. */
        var DEFAULT_TRUNC_LENGTH = 30,
            DEFAULT_TRUNC_OMISSION = '...';

        /** Used to detect hot functions by number of calls within a span of milliseconds. */
        var HOT_COUNT = 800,
            HOT_SPAN = 16;

        /** Used to indicate the type of lazy iteratees. */
        var LAZY_FILTER_FLAG = 1,
            LAZY_MAP_FLAG = 2,
            LAZY_WHILE_FLAG = 3;

        /** Used as references for various `Number` constants. */
        var INFINITY = 1 / 0,
            MAX_SAFE_INTEGER = 9007199254740991,
            MAX_INTEGER = 1.7976931348623157e308,
            NAN = 0 / 0;

        /** Used as references for the maximum length and index of an array. */
        var MAX_ARRAY_LENGTH = 4294967295,
            MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
            HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

        /** Used to associate wrap methods with their bit flags. */
        var wrapFlags = [
            ['ary', WRAP_ARY_FLAG],
            ['bind', WRAP_BIND_FLAG],
            ['bindKey', WRAP_BIND_KEY_FLAG],
            ['curry', WRAP_CURRY_FLAG],
            ['curryRight', WRAP_CURRY_RIGHT_FLAG],
            ['flip', WRAP_FLIP_FLAG],
            ['partial', WRAP_PARTIAL_FLAG],
            ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],
            ['rearg', WRAP_REARG_FLAG],
        ];

        /** `Object#toString` result references. */
        var argsTag = '[object Arguments]',
            arrayTag = '[object Array]',
            asyncTag = '[object AsyncFunction]',
            boolTag = '[object Boolean]',
            dateTag = '[object Date]',
            domExcTag = '[object DOMException]',
            errorTag = '[object Error]',
            funcTag = '[object Function]',
            genTag = '[object GeneratorFunction]',
            mapTag = '[object Map]',
            numberTag = '[object Number]',
            nullTag = '[object Null]',
            objectTag = '[object Object]',
            promiseTag = '[object Promise]',
            proxyTag = '[object Proxy]',
            regexpTag = '[object RegExp]',
            setTag = '[object Set]',
            stringTag = '[object String]',
            symbolTag = '[object Symbol]',
            undefinedTag = '[object Undefined]',
            weakMapTag = '[object WeakMap]',
            weakSetTag = '[object WeakSet]';

        var arrayBufferTag = '[object ArrayBuffer]',
            dataViewTag = '[object DataView]',
            float32Tag = '[object Float32Array]',
            float64Tag = '[object Float64Array]',
            int8Tag = '[object Int8Array]',
            int16Tag = '[object Int16Array]',
            int32Tag = '[object Int32Array]',
            uint8Tag = '[object Uint8Array]',
            uint8ClampedTag = '[object Uint8ClampedArray]',
            uint16Tag = '[object Uint16Array]',
            uint32Tag = '[object Uint32Array]';

        /** Used to match empty string literals in compiled template source. */
        var reEmptyStringLeading = /\b__p \+= '';/g,
            reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
            reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

        /** Used to match HTML entities and HTML characters. */
        var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
            reUnescapedHtml = /[&<>"']/g,
            reHasEscapedHtml = RegExp(reEscapedHtml.source),
            reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

        /** Used to match template delimiters. */
        var reEscape = /<%-([\s\S]+?)%>/g,
            reEvaluate = /<%([\s\S]+?)%>/g,
            reInterpolate = /<%=([\s\S]+?)%>/g;

        /** Used to match property names within property paths. */
        var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
            reIsPlainProp = /^\w*$/,
            rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

        /**
         * Used to match `RegExp`
         * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
         */
        var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
            reHasRegExpChar = RegExp(reRegExpChar.source);

        /** Used to match leading whitespace. */
        var reTrimStart = /^\s+/;

        /** Used to match a single whitespace character. */
        var reWhitespace = /\s/;

        /** Used to match wrap detail comments. */
        var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
            reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
            reSplitDetails = /,? & /;

        /** Used to match words composed of alphanumeric characters. */
        var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

        /**
         * Used to validate the `validate` option in `_.template` variable.
         *
         * Forbids characters which could potentially change the meaning of the function argument definition:
         * - "()," (modification of function parameters)
         * - "=" (default value)
         * - "[]{}" (destructuring of function parameters)
         * - "/" (beginning of a comment)
         * - whitespace
         */
        var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;

        /** Used to match backslashes in property paths. */
        var reEscapeChar = /\\(\\)?/g;

        /**
         * Used to match
         * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
         */
        var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

        /** Used to match `RegExp` flags from their coerced string values. */
        var reFlags = /\w*$/;

        /** Used to detect bad signed hexadecimal string values. */
        var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

        /** Used to detect binary string values. */
        var reIsBinary = /^0b[01]+$/i;

        /** Used to detect host constructors (Safari). */
        var reIsHostCtor = /^\[object .+?Constructor\]$/;

        /** Used to detect octal string values. */
        var reIsOctal = /^0o[0-7]+$/i;

        /** Used to detect unsigned integer values. */
        var reIsUint = /^(?:0|[1-9]\d*)$/;

        /** Used to match Latin Unicode letters (excluding mathematical operators). */
        var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

        /** Used to ensure capturing order of template delimiters. */
        var reNoMatch = /($^)/;

        /** Used to match unescaped characters in compiled string literals. */
        var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

        /** Used to compose unicode character classes. */
        var rsAstralRange = '\\ud800-\\udfff',
            rsComboMarksRange = '\\u0300-\\u036f',
            reComboHalfMarksRange = '\\ufe20-\\ufe2f',
            rsComboSymbolsRange = '\\u20d0-\\u20ff',
            rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
            rsDingbatRange = '\\u2700-\\u27bf',
            rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
            rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
            rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
            rsPunctuationRange = '\\u2000-\\u206f',
            rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
            rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
            rsVarRange = '\\ufe0e\\ufe0f',
            rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

        /** Used to compose unicode capture groups. */
        var rsApos = "['\u2019]",
            rsAstral = '[' + rsAstralRange + ']',
            rsBreak = '[' + rsBreakRange + ']',
            rsCombo = '[' + rsComboRange + ']',
            rsDigits = '\\d+',
            rsDingbat = '[' + rsDingbatRange + ']',
            rsLower = '[' + rsLowerRange + ']',
            rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
            rsFitz = '\\ud83c[\\udffb-\\udfff]',
            rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
            rsNonAstral = '[^' + rsAstralRange + ']',
            rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
            rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
            rsUpper = '[' + rsUpperRange + ']',
            rsZWJ = '\\u200d';

        /** Used to compose unicode regexes. */
        var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
            rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
            rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
            rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
            reOptMod = rsModifier + '?',
            rsOptVar = '[' + rsVarRange + ']?',
            rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
            rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
            rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
            rsSeq = rsOptVar + reOptMod + rsOptJoin,
            rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
            rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

        /** Used to match apostrophes. */
        var reApos = RegExp(rsApos, 'g');

        /**
         * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
         * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
         */
        var reComboMark = RegExp(rsCombo, 'g');

        /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
        var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

        /** Used to match complex or compound words. */
        var reUnicodeWord = RegExp(
            [
                rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
                rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
                rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
                rsUpper + '+' + rsOptContrUpper,
                rsOrdUpper,
                rsOrdLower,
                rsDigits,
                rsEmoji,
            ].join('|'),
            'g'
        );

        /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
        var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + ']');

        /** Used to detect strings that need a more robust regexp to match words. */
        var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

        /** Used to assign default `context` object properties. */
        var contextProps = [
            'Array',
            'Buffer',
            'DataView',
            'Date',
            'Error',
            'Float32Array',
            'Float64Array',
            'Function',
            'Int8Array',
            'Int16Array',
            'Int32Array',
            'Map',
            'Math',
            'Object',
            'Promise',
            'RegExp',
            'Set',
            'String',
            'Symbol',
            'TypeError',
            'Uint8Array',
            'Uint8ClampedArray',
            'Uint16Array',
            'Uint32Array',
            'WeakMap',
            '_',
            'clearTimeout',
            'isFinite',
            'parseInt',
            'setTimeout',
        ];

        /** Used to make template sourceURLs easier to identify. */
        var templateCounter = -1;

        /** Used to identify `toStringTag` values of typed arrays. */
        var typedArrayTags = {};
        typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
        typedArrayTags[argsTag] =
            typedArrayTags[arrayTag] =
            typedArrayTags[arrayBufferTag] =
            typedArrayTags[boolTag] =
            typedArrayTags[dataViewTag] =
            typedArrayTags[dateTag] =
            typedArrayTags[errorTag] =
            typedArrayTags[funcTag] =
            typedArrayTags[mapTag] =
            typedArrayTags[numberTag] =
            typedArrayTags[objectTag] =
            typedArrayTags[regexpTag] =
            typedArrayTags[setTag] =
            typedArrayTags[stringTag] =
            typedArrayTags[weakMapTag] =
                false;

        /** Used to identify `toStringTag` values supported by `_.clone`. */
        var cloneableTags = {};
        cloneableTags[argsTag] =
            cloneableTags[arrayTag] =
            cloneableTags[arrayBufferTag] =
            cloneableTags[dataViewTag] =
            cloneableTags[boolTag] =
            cloneableTags[dateTag] =
            cloneableTags[float32Tag] =
            cloneableTags[float64Tag] =
            cloneableTags[int8Tag] =
            cloneableTags[int16Tag] =
            cloneableTags[int32Tag] =
            cloneableTags[mapTag] =
            cloneableTags[numberTag] =
            cloneableTags[objectTag] =
            cloneableTags[regexpTag] =
            cloneableTags[setTag] =
            cloneableTags[stringTag] =
            cloneableTags[symbolTag] =
            cloneableTags[uint8Tag] =
            cloneableTags[uint8ClampedTag] =
            cloneableTags[uint16Tag] =
            cloneableTags[uint32Tag] =
                true;
        cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;

        /** Used to map Latin Unicode letters to basic Latin letters. */
        var deburredLetters = {
            // Latin-1 Supplement block.
            '\xc0': 'A',
            '\xc1': 'A',
            '\xc2': 'A',
            '\xc3': 'A',
            '\xc4': 'A',
            '\xc5': 'A',
            '\xe0': 'a',
            '\xe1': 'a',
            '\xe2': 'a',
            '\xe3': 'a',
            '\xe4': 'a',
            '\xe5': 'a',
            '\xc7': 'C',
            '\xe7': 'c',
            '\xd0': 'D',
            '\xf0': 'd',
            '\xc8': 'E',
            '\xc9': 'E',
            '\xca': 'E',
            '\xcb': 'E',
            '\xe8': 'e',
            '\xe9': 'e',
            '\xea': 'e',
            '\xeb': 'e',
            '\xcc': 'I',
            '\xcd': 'I',
            '\xce': 'I',
            '\xcf': 'I',
            '\xec': 'i',
            '\xed': 'i',
            '\xee': 'i',
            '\xef': 'i',
            '\xd1': 'N',
            '\xf1': 'n',
            '\xd2': 'O',
            '\xd3': 'O',
            '\xd4': 'O',
            '\xd5': 'O',
            '\xd6': 'O',
            '\xd8': 'O',
            '\xf2': 'o',
            '\xf3': 'o',
            '\xf4': 'o',
            '\xf5': 'o',
            '\xf6': 'o',
            '\xf8': 'o',
            '\xd9': 'U',
            '\xda': 'U',
            '\xdb': 'U',
            '\xdc': 'U',
            '\xf9': 'u',
            '\xfa': 'u',
            '\xfb': 'u',
            '\xfc': 'u',
            '\xdd': 'Y',
            '\xfd': 'y',
            '\xff': 'y',
            '\xc6': 'Ae',
            '\xe6': 'ae',
            '\xde': 'Th',
            '\xfe': 'th',
            '\xdf': 'ss',
            // Latin Extended-A block.
            '\u0100': 'A',
            '\u0102': 'A',
            '\u0104': 'A',
            '\u0101': 'a',
            '\u0103': 'a',
            '\u0105': 'a',
            '\u0106': 'C',
            '\u0108': 'C',
            '\u010a': 'C',
            '\u010c': 'C',
            '\u0107': 'c',
            '\u0109': 'c',
            '\u010b': 'c',
            '\u010d': 'c',
            '\u010e': 'D',
            '\u0110': 'D',
            '\u010f': 'd',
            '\u0111': 'd',
            '\u0112': 'E',
            '\u0114': 'E',
            '\u0116': 'E',
            '\u0118': 'E',
            '\u011a': 'E',
            '\u0113': 'e',
            '\u0115': 'e',
            '\u0117': 'e',
            '\u0119': 'e',
            '\u011b': 'e',
            '\u011c': 'G',
            '\u011e': 'G',
            '\u0120': 'G',
            '\u0122': 'G',
            '\u011d': 'g',
            '\u011f': 'g',
            '\u0121': 'g',
            '\u0123': 'g',
            '\u0124': 'H',
            '\u0126': 'H',
            '\u0125': 'h',
            '\u0127': 'h',
            '\u0128': 'I',
            '\u012a': 'I',
            '\u012c': 'I',
            '\u012e': 'I',
            '\u0130': 'I',
            '\u0129': 'i',
            '\u012b': 'i',
            '\u012d': 'i',
            '\u012f': 'i',
            '\u0131': 'i',
            '\u0134': 'J',
            '\u0135': 'j',
            '\u0136': 'K',
            '\u0137': 'k',
            '\u0138': 'k',
            '\u0139': 'L',
            '\u013b': 'L',
            '\u013d': 'L',
            '\u013f': 'L',
            '\u0141': 'L',
            '\u013a': 'l',
            '\u013c': 'l',
            '\u013e': 'l',
            '\u0140': 'l',
            '\u0142': 'l',
            '\u0143': 'N',
            '\u0145': 'N',
            '\u0147': 'N',
            '\u014a': 'N',
            '\u0144': 'n',
            '\u0146': 'n',
            '\u0148': 'n',
            '\u014b': 'n',
            '\u014c': 'O',
            '\u014e': 'O',
            '\u0150': 'O',
            '\u014d': 'o',
            '\u014f': 'o',
            '\u0151': 'o',
            '\u0154': 'R',
            '\u0156': 'R',
            '\u0158': 'R',
            '\u0155': 'r',
            '\u0157': 'r',
            '\u0159': 'r',
            '\u015a': 'S',
            '\u015c': 'S',
            '\u015e': 'S',
            '\u0160': 'S',
            '\u015b': 's',
            '\u015d': 's',
            '\u015f': 's',
            '\u0161': 's',
            '\u0162': 'T',
            '\u0164': 'T',
            '\u0166': 'T',
            '\u0163': 't',
            '\u0165': 't',
            '\u0167': 't',
            '\u0168': 'U',
            '\u016a': 'U',
            '\u016c': 'U',
            '\u016e': 'U',
            '\u0170': 'U',
            '\u0172': 'U',
            '\u0169': 'u',
            '\u016b': 'u',
            '\u016d': 'u',
            '\u016f': 'u',
            '\u0171': 'u',
            '\u0173': 'u',
            '\u0174': 'W',
            '\u0175': 'w',
            '\u0176': 'Y',
            '\u0177': 'y',
            '\u0178': 'Y',
            '\u0179': 'Z',
            '\u017b': 'Z',
            '\u017d': 'Z',
            '\u017a': 'z',
            '\u017c': 'z',
            '\u017e': 'z',
            '\u0132': 'IJ',
            '\u0133': 'ij',
            '\u0152': 'Oe',
            '\u0153': 'oe',
            '\u0149': "'n",
            '\u017f': 's',
        };

        /** Used to map characters to HTML entities. */
        var htmlEscapes = {
            '&': '&amp;',
            '<': '&lt;',
            '>': '&gt;',
            '"': '&quot;',
            "'": '&#39;',
        };

        /** Used to map HTML entities to characters. */
        var htmlUnescapes = {
            '&amp;': '&',
            '&lt;': '<',
            '&gt;': '>',
            '&quot;': '"',
            '&#39;': "'",
        };

        /** Used to escape characters for inclusion in compiled string literals. */
        var stringEscapes = {
            '\\': '\\',
            "'": "'",
            '\n': 'n',
            '\r': 'r',
            '\u2028': 'u2028',
            '\u2029': 'u2029',
        };

        /** Built-in method references without a dependency on `root`. */
        var freeParseFloat = parseFloat,
            freeParseInt = parseInt;

        /** Detect free variable `global` from Node.js. */
        var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

        /** Detect free variable `self`. */
        var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

        /** Used as a reference to the global object. */
        var root = freeGlobal || freeSelf || Function('return this')();

        /** Detect free variable `exports`. */
        var freeExports = exports && !exports.nodeType && exports;

        /** Detect free variable `module`. */
        var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

        /** Detect the popular CommonJS extension `module.exports`. */
        var moduleExports = freeModule && freeModule.exports === freeExports;

        /** Detect free variable `process` from Node.js. */
        var freeProcess = moduleExports && freeGlobal.process;

        /** Used to access faster Node.js helpers. */
        var nodeUtil = (function () {
            try {
                // Use `util.types` for Node.js 10+.
                var types = freeModule && freeModule.require && freeModule.require('util').types;

                if (types) {
                    return types;
                }

                // Legacy `process.binding('util')` for Node.js < 10.
                return freeProcess && freeProcess.binding && freeProcess.binding('util');
            } catch (e) {}
        })();

        /* Node.js helper references. */
        var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
            nodeIsDate = nodeUtil && nodeUtil.isDate,
            nodeIsMap = nodeUtil && nodeUtil.isMap,
            nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
            nodeIsSet = nodeUtil && nodeUtil.isSet,
            nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

        /*--------------------------------------------------------------------------*/

        /**
         * A faster alternative to `Function#apply`, this function invokes `func`
         * with the `this` binding of `thisArg` and the arguments of `args`.
         *
         * @private
         * @param {Function} func The function to invoke.
         * @param {*} thisArg The `this` binding of `func`.
         * @param {Array} args The arguments to invoke `func` with.
         * @returns {*} Returns the result of `func`.
         */
        function apply(func, thisArg, args) {
            switch (args.length) {
                case 0:
                    return func.call(thisArg);
                case 1:
                    return func.call(thisArg, args[0]);
                case 2:
                    return func.call(thisArg, args[0], args[1]);
                case 3:
                    return func.call(thisArg, args[0], args[1], args[2]);
            }
            return func.apply(thisArg, args);
        }

        /**
         * A specialized version of `baseAggregator` for arrays.
         *
         * @private
         * @param {Array} [array] The array to iterate over.
         * @param {Function} setter The function to set `accumulator` values.
         * @param {Function} iteratee The iteratee to transform keys.
         * @param {Object} accumulator The initial aggregated object.
         * @returns {Function} Returns `accumulator`.
         */
        function arrayAggregator(array, setter, iteratee, accumulator) {
            var index = -1,
                length = array == null ? 0 : array.length;

            while (++index < length) {
                var value = array[index];
                setter(accumulator, value, iteratee(value), array);
            }
            return accumulator;
        }

        /**
         * A specialized version of `_.forEach` for arrays without support for
         * iteratee shorthands.
         *
         * @private
         * @param {Array} [array] The array to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @returns {Array} Returns `array`.
         */
        function arrayEach(array, iteratee) {
            var index = -1,
                length = array == null ? 0 : array.length;

            while (++index < length) {
                if (iteratee(array[index], index, array) === false) {
                    break;
                }
            }
            return array;
        }

        /**
         * A specialized version of `_.forEachRight` for arrays without support for
         * iteratee shorthands.
         *
         * @private
         * @param {Array} [array] The array to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @returns {Array} Returns `array`.
         */
        function arrayEachRight(array, iteratee) {
            var length = array == null ? 0 : array.length;

            while (length--) {
                if (iteratee(array[length], length, array) === false) {
                    break;
                }
            }
            return array;
        }

        /**
         * A specialized version of `_.every` for arrays without support for
         * iteratee shorthands.
         *
         * @private
         * @param {Array} [array] The array to iterate over.
         * @param {Function} predicate The function invoked per iteration.
         * @returns {boolean} Returns `true` if all elements pass the predicate check,
         *  else `false`.
         */
        function arrayEvery(array, predicate) {
            var index = -1,
                length = array == null ? 0 : array.length;

            while (++index < length) {
                if (!predicate(array[index], index, array)) {
                    return false;
                }
            }
            return true;
        }

        /**
         * A specialized version of `_.filter` for arrays without support for
         * iteratee shorthands.
         *
         * @private
         * @param {Array} [array] The array to iterate over.
         * @param {Function} predicate The function invoked per iteration.
         * @returns {Array} Returns the new filtered array.
         */
        function arrayFilter(array, predicate) {
            var index = -1,
                length = array == null ? 0 : array.length,
                resIndex = 0,
                result = [];

            while (++index < length) {
                var value = array[index];
                if (predicate(value, index, array)) {
                    result[resIndex++] = value;
                }
            }
            return result;
        }

        /**
         * A specialized version of `_.includes` for arrays without support for
         * specifying an index to search from.
         *
         * @private
         * @param {Array} [array] The array to inspect.
         * @param {*} target The value to search for.
         * @returns {boolean} Returns `true` if `target` is found, else `false`.
         */
        function arrayIncludes(array, value) {
            var length = array == null ? 0 : array.length;
            return !!length && baseIndexOf(array, value, 0) > -1;
        }

        /**
         * This function is like `arrayIncludes` except that it accepts a comparator.
         *
         * @private
         * @param {Array} [array] The array to inspect.
         * @param {*} target The value to search for.
         * @param {Function} comparator The comparator invoked per element.
         * @returns {boolean} Returns `true` if `target` is found, else `false`.
         */
        function arrayIncludesWith(array, value, comparator) {
            var index = -1,
                length = array == null ? 0 : array.length;

            while (++index < length) {
                if (comparator(value, array[index])) {
                    return true;
                }
            }
            return false;
        }

        /**
         * A specialized version of `_.map` for arrays without support for iteratee
         * shorthands.
         *
         * @private
         * @param {Array} [array] The array to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @returns {Array} Returns the new mapped array.
         */
        function arrayMap(array, iteratee) {
            var index = -1,
                length = array == null ? 0 : array.length,
                result = Array(length);

            while (++index < length) {
                result[index] = iteratee(array[index], index, array);
            }
            return result;
        }

        /**
         * Appends the elements of `values` to `array`.
         *
         * @private
         * @param {Array} array The array to modify.
         * @param {Array} values The values to append.
         * @returns {Array} Returns `array`.
         */
        function arrayPush(array, values) {
            var index = -1,
                length = values.length,
                offset = array.length;

            while (++index < length) {
                array[offset + index] = values[index];
            }
            return array;
        }

        /**
         * A specialized version of `_.reduce` for arrays without support for
         * iteratee shorthands.
         *
         * @private
         * @param {Array} [array] The array to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @param {*} [accumulator] The initial value.
         * @param {boolean} [initAccum] Specify using the first element of `array` as
         *  the initial value.
         * @returns {*} Returns the accumulated value.
         */
        function arrayReduce(array, iteratee, accumulator, initAccum) {
            var index = -1,
                length = array == null ? 0 : array.length;

            if (initAccum && length) {
                accumulator = array[++index];
            }
            while (++index < length) {
                accumulator = iteratee(accumulator, array[index], index, array);
            }
            return accumulator;
        }

        /**
         * A specialized version of `_.reduceRight` for arrays without support for
         * iteratee shorthands.
         *
         * @private
         * @param {Array} [array] The array to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @param {*} [accumulator] The initial value.
         * @param {boolean} [initAccum] Specify using the last element of `array` as
         *  the initial value.
         * @returns {*} Returns the accumulated value.
         */
        function arrayReduceRight(array, iteratee, accumulator, initAccum) {
            var length = array == null ? 0 : array.length;
            if (initAccum && length) {
                accumulator = array[--length];
            }
            while (length--) {
                accumulator = iteratee(accumulator, array[length], length, array);
            }
            return accumulator;
        }

        /**
         * A specialized version of `_.some` for arrays without support for iteratee
         * shorthands.
         *
         * @private
         * @param {Array} [array] The array to iterate over.
         * @param {Function} predicate The function invoked per iteration.
         * @returns {boolean} Returns `true` if any element passes the predicate check,
         *  else `false`.
         */
        function arraySome(array, predicate) {
            var index = -1,
                length = array == null ? 0 : array.length;

            while (++index < length) {
                if (predicate(array[index], index, array)) {
                    return true;
                }
            }
            return false;
        }

        /**
         * Gets the size of an ASCII `string`.
         *
         * @private
         * @param {string} string The string inspect.
         * @returns {number} Returns the string size.
         */
        var asciiSize = baseProperty('length');

        /**
         * Converts an ASCII `string` to an array.
         *
         * @private
         * @param {string} string The string to convert.
         * @returns {Array} Returns the converted array.
         */
        function asciiToArray(string) {
            return string.split('');
        }

        /**
         * Splits an ASCII `string` into an array of its words.
         *
         * @private
         * @param {string} The string to inspect.
         * @returns {Array} Returns the words of `string`.
         */
        function asciiWords(string) {
            return string.match(reAsciiWord) || [];
        }

        /**
         * The base implementation of methods like `_.findKey` and `_.findLastKey`,
         * without support for iteratee shorthands, which iterates over `collection`
         * using `eachFunc`.
         *
         * @private
         * @param {Array|Object} collection The collection to inspect.
         * @param {Function} predicate The function invoked per iteration.
         * @param {Function} eachFunc The function to iterate over `collection`.
         * @returns {*} Returns the found element or its key, else `undefined`.
         */
        function baseFindKey(collection, predicate, eachFunc) {
            var result;
            eachFunc(collection, function (value, key, collection) {
                if (predicate(value, key, collection)) {
                    result = key;
                    return false;
                }
            });
            return result;
        }

        /**
         * The base implementation of `_.findIndex` and `_.findLastIndex` without
         * support for iteratee shorthands.
         *
         * @private
         * @param {Array} array The array to inspect.
         * @param {Function} predicate The function invoked per iteration.
         * @param {number} fromIndex The index to search from.
         * @param {boolean} [fromRight] Specify iterating from right to left.
         * @returns {number} Returns the index of the matched value, else `-1`.
         */
        function baseFindIndex(array, predicate, fromIndex, fromRight) {
            var length = array.length,
                index = fromIndex + (fromRight ? 1 : -1);

            while (fromRight ? index-- : ++index < length) {
                if (predicate(array[index], index, array)) {
                    return index;
                }
            }
            return -1;
        }

        /**
         * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
         *
         * @private
         * @param {Array} array The array to inspect.
         * @param {*} value The value to search for.
         * @param {number} fromIndex The index to search from.
         * @returns {number} Returns the index of the matched value, else `-1`.
         */
        function baseIndexOf(array, value, fromIndex) {
            return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);
        }

        /**
         * This function is like `baseIndexOf` except that it accepts a comparator.
         *
         * @private
         * @param {Array} array The array to inspect.
         * @param {*} value The value to search for.
         * @param {number} fromIndex The index to search from.
         * @param {Function} comparator The comparator invoked per element.
         * @returns {number} Returns the index of the matched value, else `-1`.
         */
        function baseIndexOfWith(array, value, fromIndex, comparator) {
            var index = fromIndex - 1,
                length = array.length;

            while (++index < length) {
                if (comparator(array[index], value)) {
                    return index;
                }
            }
            return -1;
        }

        /**
         * The base implementation of `_.isNaN` without support for number objects.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
         */
        function baseIsNaN(value) {
            return value !== value;
        }

        /**
         * The base implementation of `_.mean` and `_.meanBy` without support for
         * iteratee shorthands.
         *
         * @private
         * @param {Array} array The array to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @returns {number} Returns the mean.
         */
        function baseMean(array, iteratee) {
            var length = array == null ? 0 : array.length;
            return length ? baseSum(array, iteratee) / length : NAN;
        }

        /**
         * The base implementation of `_.property` without support for deep paths.
         *
         * @private
         * @param {string} key The key of the property to get.
         * @returns {Function} Returns the new accessor function.
         */
        function baseProperty(key) {
            return function (object) {
                return object == null ? undefined$1 : object[key];
            };
        }

        /**
         * The base implementation of `_.propertyOf` without support for deep paths.
         *
         * @private
         * @param {Object} object The object to query.
         * @returns {Function} Returns the new accessor function.
         */
        function basePropertyOf(object) {
            return function (key) {
                return object == null ? undefined$1 : object[key];
            };
        }

        /**
         * The base implementation of `_.reduce` and `_.reduceRight`, without support
         * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
         *
         * @private
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @param {*} accumulator The initial value.
         * @param {boolean} initAccum Specify using the first or last element of
         *  `collection` as the initial value.
         * @param {Function} eachFunc The function to iterate over `collection`.
         * @returns {*} Returns the accumulated value.
         */
        function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
            eachFunc(collection, function (value, index, collection) {
                accumulator = initAccum ? ((initAccum = false), value) : iteratee(accumulator, value, index, collection);
            });
            return accumulator;
        }

        /**
         * The base implementation of `_.sortBy` which uses `comparer` to define the
         * sort order of `array` and replaces criteria objects with their corresponding
         * values.
         *
         * @private
         * @param {Array} array The array to sort.
         * @param {Function} comparer The function to define sort order.
         * @returns {Array} Returns `array`.
         */
        function baseSortBy(array, comparer) {
            var length = array.length;

            array.sort(comparer);
            while (length--) {
                array[length] = array[length].value;
            }
            return array;
        }

        /**
         * The base implementation of `_.sum` and `_.sumBy` without support for
         * iteratee shorthands.
         *
         * @private
         * @param {Array} array The array to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @returns {number} Returns the sum.
         */
        function baseSum(array, iteratee) {
            var result,
                index = -1,
                length = array.length;

            while (++index < length) {
                var current = iteratee(array[index]);
                if (current !== undefined$1) {
                    result = result === undefined$1 ? current : result + current;
                }
            }
            return result;
        }

        /**
         * The base implementation of `_.times` without support for iteratee shorthands
         * or max array length checks.
         *
         * @private
         * @param {number} n The number of times to invoke `iteratee`.
         * @param {Function} iteratee The function invoked per iteration.
         * @returns {Array} Returns the array of results.
         */
        function baseTimes(n, iteratee) {
            var index = -1,
                result = Array(n);

            while (++index < n) {
                result[index] = iteratee(index);
            }
            return result;
        }

        /**
         * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
         * of key-value pairs for `object` corresponding to the property names of `props`.
         *
         * @private
         * @param {Object} object The object to query.
         * @param {Array} props The property names to get values for.
         * @returns {Object} Returns the key-value pairs.
         */
        function baseToPairs(object, props) {
            return arrayMap(props, function (key) {
                return [key, object[key]];
            });
        }

        /**
         * The base implementation of `_.trim`.
         *
         * @private
         * @param {string} string The string to trim.
         * @returns {string} Returns the trimmed string.
         */
        function baseTrim(string) {
            return string ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '') : string;
        }

        /**
         * The base implementation of `_.unary` without support for storing metadata.
         *
         * @private
         * @param {Function} func The function to cap arguments for.
         * @returns {Function} Returns the new capped function.
         */
        function baseUnary(func) {
            return function (value) {
                return func(value);
            };
        }

        /**
         * The base implementation of `_.values` and `_.valuesIn` which creates an
         * array of `object` property values corresponding to the property names
         * of `props`.
         *
         * @private
         * @param {Object} object The object to query.
         * @param {Array} props The property names to get values for.
         * @returns {Object} Returns the array of property values.
         */
        function baseValues(object, props) {
            return arrayMap(props, function (key) {
                return object[key];
            });
        }

        /**
         * Checks if a `cache` value for `key` exists.
         *
         * @private
         * @param {Object} cache The cache to query.
         * @param {string} key The key of the entry to check.
         * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
         */
        function cacheHas(cache, key) {
            return cache.has(key);
        }

        /**
         * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
         * that is not found in the character symbols.
         *
         * @private
         * @param {Array} strSymbols The string symbols to inspect.
         * @param {Array} chrSymbols The character symbols to find.
         * @returns {number} Returns the index of the first unmatched string symbol.
         */
        function charsStartIndex(strSymbols, chrSymbols) {
            var index = -1,
                length = strSymbols.length;

            while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
            return index;
        }

        /**
         * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
         * that is not found in the character symbols.
         *
         * @private
         * @param {Array} strSymbols The string symbols to inspect.
         * @param {Array} chrSymbols The character symbols to find.
         * @returns {number} Returns the index of the last unmatched string symbol.
         */
        function charsEndIndex(strSymbols, chrSymbols) {
            var index = strSymbols.length;

            while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
            return index;
        }

        /**
         * Gets the number of `placeholder` occurrences in `array`.
         *
         * @private
         * @param {Array} array The array to inspect.
         * @param {*} placeholder The placeholder to search for.
         * @returns {number} Returns the placeholder count.
         */
        function countHolders(array, placeholder) {
            var length = array.length,
                result = 0;

            while (length--) {
                if (array[length] === placeholder) {
                    ++result;
                }
            }
            return result;
        }

        /**
         * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
         * letters to basic Latin letters.
         *
         * @private
         * @param {string} letter The matched letter to deburr.
         * @returns {string} Returns the deburred letter.
         */
        var deburrLetter = basePropertyOf(deburredLetters);

        /**
         * Used by `_.escape` to convert characters to HTML entities.
         *
         * @private
         * @param {string} chr The matched character to escape.
         * @returns {string} Returns the escaped character.
         */
        var escapeHtmlChar = basePropertyOf(htmlEscapes);

        /**
         * Used by `_.template` to escape characters for inclusion in compiled string literals.
         *
         * @private
         * @param {string} chr The matched character to escape.
         * @returns {string} Returns the escaped character.
         */
        function escapeStringChar(chr) {
            return '\\' + stringEscapes[chr];
        }

        /**
         * Gets the value at `key` of `object`.
         *
         * @private
         * @param {Object} [object] The object to query.
         * @param {string} key The key of the property to get.
         * @returns {*} Returns the property value.
         */
        function getValue(object, key) {
            return object == null ? undefined$1 : object[key];
        }

        /**
         * Checks if `string` contains Unicode symbols.
         *
         * @private
         * @param {string} string The string to inspect.
         * @returns {boolean} Returns `true` if a symbol is found, else `false`.
         */
        function hasUnicode(string) {
            return reHasUnicode.test(string);
        }

        /**
         * Checks if `string` contains a word composed of Unicode symbols.
         *
         * @private
         * @param {string} string The string to inspect.
         * @returns {boolean} Returns `true` if a word is found, else `false`.
         */
        function hasUnicodeWord(string) {
            return reHasUnicodeWord.test(string);
        }

        /**
         * Converts `iterator` to an array.
         *
         * @private
         * @param {Object} iterator The iterator to convert.
         * @returns {Array} Returns the converted array.
         */
        function iteratorToArray(iterator) {
            var data,
                result = [];

            while (!(data = iterator.next()).done) {
                result.push(data.value);
            }
            return result;
        }

        /**
         * Converts `map` to its key-value pairs.
         *
         * @private
         * @param {Object} map The map to convert.
         * @returns {Array} Returns the key-value pairs.
         */
        function mapToArray(map) {
            var index = -1,
                result = Array(map.size);

            map.forEach(function (value, key) {
                result[++index] = [key, value];
            });
            return result;
        }

        /**
         * Creates a unary function that invokes `func` with its argument transformed.
         *
         * @private
         * @param {Function} func The function to wrap.
         * @param {Function} transform The argument transform.
         * @returns {Function} Returns the new function.
         */
        function overArg(func, transform) {
            return function (arg) {
                return func(transform(arg));
            };
        }

        /**
         * Replaces all `placeholder` elements in `array` with an internal placeholder
         * and returns an array of their indexes.
         *
         * @private
         * @param {Array} array The array to modify.
         * @param {*} placeholder The placeholder to replace.
         * @returns {Array} Returns the new array of placeholder indexes.
         */
        function replaceHolders(array, placeholder) {
            var index = -1,
                length = array.length,
                resIndex = 0,
                result = [];

            while (++index < length) {
                var value = array[index];
                if (value === placeholder || value === PLACEHOLDER) {
                    array[index] = PLACEHOLDER;
                    result[resIndex++] = index;
                }
            }
            return result;
        }

        /**
         * Converts `set` to an array of its values.
         *
         * @private
         * @param {Object} set The set to convert.
         * @returns {Array} Returns the values.
         */
        function setToArray(set) {
            var index = -1,
                result = Array(set.size);

            set.forEach(function (value) {
                result[++index] = value;
            });
            return result;
        }

        /**
         * Converts `set` to its value-value pairs.
         *
         * @private
         * @param {Object} set The set to convert.
         * @returns {Array} Returns the value-value pairs.
         */
        function setToPairs(set) {
            var index = -1,
                result = Array(set.size);

            set.forEach(function (value) {
                result[++index] = [value, value];
            });
            return result;
        }

        /**
         * A specialized version of `_.indexOf` which performs strict equality
         * comparisons of values, i.e. `===`.
         *
         * @private
         * @param {Array} array The array to inspect.
         * @param {*} value The value to search for.
         * @param {number} fromIndex The index to search from.
         * @returns {number} Returns the index of the matched value, else `-1`.
         */
        function strictIndexOf(array, value, fromIndex) {
            var index = fromIndex - 1,
                length = array.length;

            while (++index < length) {
                if (array[index] === value) {
                    return index;
                }
            }
            return -1;
        }

        /**
         * A specialized version of `_.lastIndexOf` which performs strict equality
         * comparisons of values, i.e. `===`.
         *
         * @private
         * @param {Array} array The array to inspect.
         * @param {*} value The value to search for.
         * @param {number} fromIndex The index to search from.
         * @returns {number} Returns the index of the matched value, else `-1`.
         */
        function strictLastIndexOf(array, value, fromIndex) {
            var index = fromIndex + 1;
            while (index--) {
                if (array[index] === value) {
                    return index;
                }
            }
            return index;
        }

        /**
         * Gets the number of symbols in `string`.
         *
         * @private
         * @param {string} string The string to inspect.
         * @returns {number} Returns the string size.
         */
        function stringSize(string) {
            return hasUnicode(string) ? unicodeSize(string) : asciiSize(string);
        }

        /**
         * Converts `string` to an array.
         *
         * @private
         * @param {string} string The string to convert.
         * @returns {Array} Returns the converted array.
         */
        function stringToArray(string) {
            return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);
        }

        /**
         * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
         * character of `string`.
         *
         * @private
         * @param {string} string The string to inspect.
         * @returns {number} Returns the index of the last non-whitespace character.
         */
        function trimmedEndIndex(string) {
            var index = string.length;

            while (index-- && reWhitespace.test(string.charAt(index))) {}
            return index;
        }

        /**
         * Used by `_.unescape` to convert HTML entities to characters.
         *
         * @private
         * @param {string} chr The matched character to unescape.
         * @returns {string} Returns the unescaped character.
         */
        var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

        /**
         * Gets the size of a Unicode `string`.
         *
         * @private
         * @param {string} string The string inspect.
         * @returns {number} Returns the string size.
         */
        function unicodeSize(string) {
            var result = (reUnicode.lastIndex = 0);
            while (reUnicode.test(string)) {
                ++result;
            }
            return result;
        }

        /**
         * Converts a Unicode `string` to an array.
         *
         * @private
         * @param {string} string The string to convert.
         * @returns {Array} Returns the converted array.
         */
        function unicodeToArray(string) {
            return string.match(reUnicode) || [];
        }

        /**
         * Splits a Unicode `string` into an array of its words.
         *
         * @private
         * @param {string} The string to inspect.
         * @returns {Array} Returns the words of `string`.
         */
        function unicodeWords(string) {
            return string.match(reUnicodeWord) || [];
        }

        /*--------------------------------------------------------------------------*/

        /**
         * Create a new pristine `lodash` function using the `context` object.
         *
         * @static
         * @memberOf _
         * @since 1.1.0
         * @category Util
         * @param {Object} [context=root] The context object.
         * @returns {Function} Returns a new `lodash` function.
         * @example
         *
         * _.mixin({ 'foo': _.constant('foo') });
         *
         * var lodash = _.runInContext();
         * lodash.mixin({ 'bar': lodash.constant('bar') });
         *
         * _.isFunction(_.foo);
         * // => true
         * _.isFunction(_.bar);
         * // => false
         *
         * lodash.isFunction(lodash.foo);
         * // => false
         * lodash.isFunction(lodash.bar);
         * // => true
         *
         * // Create a suped-up `defer` in Node.js.
         * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
         */
        var runInContext = function runInContext(context) {
            context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));

            /** Built-in constructor references. */
            var Array = context.Array,
                Date = context.Date,
                Error = context.Error,
                Function = context.Function,
                Math = context.Math,
                Object = context.Object,
                RegExp = context.RegExp,
                String = context.String,
                TypeError = context.TypeError;

            /** Used for built-in method references. */
            var arrayProto = Array.prototype,
                funcProto = Function.prototype,
                objectProto = Object.prototype;

            /** Used to detect overreaching core-js shims. */
            var coreJsData = context['__core-js_shared__'];

            /** Used to resolve the decompiled source of functions. */
            var funcToString = funcProto.toString;

            /** Used to check objects for own properties. */
            var hasOwnProperty = objectProto.hasOwnProperty;

            /** Used to generate unique IDs. */
            var idCounter = 0;

            /** Used to detect methods masquerading as native. */
            var maskSrcKey = (function () {
                var uid = /[^.]+$/.exec((coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO) || '');
                return uid ? 'Symbol(src)_1.' + uid : '';
            })();

            /**
             * Used to resolve the
             * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
             * of values.
             */
            var nativeObjectToString = objectProto.toString;

            /** Used to infer the `Object` constructor. */
            var objectCtorString = funcToString.call(Object);

            /** Used to restore the original `_` reference in `_.noConflict`. */
            var oldDash = root._;

            /** Used to detect if a method is native. */
            var reIsNative = RegExp(
                '^' +
                    funcToString
                        .call(hasOwnProperty)
                        .replace(reRegExpChar, '\\$&')
                        .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') +
                    '$'
            );

            /** Built-in value references. */
            var Buffer = moduleExports ? context.Buffer : undefined$1,
                Symbol = context.Symbol,
                Uint8Array = context.Uint8Array,
                allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined$1,
                getPrototype = overArg(Object.getPrototypeOf, Object),
                objectCreate = Object.create,
                propertyIsEnumerable = objectProto.propertyIsEnumerable,
                splice = arrayProto.splice,
                spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined$1,
                symIterator = Symbol ? Symbol.iterator : undefined$1,
                symToStringTag = Symbol ? Symbol.toStringTag : undefined$1;

            var defineProperty = (function () {
                try {
                    var func = getNative(Object, 'defineProperty');
                    func({}, '', {});
                    return func;
                } catch (e) {}
            })();

            /** Mocked built-ins. */
            var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
                ctxNow = Date && Date.now !== root.Date.now && Date.now,
                ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;

            /* Built-in method references for those with the same name as other `lodash` methods. */
            var nativeCeil = Math.ceil,
                nativeFloor = Math.floor,
                nativeGetSymbols = Object.getOwnPropertySymbols,
                nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined$1,
                nativeIsFinite = context.isFinite,
                nativeJoin = arrayProto.join,
                nativeKeys = overArg(Object.keys, Object),
                nativeMax = Math.max,
                nativeMin = Math.min,
                nativeNow = Date.now,
                nativeParseInt = context.parseInt,
                nativeRandom = Math.random,
                nativeReverse = arrayProto.reverse;

            /* Built-in method references that are verified to be native. */
            var DataView = getNative(context, 'DataView'),
                Map = getNative(context, 'Map'),
                Promise = getNative(context, 'Promise'),
                Set = getNative(context, 'Set'),
                WeakMap = getNative(context, 'WeakMap'),
                nativeCreate = getNative(Object, 'create');

            /** Used to store function metadata. */
            var metaMap = WeakMap && new WeakMap();

            /** Used to lookup unminified function names. */
            var realNames = {};

            /** Used to detect maps, sets, and weakmaps. */
            var dataViewCtorString = toSource(DataView),
                mapCtorString = toSource(Map),
                promiseCtorString = toSource(Promise),
                setCtorString = toSource(Set),
                weakMapCtorString = toSource(WeakMap);

            /** Used to convert symbols to primitives and strings. */
            var symbolProto = Symbol ? Symbol.prototype : undefined$1,
                symbolValueOf = symbolProto ? symbolProto.valueOf : undefined$1,
                symbolToString = symbolProto ? symbolProto.toString : undefined$1;

            /*------------------------------------------------------------------------*/

            /**
             * Creates a `lodash` object which wraps `value` to enable implicit method
             * chain sequences. Methods that operate on and return arrays, collections,
             * and functions can be chained together. Methods that retrieve a single value
             * or may return a primitive value will automatically end the chain sequence
             * and return the unwrapped value. Otherwise, the value must be unwrapped
             * with `_#value`.
             *
             * Explicit chain sequences, which must be unwrapped with `_#value`, may be
             * enabled using `_.chain`.
             *
             * The execution of chained methods is lazy, that is, it's deferred until
             * `_#value` is implicitly or explicitly called.
             *
             * Lazy evaluation allows several methods to support shortcut fusion.
             * Shortcut fusion is an optimization to merge iteratee calls; this avoids
             * the creation of intermediate arrays and can greatly reduce the number of
             * iteratee executions. Sections of a chain sequence qualify for shortcut
             * fusion if the section is applied to an array and iteratees accept only
             * one argument. The heuristic for whether a section qualifies for shortcut
             * fusion is subject to change.
             *
             * Chaining is supported in custom builds as long as the `_#value` method is
             * directly or indirectly included in the build.
             *
             * In addition to lodash methods, wrappers have `Array` and `String` methods.
             *
             * The wrapper `Array` methods are:
             * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
             *
             * The wrapper `String` methods are:
             * `replace` and `split`
             *
             * The wrapper methods that support shortcut fusion are:
             * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
             * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
             * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
             *
             * The chainable wrapper methods are:
             * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
             * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
             * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
             * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
             * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
             * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
             * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
             * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
             * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
             * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
             * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
             * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
             * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
             * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
             * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
             * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
             * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
             * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
             * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
             * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
             * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
             * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
             * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
             * `zipObject`, `zipObjectDeep`, and `zipWith`
             *
             * The wrapper methods that are **not** chainable by default are:
             * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
             * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
             * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
             * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
             * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
             * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
             * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
             * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
             * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
             * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
             * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
             * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
             * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
             * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
             * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
             * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
             * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
             * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
             * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
             * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
             * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
             * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
             * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
             * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
             * `upperFirst`, `value`, and `words`
             *
             * @name _
             * @constructor
             * @category Seq
             * @param {*} value The value to wrap in a `lodash` instance.
             * @returns {Object} Returns the new `lodash` wrapper instance.
             * @example
             *
             * function square(n) {
             *   return n * n;
             * }
             *
             * var wrapped = _([1, 2, 3]);
             *
             * // Returns an unwrapped value.
             * wrapped.reduce(_.add);
             * // => 6
             *
             * // Returns a wrapped value.
             * var squares = wrapped.map(square);
             *
             * _.isArray(squares);
             * // => false
             *
             * _.isArray(squares.value());
             * // => true
             */
            function lodash(value) {
                if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
                    if (value instanceof LodashWrapper) {
                        return value;
                    }
                    if (hasOwnProperty.call(value, '__wrapped__')) {
                        return wrapperClone(value);
                    }
                }
                return new LodashWrapper(value);
            }

            /**
             * The base implementation of `_.create` without support for assigning
             * properties to the created object.
             *
             * @private
             * @param {Object} proto The object to inherit from.
             * @returns {Object} Returns the new object.
             */
            var baseCreate = (function () {
                function object() {}
                return function (proto) {
                    if (!isObject(proto)) {
                        return {};
                    }
                    if (objectCreate) {
                        return objectCreate(proto);
                    }
                    object.prototype = proto;
                    var result = new object();
                    object.prototype = undefined$1;
                    return result;
                };
            })();

            /**
             * The function whose prototype chain sequence wrappers inherit from.
             *
             * @private
             */
            function baseLodash() {
                // No operation performed.
            }

            /**
             * The base constructor for creating `lodash` wrapper objects.
             *
             * @private
             * @param {*} value The value to wrap.
             * @param {boolean} [chainAll] Enable explicit method chain sequences.
             */
            function LodashWrapper(value, chainAll) {
                this.__wrapped__ = value;
                this.__actions__ = [];
                this.__chain__ = !!chainAll;
                this.__index__ = 0;
                this.__values__ = undefined$1;
            }

            /**
             * By default, the template delimiters used by lodash are like those in
             * embedded Ruby (ERB) as well as ES2015 template strings. Change the
             * following template settings to use alternative delimiters.
             *
             * @static
             * @memberOf _
             * @type {Object}
             */
            lodash.templateSettings = {
                /**
                 * Used to detect `data` property values to be HTML-escaped.
                 *
                 * @memberOf _.templateSettings
                 * @type {RegExp}
                 */
                escape: reEscape,

                /**
                 * Used to detect code to be evaluated.
                 *
                 * @memberOf _.templateSettings
                 * @type {RegExp}
                 */
                evaluate: reEvaluate,

                /**
                 * Used to detect `data` property values to inject.
                 *
                 * @memberOf _.templateSettings
                 * @type {RegExp}
                 */
                interpolate: reInterpolate,

                /**
                 * Used to reference the data object in the template text.
                 *
                 * @memberOf _.templateSettings
                 * @type {string}
                 */
                variable: '',

                /**
                 * Used to import variables into the compiled template.
                 *
                 * @memberOf _.templateSettings
                 * @type {Object}
                 */
                imports: {
                    /**
                     * A reference to the `lodash` function.
                     *
                     * @memberOf _.templateSettings.imports
                     * @type {Function}
                     */
                    _: lodash,
                },
            };

            // Ensure wrappers are instances of `baseLodash`.
            lodash.prototype = baseLodash.prototype;
            lodash.prototype.constructor = lodash;

            LodashWrapper.prototype = baseCreate(baseLodash.prototype);
            LodashWrapper.prototype.constructor = LodashWrapper;

            /*------------------------------------------------------------------------*/

            /**
             * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
             *
             * @private
             * @constructor
             * @param {*} value The value to wrap.
             */
            function LazyWrapper(value) {
                this.__wrapped__ = value;
                this.__actions__ = [];
                this.__dir__ = 1;
                this.__filtered__ = false;
                this.__iteratees__ = [];
                this.__takeCount__ = MAX_ARRAY_LENGTH;
                this.__views__ = [];
            }

            /**
             * Creates a clone of the lazy wrapper object.
             *
             * @private
             * @name clone
             * @memberOf LazyWrapper
             * @returns {Object} Returns the cloned `LazyWrapper` object.
             */
            function lazyClone() {
                var result = new LazyWrapper(this.__wrapped__);
                result.__actions__ = copyArray(this.__actions__);
                result.__dir__ = this.__dir__;
                result.__filtered__ = this.__filtered__;
                result.__iteratees__ = copyArray(this.__iteratees__);
                result.__takeCount__ = this.__takeCount__;
                result.__views__ = copyArray(this.__views__);
                return result;
            }

            /**
             * Reverses the direction of lazy iteration.
             *
             * @private
             * @name reverse
             * @memberOf LazyWrapper
             * @returns {Object} Returns the new reversed `LazyWrapper` object.
             */
            function lazyReverse() {
                if (this.__filtered__) {
                    var result = new LazyWrapper(this);
                    result.__dir__ = -1;
                    result.__filtered__ = true;
                } else {
                    result = this.clone();
                    result.__dir__ *= -1;
                }
                return result;
            }

            /**
             * Extracts the unwrapped value from its lazy wrapper.
             *
             * @private
             * @name value
             * @memberOf LazyWrapper
             * @returns {*} Returns the unwrapped value.
             */
            function lazyValue() {
                var array = this.__wrapped__.value(),
                    dir = this.__dir__,
                    isArr = isArray(array),
                    isRight = dir < 0,
                    arrLength = isArr ? array.length : 0,
                    view = getView(0, arrLength, this.__views__),
                    start = view.start,
                    end = view.end,
                    length = end - start,
                    index = isRight ? end : start - 1,
                    iteratees = this.__iteratees__,
                    iterLength = iteratees.length,
                    resIndex = 0,
                    takeCount = nativeMin(length, this.__takeCount__);

                if (!isArr || (!isRight && arrLength == length && takeCount == length)) {
                    return baseWrapperValue(array, this.__actions__);
                }
                var result = [];

                outer: while (length-- && resIndex < takeCount) {
                    index += dir;

                    var iterIndex = -1,
                        value = array[index];

                    while (++iterIndex < iterLength) {
                        var data = iteratees[iterIndex],
                            iteratee = data.iteratee,
                            type = data.type,
                            computed = iteratee(value);

                        if (type == LAZY_MAP_FLAG) {
                            value = computed;
                        } else if (!computed) {
                            if (type == LAZY_FILTER_FLAG) {
                                continue outer;
                            } else {
                                break outer;
                            }
                        }
                    }
                    result[resIndex++] = value;
                }
                return result;
            }

            // Ensure `LazyWrapper` is an instance of `baseLodash`.
            LazyWrapper.prototype = baseCreate(baseLodash.prototype);
            LazyWrapper.prototype.constructor = LazyWrapper;

            /*------------------------------------------------------------------------*/

            /**
             * Creates a hash object.
             *
             * @private
             * @constructor
             * @param {Array} [entries] The key-value pairs to cache.
             */
            function Hash(entries) {
                var index = -1,
                    length = entries == null ? 0 : entries.length;

                this.clear();
                while (++index < length) {
                    var entry = entries[index];
                    this.set(entry[0], entry[1]);
                }
            }

            /**
             * Removes all key-value entries from the hash.
             *
             * @private
             * @name clear
             * @memberOf Hash
             */
            function hashClear() {
                this.__data__ = nativeCreate ? nativeCreate(null) : {};
                this.size = 0;
            }

            /**
             * Removes `key` and its value from the hash.
             *
             * @private
             * @name delete
             * @memberOf Hash
             * @param {Object} hash The hash to modify.
             * @param {string} key The key of the value to remove.
             * @returns {boolean} Returns `true` if the entry was removed, else `false`.
             */
            function hashDelete(key) {
                var result = this.has(key) && delete this.__data__[key];
                this.size -= result ? 1 : 0;
                return result;
            }

            /**
             * Gets the hash value for `key`.
             *
             * @private
             * @name get
             * @memberOf Hash
             * @param {string} key The key of the value to get.
             * @returns {*} Returns the entry value.
             */
            function hashGet(key) {
                var data = this.__data__;
                if (nativeCreate) {
                    var result = data[key];
                    return result === HASH_UNDEFINED ? undefined$1 : result;
                }
                return hasOwnProperty.call(data, key) ? data[key] : undefined$1;
            }

            /**
             * Checks if a hash value for `key` exists.
             *
             * @private
             * @name has
             * @memberOf Hash
             * @param {string} key The key of the entry to check.
             * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
             */
            function hashHas(key) {
                var data = this.__data__;
                return nativeCreate ? data[key] !== undefined$1 : hasOwnProperty.call(data, key);
            }

            /**
             * Sets the hash `key` to `value`.
             *
             * @private
             * @name set
             * @memberOf Hash
             * @param {string} key The key of the value to set.
             * @param {*} value The value to set.
             * @returns {Object} Returns the hash instance.
             */
            function hashSet(key, value) {
                var data = this.__data__;
                this.size += this.has(key) ? 0 : 1;
                data[key] = nativeCreate && value === undefined$1 ? HASH_UNDEFINED : value;
                return this;
            }

            // Add methods to `Hash`.
            Hash.prototype.clear = hashClear;
            Hash.prototype['delete'] = hashDelete;
            Hash.prototype.get = hashGet;
            Hash.prototype.has = hashHas;
            Hash.prototype.set = hashSet;

            /*------------------------------------------------------------------------*/

            /**
             * Creates an list cache object.
             *
             * @private
             * @constructor
             * @param {Array} [entries] The key-value pairs to cache.
             */
            function ListCache(entries) {
                var index = -1,
                    length = entries == null ? 0 : entries.length;

                this.clear();
                while (++index < length) {
                    var entry = entries[index];
                    this.set(entry[0], entry[1]);
                }
            }

            /**
             * Removes all key-value entries from the list cache.
             *
             * @private
             * @name clear
             * @memberOf ListCache
             */
            function listCacheClear() {
                this.__data__ = [];
                this.size = 0;
            }

            /**
             * Removes `key` and its value from the list cache.
             *
             * @private
             * @name delete
             * @memberOf ListCache
             * @param {string} key The key of the value to remove.
             * @returns {boolean} Returns `true` if the entry was removed, else `false`.
             */
            function listCacheDelete(key) {
                var data = this.__data__,
                    index = assocIndexOf(data, key);

                if (index < 0) {
                    return false;
                }
                var lastIndex = data.length - 1;
                if (index == lastIndex) {
                    data.pop();
                } else {
                    splice.call(data, index, 1);
                }
                --this.size;
                return true;
            }

            /**
             * Gets the list cache value for `key`.
             *
             * @private
             * @name get
             * @memberOf ListCache
             * @param {string} key The key of the value to get.
             * @returns {*} Returns the entry value.
             */
            function listCacheGet(key) {
                var data = this.__data__,
                    index = assocIndexOf(data, key);

                return index < 0 ? undefined$1 : data[index][1];
            }

            /**
             * Checks if a list cache value for `key` exists.
             *
             * @private
             * @name has
             * @memberOf ListCache
             * @param {string} key The key of the entry to check.
             * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
             */
            function listCacheHas(key) {
                return assocIndexOf(this.__data__, key) > -1;
            }

            /**
             * Sets the list cache `key` to `value`.
             *
             * @private
             * @name set
             * @memberOf ListCache
             * @param {string} key The key of the value to set.
             * @param {*} value The value to set.
             * @returns {Object} Returns the list cache instance.
             */
            function listCacheSet(key, value) {
                var data = this.__data__,
                    index = assocIndexOf(data, key);

                if (index < 0) {
                    ++this.size;
                    data.push([key, value]);
                } else {
                    data[index][1] = value;
                }
                return this;
            }

            // Add methods to `ListCache`.
            ListCache.prototype.clear = listCacheClear;
            ListCache.prototype['delete'] = listCacheDelete;
            ListCache.prototype.get = listCacheGet;
            ListCache.prototype.has = listCacheHas;
            ListCache.prototype.set = listCacheSet;

            /*------------------------------------------------------------------------*/

            /**
             * Creates a map cache object to store key-value pairs.
             *
             * @private
             * @constructor
             * @param {Array} [entries] The key-value pairs to cache.
             */
            function MapCache(entries) {
                var index = -1,
                    length = entries == null ? 0 : entries.length;

                this.clear();
                while (++index < length) {
                    var entry = entries[index];
                    this.set(entry[0], entry[1]);
                }
            }

            /**
             * Removes all key-value entries from the map.
             *
             * @private
             * @name clear
             * @memberOf MapCache
             */
            function mapCacheClear() {
                this.size = 0;
                this.__data__ = {
                    hash: new Hash(),
                    map: new (Map || ListCache)(),
                    string: new Hash(),
                };
            }

            /**
             * Removes `key` and its value from the map.
             *
             * @private
             * @name delete
             * @memberOf MapCache
             * @param {string} key The key of the value to remove.
             * @returns {boolean} Returns `true` if the entry was removed, else `false`.
             */
            function mapCacheDelete(key) {
                var result = getMapData(this, key)['delete'](key);
                this.size -= result ? 1 : 0;
                return result;
            }

            /**
             * Gets the map value for `key`.
             *
             * @private
             * @name get
             * @memberOf MapCache
             * @param {string} key The key of the value to get.
             * @returns {*} Returns the entry value.
             */
            function mapCacheGet(key) {
                return getMapData(this, key).get(key);
            }

            /**
             * Checks if a map value for `key` exists.
             *
             * @private
             * @name has
             * @memberOf MapCache
             * @param {string} key The key of the entry to check.
             * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
             */
            function mapCacheHas(key) {
                return getMapData(this, key).has(key);
            }

            /**
             * Sets the map `key` to `value`.
             *
             * @private
             * @name set
             * @memberOf MapCache
             * @param {string} key The key of the value to set.
             * @param {*} value The value to set.
             * @returns {Object} Returns the map cache instance.
             */
            function mapCacheSet(key, value) {
                var data = getMapData(this, key),
                    size = data.size;

                data.set(key, value);
                this.size += data.size == size ? 0 : 1;
                return this;
            }

            // Add methods to `MapCache`.
            MapCache.prototype.clear = mapCacheClear;
            MapCache.prototype['delete'] = mapCacheDelete;
            MapCache.prototype.get = mapCacheGet;
            MapCache.prototype.has = mapCacheHas;
            MapCache.prototype.set = mapCacheSet;

            /*------------------------------------------------------------------------*/

            /**
             *
             * Creates an array cache object to store unique values.
             *
             * @private
             * @constructor
             * @param {Array} [values] The values to cache.
             */
            function SetCache(values) {
                var index = -1,
                    length = values == null ? 0 : values.length;

                this.__data__ = new MapCache();
                while (++index < length) {
                    this.add(values[index]);
                }
            }

            /**
             * Adds `value` to the array cache.
             *
             * @private
             * @name add
             * @memberOf SetCache
             * @alias push
             * @param {*} value The value to cache.
             * @returns {Object} Returns the cache instance.
             */
            function setCacheAdd(value) {
                this.__data__.set(value, HASH_UNDEFINED);
                return this;
            }

            /**
             * Checks if `value` is in the array cache.
             *
             * @private
             * @name has
             * @memberOf SetCache
             * @param {*} value The value to search for.
             * @returns {number} Returns `true` if `value` is found, else `false`.
             */
            function setCacheHas(value) {
                return this.__data__.has(value);
            }

            // Add methods to `SetCache`.
            SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
            SetCache.prototype.has = setCacheHas;

            /*------------------------------------------------------------------------*/

            /**
             * Creates a stack cache object to store key-value pairs.
             *
             * @private
             * @constructor
             * @param {Array} [entries] The key-value pairs to cache.
             */
            function Stack(entries) {
                var data = (this.__data__ = new ListCache(entries));
                this.size = data.size;
            }

            /**
             * Removes all key-value entries from the stack.
             *
             * @private
             * @name clear
             * @memberOf Stack
             */
            function stackClear() {
                this.__data__ = new ListCache();
                this.size = 0;
            }

            /**
             * Removes `key` and its value from the stack.
             *
             * @private
             * @name delete
             * @memberOf Stack
             * @param {string} key The key of the value to remove.
             * @returns {boolean} Returns `true` if the entry was removed, else `false`.
             */
            function stackDelete(key) {
                var data = this.__data__,
                    result = data['delete'](key);

                this.size = data.size;
                return result;
            }

            /**
             * Gets the stack value for `key`.
             *
             * @private
             * @name get
             * @memberOf Stack
             * @param {string} key The key of the value to get.
             * @returns {*} Returns the entry value.
             */
            function stackGet(key) {
                return this.__data__.get(key);
            }

            /**
             * Checks if a stack value for `key` exists.
             *
             * @private
             * @name has
             * @memberOf Stack
             * @param {string} key The key of the entry to check.
             * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
             */
            function stackHas(key) {
                return this.__data__.has(key);
            }

            /**
             * Sets the stack `key` to `value`.
             *
             * @private
             * @name set
             * @memberOf Stack
             * @param {string} key The key of the value to set.
             * @param {*} value The value to set.
             * @returns {Object} Returns the stack cache instance.
             */
            function stackSet(key, value) {
                var data = this.__data__;
                if (data instanceof ListCache) {
                    var pairs = data.__data__;
                    if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {
                        pairs.push([key, value]);
                        this.size = ++data.size;
                        return this;
                    }
                    data = this.__data__ = new MapCache(pairs);
                }
                data.set(key, value);
                this.size = data.size;
                return this;
            }

            // Add methods to `Stack`.
            Stack.prototype.clear = stackClear;
            Stack.prototype['delete'] = stackDelete;
            Stack.prototype.get = stackGet;
            Stack.prototype.has = stackHas;
            Stack.prototype.set = stackSet;

            /*------------------------------------------------------------------------*/

            /**
             * Creates an array of the enumerable property names of the array-like `value`.
             *
             * @private
             * @param {*} value The value to query.
             * @param {boolean} inherited Specify returning inherited property names.
             * @returns {Array} Returns the array of property names.
             */
            function arrayLikeKeys(value, inherited) {
                var isArr = isArray(value),
                    isArg = !isArr && isArguments(value),
                    isBuff = !isArr && !isArg && isBuffer(value),
                    isType = !isArr && !isArg && !isBuff && isTypedArray(value),
                    skipIndexes = isArr || isArg || isBuff || isType,
                    result = skipIndexes ? baseTimes(value.length, String) : [],
                    length = result.length;

                for (var key in value) {
                    if (
                        (inherited || hasOwnProperty.call(value, key)) &&
                        !(
                            skipIndexes &&
                            // Safari 9 has enumerable `arguments.length` in strict mode.
                            (key == 'length' ||
                                // Node.js 0.10 has enumerable non-index properties on buffers.
                                (isBuff && (key == 'offset' || key == 'parent')) ||
                                // PhantomJS 2 has enumerable non-index properties on typed arrays.
                                (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
                                // Skip index properties.
                                isIndex(key, length))
                        )
                    ) {
                        result.push(key);
                    }
                }
                return result;
            }

            /**
             * A specialized version of `_.sample` for arrays.
             *
             * @private
             * @param {Array} array The array to sample.
             * @returns {*} Returns the random element.
             */
            function arraySample(array) {
                var length = array.length;
                return length ? array[baseRandom(0, length - 1)] : undefined$1;
            }

            /**
             * A specialized version of `_.sampleSize` for arrays.
             *
             * @private
             * @param {Array} array The array to sample.
             * @param {number} n The number of elements to sample.
             * @returns {Array} Returns the random elements.
             */
            function arraySampleSize(array, n) {
                return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
            }

            /**
             * A specialized version of `_.shuffle` for arrays.
             *
             * @private
             * @param {Array} array The array to shuffle.
             * @returns {Array} Returns the new shuffled array.
             */
            function arrayShuffle(array) {
                return shuffleSelf(copyArray(array));
            }

            /**
             * This function is like `assignValue` except that it doesn't assign
             * `undefined` values.
             *
             * @private
             * @param {Object} object The object to modify.
             * @param {string} key The key of the property to assign.
             * @param {*} value The value to assign.
             */
            function assignMergeValue(object, key, value) {
                if ((value !== undefined$1 && !eq(object[key], value)) || (value === undefined$1 && !(key in object))) {
                    baseAssignValue(object, key, value);
                }
            }

            /**
             * Assigns `value` to `key` of `object` if the existing value is not equivalent
             * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
             * for equality comparisons.
             *
             * @private
             * @param {Object} object The object to modify.
             * @param {string} key The key of the property to assign.
             * @param {*} value The value to assign.
             */
            function assignValue(object, key, value) {
                var objValue = object[key];
                if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || (value === undefined$1 && !(key in object))) {
                    baseAssignValue(object, key, value);
                }
            }

            /**
             * Gets the index at which the `key` is found in `array` of key-value pairs.
             *
             * @private
             * @param {Array} array The array to inspect.
             * @param {*} key The key to search for.
             * @returns {number} Returns the index of the matched value, else `-1`.
             */
            function assocIndexOf(array, key) {
                var length = array.length;
                while (length--) {
                    if (eq(array[length][0], key)) {
                        return length;
                    }
                }
                return -1;
            }

            /**
             * Aggregates elements of `collection` on `accumulator` with keys transformed
             * by `iteratee` and values set by `setter`.
             *
             * @private
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} setter The function to set `accumulator` values.
             * @param {Function} iteratee The iteratee to transform keys.
             * @param {Object} accumulator The initial aggregated object.
             * @returns {Function} Returns `accumulator`.
             */
            function baseAggregator(collection, setter, iteratee, accumulator) {
                baseEach(collection, function (value, key, collection) {
                    setter(accumulator, value, iteratee(value), collection);
                });
                return accumulator;
            }

            /**
             * The base implementation of `_.assign` without support for multiple sources
             * or `customizer` functions.
             *
             * @private
             * @param {Object} object The destination object.
             * @param {Object} source The source object.
             * @returns {Object} Returns `object`.
             */
            function baseAssign(object, source) {
                return object && copyObject(source, keys(source), object);
            }

            /**
             * The base implementation of `_.assignIn` without support for multiple sources
             * or `customizer` functions.
             *
             * @private
             * @param {Object} object The destination object.
             * @param {Object} source The source object.
             * @returns {Object} Returns `object`.
             */
            function baseAssignIn(object, source) {
                return object && copyObject(source, keysIn(source), object);
            }

            /**
             * The base implementation of `assignValue` and `assignMergeValue` without
             * value checks.
             *
             * @private
             * @param {Object} object The object to modify.
             * @param {string} key The key of the property to assign.
             * @param {*} value The value to assign.
             */
            function baseAssignValue(object, key, value) {
                if (key == '__proto__' && defineProperty) {
                    defineProperty(object, key, {
                        configurable: true,
                        enumerable: true,
                        value: value,
                        writable: true,
                    });
                } else {
                    object[key] = value;
                }
            }

            /**
             * The base implementation of `_.at` without support for individual paths.
             *
             * @private
             * @param {Object} object The object to iterate over.
             * @param {string[]} paths The property paths to pick.
             * @returns {Array} Returns the picked elements.
             */
            function baseAt(object, paths) {
                var index = -1,
                    length = paths.length,
                    result = Array(length),
                    skip = object == null;

                while (++index < length) {
                    result[index] = skip ? undefined$1 : get(object, paths[index]);
                }
                return result;
            }

            /**
             * The base implementation of `_.clamp` which doesn't coerce arguments.
             *
             * @private
             * @param {number} number The number to clamp.
             * @param {number} [lower] The lower bound.
             * @param {number} upper The upper bound.
             * @returns {number} Returns the clamped number.
             */
            function baseClamp(number, lower, upper) {
                if (number === number) {
                    if (upper !== undefined$1) {
                        number = number <= upper ? number : upper;
                    }
                    if (lower !== undefined$1) {
                        number = number >= lower ? number : lower;
                    }
                }
                return number;
            }

            /**
             * The base implementation of `_.clone` and `_.cloneDeep` which tracks
             * traversed objects.
             *
             * @private
             * @param {*} value The value to clone.
             * @param {boolean} bitmask The bitmask flags.
             *  1 - Deep clone
             *  2 - Flatten inherited properties
             *  4 - Clone symbols
             * @param {Function} [customizer] The function to customize cloning.
             * @param {string} [key] The key of `value`.
             * @param {Object} [object] The parent object of `value`.
             * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
             * @returns {*} Returns the cloned value.
             */
            function baseClone(value, bitmask, customizer, key, object, stack) {
                var result,
                    isDeep = bitmask & CLONE_DEEP_FLAG,
                    isFlat = bitmask & CLONE_FLAT_FLAG,
                    isFull = bitmask & CLONE_SYMBOLS_FLAG;

                if (customizer) {
                    result = object ? customizer(value, key, object, stack) : customizer(value);
                }
                if (result !== undefined$1) {
                    return result;
                }
                if (!isObject(value)) {
                    return value;
                }
                var isArr = isArray(value);
                if (isArr) {
                    result = initCloneArray(value);
                    if (!isDeep) {
                        return copyArray(value, result);
                    }
                } else {
                    var tag = getTag(value),
                        isFunc = tag == funcTag || tag == genTag;

                    if (isBuffer(value)) {
                        return cloneBuffer(value, isDeep);
                    }
                    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
                        result = isFlat || isFunc ? {} : initCloneObject(value);
                        if (!isDeep) {
                            return isFlat ? copySymbolsIn(value, baseAssignIn(result, value)) : copySymbols(value, baseAssign(result, value));
                        }
                    } else {
                        if (!cloneableTags[tag]) {
                            return object ? value : {};
                        }
                        result = initCloneByTag(value, tag, isDeep);
                    }
                }
                // Check for circular references and return its corresponding clone.
                stack || (stack = new Stack());
                var stacked = stack.get(value);
                if (stacked) {
                    return stacked;
                }
                stack.set(value, result);

                if (isSet(value)) {
                    value.forEach(function (subValue) {
                        result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
                    });
                } else if (isMap(value)) {
                    value.forEach(function (subValue, key) {
                        result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
                    });
                }

                var keysFunc = isFull ? (isFlat ? getAllKeysIn : getAllKeys) : isFlat ? keysIn : keys;

                var props = isArr ? undefined$1 : keysFunc(value);
                arrayEach(props || value, function (subValue, key) {
                    if (props) {
                        key = subValue;
                        subValue = value[key];
                    }
                    // Recursively populate clone (susceptible to call stack limits).
                    assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
                });
                return result;
            }

            /**
             * The base implementation of `_.conforms` which doesn't clone `source`.
             *
             * @private
             * @param {Object} source The object of property predicates to conform to.
             * @returns {Function} Returns the new spec function.
             */
            function baseConforms(source) {
                var props = keys(source);
                return function (object) {
                    return baseConformsTo(object, source, props);
                };
            }

            /**
             * The base implementation of `_.conformsTo` which accepts `props` to check.
             *
             * @private
             * @param {Object} object The object to inspect.
             * @param {Object} source The object of property predicates to conform to.
             * @returns {boolean} Returns `true` if `object` conforms, else `false`.
             */
            function baseConformsTo(object, source, props) {
                var length = props.length;
                if (object == null) {
                    return !length;
                }
                object = Object(object);
                while (length--) {
                    var key = props[length],
                        predicate = source[key],
                        value = object[key];

                    if ((value === undefined$1 && !(key in object)) || !predicate(value)) {
                        return false;
                    }
                }
                return true;
            }

            /**
             * The base implementation of `_.delay` and `_.defer` which accepts `args`
             * to provide to `func`.
             *
             * @private
             * @param {Function} func The function to delay.
             * @param {number} wait The number of milliseconds to delay invocation.
             * @param {Array} args The arguments to provide to `func`.
             * @returns {number|Object} Returns the timer id or timeout object.
             */
            function baseDelay(func, wait, args) {
                if (typeof func != 'function') {
                    throw new TypeError(FUNC_ERROR_TEXT);
                }
                return setTimeout(function () {
                    func.apply(undefined$1, args);
                }, wait);
            }

            /**
             * The base implementation of methods like `_.difference` without support
             * for excluding multiple arrays or iteratee shorthands.
             *
             * @private
             * @param {Array} array The array to inspect.
             * @param {Array} values The values to exclude.
             * @param {Function} [iteratee] The iteratee invoked per element.
             * @param {Function} [comparator] The comparator invoked per element.
             * @returns {Array} Returns the new array of filtered values.
             */
            function baseDifference(array, values, iteratee, comparator) {
                var index = -1,
                    includes = arrayIncludes,
                    isCommon = true,
                    length = array.length,
                    result = [],
                    valuesLength = values.length;

                if (!length) {
                    return result;
                }
                if (iteratee) {
                    values = arrayMap(values, baseUnary(iteratee));
                }
                if (comparator) {
                    includes = arrayIncludesWith;
                    isCommon = false;
                } else if (values.length >= LARGE_ARRAY_SIZE) {
                    includes = cacheHas;
                    isCommon = false;
                    values = new SetCache(values);
                }
                outer: while (++index < length) {
                    var value = array[index],
                        computed = iteratee == null ? value : iteratee(value);

                    value = comparator || value !== 0 ? value : 0;
                    if (isCommon && computed === computed) {
                        var valuesIndex = valuesLength;
                        while (valuesIndex--) {
                            if (values[valuesIndex] === computed) {
                                continue outer;
                            }
                        }
                        result.push(value);
                    } else if (!includes(values, computed, comparator)) {
                        result.push(value);
                    }
                }
                return result;
            }

            /**
             * The base implementation of `_.forEach` without support for iteratee shorthands.
             *
             * @private
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} iteratee The function invoked per iteration.
             * @returns {Array|Object} Returns `collection`.
             */
            var baseEach = createBaseEach(baseForOwn);

            /**
             * The base implementation of `_.forEachRight` without support for iteratee shorthands.
             *
             * @private
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} iteratee The function invoked per iteration.
             * @returns {Array|Object} Returns `collection`.
             */
            var baseEachRight = createBaseEach(baseForOwnRight, true);

            /**
             * The base implementation of `_.every` without support for iteratee shorthands.
             *
             * @private
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} predicate The function invoked per iteration.
             * @returns {boolean} Returns `true` if all elements pass the predicate check,
             *  else `false`
             */
            function baseEvery(collection, predicate) {
                var result = true;
                baseEach(collection, function (value, index, collection) {
                    result = !!predicate(value, index, collection);
                    return result;
                });
                return result;
            }

            /**
             * The base implementation of methods like `_.max` and `_.min` which accepts a
             * `comparator` to determine the extremum value.
             *
             * @private
             * @param {Array} array The array to iterate over.
             * @param {Function} iteratee The iteratee invoked per iteration.
             * @param {Function} comparator The comparator used to compare values.
             * @returns {*} Returns the extremum value.
             */
            function baseExtremum(array, iteratee, comparator) {
                var index = -1,
                    length = array.length;

                while (++index < length) {
                    var value = array[index],
                        current = iteratee(value);

                    if (current != null && (computed === undefined$1 ? current === current && !isSymbol(current) : comparator(current, computed))) {
                        var computed = current,
                            result = value;
                    }
                }
                return result;
            }

            /**
             * The base implementation of `_.fill` without an iteratee call guard.
             *
             * @private
             * @param {Array} array The array to fill.
             * @param {*} value The value to fill `array` with.
             * @param {number} [start=0] The start position.
             * @param {number} [end=array.length] The end position.
             * @returns {Array} Returns `array`.
             */
            function baseFill(array, value, start, end) {
                var length = array.length;

                start = toInteger(start);
                if (start < 0) {
                    start = -start > length ? 0 : length + start;
                }
                end = end === undefined$1 || end > length ? length : toInteger(end);
                if (end < 0) {
                    end += length;
                }
                end = start > end ? 0 : toLength(end);
                while (start < end) {
                    array[start++] = value;
                }
                return array;
            }

            /**
             * The base implementation of `_.filter` without support for iteratee shorthands.
             *
             * @private
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} predicate The function invoked per iteration.
             * @returns {Array} Returns the new filtered array.
             */
            function baseFilter(collection, predicate) {
                var result = [];
                baseEach(collection, function (value, index, collection) {
                    if (predicate(value, index, collection)) {
                        result.push(value);
                    }
                });
                return result;
            }

            /**
             * The base implementation of `_.flatten` with support for restricting flattening.
             *
             * @private
             * @param {Array} array The array to flatten.
             * @param {number} depth The maximum recursion depth.
             * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
             * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
             * @param {Array} [result=[]] The initial result value.
             * @returns {Array} Returns the new flattened array.
             */
            function baseFlatten(array, depth, predicate, isStrict, result) {
                var index = -1,
                    length = array.length;

                predicate || (predicate = isFlattenable);
                result || (result = []);

                while (++index < length) {
                    var value = array[index];
                    if (depth > 0 && predicate(value)) {
                        if (depth > 1) {
                            // Recursively flatten arrays (susceptible to call stack limits).
                            baseFlatten(value, depth - 1, predicate, isStrict, result);
                        } else {
                            arrayPush(result, value);
                        }
                    } else if (!isStrict) {
                        result[result.length] = value;
                    }
                }
                return result;
            }

            /**
             * The base implementation of `baseForOwn` which iterates over `object`
             * properties returned by `keysFunc` and invokes `iteratee` for each property.
             * Iteratee functions may exit iteration early by explicitly returning `false`.
             *
             * @private
             * @param {Object} object The object to iterate over.
             * @param {Function} iteratee The function invoked per iteration.
             * @param {Function} keysFunc The function to get the keys of `object`.
             * @returns {Object} Returns `object`.
             */
            var baseFor = createBaseFor();

            /**
             * This function is like `baseFor` except that it iterates over properties
             * in the opposite order.
             *
             * @private
             * @param {Object} object The object to iterate over.
             * @param {Function} iteratee The function invoked per iteration.
             * @param {Function} keysFunc The function to get the keys of `object`.
             * @returns {Object} Returns `object`.
             */
            var baseForRight = createBaseFor(true);

            /**
             * The base implementation of `_.forOwn` without support for iteratee shorthands.
             *
             * @private
             * @param {Object} object The object to iterate over.
             * @param {Function} iteratee The function invoked per iteration.
             * @returns {Object} Returns `object`.
             */
            function baseForOwn(object, iteratee) {
                return object && baseFor(object, iteratee, keys);
            }

            /**
             * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
             *
             * @private
             * @param {Object} object The object to iterate over.
             * @param {Function} iteratee The function invoked per iteration.
             * @returns {Object} Returns `object`.
             */
            function baseForOwnRight(object, iteratee) {
                return object && baseForRight(object, iteratee, keys);
            }

            /**
             * The base implementation of `_.functions` which creates an array of
             * `object` function property names filtered from `props`.
             *
             * @private
             * @param {Object} object The object to inspect.
             * @param {Array} props The property names to filter.
             * @returns {Array} Returns the function names.
             */
            function baseFunctions(object, props) {
                return arrayFilter(props, function (key) {
                    return isFunction(object[key]);
                });
            }

            /**
             * The base implementation of `_.get` without support for default values.
             *
             * @private
             * @param {Object} object The object to query.
             * @param {Array|string} path The path of the property to get.
             * @returns {*} Returns the resolved value.
             */
            function baseGet(object, path) {
                path = castPath(path, object);

                var index = 0,
                    length = path.length;

                while (object != null && index < length) {
                    object = object[toKey(path[index++])];
                }
                return index && index == length ? object : undefined$1;
            }

            /**
             * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
             * `keysFunc` and `symbolsFunc` to get the enumerable property names and
             * symbols of `object`.
             *
             * @private
             * @param {Object} object The object to query.
             * @param {Function} keysFunc The function to get the keys of `object`.
             * @param {Function} symbolsFunc The function to get the symbols of `object`.
             * @returns {Array} Returns the array of property names and symbols.
             */
            function baseGetAllKeys(object, keysFunc, symbolsFunc) {
                var result = keysFunc(object);
                return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
            }

            /**
             * The base implementation of `getTag` without fallbacks for buggy environments.
             *
             * @private
             * @param {*} value The value to query.
             * @returns {string} Returns the `toStringTag`.
             */
            function baseGetTag(value) {
                if (value == null) {
                    return value === undefined$1 ? undefinedTag : nullTag;
                }
                return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
            }

            /**
             * The base implementation of `_.gt` which doesn't coerce arguments.
             *
             * @private
             * @param {*} value The value to compare.
             * @param {*} other The other value to compare.
             * @returns {boolean} Returns `true` if `value` is greater than `other`,
             *  else `false`.
             */
            function baseGt(value, other) {
                return value > other;
            }

            /**
             * The base implementation of `_.has` without support for deep paths.
             *
             * @private
             * @param {Object} [object] The object to query.
             * @param {Array|string} key The key to check.
             * @returns {boolean} Returns `true` if `key` exists, else `false`.
             */
            function baseHas(object, key) {
                return object != null && hasOwnProperty.call(object, key);
            }

            /**
             * The base implementation of `_.hasIn` without support for deep paths.
             *
             * @private
             * @param {Object} [object] The object to query.
             * @param {Array|string} key The key to check.
             * @returns {boolean} Returns `true` if `key` exists, else `false`.
             */
            function baseHasIn(object, key) {
                return object != null && key in Object(object);
            }

            /**
             * The base implementation of `_.inRange` which doesn't coerce arguments.
             *
             * @private
             * @param {number} number The number to check.
             * @param {number} start The start of the range.
             * @param {number} end The end of the range.
             * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
             */
            function baseInRange(number, start, end) {
                return number >= nativeMin(start, end) && number < nativeMax(start, end);
            }

            /**
             * The base implementation of methods like `_.intersection`, without support
             * for iteratee shorthands, that accepts an array of arrays to inspect.
             *
             * @private
             * @param {Array} arrays The arrays to inspect.
             * @param {Function} [iteratee] The iteratee invoked per element.
             * @param {Function} [comparator] The comparator invoked per element.
             * @returns {Array} Returns the new array of shared values.
             */
            function baseIntersection(arrays, iteratee, comparator) {
                var includes = comparator ? arrayIncludesWith : arrayIncludes,
                    length = arrays[0].length,
                    othLength = arrays.length,
                    othIndex = othLength,
                    caches = Array(othLength),
                    maxLength = Infinity,
                    result = [];

                while (othIndex--) {
                    var array = arrays[othIndex];
                    if (othIndex && iteratee) {
                        array = arrayMap(array, baseUnary(iteratee));
                    }
                    maxLength = nativeMin(array.length, maxLength);
                    caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120)) ? new SetCache(othIndex && array) : undefined$1;
                }
                array = arrays[0];

                var index = -1,
                    seen = caches[0];

                outer: while (++index < length && result.length < maxLength) {
                    var value = array[index],
                        computed = iteratee ? iteratee(value) : value;

                    value = comparator || value !== 0 ? value : 0;
                    if (!(seen ? cacheHas(seen, computed) : includes(result, computed, comparator))) {
                        othIndex = othLength;
                        while (--othIndex) {
                            var cache = caches[othIndex];
                            if (!(cache ? cacheHas(cache, computed) : includes(arrays[othIndex], computed, comparator))) {
                                continue outer;
                            }
                        }
                        if (seen) {
                            seen.push(computed);
                        }
                        result.push(value);
                    }
                }
                return result;
            }

            /**
             * The base implementation of `_.invert` and `_.invertBy` which inverts
             * `object` with values transformed by `iteratee` and set by `setter`.
             *
             * @private
             * @param {Object} object The object to iterate over.
             * @param {Function} setter The function to set `accumulator` values.
             * @param {Function} iteratee The iteratee to transform values.
             * @param {Object} accumulator The initial inverted object.
             * @returns {Function} Returns `accumulator`.
             */
            function baseInverter(object, setter, iteratee, accumulator) {
                baseForOwn(object, function (value, key, object) {
                    setter(accumulator, iteratee(value), key, object);
                });
                return accumulator;
            }

            /**
             * The base implementation of `_.invoke` without support for individual
             * method arguments.
             *
             * @private
             * @param {Object} object The object to query.
             * @param {Array|string} path The path of the method to invoke.
             * @param {Array} args The arguments to invoke the method with.
             * @returns {*} Returns the result of the invoked method.
             */
            function baseInvoke(object, path, args) {
                path = castPath(path, object);
                object = parent(object, path);
                var func = object == null ? object : object[toKey(last(path))];
                return func == null ? undefined$1 : apply(func, object, args);
            }

            /**
             * The base implementation of `_.isArguments`.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is an `arguments` object,
             */
            function baseIsArguments(value) {
                return isObjectLike(value) && baseGetTag(value) == argsTag;
            }

            /**
             * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
             */
            function baseIsArrayBuffer(value) {
                return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
            }

            /**
             * The base implementation of `_.isDate` without Node.js optimizations.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
             */
            function baseIsDate(value) {
                return isObjectLike(value) && baseGetTag(value) == dateTag;
            }

            /**
             * The base implementation of `_.isEqual` which supports partial comparisons
             * and tracks traversed objects.
             *
             * @private
             * @param {*} value The value to compare.
             * @param {*} other The other value to compare.
             * @param {boolean} bitmask The bitmask flags.
             *  1 - Unordered comparison
             *  2 - Partial comparison
             * @param {Function} [customizer] The function to customize comparisons.
             * @param {Object} [stack] Tracks traversed `value` and `other` objects.
             * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
             */
            function baseIsEqual(value, other, bitmask, customizer, stack) {
                if (value === other) {
                    return true;
                }
                if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
                    return value !== value && other !== other;
                }
                return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
            }

            /**
             * A specialized version of `baseIsEqual` for arrays and objects which performs
             * deep comparisons and tracks traversed objects enabling objects with circular
             * references to be compared.
             *
             * @private
             * @param {Object} object The object to compare.
             * @param {Object} other The other object to compare.
             * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
             * @param {Function} customizer The function to customize comparisons.
             * @param {Function} equalFunc The function to determine equivalents of values.
             * @param {Object} [stack] Tracks traversed `object` and `other` objects.
             * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
             */
            function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
                var objIsArr = isArray(object),
                    othIsArr = isArray(other),
                    objTag = objIsArr ? arrayTag : getTag(object),
                    othTag = othIsArr ? arrayTag : getTag(other);

                objTag = objTag == argsTag ? objectTag : objTag;
                othTag = othTag == argsTag ? objectTag : othTag;

                var objIsObj = objTag == objectTag,
                    othIsObj = othTag == objectTag,
                    isSameTag = objTag == othTag;

                if (isSameTag && isBuffer(object)) {
                    if (!isBuffer(other)) {
                        return false;
                    }
                    objIsArr = true;
                    objIsObj = false;
                }
                if (isSameTag && !objIsObj) {
                    stack || (stack = new Stack());
                    return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
                }
                if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
                    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
                        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

                    if (objIsWrapped || othIsWrapped) {
                        var objUnwrapped = objIsWrapped ? object.value() : object,
                            othUnwrapped = othIsWrapped ? other.value() : other;

                        stack || (stack = new Stack());
                        return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
                    }
                }
                if (!isSameTag) {
                    return false;
                }
                stack || (stack = new Stack());
                return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
            }

            /**
             * The base implementation of `_.isMap` without Node.js optimizations.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a map, else `false`.
             */
            function baseIsMap(value) {
                return isObjectLike(value) && getTag(value) == mapTag;
            }

            /**
             * The base implementation of `_.isMatch` without support for iteratee shorthands.
             *
             * @private
             * @param {Object} object The object to inspect.
             * @param {Object} source The object of property values to match.
             * @param {Array} matchData The property names, values, and compare flags to match.
             * @param {Function} [customizer] The function to customize comparisons.
             * @returns {boolean} Returns `true` if `object` is a match, else `false`.
             */
            function baseIsMatch(object, source, matchData, customizer) {
                var index = matchData.length,
                    length = index,
                    noCustomizer = !customizer;

                if (object == null) {
                    return !length;
                }
                object = Object(object);
                while (index--) {
                    var data = matchData[index];
                    if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
                        return false;
                    }
                }
                while (++index < length) {
                    data = matchData[index];
                    var key = data[0],
                        objValue = object[key],
                        srcValue = data[1];

                    if (noCustomizer && data[2]) {
                        if (objValue === undefined$1 && !(key in object)) {
                            return false;
                        }
                    } else {
                        var stack = new Stack();
                        if (customizer) {
                            var result = customizer(objValue, srcValue, key, object, source, stack);
                        }
                        if (!(result === undefined$1 ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result)) {
                            return false;
                        }
                    }
                }
                return true;
            }

            /**
             * The base implementation of `_.isNative` without bad shim checks.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a native function,
             *  else `false`.
             */
            function baseIsNative(value) {
                if (!isObject(value) || isMasked(value)) {
                    return false;
                }
                var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
                return pattern.test(toSource(value));
            }

            /**
             * The base implementation of `_.isRegExp` without Node.js optimizations.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
             */
            function baseIsRegExp(value) {
                return isObjectLike(value) && baseGetTag(value) == regexpTag;
            }

            /**
             * The base implementation of `_.isSet` without Node.js optimizations.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a set, else `false`.
             */
            function baseIsSet(value) {
                return isObjectLike(value) && getTag(value) == setTag;
            }

            /**
             * The base implementation of `_.isTypedArray` without Node.js optimizations.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
             */
            function baseIsTypedArray(value) {
                return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
            }

            /**
             * The base implementation of `_.iteratee`.
             *
             * @private
             * @param {*} [value=_.identity] The value to convert to an iteratee.
             * @returns {Function} Returns the iteratee.
             */
            function baseIteratee(value) {
                // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
                // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
                if (typeof value == 'function') {
                    return value;
                }
                if (value == null) {
                    return identity;
                }
                if (typeof value == 'object') {
                    return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
                }
                return property(value);
            }

            /**
             * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
             *
             * @private
             * @param {Object} object The object to query.
             * @returns {Array} Returns the array of property names.
             */
            function baseKeys(object) {
                if (!isPrototype(object)) {
                    return nativeKeys(object);
                }
                var result = [];
                for (var key in Object(object)) {
                    if (hasOwnProperty.call(object, key) && key != 'constructor') {
                        result.push(key);
                    }
                }
                return result;
            }

            /**
             * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
             *
             * @private
             * @param {Object} object The object to query.
             * @returns {Array} Returns the array of property names.
             */
            function baseKeysIn(object) {
                if (!isObject(object)) {
                    return nativeKeysIn(object);
                }
                var isProto = isPrototype(object),
                    result = [];

                for (var key in object) {
                    if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
                        result.push(key);
                    }
                }
                return result;
            }

            /**
             * The base implementation of `_.lt` which doesn't coerce arguments.
             *
             * @private
             * @param {*} value The value to compare.
             * @param {*} other The other value to compare.
             * @returns {boolean} Returns `true` if `value` is less than `other`,
             *  else `false`.
             */
            function baseLt(value, other) {
                return value < other;
            }

            /**
             * The base implementation of `_.map` without support for iteratee shorthands.
             *
             * @private
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} iteratee The function invoked per iteration.
             * @returns {Array} Returns the new mapped array.
             */
            function baseMap(collection, iteratee) {
                var index = -1,
                    result = isArrayLike(collection) ? Array(collection.length) : [];

                baseEach(collection, function (value, key, collection) {
                    result[++index] = iteratee(value, key, collection);
                });
                return result;
            }

            /**
             * The base implementation of `_.matches` which doesn't clone `source`.
             *
             * @private
             * @param {Object} source The object of property values to match.
             * @returns {Function} Returns the new spec function.
             */
            function baseMatches(source) {
                var matchData = getMatchData(source);
                if (matchData.length == 1 && matchData[0][2]) {
                    return matchesStrictComparable(matchData[0][0], matchData[0][1]);
                }
                return function (object) {
                    return object === source || baseIsMatch(object, source, matchData);
                };
            }

            /**
             * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
             *
             * @private
             * @param {string} path The path of the property to get.
             * @param {*} srcValue The value to match.
             * @returns {Function} Returns the new spec function.
             */
            function baseMatchesProperty(path, srcValue) {
                if (isKey(path) && isStrictComparable(srcValue)) {
                    return matchesStrictComparable(toKey(path), srcValue);
                }
                return function (object) {
                    var objValue = get(object, path);
                    return objValue === undefined$1 && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
                };
            }

            /**
             * The base implementation of `_.merge` without support for multiple sources.
             *
             * @private
             * @param {Object} object The destination object.
             * @param {Object} source The source object.
             * @param {number} srcIndex The index of `source`.
             * @param {Function} [customizer] The function to customize merged values.
             * @param {Object} [stack] Tracks traversed source values and their merged
             *  counterparts.
             */
            function baseMerge(object, source, srcIndex, customizer, stack) {
                if (object === source) {
                    return;
                }
                baseFor(
                    source,
                    function (srcValue, key) {
                        stack || (stack = new Stack());
                        if (isObject(srcValue)) {
                            baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
                        } else {
                            var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + '', object, source, stack) : undefined$1;

                            if (newValue === undefined$1) {
                                newValue = srcValue;
                            }
                            assignMergeValue(object, key, newValue);
                        }
                    },
                    keysIn
                );
            }

            /**
             * A specialized version of `baseMerge` for arrays and objects which performs
             * deep merges and tracks traversed objects enabling objects with circular
             * references to be merged.
             *
             * @private
             * @param {Object} object The destination object.
             * @param {Object} source The source object.
             * @param {string} key The key of the value to merge.
             * @param {number} srcIndex The index of `source`.
             * @param {Function} mergeFunc The function to merge values.
             * @param {Function} [customizer] The function to customize assigned values.
             * @param {Object} [stack] Tracks traversed source values and their merged
             *  counterparts.
             */
            function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
                var objValue = safeGet(object, key),
                    srcValue = safeGet(source, key),
                    stacked = stack.get(srcValue);

                if (stacked) {
                    assignMergeValue(object, key, stacked);
                    return;
                }
                var newValue = customizer ? customizer(objValue, srcValue, key + '', object, source, stack) : undefined$1;

                var isCommon = newValue === undefined$1;

                if (isCommon) {
                    var isArr = isArray(srcValue),
                        isBuff = !isArr && isBuffer(srcValue),
                        isTyped = !isArr && !isBuff && isTypedArray(srcValue);

                    newValue = srcValue;
                    if (isArr || isBuff || isTyped) {
                        if (isArray(objValue)) {
                            newValue = objValue;
                        } else if (isArrayLikeObject(objValue)) {
                            newValue = copyArray(objValue);
                        } else if (isBuff) {
                            isCommon = false;
                            newValue = cloneBuffer(srcValue, true);
                        } else if (isTyped) {
                            isCommon = false;
                            newValue = cloneTypedArray(srcValue, true);
                        } else {
                            newValue = [];
                        }
                    } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
                        newValue = objValue;
                        if (isArguments(objValue)) {
                            newValue = toPlainObject(objValue);
                        } else if (!isObject(objValue) || isFunction(objValue)) {
                            newValue = initCloneObject(srcValue);
                        }
                    } else {
                        isCommon = false;
                    }
                }
                if (isCommon) {
                    // Recursively merge objects and arrays (susceptible to call stack limits).
                    stack.set(srcValue, newValue);
                    mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
                    stack['delete'](srcValue);
                }
                assignMergeValue(object, key, newValue);
            }

            /**
             * The base implementation of `_.nth` which doesn't coerce arguments.
             *
             * @private
             * @param {Array} array The array to query.
             * @param {number} n The index of the element to return.
             * @returns {*} Returns the nth element of `array`.
             */
            function baseNth(array, n) {
                var length = array.length;
                if (!length) {
                    return;
                }
                n += n < 0 ? length : 0;
                return isIndex(n, length) ? array[n] : undefined$1;
            }

            /**
             * The base implementation of `_.orderBy` without param guards.
             *
             * @private
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
             * @param {string[]} orders The sort orders of `iteratees`.
             * @returns {Array} Returns the new sorted array.
             */
            function baseOrderBy(collection, iteratees, orders) {
                if (iteratees.length) {
                    iteratees = arrayMap(iteratees, function (iteratee) {
                        if (isArray(iteratee)) {
                            return function (value) {
                                return baseGet(value, iteratee.length === 1 ? iteratee[0] : iteratee);
                            };
                        }
                        return iteratee;
                    });
                } else {
                    iteratees = [identity];
                }

                var index = -1;
                iteratees = arrayMap(iteratees, baseUnary(getIteratee()));

                var result = baseMap(collection, function (value, key, collection) {
                    var criteria = arrayMap(iteratees, function (iteratee) {
                        return iteratee(value);
                    });
                    return { criteria: criteria, index: ++index, value: value };
                });

                return baseSortBy(result, function (object, other) {
                    return compareMultiple(object, other, orders);
                });
            }

            /**
             * The base implementation of `_.pick` without support for individual
             * property identifiers.
             *
             * @private
             * @param {Object} object The source object.
             * @param {string[]} paths The property paths to pick.
             * @returns {Object} Returns the new object.
             */
            function basePick(object, paths) {
                return basePickBy(object, paths, function (value, path) {
                    return hasIn(object, path);
                });
            }

            /**
             * The base implementation of  `_.pickBy` without support for iteratee shorthands.
             *
             * @private
             * @param {Object} object The source object.
             * @param {string[]} paths The property paths to pick.
             * @param {Function} predicate The function invoked per property.
             * @returns {Object} Returns the new object.
             */
            function basePickBy(object, paths, predicate) {
                var index = -1,
                    length = paths.length,
                    result = {};

                while (++index < length) {
                    var path = paths[index],
                        value = baseGet(object, path);

                    if (predicate(value, path)) {
                        baseSet(result, castPath(path, object), value);
                    }
                }
                return result;
            }

            /**
             * A specialized version of `baseProperty` which supports deep paths.
             *
             * @private
             * @param {Array|string} path The path of the property to get.
             * @returns {Function} Returns the new accessor function.
             */
            function basePropertyDeep(path) {
                return function (object) {
                    return baseGet(object, path);
                };
            }

            /**
             * The base implementation of `_.pullAllBy` without support for iteratee
             * shorthands.
             *
             * @private
             * @param {Array} array The array to modify.
             * @param {Array} values The values to remove.
             * @param {Function} [iteratee] The iteratee invoked per element.
             * @param {Function} [comparator] The comparator invoked per element.
             * @returns {Array} Returns `array`.
             */
            function basePullAll(array, values, iteratee, comparator) {
                var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
                    index = -1,
                    length = values.length,
                    seen = array;

                if (array === values) {
                    values = copyArray(values);
                }
                if (iteratee) {
                    seen = arrayMap(array, baseUnary(iteratee));
                }
                while (++index < length) {
                    var fromIndex = 0,
                        value = values[index],
                        computed = iteratee ? iteratee(value) : value;

                    while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
                        if (seen !== array) {
                            splice.call(seen, fromIndex, 1);
                        }
                        splice.call(array, fromIndex, 1);
                    }
                }
                return array;
            }

            /**
             * The base implementation of `_.pullAt` without support for individual
             * indexes or capturing the removed elements.
             *
             * @private
             * @param {Array} array The array to modify.
             * @param {number[]} indexes The indexes of elements to remove.
             * @returns {Array} Returns `array`.
             */
            function basePullAt(array, indexes) {
                var length = array ? indexes.length : 0,
                    lastIndex = length - 1;

                while (length--) {
                    var index = indexes[length];
                    if (length == lastIndex || index !== previous) {
                        var previous = index;
                        if (isIndex(index)) {
                            splice.call(array, index, 1);
                        } else {
                            baseUnset(array, index);
                        }
                    }
                }
                return array;
            }

            /**
             * The base implementation of `_.random` without support for returning
             * floating-point numbers.
             *
             * @private
             * @param {number} lower The lower bound.
             * @param {number} upper The upper bound.
             * @returns {number} Returns the random number.
             */
            function baseRandom(lower, upper) {
                return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
            }

            /**
             * The base implementation of `_.range` and `_.rangeRight` which doesn't
             * coerce arguments.
             *
             * @private
             * @param {number} start The start of the range.
             * @param {number} end The end of the range.
             * @param {number} step The value to increment or decrement by.
             * @param {boolean} [fromRight] Specify iterating from right to left.
             * @returns {Array} Returns the range of numbers.
             */
            function baseRange(start, end, step, fromRight) {
                var index = -1,
                    length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
                    result = Array(length);

                while (length--) {
                    result[fromRight ? length : ++index] = start;
                    start += step;
                }
                return result;
            }

            /**
             * The base implementation of `_.repeat` which doesn't coerce arguments.
             *
             * @private
             * @param {string} string The string to repeat.
             * @param {number} n The number of times to repeat the string.
             * @returns {string} Returns the repeated string.
             */
            function baseRepeat(string, n) {
                var result = '';
                if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
                    return result;
                }
                // Leverage the exponentiation by squaring algorithm for a faster repeat.
                // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
                do {
                    if (n % 2) {
                        result += string;
                    }
                    n = nativeFloor(n / 2);
                    if (n) {
                        string += string;
                    }
                } while (n);

                return result;
            }

            /**
             * The base implementation of `_.rest` which doesn't validate or coerce arguments.
             *
             * @private
             * @param {Function} func The function to apply a rest parameter to.
             * @param {number} [start=func.length-1] The start position of the rest parameter.
             * @returns {Function} Returns the new function.
             */
            function baseRest(func, start) {
                return setToString(overRest(func, start, identity), func + '');
            }

            /**
             * The base implementation of `_.sample`.
             *
             * @private
             * @param {Array|Object} collection The collection to sample.
             * @returns {*} Returns the random element.
             */
            function baseSample(collection) {
                return arraySample(values(collection));
            }

            /**
             * The base implementation of `_.sampleSize` without param guards.
             *
             * @private
             * @param {Array|Object} collection The collection to sample.
             * @param {number} n The number of elements to sample.
             * @returns {Array} Returns the random elements.
             */
            function baseSampleSize(collection, n) {
                var array = values(collection);
                return shuffleSelf(array, baseClamp(n, 0, array.length));
            }

            /**
             * The base implementation of `_.set`.
             *
             * @private
             * @param {Object} object The object to modify.
             * @param {Array|string} path The path of the property to set.
             * @param {*} value The value to set.
             * @param {Function} [customizer] The function to customize path creation.
             * @returns {Object} Returns `object`.
             */
            function baseSet(object, path, value, customizer) {
                if (!isObject(object)) {
                    return object;
                }
                path = castPath(path, object);

                var index = -1,
                    length = path.length,
                    lastIndex = length - 1,
                    nested = object;

                while (nested != null && ++index < length) {
                    var key = toKey(path[index]),
                        newValue = value;

                    if (key === '__proto__' || key === 'constructor' || key === 'prototype') {
                        return object;
                    }

                    if (index != lastIndex) {
                        var objValue = nested[key];
                        newValue = customizer ? customizer(objValue, key, nested) : undefined$1;
                        if (newValue === undefined$1) {
                            newValue = isObject(objValue) ? objValue : isIndex(path[index + 1]) ? [] : {};
                        }
                    }
                    assignValue(nested, key, newValue);
                    nested = nested[key];
                }
                return object;
            }

            /**
             * The base implementation of `setData` without support for hot loop shorting.
             *
             * @private
             * @param {Function} func The function to associate metadata with.
             * @param {*} data The metadata.
             * @returns {Function} Returns `func`.
             */
            var baseSetData = !metaMap
                ? identity
                : function (func, data) {
                      metaMap.set(func, data);
                      return func;
                  };

            /**
             * The base implementation of `setToString` without support for hot loop shorting.
             *
             * @private
             * @param {Function} func The function to modify.
             * @param {Function} string The `toString` result.
             * @returns {Function} Returns `func`.
             */
            var baseSetToString = !defineProperty
                ? identity
                : function (func, string) {
                      return defineProperty(func, 'toString', {
                          configurable: true,
                          enumerable: false,
                          value: constant(string),
                          writable: true,
                      });
                  };

            /**
             * The base implementation of `_.shuffle`.
             *
             * @private
             * @param {Array|Object} collection The collection to shuffle.
             * @returns {Array} Returns the new shuffled array.
             */
            function baseShuffle(collection) {
                return shuffleSelf(values(collection));
            }

            /**
             * The base implementation of `_.slice` without an iteratee call guard.
             *
             * @private
             * @param {Array} array The array to slice.
             * @param {number} [start=0] The start position.
             * @param {number} [end=array.length] The end position.
             * @returns {Array} Returns the slice of `array`.
             */
            function baseSlice(array, start, end) {
                var index = -1,
                    length = array.length;

                if (start < 0) {
                    start = -start > length ? 0 : length + start;
                }
                end = end > length ? length : end;
                if (end < 0) {
                    end += length;
                }
                length = start > end ? 0 : (end - start) >>> 0;
                start >>>= 0;

                var result = Array(length);
                while (++index < length) {
                    result[index] = array[index + start];
                }
                return result;
            }

            /**
             * The base implementation of `_.some` without support for iteratee shorthands.
             *
             * @private
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} predicate The function invoked per iteration.
             * @returns {boolean} Returns `true` if any element passes the predicate check,
             *  else `false`.
             */
            function baseSome(collection, predicate) {
                var result;

                baseEach(collection, function (value, index, collection) {
                    result = predicate(value, index, collection);
                    return !result;
                });
                return !!result;
            }

            /**
             * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
             * performs a binary search of `array` to determine the index at which `value`
             * should be inserted into `array` in order to maintain its sort order.
             *
             * @private
             * @param {Array} array The sorted array to inspect.
             * @param {*} value The value to evaluate.
             * @param {boolean} [retHighest] Specify returning the highest qualified index.
             * @returns {number} Returns the index at which `value` should be inserted
             *  into `array`.
             */
            function baseSortedIndex(array, value, retHighest) {
                var low = 0,
                    high = array == null ? low : array.length;

                if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
                    while (low < high) {
                        var mid = (low + high) >>> 1,
                            computed = array[mid];

                        if (computed !== null && !isSymbol(computed) && (retHighest ? computed <= value : computed < value)) {
                            low = mid + 1;
                        } else {
                            high = mid;
                        }
                    }
                    return high;
                }
                return baseSortedIndexBy(array, value, identity, retHighest);
            }

            /**
             * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
             * which invokes `iteratee` for `value` and each element of `array` to compute
             * their sort ranking. The iteratee is invoked with one argument; (value).
             *
             * @private
             * @param {Array} array The sorted array to inspect.
             * @param {*} value The value to evaluate.
             * @param {Function} iteratee The iteratee invoked per element.
             * @param {boolean} [retHighest] Specify returning the highest qualified index.
             * @returns {number} Returns the index at which `value` should be inserted
             *  into `array`.
             */
            function baseSortedIndexBy(array, value, iteratee, retHighest) {
                var low = 0,
                    high = array == null ? 0 : array.length;
                if (high === 0) {
                    return 0;
                }

                value = iteratee(value);
                var valIsNaN = value !== value,
                    valIsNull = value === null,
                    valIsSymbol = isSymbol(value),
                    valIsUndefined = value === undefined$1;

                while (low < high) {
                    var mid = nativeFloor((low + high) / 2),
                        computed = iteratee(array[mid]),
                        othIsDefined = computed !== undefined$1,
                        othIsNull = computed === null,
                        othIsReflexive = computed === computed,
                        othIsSymbol = isSymbol(computed);

                    if (valIsNaN) {
                        var setLow = retHighest || othIsReflexive;
                    } else if (valIsUndefined) {
                        setLow = othIsReflexive && (retHighest || othIsDefined);
                    } else if (valIsNull) {
                        setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
                    } else if (valIsSymbol) {
                        setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
                    } else if (othIsNull || othIsSymbol) {
                        setLow = false;
                    } else {
                        setLow = retHighest ? computed <= value : computed < value;
                    }
                    if (setLow) {
                        low = mid + 1;
                    } else {
                        high = mid;
                    }
                }
                return nativeMin(high, MAX_ARRAY_INDEX);
            }

            /**
             * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
             * support for iteratee shorthands.
             *
             * @private
             * @param {Array} array The array to inspect.
             * @param {Function} [iteratee] The iteratee invoked per element.
             * @returns {Array} Returns the new duplicate free array.
             */
            function baseSortedUniq(array, iteratee) {
                var index = -1,
                    length = array.length,
                    resIndex = 0,
                    result = [];

                while (++index < length) {
                    var value = array[index],
                        computed = iteratee ? iteratee(value) : value;

                    if (!index || !eq(computed, seen)) {
                        var seen = computed;
                        result[resIndex++] = value === 0 ? 0 : value;
                    }
                }
                return result;
            }

            /**
             * The base implementation of `_.toNumber` which doesn't ensure correct
             * conversions of binary, hexadecimal, or octal string values.
             *
             * @private
             * @param {*} value The value to process.
             * @returns {number} Returns the number.
             */
            function baseToNumber(value) {
                if (typeof value == 'number') {
                    return value;
                }
                if (isSymbol(value)) {
                    return NAN;
                }
                return +value;
            }

            /**
             * The base implementation of `_.toString` which doesn't convert nullish
             * values to empty strings.
             *
             * @private
             * @param {*} value The value to process.
             * @returns {string} Returns the string.
             */
            function baseToString(value) {
                // Exit early for strings to avoid a performance hit in some environments.
                if (typeof value == 'string') {
                    return value;
                }
                if (isArray(value)) {
                    // Recursively convert values (susceptible to call stack limits).
                    return arrayMap(value, baseToString) + '';
                }
                if (isSymbol(value)) {
                    return symbolToString ? symbolToString.call(value) : '';
                }
                var result = value + '';
                return result == '0' && 1 / value == -INFINITY ? '-0' : result;
            }

            /**
             * The base implementation of `_.uniqBy` without support for iteratee shorthands.
             *
             * @private
             * @param {Array} array The array to inspect.
             * @param {Function} [iteratee] The iteratee invoked per element.
             * @param {Function} [comparator] The comparator invoked per element.
             * @returns {Array} Returns the new duplicate free array.
             */
            function baseUniq(array, iteratee, comparator) {
                var index = -1,
                    includes = arrayIncludes,
                    length = array.length,
                    isCommon = true,
                    result = [],
                    seen = result;

                if (comparator) {
                    isCommon = false;
                    includes = arrayIncludesWith;
                } else if (length >= LARGE_ARRAY_SIZE) {
                    var set = iteratee ? null : createSet(array);
                    if (set) {
                        return setToArray(set);
                    }
                    isCommon = false;
                    includes = cacheHas;
                    seen = new SetCache();
                } else {
                    seen = iteratee ? [] : result;
                }
                outer: while (++index < length) {
                    var value = array[index],
                        computed = iteratee ? iteratee(value) : value;

                    value = comparator || value !== 0 ? value : 0;
                    if (isCommon && computed === computed) {
                        var seenIndex = seen.length;
                        while (seenIndex--) {
                            if (seen[seenIndex] === computed) {
                                continue outer;
                            }
                        }
                        if (iteratee) {
                            seen.push(computed);
                        }
                        result.push(value);
                    } else if (!includes(seen, computed, comparator)) {
                        if (seen !== result) {
                            seen.push(computed);
                        }
                        result.push(value);
                    }
                }
                return result;
            }

            /**
             * The base implementation of `_.unset`.
             *
             * @private
             * @param {Object} object The object to modify.
             * @param {Array|string} path The property path to unset.
             * @returns {boolean} Returns `true` if the property is deleted, else `false`.
             */
            function baseUnset(object, path) {
                path = castPath(path, object);
                object = parent(object, path);
                return object == null || delete object[toKey(last(path))];
            }

            /**
             * The base implementation of `_.update`.
             *
             * @private
             * @param {Object} object The object to modify.
             * @param {Array|string} path The path of the property to update.
             * @param {Function} updater The function to produce the updated value.
             * @param {Function} [customizer] The function to customize path creation.
             * @returns {Object} Returns `object`.
             */
            function baseUpdate(object, path, updater, customizer) {
                return baseSet(object, path, updater(baseGet(object, path)), customizer);
            }

            /**
             * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
             * without support for iteratee shorthands.
             *
             * @private
             * @param {Array} array The array to query.
             * @param {Function} predicate The function invoked per iteration.
             * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
             * @param {boolean} [fromRight] Specify iterating from right to left.
             * @returns {Array} Returns the slice of `array`.
             */
            function baseWhile(array, predicate, isDrop, fromRight) {
                var length = array.length,
                    index = fromRight ? length : -1;

                while ((fromRight ? index-- : ++index < length) && predicate(array[index], index, array)) {}

                return isDrop ? baseSlice(array, fromRight ? 0 : index, fromRight ? index + 1 : length) : baseSlice(array, fromRight ? index + 1 : 0, fromRight ? length : index);
            }

            /**
             * The base implementation of `wrapperValue` which returns the result of
             * performing a sequence of actions on the unwrapped `value`, where each
             * successive action is supplied the return value of the previous.
             *
             * @private
             * @param {*} value The unwrapped value.
             * @param {Array} actions Actions to perform to resolve the unwrapped value.
             * @returns {*} Returns the resolved value.
             */
            function baseWrapperValue(value, actions) {
                var result = value;
                if (result instanceof LazyWrapper) {
                    result = result.value();
                }
                return arrayReduce(
                    actions,
                    function (result, action) {
                        return action.func.apply(action.thisArg, arrayPush([result], action.args));
                    },
                    result
                );
            }

            /**
             * The base implementation of methods like `_.xor`, without support for
             * iteratee shorthands, that accepts an array of arrays to inspect.
             *
             * @private
             * @param {Array} arrays The arrays to inspect.
             * @param {Function} [iteratee] The iteratee invoked per element.
             * @param {Function} [comparator] The comparator invoked per element.
             * @returns {Array} Returns the new array of values.
             */
            function baseXor(arrays, iteratee, comparator) {
                var length = arrays.length;
                if (length < 2) {
                    return length ? baseUniq(arrays[0]) : [];
                }
                var index = -1,
                    result = Array(length);

                while (++index < length) {
                    var array = arrays[index],
                        othIndex = -1;

                    while (++othIndex < length) {
                        if (othIndex != index) {
                            result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
                        }
                    }
                }
                return baseUniq(baseFlatten(result, 1), iteratee, comparator);
            }

            /**
             * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
             *
             * @private
             * @param {Array} props The property identifiers.
             * @param {Array} values The property values.
             * @param {Function} assignFunc The function to assign values.
             * @returns {Object} Returns the new object.
             */
            function baseZipObject(props, values, assignFunc) {
                var index = -1,
                    length = props.length,
                    valsLength = values.length,
                    result = {};

                while (++index < length) {
                    var value = index < valsLength ? values[index] : undefined$1;
                    assignFunc(result, props[index], value);
                }
                return result;
            }

            /**
             * Casts `value` to an empty array if it's not an array like object.
             *
             * @private
             * @param {*} value The value to inspect.
             * @returns {Array|Object} Returns the cast array-like object.
             */
            function castArrayLikeObject(value) {
                return isArrayLikeObject(value) ? value : [];
            }

            /**
             * Casts `value` to `identity` if it's not a function.
             *
             * @private
             * @param {*} value The value to inspect.
             * @returns {Function} Returns cast function.
             */
            function castFunction(value) {
                return typeof value == 'function' ? value : identity;
            }

            /**
             * Casts `value` to a path array if it's not one.
             *
             * @private
             * @param {*} value The value to inspect.
             * @param {Object} [object] The object to query keys on.
             * @returns {Array} Returns the cast property path array.
             */
            function castPath(value, object) {
                if (isArray(value)) {
                    return value;
                }
                return isKey(value, object) ? [value] : stringToPath(toString(value));
            }

            /**
             * A `baseRest` alias which can be replaced with `identity` by module
             * replacement plugins.
             *
             * @private
             * @type {Function}
             * @param {Function} func The function to apply a rest parameter to.
             * @returns {Function} Returns the new function.
             */
            var castRest = baseRest;

            /**
             * Casts `array` to a slice if it's needed.
             *
             * @private
             * @param {Array} array The array to inspect.
             * @param {number} start The start position.
             * @param {number} [end=array.length] The end position.
             * @returns {Array} Returns the cast slice.
             */
            function castSlice(array, start, end) {
                var length = array.length;
                end = end === undefined$1 ? length : end;
                return !start && end >= length ? array : baseSlice(array, start, end);
            }

            /**
             * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
             *
             * @private
             * @param {number|Object} id The timer id or timeout object of the timer to clear.
             */
            var clearTimeout =
                ctxClearTimeout ||
                function (id) {
                    return root.clearTimeout(id);
                };

            /**
             * Creates a clone of  `buffer`.
             *
             * @private
             * @param {Buffer} buffer The buffer to clone.
             * @param {boolean} [isDeep] Specify a deep clone.
             * @returns {Buffer} Returns the cloned buffer.
             */
            function cloneBuffer(buffer, isDeep) {
                if (isDeep) {
                    return buffer.slice();
                }
                var length = buffer.length,
                    result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

                buffer.copy(result);
                return result;
            }

            /**
             * Creates a clone of `arrayBuffer`.
             *
             * @private
             * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
             * @returns {ArrayBuffer} Returns the cloned array buffer.
             */
            function cloneArrayBuffer(arrayBuffer) {
                var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
                new Uint8Array(result).set(new Uint8Array(arrayBuffer));
                return result;
            }

            /**
             * Creates a clone of `dataView`.
             *
             * @private
             * @param {Object} dataView The data view to clone.
             * @param {boolean} [isDeep] Specify a deep clone.
             * @returns {Object} Returns the cloned data view.
             */
            function cloneDataView(dataView, isDeep) {
                var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
                return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
            }

            /**
             * Creates a clone of `regexp`.
             *
             * @private
             * @param {Object} regexp The regexp to clone.
             * @returns {Object} Returns the cloned regexp.
             */
            function cloneRegExp(regexp) {
                var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
                result.lastIndex = regexp.lastIndex;
                return result;
            }

            /**
             * Creates a clone of the `symbol` object.
             *
             * @private
             * @param {Object} symbol The symbol object to clone.
             * @returns {Object} Returns the cloned symbol object.
             */
            function cloneSymbol(symbol) {
                return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
            }

            /**
             * Creates a clone of `typedArray`.
             *
             * @private
             * @param {Object} typedArray The typed array to clone.
             * @param {boolean} [isDeep] Specify a deep clone.
             * @returns {Object} Returns the cloned typed array.
             */
            function cloneTypedArray(typedArray, isDeep) {
                var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
                return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
            }

            /**
             * Compares values to sort them in ascending order.
             *
             * @private
             * @param {*} value The value to compare.
             * @param {*} other The other value to compare.
             * @returns {number} Returns the sort order indicator for `value`.
             */
            function compareAscending(value, other) {
                if (value !== other) {
                    var valIsDefined = value !== undefined$1,
                        valIsNull = value === null,
                        valIsReflexive = value === value,
                        valIsSymbol = isSymbol(value);

                    var othIsDefined = other !== undefined$1,
                        othIsNull = other === null,
                        othIsReflexive = other === other,
                        othIsSymbol = isSymbol(other);

                    if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) || (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) || (valIsNull && othIsDefined && othIsReflexive) || (!valIsDefined && othIsReflexive) || !valIsReflexive) {
                        return 1;
                    }
                    if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) || (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) || (othIsNull && valIsDefined && valIsReflexive) || (!othIsDefined && valIsReflexive) || !othIsReflexive) {
                        return -1;
                    }
                }
                return 0;
            }

            /**
             * Used by `_.orderBy` to compare multiple properties of a value to another
             * and stable sort them.
             *
             * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
             * specify an order of "desc" for descending or "asc" for ascending sort order
             * of corresponding values.
             *
             * @private
             * @param {Object} object The object to compare.
             * @param {Object} other The other object to compare.
             * @param {boolean[]|string[]} orders The order to sort by for each property.
             * @returns {number} Returns the sort order indicator for `object`.
             */
            function compareMultiple(object, other, orders) {
                var index = -1,
                    objCriteria = object.criteria,
                    othCriteria = other.criteria,
                    length = objCriteria.length,
                    ordersLength = orders.length;

                while (++index < length) {
                    var result = compareAscending(objCriteria[index], othCriteria[index]);
                    if (result) {
                        if (index >= ordersLength) {
                            return result;
                        }
                        var order = orders[index];
                        return result * (order == 'desc' ? -1 : 1);
                    }
                }
                // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
                // that causes it, under certain circumstances, to provide the same value for
                // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
                // for more details.
                //
                // This also ensures a stable sort in V8 and other engines.
                // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
                return object.index - other.index;
            }

            /**
             * Creates an array that is the composition of partially applied arguments,
             * placeholders, and provided arguments into a single array of arguments.
             *
             * @private
             * @param {Array} args The provided arguments.
             * @param {Array} partials The arguments to prepend to those provided.
             * @param {Array} holders The `partials` placeholder indexes.
             * @params {boolean} [isCurried] Specify composing for a curried function.
             * @returns {Array} Returns the new array of composed arguments.
             */
            function composeArgs(args, partials, holders, isCurried) {
                var argsIndex = -1,
                    argsLength = args.length,
                    holdersLength = holders.length,
                    leftIndex = -1,
                    leftLength = partials.length,
                    rangeLength = nativeMax(argsLength - holdersLength, 0),
                    result = Array(leftLength + rangeLength),
                    isUncurried = !isCurried;

                while (++leftIndex < leftLength) {
                    result[leftIndex] = partials[leftIndex];
                }
                while (++argsIndex < holdersLength) {
                    if (isUncurried || argsIndex < argsLength) {
                        result[holders[argsIndex]] = args[argsIndex];
                    }
                }
                while (rangeLength--) {
                    result[leftIndex++] = args[argsIndex++];
                }
                return result;
            }

            /**
             * This function is like `composeArgs` except that the arguments composition
             * is tailored for `_.partialRight`.
             *
             * @private
             * @param {Array} args The provided arguments.
             * @param {Array} partials The arguments to append to those provided.
             * @param {Array} holders The `partials` placeholder indexes.
             * @params {boolean} [isCurried] Specify composing for a curried function.
             * @returns {Array} Returns the new array of composed arguments.
             */
            function composeArgsRight(args, partials, holders, isCurried) {
                var argsIndex = -1,
                    argsLength = args.length,
                    holdersIndex = -1,
                    holdersLength = holders.length,
                    rightIndex = -1,
                    rightLength = partials.length,
                    rangeLength = nativeMax(argsLength - holdersLength, 0),
                    result = Array(rangeLength + rightLength),
                    isUncurried = !isCurried;

                while (++argsIndex < rangeLength) {
                    result[argsIndex] = args[argsIndex];
                }
                var offset = argsIndex;
                while (++rightIndex < rightLength) {
                    result[offset + rightIndex] = partials[rightIndex];
                }
                while (++holdersIndex < holdersLength) {
                    if (isUncurried || argsIndex < argsLength) {
                        result[offset + holders[holdersIndex]] = args[argsIndex++];
                    }
                }
                return result;
            }

            /**
             * Copies the values of `source` to `array`.
             *
             * @private
             * @param {Array} source The array to copy values from.
             * @param {Array} [array=[]] The array to copy values to.
             * @returns {Array} Returns `array`.
             */
            function copyArray(source, array) {
                var index = -1,
                    length = source.length;

                array || (array = Array(length));
                while (++index < length) {
                    array[index] = source[index];
                }
                return array;
            }

            /**
             * Copies properties of `source` to `object`.
             *
             * @private
             * @param {Object} source The object to copy properties from.
             * @param {Array} props The property identifiers to copy.
             * @param {Object} [object={}] The object to copy properties to.
             * @param {Function} [customizer] The function to customize copied values.
             * @returns {Object} Returns `object`.
             */
            function copyObject(source, props, object, customizer) {
                var isNew = !object;
                object || (object = {});

                var index = -1,
                    length = props.length;

                while (++index < length) {
                    var key = props[index];

                    var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined$1;

                    if (newValue === undefined$1) {
                        newValue = source[key];
                    }
                    if (isNew) {
                        baseAssignValue(object, key, newValue);
                    } else {
                        assignValue(object, key, newValue);
                    }
                }
                return object;
            }

            /**
             * Copies own symbols of `source` to `object`.
             *
             * @private
             * @param {Object} source The object to copy symbols from.
             * @param {Object} [object={}] The object to copy symbols to.
             * @returns {Object} Returns `object`.
             */
            function copySymbols(source, object) {
                return copyObject(source, getSymbols(source), object);
            }

            /**
             * Copies own and inherited symbols of `source` to `object`.
             *
             * @private
             * @param {Object} source The object to copy symbols from.
             * @param {Object} [object={}] The object to copy symbols to.
             * @returns {Object} Returns `object`.
             */
            function copySymbolsIn(source, object) {
                return copyObject(source, getSymbolsIn(source), object);
            }

            /**
             * Creates a function like `_.groupBy`.
             *
             * @private
             * @param {Function} setter The function to set accumulator values.
             * @param {Function} [initializer] The accumulator object initializer.
             * @returns {Function} Returns the new aggregator function.
             */
            function createAggregator(setter, initializer) {
                return function (collection, iteratee) {
                    var func = isArray(collection) ? arrayAggregator : baseAggregator,
                        accumulator = initializer ? initializer() : {};

                    return func(collection, setter, getIteratee(iteratee, 2), accumulator);
                };
            }

            /**
             * Creates a function like `_.assign`.
             *
             * @private
             * @param {Function} assigner The function to assign values.
             * @returns {Function} Returns the new assigner function.
             */
            function createAssigner(assigner) {
                return baseRest(function (object, sources) {
                    var index = -1,
                        length = sources.length,
                        customizer = length > 1 ? sources[length - 1] : undefined$1,
                        guard = length > 2 ? sources[2] : undefined$1;

                    customizer = assigner.length > 3 && typeof customizer == 'function' ? (length--, customizer) : undefined$1;

                    if (guard && isIterateeCall(sources[0], sources[1], guard)) {
                        customizer = length < 3 ? undefined$1 : customizer;
                        length = 1;
                    }
                    object = Object(object);
                    while (++index < length) {
                        var source = sources[index];
                        if (source) {
                            assigner(object, source, index, customizer);
                        }
                    }
                    return object;
                });
            }

            /**
             * Creates a `baseEach` or `baseEachRight` function.
             *
             * @private
             * @param {Function} eachFunc The function to iterate over a collection.
             * @param {boolean} [fromRight] Specify iterating from right to left.
             * @returns {Function} Returns the new base function.
             */
            function createBaseEach(eachFunc, fromRight) {
                return function (collection, iteratee) {
                    if (collection == null) {
                        return collection;
                    }
                    if (!isArrayLike(collection)) {
                        return eachFunc(collection, iteratee);
                    }
                    var length = collection.length,
                        index = fromRight ? length : -1,
                        iterable = Object(collection);

                    while (fromRight ? index-- : ++index < length) {
                        if (iteratee(iterable[index], index, iterable) === false) {
                            break;
                        }
                    }
                    return collection;
                };
            }

            /**
             * Creates a base function for methods like `_.forIn` and `_.forOwn`.
             *
             * @private
             * @param {boolean} [fromRight] Specify iterating from right to left.
             * @returns {Function} Returns the new base function.
             */
            function createBaseFor(fromRight) {
                return function (object, iteratee, keysFunc) {
                    var index = -1,
                        iterable = Object(object),
                        props = keysFunc(object),
                        length = props.length;

                    while (length--) {
                        var key = props[fromRight ? length : ++index];
                        if (iteratee(iterable[key], key, iterable) === false) {
                            break;
                        }
                    }
                    return object;
                };
            }

            /**
             * Creates a function that wraps `func` to invoke it with the optional `this`
             * binding of `thisArg`.
             *
             * @private
             * @param {Function} func The function to wrap.
             * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
             * @param {*} [thisArg] The `this` binding of `func`.
             * @returns {Function} Returns the new wrapped function.
             */
            function createBind(func, bitmask, thisArg) {
                var isBind = bitmask & WRAP_BIND_FLAG,
                    Ctor = createCtor(func);

                function wrapper() {
                    var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
                    return fn.apply(isBind ? thisArg : this, arguments);
                }
                return wrapper;
            }

            /**
             * Creates a function like `_.lowerFirst`.
             *
             * @private
             * @param {string} methodName The name of the `String` case method to use.
             * @returns {Function} Returns the new case function.
             */
            function createCaseFirst(methodName) {
                return function (string) {
                    string = toString(string);

                    var strSymbols = hasUnicode(string) ? stringToArray(string) : undefined$1;

                    var chr = strSymbols ? strSymbols[0] : string.charAt(0);

                    var trailing = strSymbols ? castSlice(strSymbols, 1).join('') : string.slice(1);

                    return chr[methodName]() + trailing;
                };
            }

            /**
             * Creates a function like `_.camelCase`.
             *
             * @private
             * @param {Function} callback The function to combine each word.
             * @returns {Function} Returns the new compounder function.
             */
            function createCompounder(callback) {
                return function (string) {
                    return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
                };
            }

            /**
             * Creates a function that produces an instance of `Ctor` regardless of
             * whether it was invoked as part of a `new` expression or by `call` or `apply`.
             *
             * @private
             * @param {Function} Ctor The constructor to wrap.
             * @returns {Function} Returns the new wrapped function.
             */
            function createCtor(Ctor) {
                return function () {
                    // Use a `switch` statement to work with class constructors. See
                    // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
                    // for more details.
                    var args = arguments;
                    switch (args.length) {
                        case 0:
                            return new Ctor();
                        case 1:
                            return new Ctor(args[0]);
                        case 2:
                            return new Ctor(args[0], args[1]);
                        case 3:
                            return new Ctor(args[0], args[1], args[2]);
                        case 4:
                            return new Ctor(args[0], args[1], args[2], args[3]);
                        case 5:
                            return new Ctor(args[0], args[1], args[2], args[3], args[4]);
                        case 6:
                            return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
                        case 7:
                            return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
                    }
                    var thisBinding = baseCreate(Ctor.prototype),
                        result = Ctor.apply(thisBinding, args);

                    // Mimic the constructor's `return` behavior.
                    // See https://es5.github.io/#x13.2.2 for more details.
                    return isObject(result) ? result : thisBinding;
                };
            }

            /**
             * Creates a function that wraps `func` to enable currying.
             *
             * @private
             * @param {Function} func The function to wrap.
             * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
             * @param {number} arity The arity of `func`.
             * @returns {Function} Returns the new wrapped function.
             */
            function createCurry(func, bitmask, arity) {
                var Ctor = createCtor(func);

                function wrapper() {
                    var length = arguments.length,
                        args = Array(length),
                        index = length,
                        placeholder = getHolder(wrapper);

                    while (index--) {
                        args[index] = arguments[index];
                    }
                    var holders = length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder ? [] : replaceHolders(args, placeholder);

                    length -= holders.length;
                    if (length < arity) {
                        return createRecurry(func, bitmask, createHybrid, wrapper.placeholder, undefined$1, args, holders, undefined$1, undefined$1, arity - length);
                    }
                    var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
                    return apply(fn, this, args);
                }
                return wrapper;
            }

            /**
             * Creates a `_.find` or `_.findLast` function.
             *
             * @private
             * @param {Function} findIndexFunc The function to find the collection index.
             * @returns {Function} Returns the new find function.
             */
            function createFind(findIndexFunc) {
                return function (collection, predicate, fromIndex) {
                    var iterable = Object(collection);
                    if (!isArrayLike(collection)) {
                        var iteratee = getIteratee(predicate, 3);
                        collection = keys(collection);
                        predicate = function (key) {
                            return iteratee(iterable[key], key, iterable);
                        };
                    }
                    var index = findIndexFunc(collection, predicate, fromIndex);
                    return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined$1;
                };
            }

            /**
             * Creates a `_.flow` or `_.flowRight` function.
             *
             * @private
             * @param {boolean} [fromRight] Specify iterating from right to left.
             * @returns {Function} Returns the new flow function.
             */
            function createFlow(fromRight) {
                return flatRest(function (funcs) {
                    var length = funcs.length,
                        index = length,
                        prereq = LodashWrapper.prototype.thru;

                    if (fromRight) {
                        funcs.reverse();
                    }
                    while (index--) {
                        var func = funcs[index];
                        if (typeof func != 'function') {
                            throw new TypeError(FUNC_ERROR_TEXT);
                        }
                        if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
                            var wrapper = new LodashWrapper([], true);
                        }
                    }
                    index = wrapper ? index : length;
                    while (++index < length) {
                        func = funcs[index];

                        var funcName = getFuncName(func),
                            data = funcName == 'wrapper' ? getData(func) : undefined$1;

                        if (data && isLaziable(data[0]) && data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) && !data[4].length && data[9] == 1) {
                            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
                        } else {
                            wrapper = func.length == 1 && isLaziable(func) ? wrapper[funcName]() : wrapper.thru(func);
                        }
                    }
                    return function () {
                        var args = arguments,
                            value = args[0];

                        if (wrapper && args.length == 1 && isArray(value)) {
                            return wrapper.plant(value).value();
                        }
                        var index = 0,
                            result = length ? funcs[index].apply(this, args) : value;

                        while (++index < length) {
                            result = funcs[index].call(this, result);
                        }
                        return result;
                    };
                });
            }

            /**
             * Creates a function that wraps `func` to invoke it with optional `this`
             * binding of `thisArg`, partial application, and currying.
             *
             * @private
             * @param {Function|string} func The function or method name to wrap.
             * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
             * @param {*} [thisArg] The `this` binding of `func`.
             * @param {Array} [partials] The arguments to prepend to those provided to
             *  the new function.
             * @param {Array} [holders] The `partials` placeholder indexes.
             * @param {Array} [partialsRight] The arguments to append to those provided
             *  to the new function.
             * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
             * @param {Array} [argPos] The argument positions of the new function.
             * @param {number} [ary] The arity cap of `func`.
             * @param {number} [arity] The arity of `func`.
             * @returns {Function} Returns the new wrapped function.
             */
            function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
                var isAry = bitmask & WRAP_ARY_FLAG,
                    isBind = bitmask & WRAP_BIND_FLAG,
                    isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
                    isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
                    isFlip = bitmask & WRAP_FLIP_FLAG,
                    Ctor = isBindKey ? undefined$1 : createCtor(func);

                function wrapper() {
                    var length = arguments.length,
                        args = Array(length),
                        index = length;

                    while (index--) {
                        args[index] = arguments[index];
                    }
                    if (isCurried) {
                        var placeholder = getHolder(wrapper),
                            holdersCount = countHolders(args, placeholder);
                    }
                    if (partials) {
                        args = composeArgs(args, partials, holders, isCurried);
                    }
                    if (partialsRight) {
                        args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
                    }
                    length -= holdersCount;
                    if (isCurried && length < arity) {
                        var newHolders = replaceHolders(args, placeholder);
                        return createRecurry(func, bitmask, createHybrid, wrapper.placeholder, thisArg, args, newHolders, argPos, ary, arity - length);
                    }
                    var thisBinding = isBind ? thisArg : this,
                        fn = isBindKey ? thisBinding[func] : func;

                    length = args.length;
                    if (argPos) {
                        args = reorder(args, argPos);
                    } else if (isFlip && length > 1) {
                        args.reverse();
                    }
                    if (isAry && ary < length) {
                        args.length = ary;
                    }
                    if (this && this !== root && this instanceof wrapper) {
                        fn = Ctor || createCtor(fn);
                    }
                    return fn.apply(thisBinding, args);
                }
                return wrapper;
            }

            /**
             * Creates a function like `_.invertBy`.
             *
             * @private
             * @param {Function} setter The function to set accumulator values.
             * @param {Function} toIteratee The function to resolve iteratees.
             * @returns {Function} Returns the new inverter function.
             */
            function createInverter(setter, toIteratee) {
                return function (object, iteratee) {
                    return baseInverter(object, setter, toIteratee(iteratee), {});
                };
            }

            /**
             * Creates a function that performs a mathematical operation on two values.
             *
             * @private
             * @param {Function} operator The function to perform the operation.
             * @param {number} [defaultValue] The value used for `undefined` arguments.
             * @returns {Function} Returns the new mathematical operation function.
             */
            function createMathOperation(operator, defaultValue) {
                return function (value, other) {
                    var result;
                    if (value === undefined$1 && other === undefined$1) {
                        return defaultValue;
                    }
                    if (value !== undefined$1) {
                        result = value;
                    }
                    if (other !== undefined$1) {
                        if (result === undefined$1) {
                            return other;
                        }
                        if (typeof value == 'string' || typeof other == 'string') {
                            value = baseToString(value);
                            other = baseToString(other);
                        } else {
                            value = baseToNumber(value);
                            other = baseToNumber(other);
                        }
                        result = operator(value, other);
                    }
                    return result;
                };
            }

            /**
             * Creates a function like `_.over`.
             *
             * @private
             * @param {Function} arrayFunc The function to iterate over iteratees.
             * @returns {Function} Returns the new over function.
             */
            function createOver(arrayFunc) {
                return flatRest(function (iteratees) {
                    iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
                    return baseRest(function (args) {
                        var thisArg = this;
                        return arrayFunc(iteratees, function (iteratee) {
                            return apply(iteratee, thisArg, args);
                        });
                    });
                });
            }

            /**
             * Creates the padding for `string` based on `length`. The `chars` string
             * is truncated if the number of characters exceeds `length`.
             *
             * @private
             * @param {number} length The padding length.
             * @param {string} [chars=' '] The string used as padding.
             * @returns {string} Returns the padding for `string`.
             */
            function createPadding(length, chars) {
                chars = chars === undefined$1 ? ' ' : baseToString(chars);

                var charsLength = chars.length;
                if (charsLength < 2) {
                    return charsLength ? baseRepeat(chars, length) : chars;
                }
                var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
                return hasUnicode(chars) ? castSlice(stringToArray(result), 0, length).join('') : result.slice(0, length);
            }

            /**
             * Creates a function that wraps `func` to invoke it with the `this` binding
             * of `thisArg` and `partials` prepended to the arguments it receives.
             *
             * @private
             * @param {Function} func The function to wrap.
             * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
             * @param {*} thisArg The `this` binding of `func`.
             * @param {Array} partials The arguments to prepend to those provided to
             *  the new function.
             * @returns {Function} Returns the new wrapped function.
             */
            function createPartial(func, bitmask, thisArg, partials) {
                var isBind = bitmask & WRAP_BIND_FLAG,
                    Ctor = createCtor(func);

                function wrapper() {
                    var argsIndex = -1,
                        argsLength = arguments.length,
                        leftIndex = -1,
                        leftLength = partials.length,
                        args = Array(leftLength + argsLength),
                        fn = this && this !== root && this instanceof wrapper ? Ctor : func;

                    while (++leftIndex < leftLength) {
                        args[leftIndex] = partials[leftIndex];
                    }
                    while (argsLength--) {
                        args[leftIndex++] = arguments[++argsIndex];
                    }
                    return apply(fn, isBind ? thisArg : this, args);
                }
                return wrapper;
            }

            /**
             * Creates a `_.range` or `_.rangeRight` function.
             *
             * @private
             * @param {boolean} [fromRight] Specify iterating from right to left.
             * @returns {Function} Returns the new range function.
             */
            function createRange(fromRight) {
                return function (start, end, step) {
                    if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
                        end = step = undefined$1;
                    }
                    // Ensure the sign of `-0` is preserved.
                    start = toFinite(start);
                    if (end === undefined$1) {
                        end = start;
                        start = 0;
                    } else {
                        end = toFinite(end);
                    }
                    step = step === undefined$1 ? (start < end ? 1 : -1) : toFinite(step);
                    return baseRange(start, end, step, fromRight);
                };
            }

            /**
             * Creates a function that performs a relational operation on two values.
             *
             * @private
             * @param {Function} operator The function to perform the operation.
             * @returns {Function} Returns the new relational operation function.
             */
            function createRelationalOperation(operator) {
                return function (value, other) {
                    if (!(typeof value == 'string' && typeof other == 'string')) {
                        value = toNumber(value);
                        other = toNumber(other);
                    }
                    return operator(value, other);
                };
            }

            /**
             * Creates a function that wraps `func` to continue currying.
             *
             * @private
             * @param {Function} func The function to wrap.
             * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
             * @param {Function} wrapFunc The function to create the `func` wrapper.
             * @param {*} placeholder The placeholder value.
             * @param {*} [thisArg] The `this` binding of `func`.
             * @param {Array} [partials] The arguments to prepend to those provided to
             *  the new function.
             * @param {Array} [holders] The `partials` placeholder indexes.
             * @param {Array} [argPos] The argument positions of the new function.
             * @param {number} [ary] The arity cap of `func`.
             * @param {number} [arity] The arity of `func`.
             * @returns {Function} Returns the new wrapped function.
             */
            function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
                var isCurry = bitmask & WRAP_CURRY_FLAG,
                    newHolders = isCurry ? holders : undefined$1,
                    newHoldersRight = isCurry ? undefined$1 : holders,
                    newPartials = isCurry ? partials : undefined$1,
                    newPartialsRight = isCurry ? undefined$1 : partials;

                bitmask |= isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG;
                bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

                if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
                    bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
                }
                var newData = [func, bitmask, thisArg, newPartials, newHolders, newPartialsRight, newHoldersRight, argPos, ary, arity];

                var result = wrapFunc.apply(undefined$1, newData);
                if (isLaziable(func)) {
                    setData(result, newData);
                }
                result.placeholder = placeholder;
                return setWrapToString(result, func, bitmask);
            }

            /**
             * Creates a function like `_.round`.
             *
             * @private
             * @param {string} methodName The name of the `Math` method to use when rounding.
             * @returns {Function} Returns the new round function.
             */
            function createRound(methodName) {
                var func = Math[methodName];
                return function (number, precision) {
                    number = toNumber(number);
                    precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
                    if (precision && nativeIsFinite(number)) {
                        // Shift with exponential notation to avoid floating-point issues.
                        // See [MDN](https://mdn.io/round#Examples) for more details.
                        var pair = (toString(number) + 'e').split('e'),
                            value = func(pair[0] + 'e' + (+pair[1] + precision));

                        pair = (toString(value) + 'e').split('e');
                        return +(pair[0] + 'e' + (+pair[1] - precision));
                    }
                    return func(number);
                };
            }

            /**
             * Creates a set object of `values`.
             *
             * @private
             * @param {Array} values The values to add to the set.
             * @returns {Object} Returns the new set.
             */
            var createSet = !(Set && 1 / setToArray(new Set([, -0]))[1] == INFINITY)
                ? noop
                : function (values) {
                      return new Set(values);
                  };

            /**
             * Creates a `_.toPairs` or `_.toPairsIn` function.
             *
             * @private
             * @param {Function} keysFunc The function to get the keys of a given object.
             * @returns {Function} Returns the new pairs function.
             */
            function createToPairs(keysFunc) {
                return function (object) {
                    var tag = getTag(object);
                    if (tag == mapTag) {
                        return mapToArray(object);
                    }
                    if (tag == setTag) {
                        return setToPairs(object);
                    }
                    return baseToPairs(object, keysFunc(object));
                };
            }

            /**
             * Creates a function that either curries or invokes `func` with optional
             * `this` binding and partially applied arguments.
             *
             * @private
             * @param {Function|string} func The function or method name to wrap.
             * @param {number} bitmask The bitmask flags.
             *    1 - `_.bind`
             *    2 - `_.bindKey`
             *    4 - `_.curry` or `_.curryRight` of a bound function
             *    8 - `_.curry`
             *   16 - `_.curryRight`
             *   32 - `_.partial`
             *   64 - `_.partialRight`
             *  128 - `_.rearg`
             *  256 - `_.ary`
             *  512 - `_.flip`
             * @param {*} [thisArg] The `this` binding of `func`.
             * @param {Array} [partials] The arguments to be partially applied.
             * @param {Array} [holders] The `partials` placeholder indexes.
             * @param {Array} [argPos] The argument positions of the new function.
             * @param {number} [ary] The arity cap of `func`.
             * @param {number} [arity] The arity of `func`.
             * @returns {Function} Returns the new wrapped function.
             */
            function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
                var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
                if (!isBindKey && typeof func != 'function') {
                    throw new TypeError(FUNC_ERROR_TEXT);
                }
                var length = partials ? partials.length : 0;
                if (!length) {
                    bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
                    partials = holders = undefined$1;
                }
                ary = ary === undefined$1 ? ary : nativeMax(toInteger(ary), 0);
                arity = arity === undefined$1 ? arity : toInteger(arity);
                length -= holders ? holders.length : 0;

                if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
                    var partialsRight = partials,
                        holdersRight = holders;

                    partials = holders = undefined$1;
                }
                var data = isBindKey ? undefined$1 : getData(func);

                var newData = [func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity];

                if (data) {
                    mergeData(newData, data);
                }
                func = newData[0];
                bitmask = newData[1];
                thisArg = newData[2];
                partials = newData[3];
                holders = newData[4];
                arity = newData[9] = newData[9] === undefined$1 ? (isBindKey ? 0 : func.length) : nativeMax(newData[9] - length, 0);

                if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
                    bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
                }
                if (!bitmask || bitmask == WRAP_BIND_FLAG) {
                    var result = createBind(func, bitmask, thisArg);
                } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
                    result = createCurry(func, bitmask, arity);
                } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
                    result = createPartial(func, bitmask, thisArg, partials);
                } else {
                    result = createHybrid.apply(undefined$1, newData);
                }
                var setter = data ? baseSetData : setData;
                return setWrapToString(setter(result, newData), func, bitmask);
            }

            /**
             * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
             * of source objects to the destination object for all destination properties
             * that resolve to `undefined`.
             *
             * @private
             * @param {*} objValue The destination value.
             * @param {*} srcValue The source value.
             * @param {string} key The key of the property to assign.
             * @param {Object} object The parent object of `objValue`.
             * @returns {*} Returns the value to assign.
             */
            function customDefaultsAssignIn(objValue, srcValue, key, object) {
                if (objValue === undefined$1 || (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
                    return srcValue;
                }
                return objValue;
            }

            /**
             * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
             * objects into destination objects that are passed thru.
             *
             * @private
             * @param {*} objValue The destination value.
             * @param {*} srcValue The source value.
             * @param {string} key The key of the property to merge.
             * @param {Object} object The parent object of `objValue`.
             * @param {Object} source The parent object of `srcValue`.
             * @param {Object} [stack] Tracks traversed source values and their merged
             *  counterparts.
             * @returns {*} Returns the value to assign.
             */
            function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
                if (isObject(objValue) && isObject(srcValue)) {
                    // Recursively merge objects and arrays (susceptible to call stack limits).
                    stack.set(srcValue, objValue);
                    baseMerge(objValue, srcValue, undefined$1, customDefaultsMerge, stack);
                    stack['delete'](srcValue);
                }
                return objValue;
            }

            /**
             * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
             * objects.
             *
             * @private
             * @param {*} value The value to inspect.
             * @param {string} key The key of the property to inspect.
             * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
             */
            function customOmitClone(value) {
                return isPlainObject(value) ? undefined$1 : value;
            }

            /**
             * A specialized version of `baseIsEqualDeep` for arrays with support for
             * partial deep comparisons.
             *
             * @private
             * @param {Array} array The array to compare.
             * @param {Array} other The other array to compare.
             * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
             * @param {Function} customizer The function to customize comparisons.
             * @param {Function} equalFunc The function to determine equivalents of values.
             * @param {Object} stack Tracks traversed `array` and `other` objects.
             * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
             */
            function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
                var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
                    arrLength = array.length,
                    othLength = other.length;

                if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
                    return false;
                }
                // Check that cyclic values are equal.
                var arrStacked = stack.get(array);
                var othStacked = stack.get(other);
                if (arrStacked && othStacked) {
                    return arrStacked == other && othStacked == array;
                }
                var index = -1,
                    result = true,
                    seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined$1;

                stack.set(array, other);
                stack.set(other, array);

                // Ignore non-index properties.
                while (++index < arrLength) {
                    var arrValue = array[index],
                        othValue = other[index];

                    if (customizer) {
                        var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
                    }
                    if (compared !== undefined$1) {
                        if (compared) {
                            continue;
                        }
                        result = false;
                        break;
                    }
                    // Recursively compare arrays (susceptible to call stack limits).
                    if (seen) {
                        if (
                            !arraySome(other, function (othValue, othIndex) {
                                if (!cacheHas(seen, othIndex) && (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                                    return seen.push(othIndex);
                                }
                            })
                        ) {
                            result = false;
                            break;
                        }
                    } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                        result = false;
                        break;
                    }
                }
                stack['delete'](array);
                stack['delete'](other);
                return result;
            }

            /**
             * A specialized version of `baseIsEqualDeep` for comparing objects of
             * the same `toStringTag`.
             *
             * **Note:** This function only supports comparing values with tags of
             * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
             *
             * @private
             * @param {Object} object The object to compare.
             * @param {Object} other The other object to compare.
             * @param {string} tag The `toStringTag` of the objects to compare.
             * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
             * @param {Function} customizer The function to customize comparisons.
             * @param {Function} equalFunc The function to determine equivalents of values.
             * @param {Object} stack Tracks traversed `object` and `other` objects.
             * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
             */
            function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
                switch (tag) {
                    case dataViewTag:
                        if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
                            return false;
                        }
                        object = object.buffer;
                        other = other.buffer;

                    case arrayBufferTag:
                        if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
                            return false;
                        }
                        return true;

                    case boolTag:
                    case dateTag:
                    case numberTag:
                        // Coerce booleans to `1` or `0` and dates to milliseconds.
                        // Invalid dates are coerced to `NaN`.
                        return eq(+object, +other);

                    case errorTag:
                        return object.name == other.name && object.message == other.message;

                    case regexpTag:
                    case stringTag:
                        // Coerce regexes to strings and treat strings, primitives and objects,
                        // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
                        // for more details.
                        return object == other + '';

                    case mapTag:
                        var convert = mapToArray;

                    case setTag:
                        var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
                        convert || (convert = setToArray);

                        if (object.size != other.size && !isPartial) {
                            return false;
                        }
                        // Assume cyclic values are equal.
                        var stacked = stack.get(object);
                        if (stacked) {
                            return stacked == other;
                        }
                        bitmask |= COMPARE_UNORDERED_FLAG;

                        // Recursively compare objects (susceptible to call stack limits).
                        stack.set(object, other);
                        var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
                        stack['delete'](object);
                        return result;

                    case symbolTag:
                        if (symbolValueOf) {
                            return symbolValueOf.call(object) == symbolValueOf.call(other);
                        }
                }
                return false;
            }

            /**
             * A specialized version of `baseIsEqualDeep` for objects with support for
             * partial deep comparisons.
             *
             * @private
             * @param {Object} object The object to compare.
             * @param {Object} other The other object to compare.
             * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
             * @param {Function} customizer The function to customize comparisons.
             * @param {Function} equalFunc The function to determine equivalents of values.
             * @param {Object} stack Tracks traversed `object` and `other` objects.
             * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
             */
            function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
                var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
                    objProps = getAllKeys(object),
                    objLength = objProps.length,
                    othProps = getAllKeys(other),
                    othLength = othProps.length;

                if (objLength != othLength && !isPartial) {
                    return false;
                }
                var index = objLength;
                while (index--) {
                    var key = objProps[index];
                    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
                        return false;
                    }
                }
                // Check that cyclic values are equal.
                var objStacked = stack.get(object);
                var othStacked = stack.get(other);
                if (objStacked && othStacked) {
                    return objStacked == other && othStacked == object;
                }
                var result = true;
                stack.set(object, other);
                stack.set(other, object);

                var skipCtor = isPartial;
                while (++index < objLength) {
                    key = objProps[index];
                    var objValue = object[key],
                        othValue = other[key];

                    if (customizer) {
                        var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
                    }
                    // Recursively compare objects (susceptible to call stack limits).
                    if (!(compared === undefined$1 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
                        result = false;
                        break;
                    }
                    skipCtor || (skipCtor = key == 'constructor');
                }
                if (result && !skipCtor) {
                    var objCtor = object.constructor,
                        othCtor = other.constructor;

                    // Non `Object` object instances with different constructors are not equal.
                    if (objCtor != othCtor && 'constructor' in object && 'constructor' in other && !(typeof objCtor == 'function' && objCtor instanceof objCtor && typeof othCtor == 'function' && othCtor instanceof othCtor)) {
                        result = false;
                    }
                }
                stack['delete'](object);
                stack['delete'](other);
                return result;
            }

            /**
             * A specialized version of `baseRest` which flattens the rest array.
             *
             * @private
             * @param {Function} func The function to apply a rest parameter to.
             * @returns {Function} Returns the new function.
             */
            function flatRest(func) {
                return setToString(overRest(func, undefined$1, flatten), func + '');
            }

            /**
             * Creates an array of own enumerable property names and symbols of `object`.
             *
             * @private
             * @param {Object} object The object to query.
             * @returns {Array} Returns the array of property names and symbols.
             */
            function getAllKeys(object) {
                return baseGetAllKeys(object, keys, getSymbols);
            }

            /**
             * Creates an array of own and inherited enumerable property names and
             * symbols of `object`.
             *
             * @private
             * @param {Object} object The object to query.
             * @returns {Array} Returns the array of property names and symbols.
             */
            function getAllKeysIn(object) {
                return baseGetAllKeys(object, keysIn, getSymbolsIn);
            }

            /**
             * Gets metadata for `func`.
             *
             * @private
             * @param {Function} func The function to query.
             * @returns {*} Returns the metadata for `func`.
             */
            var getData = !metaMap
                ? noop
                : function (func) {
                      return metaMap.get(func);
                  };

            /**
             * Gets the name of `func`.
             *
             * @private
             * @param {Function} func The function to query.
             * @returns {string} Returns the function name.
             */
            function getFuncName(func) {
                var result = func.name + '',
                    array = realNames[result],
                    length = hasOwnProperty.call(realNames, result) ? array.length : 0;

                while (length--) {
                    var data = array[length],
                        otherFunc = data.func;
                    if (otherFunc == null || otherFunc == func) {
                        return data.name;
                    }
                }
                return result;
            }

            /**
             * Gets the argument placeholder value for `func`.
             *
             * @private
             * @param {Function} func The function to inspect.
             * @returns {*} Returns the placeholder value.
             */
            function getHolder(func) {
                var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
                return object.placeholder;
            }

            /**
             * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
             * this function returns the custom method, otherwise it returns `baseIteratee`.
             * If arguments are provided, the chosen function is invoked with them and
             * its result is returned.
             *
             * @private
             * @param {*} [value] The value to convert to an iteratee.
             * @param {number} [arity] The arity of the created iteratee.
             * @returns {Function} Returns the chosen function or its result.
             */
            function getIteratee() {
                var result = lodash.iteratee || iteratee;
                result = result === iteratee ? baseIteratee : result;
                return arguments.length ? result(arguments[0], arguments[1]) : result;
            }

            /**
             * Gets the data for `map`.
             *
             * @private
             * @param {Object} map The map to query.
             * @param {string} key The reference key.
             * @returns {*} Returns the map data.
             */
            function getMapData(map, key) {
                var data = map.__data__;
                return isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;
            }

            /**
             * Gets the property names, values, and compare flags of `object`.
             *
             * @private
             * @param {Object} object The object to query.
             * @returns {Array} Returns the match data of `object`.
             */
            function getMatchData(object) {
                var result = keys(object),
                    length = result.length;

                while (length--) {
                    var key = result[length],
                        value = object[key];

                    result[length] = [key, value, isStrictComparable(value)];
                }
                return result;
            }

            /**
             * Gets the native function at `key` of `object`.
             *
             * @private
             * @param {Object} object The object to query.
             * @param {string} key The key of the method to get.
             * @returns {*} Returns the function if it's native, else `undefined`.
             */
            function getNative(object, key) {
                var value = getValue(object, key);
                return baseIsNative(value) ? value : undefined$1;
            }

            /**
             * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
             *
             * @private
             * @param {*} value The value to query.
             * @returns {string} Returns the raw `toStringTag`.
             */
            function getRawTag(value) {
                var isOwn = hasOwnProperty.call(value, symToStringTag),
                    tag = value[symToStringTag];

                try {
                    value[symToStringTag] = undefined$1;
                    var unmasked = true;
                } catch (e) {}

                var result = nativeObjectToString.call(value);
                if (unmasked) {
                    if (isOwn) {
                        value[symToStringTag] = tag;
                    } else {
                        delete value[symToStringTag];
                    }
                }
                return result;
            }

            /**
             * Creates an array of the own enumerable symbols of `object`.
             *
             * @private
             * @param {Object} object The object to query.
             * @returns {Array} Returns the array of symbols.
             */
            var getSymbols = !nativeGetSymbols
                ? stubArray
                : function (object) {
                      if (object == null) {
                          return [];
                      }
                      object = Object(object);
                      return arrayFilter(nativeGetSymbols(object), function (symbol) {
                          return propertyIsEnumerable.call(object, symbol);
                      });
                  };

            /**
             * Creates an array of the own and inherited enumerable symbols of `object`.
             *
             * @private
             * @param {Object} object The object to query.
             * @returns {Array} Returns the array of symbols.
             */
            var getSymbolsIn = !nativeGetSymbols
                ? stubArray
                : function (object) {
                      var result = [];
                      while (object) {
                          arrayPush(result, getSymbols(object));
                          object = getPrototype(object);
                      }
                      return result;
                  };

            /**
             * Gets the `toStringTag` of `value`.
             *
             * @private
             * @param {*} value The value to query.
             * @returns {string} Returns the `toStringTag`.
             */
            var getTag = baseGetTag;

            // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
            if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) || (Map && getTag(new Map()) != mapTag) || (Promise && getTag(Promise.resolve()) != promiseTag) || (Set && getTag(new Set()) != setTag) || (WeakMap && getTag(new WeakMap()) != weakMapTag)) {
                getTag = function (value) {
                    var result = baseGetTag(value),
                        Ctor = result == objectTag ? value.constructor : undefined$1,
                        ctorString = Ctor ? toSource(Ctor) : '';

                    if (ctorString) {
                        switch (ctorString) {
                            case dataViewCtorString:
                                return dataViewTag;
                            case mapCtorString:
                                return mapTag;
                            case promiseCtorString:
                                return promiseTag;
                            case setCtorString:
                                return setTag;
                            case weakMapCtorString:
                                return weakMapTag;
                        }
                    }
                    return result;
                };
            }

            /**
             * Gets the view, applying any `transforms` to the `start` and `end` positions.
             *
             * @private
             * @param {number} start The start of the view.
             * @param {number} end The end of the view.
             * @param {Array} transforms The transformations to apply to the view.
             * @returns {Object} Returns an object containing the `start` and `end`
             *  positions of the view.
             */
            function getView(start, end, transforms) {
                var index = -1,
                    length = transforms.length;

                while (++index < length) {
                    var data = transforms[index],
                        size = data.size;

                    switch (data.type) {
                        case 'drop':
                            start += size;
                            break;
                        case 'dropRight':
                            end -= size;
                            break;
                        case 'take':
                            end = nativeMin(end, start + size);
                            break;
                        case 'takeRight':
                            start = nativeMax(start, end - size);
                            break;
                    }
                }
                return { start: start, end: end };
            }

            /**
             * Extracts wrapper details from the `source` body comment.
             *
             * @private
             * @param {string} source The source to inspect.
             * @returns {Array} Returns the wrapper details.
             */
            function getWrapDetails(source) {
                var match = source.match(reWrapDetails);
                return match ? match[1].split(reSplitDetails) : [];
            }

            /**
             * Checks if `path` exists on `object`.
             *
             * @private
             * @param {Object} object The object to query.
             * @param {Array|string} path The path to check.
             * @param {Function} hasFunc The function to check properties.
             * @returns {boolean} Returns `true` if `path` exists, else `false`.
             */
            function hasPath(object, path, hasFunc) {
                path = castPath(path, object);

                var index = -1,
                    length = path.length,
                    result = false;

                while (++index < length) {
                    var key = toKey(path[index]);
                    if (!(result = object != null && hasFunc(object, key))) {
                        break;
                    }
                    object = object[key];
                }
                if (result || ++index != length) {
                    return result;
                }
                length = object == null ? 0 : object.length;
                return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));
            }

            /**
             * Initializes an array clone.
             *
             * @private
             * @param {Array} array The array to clone.
             * @returns {Array} Returns the initialized clone.
             */
            function initCloneArray(array) {
                var length = array.length,
                    result = new array.constructor(length);

                // Add properties assigned by `RegExp#exec`.
                if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
                    result.index = array.index;
                    result.input = array.input;
                }
                return result;
            }

            /**
             * Initializes an object clone.
             *
             * @private
             * @param {Object} object The object to clone.
             * @returns {Object} Returns the initialized clone.
             */
            function initCloneObject(object) {
                return typeof object.constructor == 'function' && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
            }

            /**
             * Initializes an object clone based on its `toStringTag`.
             *
             * **Note:** This function only supports cloning values with tags of
             * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
             *
             * @private
             * @param {Object} object The object to clone.
             * @param {string} tag The `toStringTag` of the object to clone.
             * @param {boolean} [isDeep] Specify a deep clone.
             * @returns {Object} Returns the initialized clone.
             */
            function initCloneByTag(object, tag, isDeep) {
                var Ctor = object.constructor;
                switch (tag) {
                    case arrayBufferTag:
                        return cloneArrayBuffer(object);

                    case boolTag:
                    case dateTag:
                        return new Ctor(+object);

                    case dataViewTag:
                        return cloneDataView(object, isDeep);

                    case float32Tag:
                    case float64Tag:
                    case int8Tag:
                    case int16Tag:
                    case int32Tag:
                    case uint8Tag:
                    case uint8ClampedTag:
                    case uint16Tag:
                    case uint32Tag:
                        return cloneTypedArray(object, isDeep);

                    case mapTag:
                        return new Ctor();

                    case numberTag:
                    case stringTag:
                        return new Ctor(object);

                    case regexpTag:
                        return cloneRegExp(object);

                    case setTag:
                        return new Ctor();

                    case symbolTag:
                        return cloneSymbol(object);
                }
            }

            /**
             * Inserts wrapper `details` in a comment at the top of the `source` body.
             *
             * @private
             * @param {string} source The source to modify.
             * @returns {Array} details The details to insert.
             * @returns {string} Returns the modified source.
             */
            function insertWrapDetails(source, details) {
                var length = details.length;
                if (!length) {
                    return source;
                }
                var lastIndex = length - 1;
                details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
                details = details.join(length > 2 ? ', ' : ' ');
                return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
            }

            /**
             * Checks if `value` is a flattenable `arguments` object or array.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
             */
            function isFlattenable(value) {
                return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
            }

            /**
             * Checks if `value` is a valid array-like index.
             *
             * @private
             * @param {*} value The value to check.
             * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
             * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
             */
            function isIndex(value, length) {
                var type = typeof value;
                length = length == null ? MAX_SAFE_INTEGER : length;

                return !!length && (type == 'number' || (type != 'symbol' && reIsUint.test(value))) && value > -1 && value % 1 == 0 && value < length;
            }

            /**
             * Checks if the given arguments are from an iteratee call.
             *
             * @private
             * @param {*} value The potential iteratee value argument.
             * @param {*} index The potential iteratee index or key argument.
             * @param {*} object The potential iteratee object argument.
             * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
             *  else `false`.
             */
            function isIterateeCall(value, index, object) {
                if (!isObject(object)) {
                    return false;
                }
                var type = typeof index;
                if (type == 'number' ? isArrayLike(object) && isIndex(index, object.length) : type == 'string' && index in object) {
                    return eq(object[index], value);
                }
                return false;
            }

            /**
             * Checks if `value` is a property name and not a property path.
             *
             * @private
             * @param {*} value The value to check.
             * @param {Object} [object] The object to query keys on.
             * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
             */
            function isKey(value, object) {
                if (isArray(value)) {
                    return false;
                }
                var type = typeof value;
                if (type == 'number' || type == 'symbol' || type == 'boolean' || value == null || isSymbol(value)) {
                    return true;
                }
                return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || (object != null && value in Object(object));
            }

            /**
             * Checks if `value` is suitable for use as unique object key.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
             */
            function isKeyable(value) {
                var type = typeof value;
                return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;
            }

            /**
             * Checks if `func` has a lazy counterpart.
             *
             * @private
             * @param {Function} func The function to check.
             * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
             *  else `false`.
             */
            function isLaziable(func) {
                var funcName = getFuncName(func),
                    other = lodash[funcName];

                if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
                    return false;
                }
                if (func === other) {
                    return true;
                }
                var data = getData(other);
                return !!data && func === data[0];
            }

            /**
             * Checks if `func` has its source masked.
             *
             * @private
             * @param {Function} func The function to check.
             * @returns {boolean} Returns `true` if `func` is masked, else `false`.
             */
            function isMasked(func) {
                return !!maskSrcKey && maskSrcKey in func;
            }

            /**
             * Checks if `func` is capable of being masked.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
             */
            var isMaskable = coreJsData ? isFunction : stubFalse;

            /**
             * Checks if `value` is likely a prototype object.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
             */
            function isPrototype(value) {
                var Ctor = value && value.constructor,
                    proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

                return value === proto;
            }

            /**
             * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` if suitable for strict
             *  equality comparisons, else `false`.
             */
            function isStrictComparable(value) {
                return value === value && !isObject(value);
            }

            /**
             * A specialized version of `matchesProperty` for source values suitable
             * for strict equality comparisons, i.e. `===`.
             *
             * @private
             * @param {string} key The key of the property to get.
             * @param {*} srcValue The value to match.
             * @returns {Function} Returns the new spec function.
             */
            function matchesStrictComparable(key, srcValue) {
                return function (object) {
                    if (object == null) {
                        return false;
                    }
                    return object[key] === srcValue && (srcValue !== undefined$1 || key in Object(object));
                };
            }

            /**
             * A specialized version of `_.memoize` which clears the memoized function's
             * cache when it exceeds `MAX_MEMOIZE_SIZE`.
             *
             * @private
             * @param {Function} func The function to have its output memoized.
             * @returns {Function} Returns the new memoized function.
             */
            function memoizeCapped(func) {
                var result = memoize(func, function (key) {
                    if (cache.size === MAX_MEMOIZE_SIZE) {
                        cache.clear();
                    }
                    return key;
                });

                var cache = result.cache;
                return result;
            }

            /**
             * Merges the function metadata of `source` into `data`.
             *
             * Merging metadata reduces the number of wrappers used to invoke a function.
             * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
             * may be applied regardless of execution order. Methods like `_.ary` and
             * `_.rearg` modify function arguments, making the order in which they are
             * executed important, preventing the merging of metadata. However, we make
             * an exception for a safe combined case where curried functions have `_.ary`
             * and or `_.rearg` applied.
             *
             * @private
             * @param {Array} data The destination metadata.
             * @param {Array} source The source metadata.
             * @returns {Array} Returns `data`.
             */
            function mergeData(data, source) {
                var bitmask = data[1],
                    srcBitmask = source[1],
                    newBitmask = bitmask | srcBitmask,
                    isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);

                var isCombo = (srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_CURRY_FLAG) || (srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_REARG_FLAG && data[7].length <= source[8]) || (srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG) && source[7].length <= source[8] && bitmask == WRAP_CURRY_FLAG);

                // Exit early if metadata can't be merged.
                if (!(isCommon || isCombo)) {
                    return data;
                }
                // Use source `thisArg` if available.
                if (srcBitmask & WRAP_BIND_FLAG) {
                    data[2] = source[2];
                    // Set when currying a bound function.
                    newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
                }
                // Compose partial arguments.
                var value = source[3];
                if (value) {
                    var partials = data[3];
                    data[3] = partials ? composeArgs(partials, value, source[4]) : value;
                    data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
                }
                // Compose partial right arguments.
                value = source[5];
                if (value) {
                    partials = data[5];
                    data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
                    data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
                }
                // Use source `argPos` if available.
                value = source[7];
                if (value) {
                    data[7] = value;
                }
                // Use source `ary` if it's smaller.
                if (srcBitmask & WRAP_ARY_FLAG) {
                    data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
                }
                // Use source `arity` if one is not provided.
                if (data[9] == null) {
                    data[9] = source[9];
                }
                // Use source `func` and merge bitmasks.
                data[0] = source[0];
                data[1] = newBitmask;

                return data;
            }

            /**
             * This function is like
             * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
             * except that it includes inherited enumerable properties.
             *
             * @private
             * @param {Object} object The object to query.
             * @returns {Array} Returns the array of property names.
             */
            function nativeKeysIn(object) {
                var result = [];
                if (object != null) {
                    for (var key in Object(object)) {
                        result.push(key);
                    }
                }
                return result;
            }

            /**
             * Converts `value` to a string using `Object.prototype.toString`.
             *
             * @private
             * @param {*} value The value to convert.
             * @returns {string} Returns the converted string.
             */
            function objectToString(value) {
                return nativeObjectToString.call(value);
            }

            /**
             * A specialized version of `baseRest` which transforms the rest array.
             *
             * @private
             * @param {Function} func The function to apply a rest parameter to.
             * @param {number} [start=func.length-1] The start position of the rest parameter.
             * @param {Function} transform The rest array transform.
             * @returns {Function} Returns the new function.
             */
            function overRest(func, start, transform) {
                start = nativeMax(start === undefined$1 ? func.length - 1 : start, 0);
                return function () {
                    var args = arguments,
                        index = -1,
                        length = nativeMax(args.length - start, 0),
                        array = Array(length);

                    while (++index < length) {
                        array[index] = args[start + index];
                    }
                    index = -1;
                    var otherArgs = Array(start + 1);
                    while (++index < start) {
                        otherArgs[index] = args[index];
                    }
                    otherArgs[start] = transform(array);
                    return apply(func, this, otherArgs);
                };
            }

            /**
             * Gets the parent value at `path` of `object`.
             *
             * @private
             * @param {Object} object The object to query.
             * @param {Array} path The path to get the parent value of.
             * @returns {*} Returns the parent value.
             */
            function parent(object, path) {
                return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
            }

            /**
             * Reorder `array` according to the specified indexes where the element at
             * the first index is assigned as the first element, the element at
             * the second index is assigned as the second element, and so on.
             *
             * @private
             * @param {Array} array The array to reorder.
             * @param {Array} indexes The arranged array indexes.
             * @returns {Array} Returns `array`.
             */
            function reorder(array, indexes) {
                var arrLength = array.length,
                    length = nativeMin(indexes.length, arrLength),
                    oldArray = copyArray(array);

                while (length--) {
                    var index = indexes[length];
                    array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined$1;
                }
                return array;
            }

            /**
             * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
             *
             * @private
             * @param {Object} object The object to query.
             * @param {string} key The key of the property to get.
             * @returns {*} Returns the property value.
             */
            function safeGet(object, key) {
                if (key === 'constructor' && typeof object[key] === 'function') {
                    return;
                }

                if (key == '__proto__') {
                    return;
                }

                return object[key];
            }

            /**
             * Sets metadata for `func`.
             *
             * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
             * period of time, it will trip its breaker and transition to an identity
             * function to avoid garbage collection pauses in V8. See
             * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
             * for more details.
             *
             * @private
             * @param {Function} func The function to associate metadata with.
             * @param {*} data The metadata.
             * @returns {Function} Returns `func`.
             */
            var setData = shortOut(baseSetData);

            /**
             * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
             *
             * @private
             * @param {Function} func The function to delay.
             * @param {number} wait The number of milliseconds to delay invocation.
             * @returns {number|Object} Returns the timer id or timeout object.
             */
            var setTimeout =
                ctxSetTimeout ||
                function (func, wait) {
                    return root.setTimeout(func, wait);
                };

            /**
             * Sets the `toString` method of `func` to return `string`.
             *
             * @private
             * @param {Function} func The function to modify.
             * @param {Function} string The `toString` result.
             * @returns {Function} Returns `func`.
             */
            var setToString = shortOut(baseSetToString);

            /**
             * Sets the `toString` method of `wrapper` to mimic the source of `reference`
             * with wrapper details in a comment at the top of the source body.
             *
             * @private
             * @param {Function} wrapper The function to modify.
             * @param {Function} reference The reference function.
             * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
             * @returns {Function} Returns `wrapper`.
             */
            function setWrapToString(wrapper, reference, bitmask) {
                var source = reference + '';
                return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
            }

            /**
             * Creates a function that'll short out and invoke `identity` instead
             * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
             * milliseconds.
             *
             * @private
             * @param {Function} func The function to restrict.
             * @returns {Function} Returns the new shortable function.
             */
            function shortOut(func) {
                var count = 0,
                    lastCalled = 0;

                return function () {
                    var stamp = nativeNow(),
                        remaining = HOT_SPAN - (stamp - lastCalled);

                    lastCalled = stamp;
                    if (remaining > 0) {
                        if (++count >= HOT_COUNT) {
                            return arguments[0];
                        }
                    } else {
                        count = 0;
                    }
                    return func.apply(undefined$1, arguments);
                };
            }

            /**
             * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
             *
             * @private
             * @param {Array} array The array to shuffle.
             * @param {number} [size=array.length] The size of `array`.
             * @returns {Array} Returns `array`.
             */
            function shuffleSelf(array, size) {
                var index = -1,
                    length = array.length,
                    lastIndex = length - 1;

                size = size === undefined$1 ? length : size;
                while (++index < size) {
                    var rand = baseRandom(index, lastIndex),
                        value = array[rand];

                    array[rand] = array[index];
                    array[index] = value;
                }
                array.length = size;
                return array;
            }

            /**
             * Converts `string` to a property path array.
             *
             * @private
             * @param {string} string The string to convert.
             * @returns {Array} Returns the property path array.
             */
            var stringToPath = memoizeCapped(function (string) {
                var result = [];
                if (string.charCodeAt(0) === 46 /* . */) {
                    result.push('');
                }
                string.replace(rePropName, function (match, number, quote, subString) {
                    result.push(quote ? subString.replace(reEscapeChar, '$1') : number || match);
                });
                return result;
            });

            /**
             * Converts `value` to a string key if it's not a string or symbol.
             *
             * @private
             * @param {*} value The value to inspect.
             * @returns {string|symbol} Returns the key.
             */
            function toKey(value) {
                if (typeof value == 'string' || isSymbol(value)) {
                    return value;
                }
                var result = value + '';
                return result == '0' && 1 / value == -INFINITY ? '-0' : result;
            }

            /**
             * Converts `func` to its source code.
             *
             * @private
             * @param {Function} func The function to convert.
             * @returns {string} Returns the source code.
             */
            function toSource(func) {
                if (func != null) {
                    try {
                        return funcToString.call(func);
                    } catch (e) {}
                    try {
                        return func + '';
                    } catch (e) {}
                }
                return '';
            }

            /**
             * Updates wrapper `details` based on `bitmask` flags.
             *
             * @private
             * @returns {Array} details The details to modify.
             * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
             * @returns {Array} Returns `details`.
             */
            function updateWrapDetails(details, bitmask) {
                arrayEach(wrapFlags, function (pair) {
                    var value = '_.' + pair[0];
                    if (bitmask & pair[1] && !arrayIncludes(details, value)) {
                        details.push(value);
                    }
                });
                return details.sort();
            }

            /**
             * Creates a clone of `wrapper`.
             *
             * @private
             * @param {Object} wrapper The wrapper to clone.
             * @returns {Object} Returns the cloned wrapper.
             */
            function wrapperClone(wrapper) {
                if (wrapper instanceof LazyWrapper) {
                    return wrapper.clone();
                }
                var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
                result.__actions__ = copyArray(wrapper.__actions__);
                result.__index__ = wrapper.__index__;
                result.__values__ = wrapper.__values__;
                return result;
            }

            /*------------------------------------------------------------------------*/

            /**
             * Creates an array of elements split into groups the length of `size`.
             * If `array` can't be split evenly, the final chunk will be the remaining
             * elements.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Array
             * @param {Array} array The array to process.
             * @param {number} [size=1] The length of each chunk
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {Array} Returns the new array of chunks.
             * @example
             *
             * _.chunk(['a', 'b', 'c', 'd'], 2);
             * // => [['a', 'b'], ['c', 'd']]
             *
             * _.chunk(['a', 'b', 'c', 'd'], 3);
             * // => [['a', 'b', 'c'], ['d']]
             */
            function chunk(array, size, guard) {
                if (guard ? isIterateeCall(array, size, guard) : size === undefined$1) {
                    size = 1;
                } else {
                    size = nativeMax(toInteger(size), 0);
                }
                var length = array == null ? 0 : array.length;
                if (!length || size < 1) {
                    return [];
                }
                var index = 0,
                    resIndex = 0,
                    result = Array(nativeCeil(length / size));

                while (index < length) {
                    result[resIndex++] = baseSlice(array, index, (index += size));
                }
                return result;
            }

            /**
             * Creates an array with all falsey values removed. The values `false`, `null`,
             * `0`, `""`, `undefined`, and `NaN` are falsey.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Array
             * @param {Array} array The array to compact.
             * @returns {Array} Returns the new array of filtered values.
             * @example
             *
             * _.compact([0, 1, false, 2, '', 3]);
             * // => [1, 2, 3]
             */
            function compact(array) {
                var index = -1,
                    length = array == null ? 0 : array.length,
                    resIndex = 0,
                    result = [];

                while (++index < length) {
                    var value = array[index];
                    if (value) {
                        result[resIndex++] = value;
                    }
                }
                return result;
            }

            /**
             * Creates a new array concatenating `array` with any additional arrays
             * and/or values.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The array to concatenate.
             * @param {...*} [values] The values to concatenate.
             * @returns {Array} Returns the new concatenated array.
             * @example
             *
             * var array = [1];
             * var other = _.concat(array, 2, [3], [[4]]);
             *
             * console.log(other);
             * // => [1, 2, 3, [4]]
             *
             * console.log(array);
             * // => [1]
             */
            function concat() {
                var length = arguments.length;
                if (!length) {
                    return [];
                }
                var args = Array(length - 1),
                    array = arguments[0],
                    index = length;

                while (index--) {
                    args[index - 1] = arguments[index];
                }
                return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
            }

            /**
             * Creates an array of `array` values not included in the other given arrays
             * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
             * for equality comparisons. The order and references of result values are
             * determined by the first array.
             *
             * **Note:** Unlike `_.pullAll`, this method returns a new array.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @param {...Array} [values] The values to exclude.
             * @returns {Array} Returns the new array of filtered values.
             * @see _.without, _.xor
             * @example
             *
             * _.difference([2, 1], [2, 3]);
             * // => [1]
             */
            var difference = baseRest(function (array, values) {
                return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true)) : [];
            });

            /**
             * This method is like `_.difference` except that it accepts `iteratee` which
             * is invoked for each element of `array` and `values` to generate the criterion
             * by which they're compared. The order and references of result values are
             * determined by the first array. The iteratee is invoked with one argument:
             * (value).
             *
             * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @param {...Array} [values] The values to exclude.
             * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
             * @returns {Array} Returns the new array of filtered values.
             * @example
             *
             * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
             * // => [1.2]
             *
             * // The `_.property` iteratee shorthand.
             * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
             * // => [{ 'x': 2 }]
             */
            var differenceBy = baseRest(function (array, values) {
                var iteratee = last(values);
                if (isArrayLikeObject(iteratee)) {
                    iteratee = undefined$1;
                }
                return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2)) : [];
            });

            /**
             * This method is like `_.difference` except that it accepts `comparator`
             * which is invoked to compare elements of `array` to `values`. The order and
             * references of result values are determined by the first array. The comparator
             * is invoked with two arguments: (arrVal, othVal).
             *
             * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @param {...Array} [values] The values to exclude.
             * @param {Function} [comparator] The comparator invoked per element.
             * @returns {Array} Returns the new array of filtered values.
             * @example
             *
             * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
             *
             * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
             * // => [{ 'x': 2, 'y': 1 }]
             */
            var differenceWith = baseRest(function (array, values) {
                var comparator = last(values);
                if (isArrayLikeObject(comparator)) {
                    comparator = undefined$1;
                }
                return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined$1, comparator) : [];
            });

            /**
             * Creates a slice of `array` with `n` elements dropped from the beginning.
             *
             * @static
             * @memberOf _
             * @since 0.5.0
             * @category Array
             * @param {Array} array The array to query.
             * @param {number} [n=1] The number of elements to drop.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {Array} Returns the slice of `array`.
             * @example
             *
             * _.drop([1, 2, 3]);
             * // => [2, 3]
             *
             * _.drop([1, 2, 3], 2);
             * // => [3]
             *
             * _.drop([1, 2, 3], 5);
             * // => []
             *
             * _.drop([1, 2, 3], 0);
             * // => [1, 2, 3]
             */
            function drop(array, n, guard) {
                var length = array == null ? 0 : array.length;
                if (!length) {
                    return [];
                }
                n = guard || n === undefined$1 ? 1 : toInteger(n);
                return baseSlice(array, n < 0 ? 0 : n, length);
            }

            /**
             * Creates a slice of `array` with `n` elements dropped from the end.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Array
             * @param {Array} array The array to query.
             * @param {number} [n=1] The number of elements to drop.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {Array} Returns the slice of `array`.
             * @example
             *
             * _.dropRight([1, 2, 3]);
             * // => [1, 2]
             *
             * _.dropRight([1, 2, 3], 2);
             * // => [1]
             *
             * _.dropRight([1, 2, 3], 5);
             * // => []
             *
             * _.dropRight([1, 2, 3], 0);
             * // => [1, 2, 3]
             */
            function dropRight(array, n, guard) {
                var length = array == null ? 0 : array.length;
                if (!length) {
                    return [];
                }
                n = guard || n === undefined$1 ? 1 : toInteger(n);
                n = length - n;
                return baseSlice(array, 0, n < 0 ? 0 : n);
            }

            /**
             * Creates a slice of `array` excluding elements dropped from the end.
             * Elements are dropped until `predicate` returns falsey. The predicate is
             * invoked with three arguments: (value, index, array).
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Array
             * @param {Array} array The array to query.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @returns {Array} Returns the slice of `array`.
             * @example
             *
             * var users = [
             *   { 'user': 'barney',  'active': true },
             *   { 'user': 'fred',    'active': false },
             *   { 'user': 'pebbles', 'active': false }
             * ];
             *
             * _.dropRightWhile(users, function(o) { return !o.active; });
             * // => objects for ['barney']
             *
             * // The `_.matches` iteratee shorthand.
             * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
             * // => objects for ['barney', 'fred']
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.dropRightWhile(users, ['active', false]);
             * // => objects for ['barney']
             *
             * // The `_.property` iteratee shorthand.
             * _.dropRightWhile(users, 'active');
             * // => objects for ['barney', 'fred', 'pebbles']
             */
            function dropRightWhile(array, predicate) {
                return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true, true) : [];
            }

            /**
             * Creates a slice of `array` excluding elements dropped from the beginning.
             * Elements are dropped until `predicate` returns falsey. The predicate is
             * invoked with three arguments: (value, index, array).
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Array
             * @param {Array} array The array to query.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @returns {Array} Returns the slice of `array`.
             * @example
             *
             * var users = [
             *   { 'user': 'barney',  'active': false },
             *   { 'user': 'fred',    'active': false },
             *   { 'user': 'pebbles', 'active': true }
             * ];
             *
             * _.dropWhile(users, function(o) { return !o.active; });
             * // => objects for ['pebbles']
             *
             * // The `_.matches` iteratee shorthand.
             * _.dropWhile(users, { 'user': 'barney', 'active': false });
             * // => objects for ['fred', 'pebbles']
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.dropWhile(users, ['active', false]);
             * // => objects for ['pebbles']
             *
             * // The `_.property` iteratee shorthand.
             * _.dropWhile(users, 'active');
             * // => objects for ['barney', 'fred', 'pebbles']
             */
            function dropWhile(array, predicate) {
                return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true) : [];
            }

            /**
             * Fills elements of `array` with `value` from `start` up to, but not
             * including, `end`.
             *
             * **Note:** This method mutates `array`.
             *
             * @static
             * @memberOf _
             * @since 3.2.0
             * @category Array
             * @param {Array} array The array to fill.
             * @param {*} value The value to fill `array` with.
             * @param {number} [start=0] The start position.
             * @param {number} [end=array.length] The end position.
             * @returns {Array} Returns `array`.
             * @example
             *
             * var array = [1, 2, 3];
             *
             * _.fill(array, 'a');
             * console.log(array);
             * // => ['a', 'a', 'a']
             *
             * _.fill(Array(3), 2);
             * // => [2, 2, 2]
             *
             * _.fill([4, 6, 8, 10], '*', 1, 3);
             * // => [4, '*', '*', 10]
             */
            function fill(array, value, start, end) {
                var length = array == null ? 0 : array.length;
                if (!length) {
                    return [];
                }
                if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
                    start = 0;
                    end = length;
                }
                return baseFill(array, value, start, end);
            }

            /**
             * This method is like `_.find` except that it returns the index of the first
             * element `predicate` returns truthy for instead of the element itself.
             *
             * @static
             * @memberOf _
             * @since 1.1.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @param {number} [fromIndex=0] The index to search from.
             * @returns {number} Returns the index of the found element, else `-1`.
             * @example
             *
             * var users = [
             *   { 'user': 'barney',  'active': false },
             *   { 'user': 'fred',    'active': false },
             *   { 'user': 'pebbles', 'active': true }
             * ];
             *
             * _.findIndex(users, function(o) { return o.user == 'barney'; });
             * // => 0
             *
             * // The `_.matches` iteratee shorthand.
             * _.findIndex(users, { 'user': 'fred', 'active': false });
             * // => 1
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.findIndex(users, ['active', false]);
             * // => 0
             *
             * // The `_.property` iteratee shorthand.
             * _.findIndex(users, 'active');
             * // => 2
             */
            function findIndex(array, predicate, fromIndex) {
                var length = array == null ? 0 : array.length;
                if (!length) {
                    return -1;
                }
                var index = fromIndex == null ? 0 : toInteger(fromIndex);
                if (index < 0) {
                    index = nativeMax(length + index, 0);
                }
                return baseFindIndex(array, getIteratee(predicate, 3), index);
            }

            /**
             * This method is like `_.findIndex` except that it iterates over elements
             * of `collection` from right to left.
             *
             * @static
             * @memberOf _
             * @since 2.0.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @param {number} [fromIndex=array.length-1] The index to search from.
             * @returns {number} Returns the index of the found element, else `-1`.
             * @example
             *
             * var users = [
             *   { 'user': 'barney',  'active': true },
             *   { 'user': 'fred',    'active': false },
             *   { 'user': 'pebbles', 'active': false }
             * ];
             *
             * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
             * // => 2
             *
             * // The `_.matches` iteratee shorthand.
             * _.findLastIndex(users, { 'user': 'barney', 'active': true });
             * // => 0
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.findLastIndex(users, ['active', false]);
             * // => 2
             *
             * // The `_.property` iteratee shorthand.
             * _.findLastIndex(users, 'active');
             * // => 0
             */
            function findLastIndex(array, predicate, fromIndex) {
                var length = array == null ? 0 : array.length;
                if (!length) {
                    return -1;
                }
                var index = length - 1;
                if (fromIndex !== undefined$1) {
                    index = toInteger(fromIndex);
                    index = fromIndex < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
                }
                return baseFindIndex(array, getIteratee(predicate, 3), index, true);
            }

            /**
             * Flattens `array` a single level deep.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Array
             * @param {Array} array The array to flatten.
             * @returns {Array} Returns the new flattened array.
             * @example
             *
             * _.flatten([1, [2, [3, [4]], 5]]);
             * // => [1, 2, [3, [4]], 5]
             */
            function flatten(array) {
                var length = array == null ? 0 : array.length;
                return length ? baseFlatten(array, 1) : [];
            }

            /**
             * Recursively flattens `array`.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Array
             * @param {Array} array The array to flatten.
             * @returns {Array} Returns the new flattened array.
             * @example
             *
             * _.flattenDeep([1, [2, [3, [4]], 5]]);
             * // => [1, 2, 3, 4, 5]
             */
            function flattenDeep(array) {
                var length = array == null ? 0 : array.length;
                return length ? baseFlatten(array, INFINITY) : [];
            }

            /**
             * Recursively flatten `array` up to `depth` times.
             *
             * @static
             * @memberOf _
             * @since 4.4.0
             * @category Array
             * @param {Array} array The array to flatten.
             * @param {number} [depth=1] The maximum recursion depth.
             * @returns {Array} Returns the new flattened array.
             * @example
             *
             * var array = [1, [2, [3, [4]], 5]];
             *
             * _.flattenDepth(array, 1);
             * // => [1, 2, [3, [4]], 5]
             *
             * _.flattenDepth(array, 2);
             * // => [1, 2, 3, [4], 5]
             */
            function flattenDepth(array, depth) {
                var length = array == null ? 0 : array.length;
                if (!length) {
                    return [];
                }
                depth = depth === undefined$1 ? 1 : toInteger(depth);
                return baseFlatten(array, depth);
            }

            /**
             * The inverse of `_.toPairs`; this method returns an object composed
             * from key-value `pairs`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} pairs The key-value pairs.
             * @returns {Object} Returns the new object.
             * @example
             *
             * _.fromPairs([['a', 1], ['b', 2]]);
             * // => { 'a': 1, 'b': 2 }
             */
            function fromPairs(pairs) {
                var index = -1,
                    length = pairs == null ? 0 : pairs.length,
                    result = {};

                while (++index < length) {
                    var pair = pairs[index];
                    result[pair[0]] = pair[1];
                }
                return result;
            }

            /**
             * Gets the first element of `array`.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @alias first
             * @category Array
             * @param {Array} array The array to query.
             * @returns {*} Returns the first element of `array`.
             * @example
             *
             * _.head([1, 2, 3]);
             * // => 1
             *
             * _.head([]);
             * // => undefined
             */
            function head(array) {
                return array && array.length ? array[0] : undefined$1;
            }

            /**
             * Gets the index at which the first occurrence of `value` is found in `array`
             * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
             * for equality comparisons. If `fromIndex` is negative, it's used as the
             * offset from the end of `array`.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @param {*} value The value to search for.
             * @param {number} [fromIndex=0] The index to search from.
             * @returns {number} Returns the index of the matched value, else `-1`.
             * @example
             *
             * _.indexOf([1, 2, 1, 2], 2);
             * // => 1
             *
             * // Search from the `fromIndex`.
             * _.indexOf([1, 2, 1, 2], 2, 2);
             * // => 3
             */
            function indexOf(array, value, fromIndex) {
                var length = array == null ? 0 : array.length;
                if (!length) {
                    return -1;
                }
                var index = fromIndex == null ? 0 : toInteger(fromIndex);
                if (index < 0) {
                    index = nativeMax(length + index, 0);
                }
                return baseIndexOf(array, value, index);
            }

            /**
             * Gets all but the last element of `array`.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Array
             * @param {Array} array The array to query.
             * @returns {Array} Returns the slice of `array`.
             * @example
             *
             * _.initial([1, 2, 3]);
             * // => [1, 2]
             */
            function initial(array) {
                var length = array == null ? 0 : array.length;
                return length ? baseSlice(array, 0, -1) : [];
            }

            /**
             * Creates an array of unique values that are included in all given arrays
             * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
             * for equality comparisons. The order and references of result values are
             * determined by the first array.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Array
             * @param {...Array} [arrays] The arrays to inspect.
             * @returns {Array} Returns the new array of intersecting values.
             * @example
             *
             * _.intersection([2, 1], [2, 3]);
             * // => [2]
             */
            var intersection = baseRest(function (arrays) {
                var mapped = arrayMap(arrays, castArrayLikeObject);
                return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped) : [];
            });

            /**
             * This method is like `_.intersection` except that it accepts `iteratee`
             * which is invoked for each element of each `arrays` to generate the criterion
             * by which they're compared. The order and references of result values are
             * determined by the first array. The iteratee is invoked with one argument:
             * (value).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {...Array} [arrays] The arrays to inspect.
             * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
             * @returns {Array} Returns the new array of intersecting values.
             * @example
             *
             * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
             * // => [2.1]
             *
             * // The `_.property` iteratee shorthand.
             * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
             * // => [{ 'x': 1 }]
             */
            var intersectionBy = baseRest(function (arrays) {
                var iteratee = last(arrays),
                    mapped = arrayMap(arrays, castArrayLikeObject);

                if (iteratee === last(mapped)) {
                    iteratee = undefined$1;
                } else {
                    mapped.pop();
                }
                return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, getIteratee(iteratee, 2)) : [];
            });

            /**
             * This method is like `_.intersection` except that it accepts `comparator`
             * which is invoked to compare elements of `arrays`. The order and references
             * of result values are determined by the first array. The comparator is
             * invoked with two arguments: (arrVal, othVal).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {...Array} [arrays] The arrays to inspect.
             * @param {Function} [comparator] The comparator invoked per element.
             * @returns {Array} Returns the new array of intersecting values.
             * @example
             *
             * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
             * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
             *
             * _.intersectionWith(objects, others, _.isEqual);
             * // => [{ 'x': 1, 'y': 2 }]
             */
            var intersectionWith = baseRest(function (arrays) {
                var comparator = last(arrays),
                    mapped = arrayMap(arrays, castArrayLikeObject);

                comparator = typeof comparator == 'function' ? comparator : undefined$1;
                if (comparator) {
                    mapped.pop();
                }
                return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, undefined$1, comparator) : [];
            });

            /**
             * Converts all elements in `array` into a string separated by `separator`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The array to convert.
             * @param {string} [separator=','] The element separator.
             * @returns {string} Returns the joined string.
             * @example
             *
             * _.join(['a', 'b', 'c'], '~');
             * // => 'a~b~c'
             */
            function join(array, separator) {
                return array == null ? '' : nativeJoin.call(array, separator);
            }

            /**
             * Gets the last element of `array`.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Array
             * @param {Array} array The array to query.
             * @returns {*} Returns the last element of `array`.
             * @example
             *
             * _.last([1, 2, 3]);
             * // => 3
             */
            function last(array) {
                var length = array == null ? 0 : array.length;
                return length ? array[length - 1] : undefined$1;
            }

            /**
             * This method is like `_.indexOf` except that it iterates over elements of
             * `array` from right to left.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @param {*} value The value to search for.
             * @param {number} [fromIndex=array.length-1] The index to search from.
             * @returns {number} Returns the index of the matched value, else `-1`.
             * @example
             *
             * _.lastIndexOf([1, 2, 1, 2], 2);
             * // => 3
             *
             * // Search from the `fromIndex`.
             * _.lastIndexOf([1, 2, 1, 2], 2, 2);
             * // => 1
             */
            function lastIndexOf(array, value, fromIndex) {
                var length = array == null ? 0 : array.length;
                if (!length) {
                    return -1;
                }
                var index = length;
                if (fromIndex !== undefined$1) {
                    index = toInteger(fromIndex);
                    index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
                }
                return value === value ? strictLastIndexOf(array, value, index) : baseFindIndex(array, baseIsNaN, index, true);
            }

            /**
             * Gets the element at index `n` of `array`. If `n` is negative, the nth
             * element from the end is returned.
             *
             * @static
             * @memberOf _
             * @since 4.11.0
             * @category Array
             * @param {Array} array The array to query.
             * @param {number} [n=0] The index of the element to return.
             * @returns {*} Returns the nth element of `array`.
             * @example
             *
             * var array = ['a', 'b', 'c', 'd'];
             *
             * _.nth(array, 1);
             * // => 'b'
             *
             * _.nth(array, -2);
             * // => 'c';
             */
            function nth(array, n) {
                return array && array.length ? baseNth(array, toInteger(n)) : undefined$1;
            }

            /**
             * Removes all given values from `array` using
             * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
             * for equality comparisons.
             *
             * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
             * to remove elements from an array by predicate.
             *
             * @static
             * @memberOf _
             * @since 2.0.0
             * @category Array
             * @param {Array} array The array to modify.
             * @param {...*} [values] The values to remove.
             * @returns {Array} Returns `array`.
             * @example
             *
             * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
             *
             * _.pull(array, 'a', 'c');
             * console.log(array);
             * // => ['b', 'b']
             */
            var pull = baseRest(pullAll);

            /**
             * This method is like `_.pull` except that it accepts an array of values to remove.
             *
             * **Note:** Unlike `_.difference`, this method mutates `array`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The array to modify.
             * @param {Array} values The values to remove.
             * @returns {Array} Returns `array`.
             * @example
             *
             * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
             *
             * _.pullAll(array, ['a', 'c']);
             * console.log(array);
             * // => ['b', 'b']
             */
            function pullAll(array, values) {
                return array && array.length && values && values.length ? basePullAll(array, values) : array;
            }

            /**
             * This method is like `_.pullAll` except that it accepts `iteratee` which is
             * invoked for each element of `array` and `values` to generate the criterion
             * by which they're compared. The iteratee is invoked with one argument: (value).
             *
             * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The array to modify.
             * @param {Array} values The values to remove.
             * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
             * @returns {Array} Returns `array`.
             * @example
             *
             * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
             *
             * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
             * console.log(array);
             * // => [{ 'x': 2 }]
             */
            function pullAllBy(array, values, iteratee) {
                return array && array.length && values && values.length ? basePullAll(array, values, getIteratee(iteratee, 2)) : array;
            }

            /**
             * This method is like `_.pullAll` except that it accepts `comparator` which
             * is invoked to compare elements of `array` to `values`. The comparator is
             * invoked with two arguments: (arrVal, othVal).
             *
             * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
             *
             * @static
             * @memberOf _
             * @since 4.6.0
             * @category Array
             * @param {Array} array The array to modify.
             * @param {Array} values The values to remove.
             * @param {Function} [comparator] The comparator invoked per element.
             * @returns {Array} Returns `array`.
             * @example
             *
             * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
             *
             * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
             * console.log(array);
             * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
             */
            function pullAllWith(array, values, comparator) {
                return array && array.length && values && values.length ? basePullAll(array, values, undefined$1, comparator) : array;
            }

            /**
             * Removes elements from `array` corresponding to `indexes` and returns an
             * array of removed elements.
             *
             * **Note:** Unlike `_.at`, this method mutates `array`.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Array
             * @param {Array} array The array to modify.
             * @param {...(number|number[])} [indexes] The indexes of elements to remove.
             * @returns {Array} Returns the new array of removed elements.
             * @example
             *
             * var array = ['a', 'b', 'c', 'd'];
             * var pulled = _.pullAt(array, [1, 3]);
             *
             * console.log(array);
             * // => ['a', 'c']
             *
             * console.log(pulled);
             * // => ['b', 'd']
             */
            var pullAt = flatRest(function (array, indexes) {
                var length = array == null ? 0 : array.length,
                    result = baseAt(array, indexes);

                basePullAt(
                    array,
                    arrayMap(indexes, function (index) {
                        return isIndex(index, length) ? +index : index;
                    }).sort(compareAscending)
                );

                return result;
            });

            /**
             * Removes all elements from `array` that `predicate` returns truthy for
             * and returns an array of the removed elements. The predicate is invoked
             * with three arguments: (value, index, array).
             *
             * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
             * to pull elements from an array by value.
             *
             * @static
             * @memberOf _
             * @since 2.0.0
             * @category Array
             * @param {Array} array The array to modify.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @returns {Array} Returns the new array of removed elements.
             * @example
             *
             * var array = [1, 2, 3, 4];
             * var evens = _.remove(array, function(n) {
             *   return n % 2 == 0;
             * });
             *
             * console.log(array);
             * // => [1, 3]
             *
             * console.log(evens);
             * // => [2, 4]
             */
            function remove(array, predicate) {
                var result = [];
                if (!(array && array.length)) {
                    return result;
                }
                var index = -1,
                    indexes = [],
                    length = array.length;

                predicate = getIteratee(predicate, 3);
                while (++index < length) {
                    var value = array[index];
                    if (predicate(value, index, array)) {
                        result.push(value);
                        indexes.push(index);
                    }
                }
                basePullAt(array, indexes);
                return result;
            }

            /**
             * Reverses `array` so that the first element becomes the last, the second
             * element becomes the second to last, and so on.
             *
             * **Note:** This method mutates `array` and is based on
             * [`Array#reverse`](https://mdn.io/Array/reverse).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The array to modify.
             * @returns {Array} Returns `array`.
             * @example
             *
             * var array = [1, 2, 3];
             *
             * _.reverse(array);
             * // => [3, 2, 1]
             *
             * console.log(array);
             * // => [3, 2, 1]
             */
            function reverse(array) {
                return array == null ? array : nativeReverse.call(array);
            }

            /**
             * Creates a slice of `array` from `start` up to, but not including, `end`.
             *
             * **Note:** This method is used instead of
             * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
             * returned.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Array
             * @param {Array} array The array to slice.
             * @param {number} [start=0] The start position.
             * @param {number} [end=array.length] The end position.
             * @returns {Array} Returns the slice of `array`.
             */
            function slice(array, start, end) {
                var length = array == null ? 0 : array.length;
                if (!length) {
                    return [];
                }
                if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
                    start = 0;
                    end = length;
                } else {
                    start = start == null ? 0 : toInteger(start);
                    end = end === undefined$1 ? length : toInteger(end);
                }
                return baseSlice(array, start, end);
            }

            /**
             * Uses a binary search to determine the lowest index at which `value`
             * should be inserted into `array` in order to maintain its sort order.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Array
             * @param {Array} array The sorted array to inspect.
             * @param {*} value The value to evaluate.
             * @returns {number} Returns the index at which `value` should be inserted
             *  into `array`.
             * @example
             *
             * _.sortedIndex([30, 50], 40);
             * // => 1
             */
            function sortedIndex(array, value) {
                return baseSortedIndex(array, value);
            }

            /**
             * This method is like `_.sortedIndex` except that it accepts `iteratee`
             * which is invoked for `value` and each element of `array` to compute their
             * sort ranking. The iteratee is invoked with one argument: (value).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The sorted array to inspect.
             * @param {*} value The value to evaluate.
             * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
             * @returns {number} Returns the index at which `value` should be inserted
             *  into `array`.
             * @example
             *
             * var objects = [{ 'x': 4 }, { 'x': 5 }];
             *
             * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
             * // => 0
             *
             * // The `_.property` iteratee shorthand.
             * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
             * // => 0
             */
            function sortedIndexBy(array, value, iteratee) {
                return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
            }

            /**
             * This method is like `_.indexOf` except that it performs a binary
             * search on a sorted `array`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @param {*} value The value to search for.
             * @returns {number} Returns the index of the matched value, else `-1`.
             * @example
             *
             * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
             * // => 1
             */
            function sortedIndexOf(array, value) {
                var length = array == null ? 0 : array.length;
                if (length) {
                    var index = baseSortedIndex(array, value);
                    if (index < length && eq(array[index], value)) {
                        return index;
                    }
                }
                return -1;
            }

            /**
             * This method is like `_.sortedIndex` except that it returns the highest
             * index at which `value` should be inserted into `array` in order to
             * maintain its sort order.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Array
             * @param {Array} array The sorted array to inspect.
             * @param {*} value The value to evaluate.
             * @returns {number} Returns the index at which `value` should be inserted
             *  into `array`.
             * @example
             *
             * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
             * // => 4
             */
            function sortedLastIndex(array, value) {
                return baseSortedIndex(array, value, true);
            }

            /**
             * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
             * which is invoked for `value` and each element of `array` to compute their
             * sort ranking. The iteratee is invoked with one argument: (value).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The sorted array to inspect.
             * @param {*} value The value to evaluate.
             * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
             * @returns {number} Returns the index at which `value` should be inserted
             *  into `array`.
             * @example
             *
             * var objects = [{ 'x': 4 }, { 'x': 5 }];
             *
             * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
             * // => 1
             *
             * // The `_.property` iteratee shorthand.
             * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
             * // => 1
             */
            function sortedLastIndexBy(array, value, iteratee) {
                return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
            }

            /**
             * This method is like `_.lastIndexOf` except that it performs a binary
             * search on a sorted `array`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @param {*} value The value to search for.
             * @returns {number} Returns the index of the matched value, else `-1`.
             * @example
             *
             * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
             * // => 3
             */
            function sortedLastIndexOf(array, value) {
                var length = array == null ? 0 : array.length;
                if (length) {
                    var index = baseSortedIndex(array, value, true) - 1;
                    if (eq(array[index], value)) {
                        return index;
                    }
                }
                return -1;
            }

            /**
             * This method is like `_.uniq` except that it's designed and optimized
             * for sorted arrays.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @returns {Array} Returns the new duplicate free array.
             * @example
             *
             * _.sortedUniq([1, 1, 2]);
             * // => [1, 2]
             */
            function sortedUniq(array) {
                return array && array.length ? baseSortedUniq(array) : [];
            }

            /**
             * This method is like `_.uniqBy` except that it's designed and optimized
             * for sorted arrays.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @param {Function} [iteratee] The iteratee invoked per element.
             * @returns {Array} Returns the new duplicate free array.
             * @example
             *
             * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
             * // => [1.1, 2.3]
             */
            function sortedUniqBy(array, iteratee) {
                return array && array.length ? baseSortedUniq(array, getIteratee(iteratee, 2)) : [];
            }

            /**
             * Gets all but the first element of `array`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The array to query.
             * @returns {Array} Returns the slice of `array`.
             * @example
             *
             * _.tail([1, 2, 3]);
             * // => [2, 3]
             */
            function tail(array) {
                var length = array == null ? 0 : array.length;
                return length ? baseSlice(array, 1, length) : [];
            }

            /**
             * Creates a slice of `array` with `n` elements taken from the beginning.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Array
             * @param {Array} array The array to query.
             * @param {number} [n=1] The number of elements to take.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {Array} Returns the slice of `array`.
             * @example
             *
             * _.take([1, 2, 3]);
             * // => [1]
             *
             * _.take([1, 2, 3], 2);
             * // => [1, 2]
             *
             * _.take([1, 2, 3], 5);
             * // => [1, 2, 3]
             *
             * _.take([1, 2, 3], 0);
             * // => []
             */
            function take(array, n, guard) {
                if (!(array && array.length)) {
                    return [];
                }
                n = guard || n === undefined$1 ? 1 : toInteger(n);
                return baseSlice(array, 0, n < 0 ? 0 : n);
            }

            /**
             * Creates a slice of `array` with `n` elements taken from the end.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Array
             * @param {Array} array The array to query.
             * @param {number} [n=1] The number of elements to take.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {Array} Returns the slice of `array`.
             * @example
             *
             * _.takeRight([1, 2, 3]);
             * // => [3]
             *
             * _.takeRight([1, 2, 3], 2);
             * // => [2, 3]
             *
             * _.takeRight([1, 2, 3], 5);
             * // => [1, 2, 3]
             *
             * _.takeRight([1, 2, 3], 0);
             * // => []
             */
            function takeRight(array, n, guard) {
                var length = array == null ? 0 : array.length;
                if (!length) {
                    return [];
                }
                n = guard || n === undefined$1 ? 1 : toInteger(n);
                n = length - n;
                return baseSlice(array, n < 0 ? 0 : n, length);
            }

            /**
             * Creates a slice of `array` with elements taken from the end. Elements are
             * taken until `predicate` returns falsey. The predicate is invoked with
             * three arguments: (value, index, array).
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Array
             * @param {Array} array The array to query.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @returns {Array} Returns the slice of `array`.
             * @example
             *
             * var users = [
             *   { 'user': 'barney',  'active': true },
             *   { 'user': 'fred',    'active': false },
             *   { 'user': 'pebbles', 'active': false }
             * ];
             *
             * _.takeRightWhile(users, function(o) { return !o.active; });
             * // => objects for ['fred', 'pebbles']
             *
             * // The `_.matches` iteratee shorthand.
             * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
             * // => objects for ['pebbles']
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.takeRightWhile(users, ['active', false]);
             * // => objects for ['fred', 'pebbles']
             *
             * // The `_.property` iteratee shorthand.
             * _.takeRightWhile(users, 'active');
             * // => []
             */
            function takeRightWhile(array, predicate) {
                return array && array.length ? baseWhile(array, getIteratee(predicate, 3), false, true) : [];
            }

            /**
             * Creates a slice of `array` with elements taken from the beginning. Elements
             * are taken until `predicate` returns falsey. The predicate is invoked with
             * three arguments: (value, index, array).
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Array
             * @param {Array} array The array to query.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @returns {Array} Returns the slice of `array`.
             * @example
             *
             * var users = [
             *   { 'user': 'barney',  'active': false },
             *   { 'user': 'fred',    'active': false },
             *   { 'user': 'pebbles', 'active': true }
             * ];
             *
             * _.takeWhile(users, function(o) { return !o.active; });
             * // => objects for ['barney', 'fred']
             *
             * // The `_.matches` iteratee shorthand.
             * _.takeWhile(users, { 'user': 'barney', 'active': false });
             * // => objects for ['barney']
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.takeWhile(users, ['active', false]);
             * // => objects for ['barney', 'fred']
             *
             * // The `_.property` iteratee shorthand.
             * _.takeWhile(users, 'active');
             * // => []
             */
            function takeWhile(array, predicate) {
                return array && array.length ? baseWhile(array, getIteratee(predicate, 3)) : [];
            }

            /**
             * Creates an array of unique values, in order, from all given arrays using
             * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
             * for equality comparisons.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Array
             * @param {...Array} [arrays] The arrays to inspect.
             * @returns {Array} Returns the new array of combined values.
             * @example
             *
             * _.union([2], [1, 2]);
             * // => [2, 1]
             */
            var union = baseRest(function (arrays) {
                return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
            });

            /**
             * This method is like `_.union` except that it accepts `iteratee` which is
             * invoked for each element of each `arrays` to generate the criterion by
             * which uniqueness is computed. Result values are chosen from the first
             * array in which the value occurs. The iteratee is invoked with one argument:
             * (value).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {...Array} [arrays] The arrays to inspect.
             * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
             * @returns {Array} Returns the new array of combined values.
             * @example
             *
             * _.unionBy([2.1], [1.2, 2.3], Math.floor);
             * // => [2.1, 1.2]
             *
             * // The `_.property` iteratee shorthand.
             * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
             * // => [{ 'x': 1 }, { 'x': 2 }]
             */
            var unionBy = baseRest(function (arrays) {
                var iteratee = last(arrays);
                if (isArrayLikeObject(iteratee)) {
                    iteratee = undefined$1;
                }
                return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
            });

            /**
             * This method is like `_.union` except that it accepts `comparator` which
             * is invoked to compare elements of `arrays`. Result values are chosen from
             * the first array in which the value occurs. The comparator is invoked
             * with two arguments: (arrVal, othVal).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {...Array} [arrays] The arrays to inspect.
             * @param {Function} [comparator] The comparator invoked per element.
             * @returns {Array} Returns the new array of combined values.
             * @example
             *
             * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
             * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
             *
             * _.unionWith(objects, others, _.isEqual);
             * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
             */
            var unionWith = baseRest(function (arrays) {
                var comparator = last(arrays);
                comparator = typeof comparator == 'function' ? comparator : undefined$1;
                return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined$1, comparator);
            });

            /**
             * Creates a duplicate-free version of an array, using
             * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
             * for equality comparisons, in which only the first occurrence of each element
             * is kept. The order of result values is determined by the order they occur
             * in the array.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @returns {Array} Returns the new duplicate free array.
             * @example
             *
             * _.uniq([2, 1, 2]);
             * // => [2, 1]
             */
            function uniq(array) {
                return array && array.length ? baseUniq(array) : [];
            }

            /**
             * This method is like `_.uniq` except that it accepts `iteratee` which is
             * invoked for each element in `array` to generate the criterion by which
             * uniqueness is computed. The order of result values is determined by the
             * order they occur in the array. The iteratee is invoked with one argument:
             * (value).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
             * @returns {Array} Returns the new duplicate free array.
             * @example
             *
             * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
             * // => [2.1, 1.2]
             *
             * // The `_.property` iteratee shorthand.
             * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
             * // => [{ 'x': 1 }, { 'x': 2 }]
             */
            function uniqBy(array, iteratee) {
                return array && array.length ? baseUniq(array, getIteratee(iteratee, 2)) : [];
            }

            /**
             * This method is like `_.uniq` except that it accepts `comparator` which
             * is invoked to compare elements of `array`. The order of result values is
             * determined by the order they occur in the array.The comparator is invoked
             * with two arguments: (arrVal, othVal).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @param {Function} [comparator] The comparator invoked per element.
             * @returns {Array} Returns the new duplicate free array.
             * @example
             *
             * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
             *
             * _.uniqWith(objects, _.isEqual);
             * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
             */
            function uniqWith(array, comparator) {
                comparator = typeof comparator == 'function' ? comparator : undefined$1;
                return array && array.length ? baseUniq(array, undefined$1, comparator) : [];
            }

            /**
             * This method is like `_.zip` except that it accepts an array of grouped
             * elements and creates an array regrouping the elements to their pre-zip
             * configuration.
             *
             * @static
             * @memberOf _
             * @since 1.2.0
             * @category Array
             * @param {Array} array The array of grouped elements to process.
             * @returns {Array} Returns the new array of regrouped elements.
             * @example
             *
             * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
             * // => [['a', 1, true], ['b', 2, false]]
             *
             * _.unzip(zipped);
             * // => [['a', 'b'], [1, 2], [true, false]]
             */
            function unzip(array) {
                if (!(array && array.length)) {
                    return [];
                }
                var length = 0;
                array = arrayFilter(array, function (group) {
                    if (isArrayLikeObject(group)) {
                        length = nativeMax(group.length, length);
                        return true;
                    }
                });
                return baseTimes(length, function (index) {
                    return arrayMap(array, baseProperty(index));
                });
            }

            /**
             * This method is like `_.unzip` except that it accepts `iteratee` to specify
             * how regrouped values should be combined. The iteratee is invoked with the
             * elements of each group: (...group).
             *
             * @static
             * @memberOf _
             * @since 3.8.0
             * @category Array
             * @param {Array} array The array of grouped elements to process.
             * @param {Function} [iteratee=_.identity] The function to combine
             *  regrouped values.
             * @returns {Array} Returns the new array of regrouped elements.
             * @example
             *
             * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
             * // => [[1, 10, 100], [2, 20, 200]]
             *
             * _.unzipWith(zipped, _.add);
             * // => [3, 30, 300]
             */
            function unzipWith(array, iteratee) {
                if (!(array && array.length)) {
                    return [];
                }
                var result = unzip(array);
                if (iteratee == null) {
                    return result;
                }
                return arrayMap(result, function (group) {
                    return apply(iteratee, undefined$1, group);
                });
            }

            /**
             * Creates an array excluding all given values using
             * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
             * for equality comparisons.
             *
             * **Note:** Unlike `_.pull`, this method returns a new array.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @param {...*} [values] The values to exclude.
             * @returns {Array} Returns the new array of filtered values.
             * @see _.difference, _.xor
             * @example
             *
             * _.without([2, 1, 2, 3], 1, 2);
             * // => [3]
             */
            var without = baseRest(function (array, values) {
                return isArrayLikeObject(array) ? baseDifference(array, values) : [];
            });

            /**
             * Creates an array of unique values that is the
             * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
             * of the given arrays. The order of result values is determined by the order
             * they occur in the arrays.
             *
             * @static
             * @memberOf _
             * @since 2.4.0
             * @category Array
             * @param {...Array} [arrays] The arrays to inspect.
             * @returns {Array} Returns the new array of filtered values.
             * @see _.difference, _.without
             * @example
             *
             * _.xor([2, 1], [2, 3]);
             * // => [1, 3]
             */
            var xor = baseRest(function (arrays) {
                return baseXor(arrayFilter(arrays, isArrayLikeObject));
            });

            /**
             * This method is like `_.xor` except that it accepts `iteratee` which is
             * invoked for each element of each `arrays` to generate the criterion by
             * which by which they're compared. The order of result values is determined
             * by the order they occur in the arrays. The iteratee is invoked with one
             * argument: (value).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {...Array} [arrays] The arrays to inspect.
             * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
             * @returns {Array} Returns the new array of filtered values.
             * @example
             *
             * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
             * // => [1.2, 3.4]
             *
             * // The `_.property` iteratee shorthand.
             * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
             * // => [{ 'x': 2 }]
             */
            var xorBy = baseRest(function (arrays) {
                var iteratee = last(arrays);
                if (isArrayLikeObject(iteratee)) {
                    iteratee = undefined$1;
                }
                return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
            });

            /**
             * This method is like `_.xor` except that it accepts `comparator` which is
             * invoked to compare elements of `arrays`. The order of result values is
             * determined by the order they occur in the arrays. The comparator is invoked
             * with two arguments: (arrVal, othVal).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {...Array} [arrays] The arrays to inspect.
             * @param {Function} [comparator] The comparator invoked per element.
             * @returns {Array} Returns the new array of filtered values.
             * @example
             *
             * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
             * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
             *
             * _.xorWith(objects, others, _.isEqual);
             * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
             */
            var xorWith = baseRest(function (arrays) {
                var comparator = last(arrays);
                comparator = typeof comparator == 'function' ? comparator : undefined$1;
                return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined$1, comparator);
            });

            /**
             * Creates an array of grouped elements, the first of which contains the
             * first elements of the given arrays, the second of which contains the
             * second elements of the given arrays, and so on.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Array
             * @param {...Array} [arrays] The arrays to process.
             * @returns {Array} Returns the new array of grouped elements.
             * @example
             *
             * _.zip(['a', 'b'], [1, 2], [true, false]);
             * // => [['a', 1, true], ['b', 2, false]]
             */
            var zip = baseRest(unzip);

            /**
             * This method is like `_.fromPairs` except that it accepts two arrays,
             * one of property identifiers and one of corresponding values.
             *
             * @static
             * @memberOf _
             * @since 0.4.0
             * @category Array
             * @param {Array} [props=[]] The property identifiers.
             * @param {Array} [values=[]] The property values.
             * @returns {Object} Returns the new object.
             * @example
             *
             * _.zipObject(['a', 'b'], [1, 2]);
             * // => { 'a': 1, 'b': 2 }
             */
            function zipObject(props, values) {
                return baseZipObject(props || [], values || [], assignValue);
            }

            /**
             * This method is like `_.zipObject` except that it supports property paths.
             *
             * @static
             * @memberOf _
             * @since 4.1.0
             * @category Array
             * @param {Array} [props=[]] The property identifiers.
             * @param {Array} [values=[]] The property values.
             * @returns {Object} Returns the new object.
             * @example
             *
             * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
             * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
             */
            function zipObjectDeep(props, values) {
                return baseZipObject(props || [], values || [], baseSet);
            }

            /**
             * This method is like `_.zip` except that it accepts `iteratee` to specify
             * how grouped values should be combined. The iteratee is invoked with the
             * elements of each group: (...group).
             *
             * @static
             * @memberOf _
             * @since 3.8.0
             * @category Array
             * @param {...Array} [arrays] The arrays to process.
             * @param {Function} [iteratee=_.identity] The function to combine
             *  grouped values.
             * @returns {Array} Returns the new array of grouped elements.
             * @example
             *
             * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
             *   return a + b + c;
             * });
             * // => [111, 222]
             */
            var zipWith = baseRest(function (arrays) {
                var length = arrays.length,
                    iteratee = length > 1 ? arrays[length - 1] : undefined$1;

                iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined$1;
                return unzipWith(arrays, iteratee);
            });

            /*------------------------------------------------------------------------*/

            /**
             * Creates a `lodash` wrapper instance that wraps `value` with explicit method
             * chain sequences enabled. The result of such sequences must be unwrapped
             * with `_#value`.
             *
             * @static
             * @memberOf _
             * @since 1.3.0
             * @category Seq
             * @param {*} value The value to wrap.
             * @returns {Object} Returns the new `lodash` wrapper instance.
             * @example
             *
             * var users = [
             *   { 'user': 'barney',  'age': 36 },
             *   { 'user': 'fred',    'age': 40 },
             *   { 'user': 'pebbles', 'age': 1 }
             * ];
             *
             * var youngest = _
             *   .chain(users)
             *   .sortBy('age')
             *   .map(function(o) {
             *     return o.user + ' is ' + o.age;
             *   })
             *   .head()
             *   .value();
             * // => 'pebbles is 1'
             */
            function chain(value) {
                var result = lodash(value);
                result.__chain__ = true;
                return result;
            }

            /**
             * This method invokes `interceptor` and returns `value`. The interceptor
             * is invoked with one argument; (value). The purpose of this method is to
             * "tap into" a method chain sequence in order to modify intermediate results.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Seq
             * @param {*} value The value to provide to `interceptor`.
             * @param {Function} interceptor The function to invoke.
             * @returns {*} Returns `value`.
             * @example
             *
             * _([1, 2, 3])
             *  .tap(function(array) {
             *    // Mutate input array.
             *    array.pop();
             *  })
             *  .reverse()
             *  .value();
             * // => [2, 1]
             */
            function tap(value, interceptor) {
                interceptor(value);
                return value;
            }

            /**
             * This method is like `_.tap` except that it returns the result of `interceptor`.
             * The purpose of this method is to "pass thru" values replacing intermediate
             * results in a method chain sequence.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Seq
             * @param {*} value The value to provide to `interceptor`.
             * @param {Function} interceptor The function to invoke.
             * @returns {*} Returns the result of `interceptor`.
             * @example
             *
             * _('  abc  ')
             *  .chain()
             *  .trim()
             *  .thru(function(value) {
             *    return [value];
             *  })
             *  .value();
             * // => ['abc']
             */
            function thru(value, interceptor) {
                return interceptor(value);
            }

            /**
             * This method is the wrapper version of `_.at`.
             *
             * @name at
             * @memberOf _
             * @since 1.0.0
             * @category Seq
             * @param {...(string|string[])} [paths] The property paths to pick.
             * @returns {Object} Returns the new `lodash` wrapper instance.
             * @example
             *
             * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
             *
             * _(object).at(['a[0].b.c', 'a[1]']).value();
             * // => [3, 4]
             */
            var wrapperAt = flatRest(function (paths) {
                var length = paths.length,
                    start = length ? paths[0] : 0,
                    value = this.__wrapped__,
                    interceptor = function (object) {
                        return baseAt(object, paths);
                    };

                if (length > 1 || this.__actions__.length || !(value instanceof LazyWrapper) || !isIndex(start)) {
                    return this.thru(interceptor);
                }
                value = value.slice(start, +start + (length ? 1 : 0));
                value.__actions__.push({
                    func: thru,
                    args: [interceptor],
                    thisArg: undefined$1,
                });
                return new LodashWrapper(value, this.__chain__).thru(function (array) {
                    if (length && !array.length) {
                        array.push(undefined$1);
                    }
                    return array;
                });
            });

            /**
             * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
             *
             * @name chain
             * @memberOf _
             * @since 0.1.0
             * @category Seq
             * @returns {Object} Returns the new `lodash` wrapper instance.
             * @example
             *
             * var users = [
             *   { 'user': 'barney', 'age': 36 },
             *   { 'user': 'fred',   'age': 40 }
             * ];
             *
             * // A sequence without explicit chaining.
             * _(users).head();
             * // => { 'user': 'barney', 'age': 36 }
             *
             * // A sequence with explicit chaining.
             * _(users)
             *   .chain()
             *   .head()
             *   .pick('user')
             *   .value();
             * // => { 'user': 'barney' }
             */
            function wrapperChain() {
                return chain(this);
            }

            /**
             * Executes the chain sequence and returns the wrapped result.
             *
             * @name commit
             * @memberOf _
             * @since 3.2.0
             * @category Seq
             * @returns {Object} Returns the new `lodash` wrapper instance.
             * @example
             *
             * var array = [1, 2];
             * var wrapped = _(array).push(3);
             *
             * console.log(array);
             * // => [1, 2]
             *
             * wrapped = wrapped.commit();
             * console.log(array);
             * // => [1, 2, 3]
             *
             * wrapped.last();
             * // => 3
             *
             * console.log(array);
             * // => [1, 2, 3]
             */
            function wrapperCommit() {
                return new LodashWrapper(this.value(), this.__chain__);
            }

            /**
             * Gets the next value on a wrapped object following the
             * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
             *
             * @name next
             * @memberOf _
             * @since 4.0.0
             * @category Seq
             * @returns {Object} Returns the next iterator value.
             * @example
             *
             * var wrapped = _([1, 2]);
             *
             * wrapped.next();
             * // => { 'done': false, 'value': 1 }
             *
             * wrapped.next();
             * // => { 'done': false, 'value': 2 }
             *
             * wrapped.next();
             * // => { 'done': true, 'value': undefined }
             */
            function wrapperNext() {
                if (this.__values__ === undefined$1) {
                    this.__values__ = toArray(this.value());
                }
                var done = this.__index__ >= this.__values__.length,
                    value = done ? undefined$1 : this.__values__[this.__index__++];

                return { done: done, value: value };
            }

            /**
             * Enables the wrapper to be iterable.
             *
             * @name Symbol.iterator
             * @memberOf _
             * @since 4.0.0
             * @category Seq
             * @returns {Object} Returns the wrapper object.
             * @example
             *
             * var wrapped = _([1, 2]);
             *
             * wrapped[Symbol.iterator]() === wrapped;
             * // => true
             *
             * Array.from(wrapped);
             * // => [1, 2]
             */
            function wrapperToIterator() {
                return this;
            }

            /**
             * Creates a clone of the chain sequence planting `value` as the wrapped value.
             *
             * @name plant
             * @memberOf _
             * @since 3.2.0
             * @category Seq
             * @param {*} value The value to plant.
             * @returns {Object} Returns the new `lodash` wrapper instance.
             * @example
             *
             * function square(n) {
             *   return n * n;
             * }
             *
             * var wrapped = _([1, 2]).map(square);
             * var other = wrapped.plant([3, 4]);
             *
             * other.value();
             * // => [9, 16]
             *
             * wrapped.value();
             * // => [1, 4]
             */
            function wrapperPlant(value) {
                var result,
                    parent = this;

                while (parent instanceof baseLodash) {
                    var clone = wrapperClone(parent);
                    clone.__index__ = 0;
                    clone.__values__ = undefined$1;
                    if (result) {
                        previous.__wrapped__ = clone;
                    } else {
                        result = clone;
                    }
                    var previous = clone;
                    parent = parent.__wrapped__;
                }
                previous.__wrapped__ = value;
                return result;
            }

            /**
             * This method is the wrapper version of `_.reverse`.
             *
             * **Note:** This method mutates the wrapped array.
             *
             * @name reverse
             * @memberOf _
             * @since 0.1.0
             * @category Seq
             * @returns {Object} Returns the new `lodash` wrapper instance.
             * @example
             *
             * var array = [1, 2, 3];
             *
             * _(array).reverse().value()
             * // => [3, 2, 1]
             *
             * console.log(array);
             * // => [3, 2, 1]
             */
            function wrapperReverse() {
                var value = this.__wrapped__;
                if (value instanceof LazyWrapper) {
                    var wrapped = value;
                    if (this.__actions__.length) {
                        wrapped = new LazyWrapper(this);
                    }
                    wrapped = wrapped.reverse();
                    wrapped.__actions__.push({
                        func: thru,
                        args: [reverse],
                        thisArg: undefined$1,
                    });
                    return new LodashWrapper(wrapped, this.__chain__);
                }
                return this.thru(reverse);
            }

            /**
             * Executes the chain sequence to resolve the unwrapped value.
             *
             * @name value
             * @memberOf _
             * @since 0.1.0
             * @alias toJSON, valueOf
             * @category Seq
             * @returns {*} Returns the resolved unwrapped value.
             * @example
             *
             * _([1, 2, 3]).value();
             * // => [1, 2, 3]
             */
            function wrapperValue() {
                return baseWrapperValue(this.__wrapped__, this.__actions__);
            }

            /*------------------------------------------------------------------------*/

            /**
             * Creates an object composed of keys generated from the results of running
             * each element of `collection` thru `iteratee`. The corresponding value of
             * each key is the number of times the key was returned by `iteratee`. The
             * iteratee is invoked with one argument: (value).
             *
             * @static
             * @memberOf _
             * @since 0.5.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
             * @returns {Object} Returns the composed aggregate object.
             * @example
             *
             * _.countBy([6.1, 4.2, 6.3], Math.floor);
             * // => { '4': 1, '6': 2 }
             *
             * // The `_.property` iteratee shorthand.
             * _.countBy(['one', 'two', 'three'], 'length');
             * // => { '3': 2, '5': 1 }
             */
            var countBy = createAggregator(function (result, value, key) {
                if (hasOwnProperty.call(result, key)) {
                    ++result[key];
                } else {
                    baseAssignValue(result, key, 1);
                }
            });

            /**
             * Checks if `predicate` returns truthy for **all** elements of `collection`.
             * Iteration is stopped once `predicate` returns falsey. The predicate is
             * invoked with three arguments: (value, index|key, collection).
             *
             * **Note:** This method returns `true` for
             * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
             * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
             * elements of empty collections.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {boolean} Returns `true` if all elements pass the predicate check,
             *  else `false`.
             * @example
             *
             * _.every([true, 1, null, 'yes'], Boolean);
             * // => false
             *
             * var users = [
             *   { 'user': 'barney', 'age': 36, 'active': false },
             *   { 'user': 'fred',   'age': 40, 'active': false }
             * ];
             *
             * // The `_.matches` iteratee shorthand.
             * _.every(users, { 'user': 'barney', 'active': false });
             * // => false
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.every(users, ['active', false]);
             * // => true
             *
             * // The `_.property` iteratee shorthand.
             * _.every(users, 'active');
             * // => false
             */
            function every(collection, predicate, guard) {
                var func = isArray(collection) ? arrayEvery : baseEvery;
                if (guard && isIterateeCall(collection, predicate, guard)) {
                    predicate = undefined$1;
                }
                return func(collection, getIteratee(predicate, 3));
            }

            /**
             * Iterates over elements of `collection`, returning an array of all elements
             * `predicate` returns truthy for. The predicate is invoked with three
             * arguments: (value, index|key, collection).
             *
             * **Note:** Unlike `_.remove`, this method returns a new array.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @returns {Array} Returns the new filtered array.
             * @see _.reject
             * @example
             *
             * var users = [
             *   { 'user': 'barney', 'age': 36, 'active': true },
             *   { 'user': 'fred',   'age': 40, 'active': false }
             * ];
             *
             * _.filter(users, function(o) { return !o.active; });
             * // => objects for ['fred']
             *
             * // The `_.matches` iteratee shorthand.
             * _.filter(users, { 'age': 36, 'active': true });
             * // => objects for ['barney']
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.filter(users, ['active', false]);
             * // => objects for ['fred']
             *
             * // The `_.property` iteratee shorthand.
             * _.filter(users, 'active');
             * // => objects for ['barney']
             *
             * // Combining several predicates using `_.overEvery` or `_.overSome`.
             * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));
             * // => objects for ['fred', 'barney']
             */
            function filter(collection, predicate) {
                var func = isArray(collection) ? arrayFilter : baseFilter;
                return func(collection, getIteratee(predicate, 3));
            }

            /**
             * Iterates over elements of `collection`, returning the first element
             * `predicate` returns truthy for. The predicate is invoked with three
             * arguments: (value, index|key, collection).
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Collection
             * @param {Array|Object} collection The collection to inspect.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @param {number} [fromIndex=0] The index to search from.
             * @returns {*} Returns the matched element, else `undefined`.
             * @example
             *
             * var users = [
             *   { 'user': 'barney',  'age': 36, 'active': true },
             *   { 'user': 'fred',    'age': 40, 'active': false },
             *   { 'user': 'pebbles', 'age': 1,  'active': true }
             * ];
             *
             * _.find(users, function(o) { return o.age < 40; });
             * // => object for 'barney'
             *
             * // The `_.matches` iteratee shorthand.
             * _.find(users, { 'age': 1, 'active': true });
             * // => object for 'pebbles'
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.find(users, ['active', false]);
             * // => object for 'fred'
             *
             * // The `_.property` iteratee shorthand.
             * _.find(users, 'active');
             * // => object for 'barney'
             */
            var find = createFind(findIndex);

            /**
             * This method is like `_.find` except that it iterates over elements of
             * `collection` from right to left.
             *
             * @static
             * @memberOf _
             * @since 2.0.0
             * @category Collection
             * @param {Array|Object} collection The collection to inspect.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @param {number} [fromIndex=collection.length-1] The index to search from.
             * @returns {*} Returns the matched element, else `undefined`.
             * @example
             *
             * _.findLast([1, 2, 3, 4], function(n) {
             *   return n % 2 == 1;
             * });
             * // => 3
             */
            var findLast = createFind(findLastIndex);

            /**
             * Creates a flattened array of values by running each element in `collection`
             * thru `iteratee` and flattening the mapped results. The iteratee is invoked
             * with three arguments: (value, index|key, collection).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @returns {Array} Returns the new flattened array.
             * @example
             *
             * function duplicate(n) {
             *   return [n, n];
             * }
             *
             * _.flatMap([1, 2], duplicate);
             * // => [1, 1, 2, 2]
             */
            function flatMap(collection, iteratee) {
                return baseFlatten(map(collection, iteratee), 1);
            }

            /**
             * This method is like `_.flatMap` except that it recursively flattens the
             * mapped results.
             *
             * @static
             * @memberOf _
             * @since 4.7.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @returns {Array} Returns the new flattened array.
             * @example
             *
             * function duplicate(n) {
             *   return [[[n, n]]];
             * }
             *
             * _.flatMapDeep([1, 2], duplicate);
             * // => [1, 1, 2, 2]
             */
            function flatMapDeep(collection, iteratee) {
                return baseFlatten(map(collection, iteratee), INFINITY);
            }

            /**
             * This method is like `_.flatMap` except that it recursively flattens the
             * mapped results up to `depth` times.
             *
             * @static
             * @memberOf _
             * @since 4.7.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @param {number} [depth=1] The maximum recursion depth.
             * @returns {Array} Returns the new flattened array.
             * @example
             *
             * function duplicate(n) {
             *   return [[[n, n]]];
             * }
             *
             * _.flatMapDepth([1, 2], duplicate, 2);
             * // => [[1, 1], [2, 2]]
             */
            function flatMapDepth(collection, iteratee, depth) {
                depth = depth === undefined$1 ? 1 : toInteger(depth);
                return baseFlatten(map(collection, iteratee), depth);
            }

            /**
             * Iterates over elements of `collection` and invokes `iteratee` for each element.
             * The iteratee is invoked with three arguments: (value, index|key, collection).
             * Iteratee functions may exit iteration early by explicitly returning `false`.
             *
             * **Note:** As with other "Collections" methods, objects with a "length"
             * property are iterated like arrays. To avoid this behavior use `_.forIn`
             * or `_.forOwn` for object iteration.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @alias each
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @returns {Array|Object} Returns `collection`.
             * @see _.forEachRight
             * @example
             *
             * _.forEach([1, 2], function(value) {
             *   console.log(value);
             * });
             * // => Logs `1` then `2`.
             *
             * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
             *   console.log(key);
             * });
             * // => Logs 'a' then 'b' (iteration order is not guaranteed).
             */
            function forEach(collection, iteratee) {
                var func = isArray(collection) ? arrayEach : baseEach;
                return func(collection, getIteratee(iteratee, 3));
            }

            /**
             * This method is like `_.forEach` except that it iterates over elements of
             * `collection` from right to left.
             *
             * @static
             * @memberOf _
             * @since 2.0.0
             * @alias eachRight
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @returns {Array|Object} Returns `collection`.
             * @see _.forEach
             * @example
             *
             * _.forEachRight([1, 2], function(value) {
             *   console.log(value);
             * });
             * // => Logs `2` then `1`.
             */
            function forEachRight(collection, iteratee) {
                var func = isArray(collection) ? arrayEachRight : baseEachRight;
                return func(collection, getIteratee(iteratee, 3));
            }

            /**
             * Creates an object composed of keys generated from the results of running
             * each element of `collection` thru `iteratee`. The order of grouped values
             * is determined by the order they occur in `collection`. The corresponding
             * value of each key is an array of elements responsible for generating the
             * key. The iteratee is invoked with one argument: (value).
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
             * @returns {Object} Returns the composed aggregate object.
             * @example
             *
             * _.groupBy([6.1, 4.2, 6.3], Math.floor);
             * // => { '4': [4.2], '6': [6.1, 6.3] }
             *
             * // The `_.property` iteratee shorthand.
             * _.groupBy(['one', 'two', 'three'], 'length');
             * // => { '3': ['one', 'two'], '5': ['three'] }
             */
            var groupBy = createAggregator(function (result, value, key) {
                if (hasOwnProperty.call(result, key)) {
                    result[key].push(value);
                } else {
                    baseAssignValue(result, key, [value]);
                }
            });

            /**
             * Checks if `value` is in `collection`. If `collection` is a string, it's
             * checked for a substring of `value`, otherwise
             * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
             * is used for equality comparisons. If `fromIndex` is negative, it's used as
             * the offset from the end of `collection`.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Collection
             * @param {Array|Object|string} collection The collection to inspect.
             * @param {*} value The value to search for.
             * @param {number} [fromIndex=0] The index to search from.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
             * @returns {boolean} Returns `true` if `value` is found, else `false`.
             * @example
             *
             * _.includes([1, 2, 3], 1);
             * // => true
             *
             * _.includes([1, 2, 3], 1, 2);
             * // => false
             *
             * _.includes({ 'a': 1, 'b': 2 }, 1);
             * // => true
             *
             * _.includes('abcd', 'bc');
             * // => true
             */
            function includes(collection, value, fromIndex, guard) {
                collection = isArrayLike(collection) ? collection : values(collection);
                fromIndex = fromIndex && !guard ? toInteger(fromIndex) : 0;

                var length = collection.length;
                if (fromIndex < 0) {
                    fromIndex = nativeMax(length + fromIndex, 0);
                }
                return isString(collection) ? fromIndex <= length && collection.indexOf(value, fromIndex) > -1 : !!length && baseIndexOf(collection, value, fromIndex) > -1;
            }

            /**
             * Invokes the method at `path` of each element in `collection`, returning
             * an array of the results of each invoked method. Any additional arguments
             * are provided to each invoked method. If `path` is a function, it's invoked
             * for, and `this` bound to, each element in `collection`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Array|Function|string} path The path of the method to invoke or
             *  the function invoked per iteration.
             * @param {...*} [args] The arguments to invoke each method with.
             * @returns {Array} Returns the array of results.
             * @example
             *
             * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
             * // => [[1, 5, 7], [1, 2, 3]]
             *
             * _.invokeMap([123, 456], String.prototype.split, '');
             * // => [['1', '2', '3'], ['4', '5', '6']]
             */
            var invokeMap = baseRest(function (collection, path, args) {
                var index = -1,
                    isFunc = typeof path == 'function',
                    result = isArrayLike(collection) ? Array(collection.length) : [];

                baseEach(collection, function (value) {
                    result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
                });
                return result;
            });

            /**
             * Creates an object composed of keys generated from the results of running
             * each element of `collection` thru `iteratee`. The corresponding value of
             * each key is the last element responsible for generating the key. The
             * iteratee is invoked with one argument: (value).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
             * @returns {Object} Returns the composed aggregate object.
             * @example
             *
             * var array = [
             *   { 'dir': 'left', 'code': 97 },
             *   { 'dir': 'right', 'code': 100 }
             * ];
             *
             * _.keyBy(array, function(o) {
             *   return String.fromCharCode(o.code);
             * });
             * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
             *
             * _.keyBy(array, 'dir');
             * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
             */
            var keyBy = createAggregator(function (result, value, key) {
                baseAssignValue(result, key, value);
            });

            /**
             * Creates an array of values by running each element in `collection` thru
             * `iteratee`. The iteratee is invoked with three arguments:
             * (value, index|key, collection).
             *
             * Many lodash methods are guarded to work as iteratees for methods like
             * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
             *
             * The guarded methods are:
             * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
             * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
             * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
             * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @returns {Array} Returns the new mapped array.
             * @example
             *
             * function square(n) {
             *   return n * n;
             * }
             *
             * _.map([4, 8], square);
             * // => [16, 64]
             *
             * _.map({ 'a': 4, 'b': 8 }, square);
             * // => [16, 64] (iteration order is not guaranteed)
             *
             * var users = [
             *   { 'user': 'barney' },
             *   { 'user': 'fred' }
             * ];
             *
             * // The `_.property` iteratee shorthand.
             * _.map(users, 'user');
             * // => ['barney', 'fred']
             */
            function map(collection, iteratee) {
                var func = isArray(collection) ? arrayMap : baseMap;
                return func(collection, getIteratee(iteratee, 3));
            }

            /**
             * This method is like `_.sortBy` except that it allows specifying the sort
             * orders of the iteratees to sort by. If `orders` is unspecified, all values
             * are sorted in ascending order. Otherwise, specify an order of "desc" for
             * descending or "asc" for ascending sort order of corresponding values.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
             *  The iteratees to sort by.
             * @param {string[]} [orders] The sort orders of `iteratees`.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
             * @returns {Array} Returns the new sorted array.
             * @example
             *
             * var users = [
             *   { 'user': 'fred',   'age': 48 },
             *   { 'user': 'barney', 'age': 34 },
             *   { 'user': 'fred',   'age': 40 },
             *   { 'user': 'barney', 'age': 36 }
             * ];
             *
             * // Sort by `user` in ascending order and by `age` in descending order.
             * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
             * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
             */
            function orderBy(collection, iteratees, orders, guard) {
                if (collection == null) {
                    return [];
                }
                if (!isArray(iteratees)) {
                    iteratees = iteratees == null ? [] : [iteratees];
                }
                orders = guard ? undefined$1 : orders;
                if (!isArray(orders)) {
                    orders = orders == null ? [] : [orders];
                }
                return baseOrderBy(collection, iteratees, orders);
            }

            /**
             * Creates an array of elements split into two groups, the first of which
             * contains elements `predicate` returns truthy for, the second of which
             * contains elements `predicate` returns falsey for. The predicate is
             * invoked with one argument: (value).
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @returns {Array} Returns the array of grouped elements.
             * @example
             *
             * var users = [
             *   { 'user': 'barney',  'age': 36, 'active': false },
             *   { 'user': 'fred',    'age': 40, 'active': true },
             *   { 'user': 'pebbles', 'age': 1,  'active': false }
             * ];
             *
             * _.partition(users, function(o) { return o.active; });
             * // => objects for [['fred'], ['barney', 'pebbles']]
             *
             * // The `_.matches` iteratee shorthand.
             * _.partition(users, { 'age': 1, 'active': false });
             * // => objects for [['pebbles'], ['barney', 'fred']]
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.partition(users, ['active', false]);
             * // => objects for [['barney', 'pebbles'], ['fred']]
             *
             * // The `_.property` iteratee shorthand.
             * _.partition(users, 'active');
             * // => objects for [['fred'], ['barney', 'pebbles']]
             */
            var partition = createAggregator(
                function (result, value, key) {
                    result[key ? 0 : 1].push(value);
                },
                function () {
                    return [[], []];
                }
            );

            /**
             * Reduces `collection` to a value which is the accumulated result of running
             * each element in `collection` thru `iteratee`, where each successive
             * invocation is supplied the return value of the previous. If `accumulator`
             * is not given, the first element of `collection` is used as the initial
             * value. The iteratee is invoked with four arguments:
             * (accumulator, value, index|key, collection).
             *
             * Many lodash methods are guarded to work as iteratees for methods like
             * `_.reduce`, `_.reduceRight`, and `_.transform`.
             *
             * The guarded methods are:
             * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
             * and `sortBy`
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @param {*} [accumulator] The initial value.
             * @returns {*} Returns the accumulated value.
             * @see _.reduceRight
             * @example
             *
             * _.reduce([1, 2], function(sum, n) {
             *   return sum + n;
             * }, 0);
             * // => 3
             *
             * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
             *   (result[value] || (result[value] = [])).push(key);
             *   return result;
             * }, {});
             * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
             */
            function reduce(collection, iteratee, accumulator) {
                var func = isArray(collection) ? arrayReduce : baseReduce,
                    initAccum = arguments.length < 3;

                return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
            }

            /**
             * This method is like `_.reduce` except that it iterates over elements of
             * `collection` from right to left.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @param {*} [accumulator] The initial value.
             * @returns {*} Returns the accumulated value.
             * @see _.reduce
             * @example
             *
             * var array = [[0, 1], [2, 3], [4, 5]];
             *
             * _.reduceRight(array, function(flattened, other) {
             *   return flattened.concat(other);
             * }, []);
             * // => [4, 5, 2, 3, 0, 1]
             */
            function reduceRight(collection, iteratee, accumulator) {
                var func = isArray(collection) ? arrayReduceRight : baseReduce,
                    initAccum = arguments.length < 3;

                return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
            }

            /**
             * The opposite of `_.filter`; this method returns the elements of `collection`
             * that `predicate` does **not** return truthy for.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @returns {Array} Returns the new filtered array.
             * @see _.filter
             * @example
             *
             * var users = [
             *   { 'user': 'barney', 'age': 36, 'active': false },
             *   { 'user': 'fred',   'age': 40, 'active': true }
             * ];
             *
             * _.reject(users, function(o) { return !o.active; });
             * // => objects for ['fred']
             *
             * // The `_.matches` iteratee shorthand.
             * _.reject(users, { 'age': 40, 'active': true });
             * // => objects for ['barney']
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.reject(users, ['active', false]);
             * // => objects for ['fred']
             *
             * // The `_.property` iteratee shorthand.
             * _.reject(users, 'active');
             * // => objects for ['barney']
             */
            function reject(collection, predicate) {
                var func = isArray(collection) ? arrayFilter : baseFilter;
                return func(collection, negate(getIteratee(predicate, 3)));
            }

            /**
             * Gets a random element from `collection`.
             *
             * @static
             * @memberOf _
             * @since 2.0.0
             * @category Collection
             * @param {Array|Object} collection The collection to sample.
             * @returns {*} Returns the random element.
             * @example
             *
             * _.sample([1, 2, 3, 4]);
             * // => 2
             */
            function sample(collection) {
                var func = isArray(collection) ? arraySample : baseSample;
                return func(collection);
            }

            /**
             * Gets `n` random elements at unique keys from `collection` up to the
             * size of `collection`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Collection
             * @param {Array|Object} collection The collection to sample.
             * @param {number} [n=1] The number of elements to sample.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {Array} Returns the random elements.
             * @example
             *
             * _.sampleSize([1, 2, 3], 2);
             * // => [3, 1]
             *
             * _.sampleSize([1, 2, 3], 4);
             * // => [2, 3, 1]
             */
            function sampleSize(collection, n, guard) {
                if (guard ? isIterateeCall(collection, n, guard) : n === undefined$1) {
                    n = 1;
                } else {
                    n = toInteger(n);
                }
                var func = isArray(collection) ? arraySampleSize : baseSampleSize;
                return func(collection, n);
            }

            /**
             * Creates an array of shuffled values, using a version of the
             * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Collection
             * @param {Array|Object} collection The collection to shuffle.
             * @returns {Array} Returns the new shuffled array.
             * @example
             *
             * _.shuffle([1, 2, 3, 4]);
             * // => [4, 1, 3, 2]
             */
            function shuffle(collection) {
                var func = isArray(collection) ? arrayShuffle : baseShuffle;
                return func(collection);
            }

            /**
             * Gets the size of `collection` by returning its length for array-like
             * values or the number of own enumerable string keyed properties for objects.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Collection
             * @param {Array|Object|string} collection The collection to inspect.
             * @returns {number} Returns the collection size.
             * @example
             *
             * _.size([1, 2, 3]);
             * // => 3
             *
             * _.size({ 'a': 1, 'b': 2 });
             * // => 2
             *
             * _.size('pebbles');
             * // => 7
             */
            function size(collection) {
                if (collection == null) {
                    return 0;
                }
                if (isArrayLike(collection)) {
                    return isString(collection) ? stringSize(collection) : collection.length;
                }
                var tag = getTag(collection);
                if (tag == mapTag || tag == setTag) {
                    return collection.size;
                }
                return baseKeys(collection).length;
            }

            /**
             * Checks if `predicate` returns truthy for **any** element of `collection`.
             * Iteration is stopped once `predicate` returns truthy. The predicate is
             * invoked with three arguments: (value, index|key, collection).
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {boolean} Returns `true` if any element passes the predicate check,
             *  else `false`.
             * @example
             *
             * _.some([null, 0, 'yes', false], Boolean);
             * // => true
             *
             * var users = [
             *   { 'user': 'barney', 'active': true },
             *   { 'user': 'fred',   'active': false }
             * ];
             *
             * // The `_.matches` iteratee shorthand.
             * _.some(users, { 'user': 'barney', 'active': false });
             * // => false
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.some(users, ['active', false]);
             * // => true
             *
             * // The `_.property` iteratee shorthand.
             * _.some(users, 'active');
             * // => true
             */
            function some(collection, predicate, guard) {
                var func = isArray(collection) ? arraySome : baseSome;
                if (guard && isIterateeCall(collection, predicate, guard)) {
                    predicate = undefined$1;
                }
                return func(collection, getIteratee(predicate, 3));
            }

            /**
             * Creates an array of elements, sorted in ascending order by the results of
             * running each element in a collection thru each iteratee. This method
             * performs a stable sort, that is, it preserves the original sort order of
             * equal elements. The iteratees are invoked with one argument: (value).
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {...(Function|Function[])} [iteratees=[_.identity]]
             *  The iteratees to sort by.
             * @returns {Array} Returns the new sorted array.
             * @example
             *
             * var users = [
             *   { 'user': 'fred',   'age': 48 },
             *   { 'user': 'barney', 'age': 36 },
             *   { 'user': 'fred',   'age': 30 },
             *   { 'user': 'barney', 'age': 34 }
             * ];
             *
             * _.sortBy(users, [function(o) { return o.user; }]);
             * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]
             *
             * _.sortBy(users, ['user', 'age']);
             * // => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]
             */
            var sortBy = baseRest(function (collection, iteratees) {
                if (collection == null) {
                    return [];
                }
                var length = iteratees.length;
                if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
                    iteratees = [];
                } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
                    iteratees = [iteratees[0]];
                }
                return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
            });

            /*------------------------------------------------------------------------*/

            /**
             * Gets the timestamp of the number of milliseconds that have elapsed since
             * the Unix epoch (1 January 1970 00:00:00 UTC).
             *
             * @static
             * @memberOf _
             * @since 2.4.0
             * @category Date
             * @returns {number} Returns the timestamp.
             * @example
             *
             * _.defer(function(stamp) {
             *   console.log(_.now() - stamp);
             * }, _.now());
             * // => Logs the number of milliseconds it took for the deferred invocation.
             */
            var now =
                ctxNow ||
                function () {
                    return root.Date.now();
                };

            /*------------------------------------------------------------------------*/

            /**
             * The opposite of `_.before`; this method creates a function that invokes
             * `func` once it's called `n` or more times.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Function
             * @param {number} n The number of calls before `func` is invoked.
             * @param {Function} func The function to restrict.
             * @returns {Function} Returns the new restricted function.
             * @example
             *
             * var saves = ['profile', 'settings'];
             *
             * var done = _.after(saves.length, function() {
             *   console.log('done saving!');
             * });
             *
             * _.forEach(saves, function(type) {
             *   asyncSave({ 'type': type, 'complete': done });
             * });
             * // => Logs 'done saving!' after the two async saves have completed.
             */
            function after(n, func) {
                if (typeof func != 'function') {
                    throw new TypeError(FUNC_ERROR_TEXT);
                }
                n = toInteger(n);
                return function () {
                    if (--n < 1) {
                        return func.apply(this, arguments);
                    }
                };
            }

            /**
             * Creates a function that invokes `func`, with up to `n` arguments,
             * ignoring any additional arguments.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Function
             * @param {Function} func The function to cap arguments for.
             * @param {number} [n=func.length] The arity cap.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {Function} Returns the new capped function.
             * @example
             *
             * _.map(['6', '8', '10'], _.ary(parseInt, 1));
             * // => [6, 8, 10]
             */
            function ary(func, n, guard) {
                n = guard ? undefined$1 : n;
                n = func && n == null ? func.length : n;
                return createWrap(func, WRAP_ARY_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, n);
            }

            /**
             * Creates a function that invokes `func`, with the `this` binding and arguments
             * of the created function, while it's called less than `n` times. Subsequent
             * calls to the created function return the result of the last `func` invocation.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Function
             * @param {number} n The number of calls at which `func` is no longer invoked.
             * @param {Function} func The function to restrict.
             * @returns {Function} Returns the new restricted function.
             * @example
             *
             * jQuery(element).on('click', _.before(5, addContactToList));
             * // => Allows adding up to 4 contacts to the list.
             */
            function before(n, func) {
                var result;
                if (typeof func != 'function') {
                    throw new TypeError(FUNC_ERROR_TEXT);
                }
                n = toInteger(n);
                return function () {
                    if (--n > 0) {
                        result = func.apply(this, arguments);
                    }
                    if (n <= 1) {
                        func = undefined$1;
                    }
                    return result;
                };
            }

            /**
             * Creates a function that invokes `func` with the `this` binding of `thisArg`
             * and `partials` prepended to the arguments it receives.
             *
             * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
             * may be used as a placeholder for partially applied arguments.
             *
             * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
             * property of bound functions.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Function
             * @param {Function} func The function to bind.
             * @param {*} thisArg The `this` binding of `func`.
             * @param {...*} [partials] The arguments to be partially applied.
             * @returns {Function} Returns the new bound function.
             * @example
             *
             * function greet(greeting, punctuation) {
             *   return greeting + ' ' + this.user + punctuation;
             * }
             *
             * var object = { 'user': 'fred' };
             *
             * var bound = _.bind(greet, object, 'hi');
             * bound('!');
             * // => 'hi fred!'
             *
             * // Bound with placeholders.
             * var bound = _.bind(greet, object, _, '!');
             * bound('hi');
             * // => 'hi fred!'
             */
            var bind = baseRest(function (func, thisArg, partials) {
                var bitmask = WRAP_BIND_FLAG;
                if (partials.length) {
                    var holders = replaceHolders(partials, getHolder(bind));
                    bitmask |= WRAP_PARTIAL_FLAG;
                }
                return createWrap(func, bitmask, thisArg, partials, holders);
            });

            /**
             * Creates a function that invokes the method at `object[key]` with `partials`
             * prepended to the arguments it receives.
             *
             * This method differs from `_.bind` by allowing bound functions to reference
             * methods that may be redefined or don't yet exist. See
             * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
             * for more details.
             *
             * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
             * builds, may be used as a placeholder for partially applied arguments.
             *
             * @static
             * @memberOf _
             * @since 0.10.0
             * @category Function
             * @param {Object} object The object to invoke the method on.
             * @param {string} key The key of the method.
             * @param {...*} [partials] The arguments to be partially applied.
             * @returns {Function} Returns the new bound function.
             * @example
             *
             * var object = {
             *   'user': 'fred',
             *   'greet': function(greeting, punctuation) {
             *     return greeting + ' ' + this.user + punctuation;
             *   }
             * };
             *
             * var bound = _.bindKey(object, 'greet', 'hi');
             * bound('!');
             * // => 'hi fred!'
             *
             * object.greet = function(greeting, punctuation) {
             *   return greeting + 'ya ' + this.user + punctuation;
             * };
             *
             * bound('!');
             * // => 'hiya fred!'
             *
             * // Bound with placeholders.
             * var bound = _.bindKey(object, 'greet', _, '!');
             * bound('hi');
             * // => 'hiya fred!'
             */
            var bindKey = baseRest(function (object, key, partials) {
                var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
                if (partials.length) {
                    var holders = replaceHolders(partials, getHolder(bindKey));
                    bitmask |= WRAP_PARTIAL_FLAG;
                }
                return createWrap(key, bitmask, object, partials, holders);
            });

            /**
             * Creates a function that accepts arguments of `func` and either invokes
             * `func` returning its result, if at least `arity` number of arguments have
             * been provided, or returns a function that accepts the remaining `func`
             * arguments, and so on. The arity of `func` may be specified if `func.length`
             * is not sufficient.
             *
             * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
             * may be used as a placeholder for provided arguments.
             *
             * **Note:** This method doesn't set the "length" property of curried functions.
             *
             * @static
             * @memberOf _
             * @since 2.0.0
             * @category Function
             * @param {Function} func The function to curry.
             * @param {number} [arity=func.length] The arity of `func`.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {Function} Returns the new curried function.
             * @example
             *
             * var abc = function(a, b, c) {
             *   return [a, b, c];
             * };
             *
             * var curried = _.curry(abc);
             *
             * curried(1)(2)(3);
             * // => [1, 2, 3]
             *
             * curried(1, 2)(3);
             * // => [1, 2, 3]
             *
             * curried(1, 2, 3);
             * // => [1, 2, 3]
             *
             * // Curried with placeholders.
             * curried(1)(_, 3)(2);
             * // => [1, 2, 3]
             */
            function curry(func, arity, guard) {
                arity = guard ? undefined$1 : arity;
                var result = createWrap(func, WRAP_CURRY_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, undefined$1, arity);
                result.placeholder = curry.placeholder;
                return result;
            }

            /**
             * This method is like `_.curry` except that arguments are applied to `func`
             * in the manner of `_.partialRight` instead of `_.partial`.
             *
             * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
             * builds, may be used as a placeholder for provided arguments.
             *
             * **Note:** This method doesn't set the "length" property of curried functions.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Function
             * @param {Function} func The function to curry.
             * @param {number} [arity=func.length] The arity of `func`.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {Function} Returns the new curried function.
             * @example
             *
             * var abc = function(a, b, c) {
             *   return [a, b, c];
             * };
             *
             * var curried = _.curryRight(abc);
             *
             * curried(3)(2)(1);
             * // => [1, 2, 3]
             *
             * curried(2, 3)(1);
             * // => [1, 2, 3]
             *
             * curried(1, 2, 3);
             * // => [1, 2, 3]
             *
             * // Curried with placeholders.
             * curried(3)(1, _)(2);
             * // => [1, 2, 3]
             */
            function curryRight(func, arity, guard) {
                arity = guard ? undefined$1 : arity;
                var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, undefined$1, arity);
                result.placeholder = curryRight.placeholder;
                return result;
            }

            /**
             * Creates a debounced function that delays invoking `func` until after `wait`
             * milliseconds have elapsed since the last time the debounced function was
             * invoked. The debounced function comes with a `cancel` method to cancel
             * delayed `func` invocations and a `flush` method to immediately invoke them.
             * Provide `options` to indicate whether `func` should be invoked on the
             * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
             * with the last arguments provided to the debounced function. Subsequent
             * calls to the debounced function return the result of the last `func`
             * invocation.
             *
             * **Note:** If `leading` and `trailing` options are `true`, `func` is
             * invoked on the trailing edge of the timeout only if the debounced function
             * is invoked more than once during the `wait` timeout.
             *
             * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
             * until to the next tick, similar to `setTimeout` with a timeout of `0`.
             *
             * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
             * for details over the differences between `_.debounce` and `_.throttle`.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Function
             * @param {Function} func The function to debounce.
             * @param {number} [wait=0] The number of milliseconds to delay.
             * @param {Object} [options={}] The options object.
             * @param {boolean} [options.leading=false]
             *  Specify invoking on the leading edge of the timeout.
             * @param {number} [options.maxWait]
             *  The maximum time `func` is allowed to be delayed before it's invoked.
             * @param {boolean} [options.trailing=true]
             *  Specify invoking on the trailing edge of the timeout.
             * @returns {Function} Returns the new debounced function.
             * @example
             *
             * // Avoid costly calculations while the window size is in flux.
             * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
             *
             * // Invoke `sendMail` when clicked, debouncing subsequent calls.
             * jQuery(element).on('click', _.debounce(sendMail, 300, {
             *   'leading': true,
             *   'trailing': false
             * }));
             *
             * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
             * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
             * var source = new EventSource('/stream');
             * jQuery(source).on('message', debounced);
             *
             * // Cancel the trailing debounced invocation.
             * jQuery(window).on('popstate', debounced.cancel);
             */
            function debounce(func, wait, options) {
                var lastArgs,
                    lastThis,
                    maxWait,
                    result,
                    timerId,
                    lastCallTime,
                    lastInvokeTime = 0,
                    leading = false,
                    maxing = false,
                    trailing = true;

                if (typeof func != 'function') {
                    throw new TypeError(FUNC_ERROR_TEXT);
                }
                wait = toNumber(wait) || 0;
                if (isObject(options)) {
                    leading = !!options.leading;
                    maxing = 'maxWait' in options;
                    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
                    trailing = 'trailing' in options ? !!options.trailing : trailing;
                }

                function invokeFunc(time) {
                    var args = lastArgs,
                        thisArg = lastThis;

                    lastArgs = lastThis = undefined$1;
                    lastInvokeTime = time;
                    result = func.apply(thisArg, args);
                    return result;
                }

                function leadingEdge(time) {
                    // Reset any `maxWait` timer.
                    lastInvokeTime = time;
                    // Start the timer for the trailing edge.
                    timerId = setTimeout(timerExpired, wait);
                    // Invoke the leading edge.
                    return leading ? invokeFunc(time) : result;
                }

                function remainingWait(time) {
                    var timeSinceLastCall = time - lastCallTime,
                        timeSinceLastInvoke = time - lastInvokeTime,
                        timeWaiting = wait - timeSinceLastCall;

                    return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
                }

                function shouldInvoke(time) {
                    var timeSinceLastCall = time - lastCallTime,
                        timeSinceLastInvoke = time - lastInvokeTime;

                    // Either this is the first call, activity has stopped and we're at the
                    // trailing edge, the system time has gone backwards and we're treating
                    // it as the trailing edge, or we've hit the `maxWait` limit.
                    return lastCallTime === undefined$1 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || (maxing && timeSinceLastInvoke >= maxWait);
                }

                function timerExpired() {
                    var time = now();
                    if (shouldInvoke(time)) {
                        return trailingEdge(time);
                    }
                    // Restart the timer.
                    timerId = setTimeout(timerExpired, remainingWait(time));
                }

                function trailingEdge(time) {
                    timerId = undefined$1;

                    // Only invoke if we have `lastArgs` which means `func` has been
                    // debounced at least once.
                    if (trailing && lastArgs) {
                        return invokeFunc(time);
                    }
                    lastArgs = lastThis = undefined$1;
                    return result;
                }

                function cancel() {
                    if (timerId !== undefined$1) {
                        clearTimeout(timerId);
                    }
                    lastInvokeTime = 0;
                    lastArgs = lastCallTime = lastThis = timerId = undefined$1;
                }

                function flush() {
                    return timerId === undefined$1 ? result : trailingEdge(now());
                }

                function debounced() {
                    var time = now(),
                        isInvoking = shouldInvoke(time);

                    lastArgs = arguments;
                    lastThis = this;
                    lastCallTime = time;

                    if (isInvoking) {
                        if (timerId === undefined$1) {
                            return leadingEdge(lastCallTime);
                        }
                        if (maxing) {
                            // Handle invocations in a tight loop.
                            clearTimeout(timerId);
                            timerId = setTimeout(timerExpired, wait);
                            return invokeFunc(lastCallTime);
                        }
                    }
                    if (timerId === undefined$1) {
                        timerId = setTimeout(timerExpired, wait);
                    }
                    return result;
                }
                debounced.cancel = cancel;
                debounced.flush = flush;
                return debounced;
            }

            /**
             * Defers invoking the `func` until the current call stack has cleared. Any
             * additional arguments are provided to `func` when it's invoked.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Function
             * @param {Function} func The function to defer.
             * @param {...*} [args] The arguments to invoke `func` with.
             * @returns {number} Returns the timer id.
             * @example
             *
             * _.defer(function(text) {
             *   console.log(text);
             * }, 'deferred');
             * // => Logs 'deferred' after one millisecond.
             */
            var defer = baseRest(function (func, args) {
                return baseDelay(func, 1, args);
            });

            /**
             * Invokes `func` after `wait` milliseconds. Any additional arguments are
             * provided to `func` when it's invoked.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Function
             * @param {Function} func The function to delay.
             * @param {number} wait The number of milliseconds to delay invocation.
             * @param {...*} [args] The arguments to invoke `func` with.
             * @returns {number} Returns the timer id.
             * @example
             *
             * _.delay(function(text) {
             *   console.log(text);
             * }, 1000, 'later');
             * // => Logs 'later' after one second.
             */
            var delay = baseRest(function (func, wait, args) {
                return baseDelay(func, toNumber(wait) || 0, args);
            });

            /**
             * Creates a function that invokes `func` with arguments reversed.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Function
             * @param {Function} func The function to flip arguments for.
             * @returns {Function} Returns the new flipped function.
             * @example
             *
             * var flipped = _.flip(function() {
             *   return _.toArray(arguments);
             * });
             *
             * flipped('a', 'b', 'c', 'd');
             * // => ['d', 'c', 'b', 'a']
             */
            function flip(func) {
                return createWrap(func, WRAP_FLIP_FLAG);
            }

            /**
             * Creates a function that memoizes the result of `func`. If `resolver` is
             * provided, it determines the cache key for storing the result based on the
             * arguments provided to the memoized function. By default, the first argument
             * provided to the memoized function is used as the map cache key. The `func`
             * is invoked with the `this` binding of the memoized function.
             *
             * **Note:** The cache is exposed as the `cache` property on the memoized
             * function. Its creation may be customized by replacing the `_.memoize.Cache`
             * constructor with one whose instances implement the
             * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
             * method interface of `clear`, `delete`, `get`, `has`, and `set`.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Function
             * @param {Function} func The function to have its output memoized.
             * @param {Function} [resolver] The function to resolve the cache key.
             * @returns {Function} Returns the new memoized function.
             * @example
             *
             * var object = { 'a': 1, 'b': 2 };
             * var other = { 'c': 3, 'd': 4 };
             *
             * var values = _.memoize(_.values);
             * values(object);
             * // => [1, 2]
             *
             * values(other);
             * // => [3, 4]
             *
             * object.a = 2;
             * values(object);
             * // => [1, 2]
             *
             * // Modify the result cache.
             * values.cache.set(object, ['a', 'b']);
             * values(object);
             * // => ['a', 'b']
             *
             * // Replace `_.memoize.Cache`.
             * _.memoize.Cache = WeakMap;
             */
            function memoize(func, resolver) {
                if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
                    throw new TypeError(FUNC_ERROR_TEXT);
                }
                var memoized = function () {
                    var args = arguments,
                        key = resolver ? resolver.apply(this, args) : args[0],
                        cache = memoized.cache;

                    if (cache.has(key)) {
                        return cache.get(key);
                    }
                    var result = func.apply(this, args);
                    memoized.cache = cache.set(key, result) || cache;
                    return result;
                };
                memoized.cache = new (memoize.Cache || MapCache)();
                return memoized;
            }

            // Expose `MapCache`.
            memoize.Cache = MapCache;

            /**
             * Creates a function that negates the result of the predicate `func`. The
             * `func` predicate is invoked with the `this` binding and arguments of the
             * created function.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Function
             * @param {Function} predicate The predicate to negate.
             * @returns {Function} Returns the new negated function.
             * @example
             *
             * function isEven(n) {
             *   return n % 2 == 0;
             * }
             *
             * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
             * // => [1, 3, 5]
             */
            function negate(predicate) {
                if (typeof predicate != 'function') {
                    throw new TypeError(FUNC_ERROR_TEXT);
                }
                return function () {
                    var args = arguments;
                    switch (args.length) {
                        case 0:
                            return !predicate.call(this);
                        case 1:
                            return !predicate.call(this, args[0]);
                        case 2:
                            return !predicate.call(this, args[0], args[1]);
                        case 3:
                            return !predicate.call(this, args[0], args[1], args[2]);
                    }
                    return !predicate.apply(this, args);
                };
            }

            /**
             * Creates a function that is restricted to invoking `func` once. Repeat calls
             * to the function return the value of the first invocation. The `func` is
             * invoked with the `this` binding and arguments of the created function.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Function
             * @param {Function} func The function to restrict.
             * @returns {Function} Returns the new restricted function.
             * @example
             *
             * var initialize = _.once(createApplication);
             * initialize();
             * initialize();
             * // => `createApplication` is invoked once
             */
            function once(func) {
                return before(2, func);
            }

            /**
             * Creates a function that invokes `func` with its arguments transformed.
             *
             * @static
             * @since 4.0.0
             * @memberOf _
             * @category Function
             * @param {Function} func The function to wrap.
             * @param {...(Function|Function[])} [transforms=[_.identity]]
             *  The argument transforms.
             * @returns {Function} Returns the new function.
             * @example
             *
             * function doubled(n) {
             *   return n * 2;
             * }
             *
             * function square(n) {
             *   return n * n;
             * }
             *
             * var func = _.overArgs(function(x, y) {
             *   return [x, y];
             * }, [square, doubled]);
             *
             * func(9, 3);
             * // => [81, 6]
             *
             * func(10, 5);
             * // => [100, 10]
             */
            var overArgs = castRest(function (func, transforms) {
                transforms = transforms.length == 1 && isArray(transforms[0]) ? arrayMap(transforms[0], baseUnary(getIteratee())) : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));

                var funcsLength = transforms.length;
                return baseRest(function (args) {
                    var index = -1,
                        length = nativeMin(args.length, funcsLength);

                    while (++index < length) {
                        args[index] = transforms[index].call(this, args[index]);
                    }
                    return apply(func, this, args);
                });
            });

            /**
             * Creates a function that invokes `func` with `partials` prepended to the
             * arguments it receives. This method is like `_.bind` except it does **not**
             * alter the `this` binding.
             *
             * The `_.partial.placeholder` value, which defaults to `_` in monolithic
             * builds, may be used as a placeholder for partially applied arguments.
             *
             * **Note:** This method doesn't set the "length" property of partially
             * applied functions.
             *
             * @static
             * @memberOf _
             * @since 0.2.0
             * @category Function
             * @param {Function} func The function to partially apply arguments to.
             * @param {...*} [partials] The arguments to be partially applied.
             * @returns {Function} Returns the new partially applied function.
             * @example
             *
             * function greet(greeting, name) {
             *   return greeting + ' ' + name;
             * }
             *
             * var sayHelloTo = _.partial(greet, 'hello');
             * sayHelloTo('fred');
             * // => 'hello fred'
             *
             * // Partially applied with placeholders.
             * var greetFred = _.partial(greet, _, 'fred');
             * greetFred('hi');
             * // => 'hi fred'
             */
            var partial = baseRest(function (func, partials) {
                var holders = replaceHolders(partials, getHolder(partial));
                return createWrap(func, WRAP_PARTIAL_FLAG, undefined$1, partials, holders);
            });

            /**
             * This method is like `_.partial` except that partially applied arguments
             * are appended to the arguments it receives.
             *
             * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
             * builds, may be used as a placeholder for partially applied arguments.
             *
             * **Note:** This method doesn't set the "length" property of partially
             * applied functions.
             *
             * @static
             * @memberOf _
             * @since 1.0.0
             * @category Function
             * @param {Function} func The function to partially apply arguments to.
             * @param {...*} [partials] The arguments to be partially applied.
             * @returns {Function} Returns the new partially applied function.
             * @example
             *
             * function greet(greeting, name) {
             *   return greeting + ' ' + name;
             * }
             *
             * var greetFred = _.partialRight(greet, 'fred');
             * greetFred('hi');
             * // => 'hi fred'
             *
             * // Partially applied with placeholders.
             * var sayHelloTo = _.partialRight(greet, 'hello', _);
             * sayHelloTo('fred');
             * // => 'hello fred'
             */
            var partialRight = baseRest(function (func, partials) {
                var holders = replaceHolders(partials, getHolder(partialRight));
                return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined$1, partials, holders);
            });

            /**
             * Creates a function that invokes `func` with arguments arranged according
             * to the specified `indexes` where the argument value at the first index is
             * provided as the first argument, the argument value at the second index is
             * provided as the second argument, and so on.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Function
             * @param {Function} func The function to rearrange arguments for.
             * @param {...(number|number[])} indexes The arranged argument indexes.
             * @returns {Function} Returns the new function.
             * @example
             *
             * var rearged = _.rearg(function(a, b, c) {
             *   return [a, b, c];
             * }, [2, 0, 1]);
             *
             * rearged('b', 'c', 'a')
             * // => ['a', 'b', 'c']
             */
            var rearg = flatRest(function (func, indexes) {
                return createWrap(func, WRAP_REARG_FLAG, undefined$1, undefined$1, undefined$1, indexes);
            });

            /**
             * Creates a function that invokes `func` with the `this` binding of the
             * created function and arguments from `start` and beyond provided as
             * an array.
             *
             * **Note:** This method is based on the
             * [rest parameter](https://mdn.io/rest_parameters).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Function
             * @param {Function} func The function to apply a rest parameter to.
             * @param {number} [start=func.length-1] The start position of the rest parameter.
             * @returns {Function} Returns the new function.
             * @example
             *
             * var say = _.rest(function(what, names) {
             *   return what + ' ' + _.initial(names).join(', ') +
             *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
             * });
             *
             * say('hello', 'fred', 'barney', 'pebbles');
             * // => 'hello fred, barney, & pebbles'
             */
            function rest(func, start) {
                if (typeof func != 'function') {
                    throw new TypeError(FUNC_ERROR_TEXT);
                }
                start = start === undefined$1 ? start : toInteger(start);
                return baseRest(func, start);
            }

            /**
             * Creates a function that invokes `func` with the `this` binding of the
             * create function and an array of arguments much like
             * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
             *
             * **Note:** This method is based on the
             * [spread operator](https://mdn.io/spread_operator).
             *
             * @static
             * @memberOf _
             * @since 3.2.0
             * @category Function
             * @param {Function} func The function to spread arguments over.
             * @param {number} [start=0] The start position of the spread.
             * @returns {Function} Returns the new function.
             * @example
             *
             * var say = _.spread(function(who, what) {
             *   return who + ' says ' + what;
             * });
             *
             * say(['fred', 'hello']);
             * // => 'fred says hello'
             *
             * var numbers = Promise.all([
             *   Promise.resolve(40),
             *   Promise.resolve(36)
             * ]);
             *
             * numbers.then(_.spread(function(x, y) {
             *   return x + y;
             * }));
             * // => a Promise of 76
             */
            function spread(func, start) {
                if (typeof func != 'function') {
                    throw new TypeError(FUNC_ERROR_TEXT);
                }
                start = start == null ? 0 : nativeMax(toInteger(start), 0);
                return baseRest(function (args) {
                    var array = args[start],
                        otherArgs = castSlice(args, 0, start);

                    if (array) {
                        arrayPush(otherArgs, array);
                    }
                    return apply(func, this, otherArgs);
                });
            }

            /**
             * Creates a throttled function that only invokes `func` at most once per
             * every `wait` milliseconds. The throttled function comes with a `cancel`
             * method to cancel delayed `func` invocations and a `flush` method to
             * immediately invoke them. Provide `options` to indicate whether `func`
             * should be invoked on the leading and/or trailing edge of the `wait`
             * timeout. The `func` is invoked with the last arguments provided to the
             * throttled function. Subsequent calls to the throttled function return the
             * result of the last `func` invocation.
             *
             * **Note:** If `leading` and `trailing` options are `true`, `func` is
             * invoked on the trailing edge of the timeout only if the throttled function
             * is invoked more than once during the `wait` timeout.
             *
             * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
             * until to the next tick, similar to `setTimeout` with a timeout of `0`.
             *
             * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
             * for details over the differences between `_.throttle` and `_.debounce`.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Function
             * @param {Function} func The function to throttle.
             * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
             * @param {Object} [options={}] The options object.
             * @param {boolean} [options.leading=true]
             *  Specify invoking on the leading edge of the timeout.
             * @param {boolean} [options.trailing=true]
             *  Specify invoking on the trailing edge of the timeout.
             * @returns {Function} Returns the new throttled function.
             * @example
             *
             * // Avoid excessively updating the position while scrolling.
             * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
             *
             * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
             * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
             * jQuery(element).on('click', throttled);
             *
             * // Cancel the trailing throttled invocation.
             * jQuery(window).on('popstate', throttled.cancel);
             */
            function throttle(func, wait, options) {
                var leading = true,
                    trailing = true;

                if (typeof func != 'function') {
                    throw new TypeError(FUNC_ERROR_TEXT);
                }
                if (isObject(options)) {
                    leading = 'leading' in options ? !!options.leading : leading;
                    trailing = 'trailing' in options ? !!options.trailing : trailing;
                }
                return debounce(func, wait, {
                    leading: leading,
                    maxWait: wait,
                    trailing: trailing,
                });
            }

            /**
             * Creates a function that accepts up to one argument, ignoring any
             * additional arguments.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Function
             * @param {Function} func The function to cap arguments for.
             * @returns {Function} Returns the new capped function.
             * @example
             *
             * _.map(['6', '8', '10'], _.unary(parseInt));
             * // => [6, 8, 10]
             */
            function unary(func) {
                return ary(func, 1);
            }

            /**
             * Creates a function that provides `value` to `wrapper` as its first
             * argument. Any additional arguments provided to the function are appended
             * to those provided to the `wrapper`. The wrapper is invoked with the `this`
             * binding of the created function.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Function
             * @param {*} value The value to wrap.
             * @param {Function} [wrapper=identity] The wrapper function.
             * @returns {Function} Returns the new function.
             * @example
             *
             * var p = _.wrap(_.escape, function(func, text) {
             *   return '<p>' + func(text) + '</p>';
             * });
             *
             * p('fred, barney, & pebbles');
             * // => '<p>fred, barney, &amp; pebbles</p>'
             */
            function wrap(value, wrapper) {
                return partial(castFunction(wrapper), value);
            }

            /*------------------------------------------------------------------------*/

            /**
             * Casts `value` as an array if it's not one.
             *
             * @static
             * @memberOf _
             * @since 4.4.0
             * @category Lang
             * @param {*} value The value to inspect.
             * @returns {Array} Returns the cast array.
             * @example
             *
             * _.castArray(1);
             * // => [1]
             *
             * _.castArray({ 'a': 1 });
             * // => [{ 'a': 1 }]
             *
             * _.castArray('abc');
             * // => ['abc']
             *
             * _.castArray(null);
             * // => [null]
             *
             * _.castArray(undefined);
             * // => [undefined]
             *
             * _.castArray();
             * // => []
             *
             * var array = [1, 2, 3];
             * console.log(_.castArray(array) === array);
             * // => true
             */
            function castArray() {
                if (!arguments.length) {
                    return [];
                }
                var value = arguments[0];
                return isArray(value) ? value : [value];
            }

            /**
             * Creates a shallow clone of `value`.
             *
             * **Note:** This method is loosely based on the
             * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
             * and supports cloning arrays, array buffers, booleans, date objects, maps,
             * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
             * arrays. The own enumerable properties of `arguments` objects are cloned
             * as plain objects. An empty object is returned for uncloneable values such
             * as error objects, functions, DOM nodes, and WeakMaps.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to clone.
             * @returns {*} Returns the cloned value.
             * @see _.cloneDeep
             * @example
             *
             * var objects = [{ 'a': 1 }, { 'b': 2 }];
             *
             * var shallow = _.clone(objects);
             * console.log(shallow[0] === objects[0]);
             * // => true
             */
            function clone(value) {
                return baseClone(value, CLONE_SYMBOLS_FLAG);
            }

            /**
             * This method is like `_.clone` except that it accepts `customizer` which
             * is invoked to produce the cloned value. If `customizer` returns `undefined`,
             * cloning is handled by the method instead. The `customizer` is invoked with
             * up to four arguments; (value [, index|key, object, stack]).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to clone.
             * @param {Function} [customizer] The function to customize cloning.
             * @returns {*} Returns the cloned value.
             * @see _.cloneDeepWith
             * @example
             *
             * function customizer(value) {
             *   if (_.isElement(value)) {
             *     return value.cloneNode(false);
             *   }
             * }
             *
             * var el = _.cloneWith(document.body, customizer);
             *
             * console.log(el === document.body);
             * // => false
             * console.log(el.nodeName);
             * // => 'BODY'
             * console.log(el.childNodes.length);
             * // => 0
             */
            function cloneWith(value, customizer) {
                customizer = typeof customizer == 'function' ? customizer : undefined$1;
                return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
            }

            /**
             * This method is like `_.clone` except that it recursively clones `value`.
             *
             * @static
             * @memberOf _
             * @since 1.0.0
             * @category Lang
             * @param {*} value The value to recursively clone.
             * @returns {*} Returns the deep cloned value.
             * @see _.clone
             * @example
             *
             * var objects = [{ 'a': 1 }, { 'b': 2 }];
             *
             * var deep = _.cloneDeep(objects);
             * console.log(deep[0] === objects[0]);
             * // => false
             */
            function cloneDeep(value) {
                return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
            }

            /**
             * This method is like `_.cloneWith` except that it recursively clones `value`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to recursively clone.
             * @param {Function} [customizer] The function to customize cloning.
             * @returns {*} Returns the deep cloned value.
             * @see _.cloneWith
             * @example
             *
             * function customizer(value) {
             *   if (_.isElement(value)) {
             *     return value.cloneNode(true);
             *   }
             * }
             *
             * var el = _.cloneDeepWith(document.body, customizer);
             *
             * console.log(el === document.body);
             * // => false
             * console.log(el.nodeName);
             * // => 'BODY'
             * console.log(el.childNodes.length);
             * // => 20
             */
            function cloneDeepWith(value, customizer) {
                customizer = typeof customizer == 'function' ? customizer : undefined$1;
                return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
            }

            /**
             * Checks if `object` conforms to `source` by invoking the predicate
             * properties of `source` with the corresponding property values of `object`.
             *
             * **Note:** This method is equivalent to `_.conforms` when `source` is
             * partially applied.
             *
             * @static
             * @memberOf _
             * @since 4.14.0
             * @category Lang
             * @param {Object} object The object to inspect.
             * @param {Object} source The object of property predicates to conform to.
             * @returns {boolean} Returns `true` if `object` conforms, else `false`.
             * @example
             *
             * var object = { 'a': 1, 'b': 2 };
             *
             * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
             * // => true
             *
             * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
             * // => false
             */
            function conformsTo(object, source) {
                return source == null || baseConformsTo(object, source, keys(source));
            }

            /**
             * Performs a
             * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
             * comparison between two values to determine if they are equivalent.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to compare.
             * @param {*} other The other value to compare.
             * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
             * @example
             *
             * var object = { 'a': 1 };
             * var other = { 'a': 1 };
             *
             * _.eq(object, object);
             * // => true
             *
             * _.eq(object, other);
             * // => false
             *
             * _.eq('a', 'a');
             * // => true
             *
             * _.eq('a', Object('a'));
             * // => false
             *
             * _.eq(NaN, NaN);
             * // => true
             */
            function eq(value, other) {
                return value === other || (value !== value && other !== other);
            }

            /**
             * Checks if `value` is greater than `other`.
             *
             * @static
             * @memberOf _
             * @since 3.9.0
             * @category Lang
             * @param {*} value The value to compare.
             * @param {*} other The other value to compare.
             * @returns {boolean} Returns `true` if `value` is greater than `other`,
             *  else `false`.
             * @see _.lt
             * @example
             *
             * _.gt(3, 1);
             * // => true
             *
             * _.gt(3, 3);
             * // => false
             *
             * _.gt(1, 3);
             * // => false
             */
            var gt = createRelationalOperation(baseGt);

            /**
             * Checks if `value` is greater than or equal to `other`.
             *
             * @static
             * @memberOf _
             * @since 3.9.0
             * @category Lang
             * @param {*} value The value to compare.
             * @param {*} other The other value to compare.
             * @returns {boolean} Returns `true` if `value` is greater than or equal to
             *  `other`, else `false`.
             * @see _.lte
             * @example
             *
             * _.gte(3, 1);
             * // => true
             *
             * _.gte(3, 3);
             * // => true
             *
             * _.gte(1, 3);
             * // => false
             */
            var gte = createRelationalOperation(function (value, other) {
                return value >= other;
            });

            /**
             * Checks if `value` is likely an `arguments` object.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is an `arguments` object,
             *  else `false`.
             * @example
             *
             * _.isArguments(function() { return arguments; }());
             * // => true
             *
             * _.isArguments([1, 2, 3]);
             * // => false
             */
            var isArguments = baseIsArguments(
                (function () {
                    return arguments;
                })()
            )
                ? baseIsArguments
                : function (value) {
                      return isObjectLike(value) && hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
                  };

            /**
             * Checks if `value` is classified as an `Array` object.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is an array, else `false`.
             * @example
             *
             * _.isArray([1, 2, 3]);
             * // => true
             *
             * _.isArray(document.body.children);
             * // => false
             *
             * _.isArray('abc');
             * // => false
             *
             * _.isArray(_.noop);
             * // => false
             */
            var isArray = Array.isArray;

            /**
             * Checks if `value` is classified as an `ArrayBuffer` object.
             *
             * @static
             * @memberOf _
             * @since 4.3.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
             * @example
             *
             * _.isArrayBuffer(new ArrayBuffer(2));
             * // => true
             *
             * _.isArrayBuffer(new Array(2));
             * // => false
             */
            var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;

            /**
             * Checks if `value` is array-like. A value is considered array-like if it's
             * not a function and has a `value.length` that's an integer greater than or
             * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
             * @example
             *
             * _.isArrayLike([1, 2, 3]);
             * // => true
             *
             * _.isArrayLike(document.body.children);
             * // => true
             *
             * _.isArrayLike('abc');
             * // => true
             *
             * _.isArrayLike(_.noop);
             * // => false
             */
            function isArrayLike(value) {
                return value != null && isLength(value.length) && !isFunction(value);
            }

            /**
             * This method is like `_.isArrayLike` except that it also checks if `value`
             * is an object.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is an array-like object,
             *  else `false`.
             * @example
             *
             * _.isArrayLikeObject([1, 2, 3]);
             * // => true
             *
             * _.isArrayLikeObject(document.body.children);
             * // => true
             *
             * _.isArrayLikeObject('abc');
             * // => false
             *
             * _.isArrayLikeObject(_.noop);
             * // => false
             */
            function isArrayLikeObject(value) {
                return isObjectLike(value) && isArrayLike(value);
            }

            /**
             * Checks if `value` is classified as a boolean primitive or object.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
             * @example
             *
             * _.isBoolean(false);
             * // => true
             *
             * _.isBoolean(null);
             * // => false
             */
            function isBoolean(value) {
                return value === true || value === false || (isObjectLike(value) && baseGetTag(value) == boolTag);
            }

            /**
             * Checks if `value` is a buffer.
             *
             * @static
             * @memberOf _
             * @since 4.3.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
             * @example
             *
             * _.isBuffer(new Buffer(2));
             * // => true
             *
             * _.isBuffer(new Uint8Array(2));
             * // => false
             */
            var isBuffer = nativeIsBuffer || stubFalse;

            /**
             * Checks if `value` is classified as a `Date` object.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
             * @example
             *
             * _.isDate(new Date);
             * // => true
             *
             * _.isDate('Mon April 23 2012');
             * // => false
             */
            var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

            /**
             * Checks if `value` is likely a DOM element.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
             * @example
             *
             * _.isElement(document.body);
             * // => true
             *
             * _.isElement('<body>');
             * // => false
             */
            function isElement(value) {
                return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
            }

            /**
             * Checks if `value` is an empty object, collection, map, or set.
             *
             * Objects are considered empty if they have no own enumerable string keyed
             * properties.
             *
             * Array-like values such as `arguments` objects, arrays, buffers, strings, or
             * jQuery-like collections are considered empty if they have a `length` of `0`.
             * Similarly, maps and sets are considered empty if they have a `size` of `0`.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is empty, else `false`.
             * @example
             *
             * _.isEmpty(null);
             * // => true
             *
             * _.isEmpty(true);
             * // => true
             *
             * _.isEmpty(1);
             * // => true
             *
             * _.isEmpty([1, 2, 3]);
             * // => false
             *
             * _.isEmpty({ 'a': 1 });
             * // => false
             */
            function isEmpty(value) {
                if (value == null) {
                    return true;
                }
                if (isArrayLike(value) && (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' || isBuffer(value) || isTypedArray(value) || isArguments(value))) {
                    return !value.length;
                }
                var tag = getTag(value);
                if (tag == mapTag || tag == setTag) {
                    return !value.size;
                }
                if (isPrototype(value)) {
                    return !baseKeys(value).length;
                }
                for (var key in value) {
                    if (hasOwnProperty.call(value, key)) {
                        return false;
                    }
                }
                return true;
            }

            /**
             * Performs a deep comparison between two values to determine if they are
             * equivalent.
             *
             * **Note:** This method supports comparing arrays, array buffers, booleans,
             * date objects, error objects, maps, numbers, `Object` objects, regexes,
             * sets, strings, symbols, and typed arrays. `Object` objects are compared
             * by their own, not inherited, enumerable properties. Functions and DOM
             * nodes are compared by strict equality, i.e. `===`.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to compare.
             * @param {*} other The other value to compare.
             * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
             * @example
             *
             * var object = { 'a': 1 };
             * var other = { 'a': 1 };
             *
             * _.isEqual(object, other);
             * // => true
             *
             * object === other;
             * // => false
             */
            function isEqual(value, other) {
                return baseIsEqual(value, other);
            }

            /**
             * This method is like `_.isEqual` except that it accepts `customizer` which
             * is invoked to compare values. If `customizer` returns `undefined`, comparisons
             * are handled by the method instead. The `customizer` is invoked with up to
             * six arguments: (objValue, othValue [, index|key, object, other, stack]).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to compare.
             * @param {*} other The other value to compare.
             * @param {Function} [customizer] The function to customize comparisons.
             * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
             * @example
             *
             * function isGreeting(value) {
             *   return /^h(?:i|ello)$/.test(value);
             * }
             *
             * function customizer(objValue, othValue) {
             *   if (isGreeting(objValue) && isGreeting(othValue)) {
             *     return true;
             *   }
             * }
             *
             * var array = ['hello', 'goodbye'];
             * var other = ['hi', 'goodbye'];
             *
             * _.isEqualWith(array, other, customizer);
             * // => true
             */
            function isEqualWith(value, other, customizer) {
                customizer = typeof customizer == 'function' ? customizer : undefined$1;
                var result = customizer ? customizer(value, other) : undefined$1;
                return result === undefined$1 ? baseIsEqual(value, other, undefined$1, customizer) : !!result;
            }

            /**
             * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
             * `SyntaxError`, `TypeError`, or `URIError` object.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
             * @example
             *
             * _.isError(new Error);
             * // => true
             *
             * _.isError(Error);
             * // => false
             */
            function isError(value) {
                if (!isObjectLike(value)) {
                    return false;
                }
                var tag = baseGetTag(value);
                return tag == errorTag || tag == domExcTag || (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));
            }

            /**
             * Checks if `value` is a finite primitive number.
             *
             * **Note:** This method is based on
             * [`Number.isFinite`](https://mdn.io/Number/isFinite).
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
             * @example
             *
             * _.isFinite(3);
             * // => true
             *
             * _.isFinite(Number.MIN_VALUE);
             * // => true
             *
             * _.isFinite(Infinity);
             * // => false
             *
             * _.isFinite('3');
             * // => false
             */
            function isFinite(value) {
                return typeof value == 'number' && nativeIsFinite(value);
            }

            /**
             * Checks if `value` is classified as a `Function` object.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a function, else `false`.
             * @example
             *
             * _.isFunction(_);
             * // => true
             *
             * _.isFunction(/abc/);
             * // => false
             */
            function isFunction(value) {
                if (!isObject(value)) {
                    return false;
                }
                // The use of `Object#toString` avoids issues with the `typeof` operator
                // in Safari 9 which returns 'object' for typed arrays and other constructors.
                var tag = baseGetTag(value);
                return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
            }

            /**
             * Checks if `value` is an integer.
             *
             * **Note:** This method is based on
             * [`Number.isInteger`](https://mdn.io/Number/isInteger).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
             * @example
             *
             * _.isInteger(3);
             * // => true
             *
             * _.isInteger(Number.MIN_VALUE);
             * // => false
             *
             * _.isInteger(Infinity);
             * // => false
             *
             * _.isInteger('3');
             * // => false
             */
            function isInteger(value) {
                return typeof value == 'number' && value == toInteger(value);
            }

            /**
             * Checks if `value` is a valid array-like length.
             *
             * **Note:** This method is loosely based on
             * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
             * @example
             *
             * _.isLength(3);
             * // => true
             *
             * _.isLength(Number.MIN_VALUE);
             * // => false
             *
             * _.isLength(Infinity);
             * // => false
             *
             * _.isLength('3');
             * // => false
             */
            function isLength(value) {
                return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
            }

            /**
             * Checks if `value` is the
             * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
             * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is an object, else `false`.
             * @example
             *
             * _.isObject({});
             * // => true
             *
             * _.isObject([1, 2, 3]);
             * // => true
             *
             * _.isObject(_.noop);
             * // => true
             *
             * _.isObject(null);
             * // => false
             */
            function isObject(value) {
                var type = typeof value;
                return value != null && (type == 'object' || type == 'function');
            }

            /**
             * Checks if `value` is object-like. A value is object-like if it's not `null`
             * and has a `typeof` result of "object".
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
             * @example
             *
             * _.isObjectLike({});
             * // => true
             *
             * _.isObjectLike([1, 2, 3]);
             * // => true
             *
             * _.isObjectLike(_.noop);
             * // => false
             *
             * _.isObjectLike(null);
             * // => false
             */
            function isObjectLike(value) {
                return value != null && typeof value == 'object';
            }

            /**
             * Checks if `value` is classified as a `Map` object.
             *
             * @static
             * @memberOf _
             * @since 4.3.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a map, else `false`.
             * @example
             *
             * _.isMap(new Map);
             * // => true
             *
             * _.isMap(new WeakMap);
             * // => false
             */
            var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

            /**
             * Performs a partial deep comparison between `object` and `source` to
             * determine if `object` contains equivalent property values.
             *
             * **Note:** This method is equivalent to `_.matches` when `source` is
             * partially applied.
             *
             * Partial comparisons will match empty array and empty object `source`
             * values against any array or object value, respectively. See `_.isEqual`
             * for a list of supported value comparisons.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Lang
             * @param {Object} object The object to inspect.
             * @param {Object} source The object of property values to match.
             * @returns {boolean} Returns `true` if `object` is a match, else `false`.
             * @example
             *
             * var object = { 'a': 1, 'b': 2 };
             *
             * _.isMatch(object, { 'b': 2 });
             * // => true
             *
             * _.isMatch(object, { 'b': 1 });
             * // => false
             */
            function isMatch(object, source) {
                return object === source || baseIsMatch(object, source, getMatchData(source));
            }

            /**
             * This method is like `_.isMatch` except that it accepts `customizer` which
             * is invoked to compare values. If `customizer` returns `undefined`, comparisons
             * are handled by the method instead. The `customizer` is invoked with five
             * arguments: (objValue, srcValue, index|key, object, source).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {Object} object The object to inspect.
             * @param {Object} source The object of property values to match.
             * @param {Function} [customizer] The function to customize comparisons.
             * @returns {boolean} Returns `true` if `object` is a match, else `false`.
             * @example
             *
             * function isGreeting(value) {
             *   return /^h(?:i|ello)$/.test(value);
             * }
             *
             * function customizer(objValue, srcValue) {
             *   if (isGreeting(objValue) && isGreeting(srcValue)) {
             *     return true;
             *   }
             * }
             *
             * var object = { 'greeting': 'hello' };
             * var source = { 'greeting': 'hi' };
             *
             * _.isMatchWith(object, source, customizer);
             * // => true
             */
            function isMatchWith(object, source, customizer) {
                customizer = typeof customizer == 'function' ? customizer : undefined$1;
                return baseIsMatch(object, source, getMatchData(source), customizer);
            }

            /**
             * Checks if `value` is `NaN`.
             *
             * **Note:** This method is based on
             * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
             * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
             * `undefined` and other non-number values.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
             * @example
             *
             * _.isNaN(NaN);
             * // => true
             *
             * _.isNaN(new Number(NaN));
             * // => true
             *
             * isNaN(undefined);
             * // => true
             *
             * _.isNaN(undefined);
             * // => false
             */
            function isNaN(value) {
                // An `NaN` primitive is the only value that is not equal to itself.
                // Perform the `toStringTag` check first to avoid errors with some
                // ActiveX objects in IE.
                return isNumber(value) && value != +value;
            }

            /**
             * Checks if `value` is a pristine native function.
             *
             * **Note:** This method can't reliably detect native functions in the presence
             * of the core-js package because core-js circumvents this kind of detection.
             * Despite multiple requests, the core-js maintainer has made it clear: any
             * attempt to fix the detection will be obstructed. As a result, we're left
             * with little choice but to throw an error. Unfortunately, this also affects
             * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
             * which rely on core-js.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a native function,
             *  else `false`.
             * @example
             *
             * _.isNative(Array.prototype.push);
             * // => true
             *
             * _.isNative(_);
             * // => false
             */
            function isNative(value) {
                if (isMaskable(value)) {
                    throw new Error(CORE_ERROR_TEXT);
                }
                return baseIsNative(value);
            }

            /**
             * Checks if `value` is `null`.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
             * @example
             *
             * _.isNull(null);
             * // => true
             *
             * _.isNull(void 0);
             * // => false
             */
            function isNull(value) {
                return value === null;
            }

            /**
             * Checks if `value` is `null` or `undefined`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
             * @example
             *
             * _.isNil(null);
             * // => true
             *
             * _.isNil(void 0);
             * // => true
             *
             * _.isNil(NaN);
             * // => false
             */
            function isNil(value) {
                return value == null;
            }

            /**
             * Checks if `value` is classified as a `Number` primitive or object.
             *
             * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
             * classified as numbers, use the `_.isFinite` method.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a number, else `false`.
             * @example
             *
             * _.isNumber(3);
             * // => true
             *
             * _.isNumber(Number.MIN_VALUE);
             * // => true
             *
             * _.isNumber(Infinity);
             * // => true
             *
             * _.isNumber('3');
             * // => false
             */
            function isNumber(value) {
                return typeof value == 'number' || (isObjectLike(value) && baseGetTag(value) == numberTag);
            }

            /**
             * Checks if `value` is a plain object, that is, an object created by the
             * `Object` constructor or one with a `[[Prototype]]` of `null`.
             *
             * @static
             * @memberOf _
             * @since 0.8.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
             * @example
             *
             * function Foo() {
             *   this.a = 1;
             * }
             *
             * _.isPlainObject(new Foo);
             * // => false
             *
             * _.isPlainObject([1, 2, 3]);
             * // => false
             *
             * _.isPlainObject({ 'x': 0, 'y': 0 });
             * // => true
             *
             * _.isPlainObject(Object.create(null));
             * // => true
             */
            function isPlainObject(value) {
                if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
                    return false;
                }
                var proto = getPrototype(value);
                if (proto === null) {
                    return true;
                }
                var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
                return typeof Ctor == 'function' && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
            }

            /**
             * Checks if `value` is classified as a `RegExp` object.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
             * @example
             *
             * _.isRegExp(/abc/);
             * // => true
             *
             * _.isRegExp('/abc/');
             * // => false
             */
            var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

            /**
             * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
             * double precision number which isn't the result of a rounded unsafe integer.
             *
             * **Note:** This method is based on
             * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
             * @example
             *
             * _.isSafeInteger(3);
             * // => true
             *
             * _.isSafeInteger(Number.MIN_VALUE);
             * // => false
             *
             * _.isSafeInteger(Infinity);
             * // => false
             *
             * _.isSafeInteger('3');
             * // => false
             */
            function isSafeInteger(value) {
                return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
            }

            /**
             * Checks if `value` is classified as a `Set` object.
             *
             * @static
             * @memberOf _
             * @since 4.3.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a set, else `false`.
             * @example
             *
             * _.isSet(new Set);
             * // => true
             *
             * _.isSet(new WeakSet);
             * // => false
             */
            var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

            /**
             * Checks if `value` is classified as a `String` primitive or object.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a string, else `false`.
             * @example
             *
             * _.isString('abc');
             * // => true
             *
             * _.isString(1);
             * // => false
             */
            function isString(value) {
                return typeof value == 'string' || (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
            }

            /**
             * Checks if `value` is classified as a `Symbol` primitive or object.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
             * @example
             *
             * _.isSymbol(Symbol.iterator);
             * // => true
             *
             * _.isSymbol('abc');
             * // => false
             */
            function isSymbol(value) {
                return typeof value == 'symbol' || (isObjectLike(value) && baseGetTag(value) == symbolTag);
            }

            /**
             * Checks if `value` is classified as a typed array.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
             * @example
             *
             * _.isTypedArray(new Uint8Array);
             * // => true
             *
             * _.isTypedArray([]);
             * // => false
             */
            var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

            /**
             * Checks if `value` is `undefined`.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
             * @example
             *
             * _.isUndefined(void 0);
             * // => true
             *
             * _.isUndefined(null);
             * // => false
             */
            function isUndefined(value) {
                return value === undefined$1;
            }

            /**
             * Checks if `value` is classified as a `WeakMap` object.
             *
             * @static
             * @memberOf _
             * @since 4.3.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
             * @example
             *
             * _.isWeakMap(new WeakMap);
             * // => true
             *
             * _.isWeakMap(new Map);
             * // => false
             */
            function isWeakMap(value) {
                return isObjectLike(value) && getTag(value) == weakMapTag;
            }

            /**
             * Checks if `value` is classified as a `WeakSet` object.
             *
             * @static
             * @memberOf _
             * @since 4.3.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
             * @example
             *
             * _.isWeakSet(new WeakSet);
             * // => true
             *
             * _.isWeakSet(new Set);
             * // => false
             */
            function isWeakSet(value) {
                return isObjectLike(value) && baseGetTag(value) == weakSetTag;
            }

            /**
             * Checks if `value` is less than `other`.
             *
             * @static
             * @memberOf _
             * @since 3.9.0
             * @category Lang
             * @param {*} value The value to compare.
             * @param {*} other The other value to compare.
             * @returns {boolean} Returns `true` if `value` is less than `other`,
             *  else `false`.
             * @see _.gt
             * @example
             *
             * _.lt(1, 3);
             * // => true
             *
             * _.lt(3, 3);
             * // => false
             *
             * _.lt(3, 1);
             * // => false
             */
            var lt = createRelationalOperation(baseLt);

            /**
             * Checks if `value` is less than or equal to `other`.
             *
             * @static
             * @memberOf _
             * @since 3.9.0
             * @category Lang
             * @param {*} value The value to compare.
             * @param {*} other The other value to compare.
             * @returns {boolean} Returns `true` if `value` is less than or equal to
             *  `other`, else `false`.
             * @see _.gte
             * @example
             *
             * _.lte(1, 3);
             * // => true
             *
             * _.lte(3, 3);
             * // => true
             *
             * _.lte(3, 1);
             * // => false
             */
            var lte = createRelationalOperation(function (value, other) {
                return value <= other;
            });

            /**
             * Converts `value` to an array.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Lang
             * @param {*} value The value to convert.
             * @returns {Array} Returns the converted array.
             * @example
             *
             * _.toArray({ 'a': 1, 'b': 2 });
             * // => [1, 2]
             *
             * _.toArray('abc');
             * // => ['a', 'b', 'c']
             *
             * _.toArray(1);
             * // => []
             *
             * _.toArray(null);
             * // => []
             */
            function toArray(value) {
                if (!value) {
                    return [];
                }
                if (isArrayLike(value)) {
                    return isString(value) ? stringToArray(value) : copyArray(value);
                }
                if (symIterator && value[symIterator]) {
                    return iteratorToArray(value[symIterator]());
                }
                var tag = getTag(value),
                    func = tag == mapTag ? mapToArray : tag == setTag ? setToArray : values;

                return func(value);
            }

            /**
             * Converts `value` to a finite number.
             *
             * @static
             * @memberOf _
             * @since 4.12.0
             * @category Lang
             * @param {*} value The value to convert.
             * @returns {number} Returns the converted number.
             * @example
             *
             * _.toFinite(3.2);
             * // => 3.2
             *
             * _.toFinite(Number.MIN_VALUE);
             * // => 5e-324
             *
             * _.toFinite(Infinity);
             * // => 1.7976931348623157e+308
             *
             * _.toFinite('3.2');
             * // => 3.2
             */
            function toFinite(value) {
                if (!value) {
                    return value === 0 ? value : 0;
                }
                value = toNumber(value);
                if (value === INFINITY || value === -INFINITY) {
                    var sign = value < 0 ? -1 : 1;
                    return sign * MAX_INTEGER;
                }
                return value === value ? value : 0;
            }

            /**
             * Converts `value` to an integer.
             *
             * **Note:** This method is loosely based on
             * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to convert.
             * @returns {number} Returns the converted integer.
             * @example
             *
             * _.toInteger(3.2);
             * // => 3
             *
             * _.toInteger(Number.MIN_VALUE);
             * // => 0
             *
             * _.toInteger(Infinity);
             * // => 1.7976931348623157e+308
             *
             * _.toInteger('3.2');
             * // => 3
             */
            function toInteger(value) {
                var result = toFinite(value),
                    remainder = result % 1;

                return result === result ? (remainder ? result - remainder : result) : 0;
            }

            /**
             * Converts `value` to an integer suitable for use as the length of an
             * array-like object.
             *
             * **Note:** This method is based on
             * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to convert.
             * @returns {number} Returns the converted integer.
             * @example
             *
             * _.toLength(3.2);
             * // => 3
             *
             * _.toLength(Number.MIN_VALUE);
             * // => 0
             *
             * _.toLength(Infinity);
             * // => 4294967295
             *
             * _.toLength('3.2');
             * // => 3
             */
            function toLength(value) {
                return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
            }

            /**
             * Converts `value` to a number.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to process.
             * @returns {number} Returns the number.
             * @example
             *
             * _.toNumber(3.2);
             * // => 3.2
             *
             * _.toNumber(Number.MIN_VALUE);
             * // => 5e-324
             *
             * _.toNumber(Infinity);
             * // => Infinity
             *
             * _.toNumber('3.2');
             * // => 3.2
             */
            function toNumber(value) {
                if (typeof value == 'number') {
                    return value;
                }
                if (isSymbol(value)) {
                    return NAN;
                }
                if (isObject(value)) {
                    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
                    value = isObject(other) ? other + '' : other;
                }
                if (typeof value != 'string') {
                    return value === 0 ? value : +value;
                }
                value = baseTrim(value);
                var isBinary = reIsBinary.test(value);
                return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
            }

            /**
             * Converts `value` to a plain object flattening inherited enumerable string
             * keyed properties of `value` to own properties of the plain object.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Lang
             * @param {*} value The value to convert.
             * @returns {Object} Returns the converted plain object.
             * @example
             *
             * function Foo() {
             *   this.b = 2;
             * }
             *
             * Foo.prototype.c = 3;
             *
             * _.assign({ 'a': 1 }, new Foo);
             * // => { 'a': 1, 'b': 2 }
             *
             * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
             * // => { 'a': 1, 'b': 2, 'c': 3 }
             */
            function toPlainObject(value) {
                return copyObject(value, keysIn(value));
            }

            /**
             * Converts `value` to a safe integer. A safe integer can be compared and
             * represented correctly.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to convert.
             * @returns {number} Returns the converted integer.
             * @example
             *
             * _.toSafeInteger(3.2);
             * // => 3
             *
             * _.toSafeInteger(Number.MIN_VALUE);
             * // => 0
             *
             * _.toSafeInteger(Infinity);
             * // => 9007199254740991
             *
             * _.toSafeInteger('3.2');
             * // => 3
             */
            function toSafeInteger(value) {
                return value ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER) : value === 0 ? value : 0;
            }

            /**
             * Converts `value` to a string. An empty string is returned for `null`
             * and `undefined` values. The sign of `-0` is preserved.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to convert.
             * @returns {string} Returns the converted string.
             * @example
             *
             * _.toString(null);
             * // => ''
             *
             * _.toString(-0);
             * // => '-0'
             *
             * _.toString([1, 2, 3]);
             * // => '1,2,3'
             */
            function toString(value) {
                return value == null ? '' : baseToString(value);
            }

            /*------------------------------------------------------------------------*/

            /**
             * Assigns own enumerable string keyed properties of source objects to the
             * destination object. Source objects are applied from left to right.
             * Subsequent sources overwrite property assignments of previous sources.
             *
             * **Note:** This method mutates `object` and is loosely based on
             * [`Object.assign`](https://mdn.io/Object/assign).
             *
             * @static
             * @memberOf _
             * @since 0.10.0
             * @category Object
             * @param {Object} object The destination object.
             * @param {...Object} [sources] The source objects.
             * @returns {Object} Returns `object`.
             * @see _.assignIn
             * @example
             *
             * function Foo() {
             *   this.a = 1;
             * }
             *
             * function Bar() {
             *   this.c = 3;
             * }
             *
             * Foo.prototype.b = 2;
             * Bar.prototype.d = 4;
             *
             * _.assign({ 'a': 0 }, new Foo, new Bar);
             * // => { 'a': 1, 'c': 3 }
             */
            var assign = createAssigner(function (object, source) {
                if (isPrototype(source) || isArrayLike(source)) {
                    copyObject(source, keys(source), object);
                    return;
                }
                for (var key in source) {
                    if (hasOwnProperty.call(source, key)) {
                        assignValue(object, key, source[key]);
                    }
                }
            });

            /**
             * This method is like `_.assign` except that it iterates over own and
             * inherited source properties.
             *
             * **Note:** This method mutates `object`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @alias extend
             * @category Object
             * @param {Object} object The destination object.
             * @param {...Object} [sources] The source objects.
             * @returns {Object} Returns `object`.
             * @see _.assign
             * @example
             *
             * function Foo() {
             *   this.a = 1;
             * }
             *
             * function Bar() {
             *   this.c = 3;
             * }
             *
             * Foo.prototype.b = 2;
             * Bar.prototype.d = 4;
             *
             * _.assignIn({ 'a': 0 }, new Foo, new Bar);
             * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
             */
            var assignIn = createAssigner(function (object, source) {
                copyObject(source, keysIn(source), object);
            });

            /**
             * This method is like `_.assignIn` except that it accepts `customizer`
             * which is invoked to produce the assigned values. If `customizer` returns
             * `undefined`, assignment is handled by the method instead. The `customizer`
             * is invoked with five arguments: (objValue, srcValue, key, object, source).
             *
             * **Note:** This method mutates `object`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @alias extendWith
             * @category Object
             * @param {Object} object The destination object.
             * @param {...Object} sources The source objects.
             * @param {Function} [customizer] The function to customize assigned values.
             * @returns {Object} Returns `object`.
             * @see _.assignWith
             * @example
             *
             * function customizer(objValue, srcValue) {
             *   return _.isUndefined(objValue) ? srcValue : objValue;
             * }
             *
             * var defaults = _.partialRight(_.assignInWith, customizer);
             *
             * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
             * // => { 'a': 1, 'b': 2 }
             */
            var assignInWith = createAssigner(function (object, source, srcIndex, customizer) {
                copyObject(source, keysIn(source), object, customizer);
            });

            /**
             * This method is like `_.assign` except that it accepts `customizer`
             * which is invoked to produce the assigned values. If `customizer` returns
             * `undefined`, assignment is handled by the method instead. The `customizer`
             * is invoked with five arguments: (objValue, srcValue, key, object, source).
             *
             * **Note:** This method mutates `object`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Object
             * @param {Object} object The destination object.
             * @param {...Object} sources The source objects.
             * @param {Function} [customizer] The function to customize assigned values.
             * @returns {Object} Returns `object`.
             * @see _.assignInWith
             * @example
             *
             * function customizer(objValue, srcValue) {
             *   return _.isUndefined(objValue) ? srcValue : objValue;
             * }
             *
             * var defaults = _.partialRight(_.assignWith, customizer);
             *
             * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
             * // => { 'a': 1, 'b': 2 }
             */
            var assignWith = createAssigner(function (object, source, srcIndex, customizer) {
                copyObject(source, keys(source), object, customizer);
            });

            /**
             * Creates an array of values corresponding to `paths` of `object`.
             *
             * @static
             * @memberOf _
             * @since 1.0.0
             * @category Object
             * @param {Object} object The object to iterate over.
             * @param {...(string|string[])} [paths] The property paths to pick.
             * @returns {Array} Returns the picked values.
             * @example
             *
             * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
             *
             * _.at(object, ['a[0].b.c', 'a[1]']);
             * // => [3, 4]
             */
            var at = flatRest(baseAt);

            /**
             * Creates an object that inherits from the `prototype` object. If a
             * `properties` object is given, its own enumerable string keyed properties
             * are assigned to the created object.
             *
             * @static
             * @memberOf _
             * @since 2.3.0
             * @category Object
             * @param {Object} prototype The object to inherit from.
             * @param {Object} [properties] The properties to assign to the object.
             * @returns {Object} Returns the new object.
             * @example
             *
             * function Shape() {
             *   this.x = 0;
             *   this.y = 0;
             * }
             *
             * function Circle() {
             *   Shape.call(this);
             * }
             *
             * Circle.prototype = _.create(Shape.prototype, {
             *   'constructor': Circle
             * });
             *
             * var circle = new Circle;
             * circle instanceof Circle;
             * // => true
             *
             * circle instanceof Shape;
             * // => true
             */
            function create(prototype, properties) {
                var result = baseCreate(prototype);
                return properties == null ? result : baseAssign(result, properties);
            }

            /**
             * Assigns own and inherited enumerable string keyed properties of source
             * objects to the destination object for all destination properties that
             * resolve to `undefined`. Source objects are applied from left to right.
             * Once a property is set, additional values of the same property are ignored.
             *
             * **Note:** This method mutates `object`.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Object
             * @param {Object} object The destination object.
             * @param {...Object} [sources] The source objects.
             * @returns {Object} Returns `object`.
             * @see _.defaultsDeep
             * @example
             *
             * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
             * // => { 'a': 1, 'b': 2 }
             */
            var defaults = baseRest(function (object, sources) {
                object = Object(object);

                var index = -1;
                var length = sources.length;
                var guard = length > 2 ? sources[2] : undefined$1;

                if (guard && isIterateeCall(sources[0], sources[1], guard)) {
                    length = 1;
                }

                while (++index < length) {
                    var source = sources[index];
                    var props = keysIn(source);
                    var propsIndex = -1;
                    var propsLength = props.length;

                    while (++propsIndex < propsLength) {
                        var key = props[propsIndex];
                        var value = object[key];

                        if (value === undefined$1 || (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {
                            object[key] = source[key];
                        }
                    }
                }

                return object;
            });

            /**
             * This method is like `_.defaults` except that it recursively assigns
             * default properties.
             *
             * **Note:** This method mutates `object`.
             *
             * @static
             * @memberOf _
             * @since 3.10.0
             * @category Object
             * @param {Object} object The destination object.
             * @param {...Object} [sources] The source objects.
             * @returns {Object} Returns `object`.
             * @see _.defaults
             * @example
             *
             * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
             * // => { 'a': { 'b': 2, 'c': 3 } }
             */
            var defaultsDeep = baseRest(function (args) {
                args.push(undefined$1, customDefaultsMerge);
                return apply(mergeWith, undefined$1, args);
            });

            /**
             * This method is like `_.find` except that it returns the key of the first
             * element `predicate` returns truthy for instead of the element itself.
             *
             * @static
             * @memberOf _
             * @since 1.1.0
             * @category Object
             * @param {Object} object The object to inspect.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @returns {string|undefined} Returns the key of the matched element,
             *  else `undefined`.
             * @example
             *
             * var users = {
             *   'barney':  { 'age': 36, 'active': true },
             *   'fred':    { 'age': 40, 'active': false },
             *   'pebbles': { 'age': 1,  'active': true }
             * };
             *
             * _.findKey(users, function(o) { return o.age < 40; });
             * // => 'barney' (iteration order is not guaranteed)
             *
             * // The `_.matches` iteratee shorthand.
             * _.findKey(users, { 'age': 1, 'active': true });
             * // => 'pebbles'
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.findKey(users, ['active', false]);
             * // => 'fred'
             *
             * // The `_.property` iteratee shorthand.
             * _.findKey(users, 'active');
             * // => 'barney'
             */
            function findKey(object, predicate) {
                return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
            }

            /**
             * This method is like `_.findKey` except that it iterates over elements of
             * a collection in the opposite order.
             *
             * @static
             * @memberOf _
             * @since 2.0.0
             * @category Object
             * @param {Object} object The object to inspect.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @returns {string|undefined} Returns the key of the matched element,
             *  else `undefined`.
             * @example
             *
             * var users = {
             *   'barney':  { 'age': 36, 'active': true },
             *   'fred':    { 'age': 40, 'active': false },
             *   'pebbles': { 'age': 1,  'active': true }
             * };
             *
             * _.findLastKey(users, function(o) { return o.age < 40; });
             * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
             *
             * // The `_.matches` iteratee shorthand.
             * _.findLastKey(users, { 'age': 36, 'active': true });
             * // => 'barney'
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.findLastKey(users, ['active', false]);
             * // => 'fred'
             *
             * // The `_.property` iteratee shorthand.
             * _.findLastKey(users, 'active');
             * // => 'pebbles'
             */
            function findLastKey(object, predicate) {
                return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
            }

            /**
             * Iterates over own and inherited enumerable string keyed properties of an
             * object and invokes `iteratee` for each property. The iteratee is invoked
             * with three arguments: (value, key, object). Iteratee functions may exit
             * iteration early by explicitly returning `false`.
             *
             * @static
             * @memberOf _
             * @since 0.3.0
             * @category Object
             * @param {Object} object The object to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @returns {Object} Returns `object`.
             * @see _.forInRight
             * @example
             *
             * function Foo() {
             *   this.a = 1;
             *   this.b = 2;
             * }
             *
             * Foo.prototype.c = 3;
             *
             * _.forIn(new Foo, function(value, key) {
             *   console.log(key);
             * });
             * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
             */
            function forIn(object, iteratee) {
                return object == null ? object : baseFor(object, getIteratee(iteratee, 3), keysIn);
            }

            /**
             * This method is like `_.forIn` except that it iterates over properties of
             * `object` in the opposite order.
             *
             * @static
             * @memberOf _
             * @since 2.0.0
             * @category Object
             * @param {Object} object The object to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @returns {Object} Returns `object`.
             * @see _.forIn
             * @example
             *
             * function Foo() {
             *   this.a = 1;
             *   this.b = 2;
             * }
             *
             * Foo.prototype.c = 3;
             *
             * _.forInRight(new Foo, function(value, key) {
             *   console.log(key);
             * });
             * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
             */
            function forInRight(object, iteratee) {
                return object == null ? object : baseForRight(object, getIteratee(iteratee, 3), keysIn);
            }

            /**
             * Iterates over own enumerable string keyed properties of an object and
             * invokes `iteratee` for each property. The iteratee is invoked with three
             * arguments: (value, key, object). Iteratee functions may exit iteration
             * early by explicitly returning `false`.
             *
             * @static
             * @memberOf _
             * @since 0.3.0
             * @category Object
             * @param {Object} object The object to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @returns {Object} Returns `object`.
             * @see _.forOwnRight
             * @example
             *
             * function Foo() {
             *   this.a = 1;
             *   this.b = 2;
             * }
             *
             * Foo.prototype.c = 3;
             *
             * _.forOwn(new Foo, function(value, key) {
             *   console.log(key);
             * });
             * // => Logs 'a' then 'b' (iteration order is not guaranteed).
             */
            function forOwn(object, iteratee) {
                return object && baseForOwn(object, getIteratee(iteratee, 3));
            }

            /**
             * This method is like `_.forOwn` except that it iterates over properties of
             * `object` in the opposite order.
             *
             * @static
             * @memberOf _
             * @since 2.0.0
             * @category Object
             * @param {Object} object The object to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @returns {Object} Returns `object`.
             * @see _.forOwn
             * @example
             *
             * function Foo() {
             *   this.a = 1;
             *   this.b = 2;
             * }
             *
             * Foo.prototype.c = 3;
             *
             * _.forOwnRight(new Foo, function(value, key) {
             *   console.log(key);
             * });
             * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
             */
            function forOwnRight(object, iteratee) {
                return object && baseForOwnRight(object, getIteratee(iteratee, 3));
            }

            /**
             * Creates an array of function property names from own enumerable properties
             * of `object`.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Object
             * @param {Object} object The object to inspect.
             * @returns {Array} Returns the function names.
             * @see _.functionsIn
             * @example
             *
             * function Foo() {
             *   this.a = _.constant('a');
             *   this.b = _.constant('b');
             * }
             *
             * Foo.prototype.c = _.constant('c');
             *
             * _.functions(new Foo);
             * // => ['a', 'b']
             */
            function functions(object) {
                return object == null ? [] : baseFunctions(object, keys(object));
            }

            /**
             * Creates an array of function property names from own and inherited
             * enumerable properties of `object`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Object
             * @param {Object} object The object to inspect.
             * @returns {Array} Returns the function names.
             * @see _.functions
             * @example
             *
             * function Foo() {
             *   this.a = _.constant('a');
             *   this.b = _.constant('b');
             * }
             *
             * Foo.prototype.c = _.constant('c');
             *
             * _.functionsIn(new Foo);
             * // => ['a', 'b', 'c']
             */
            function functionsIn(object) {
                return object == null ? [] : baseFunctions(object, keysIn(object));
            }

            /**
             * Gets the value at `path` of `object`. If the resolved value is
             * `undefined`, the `defaultValue` is returned in its place.
             *
             * @static
             * @memberOf _
             * @since 3.7.0
             * @category Object
             * @param {Object} object The object to query.
             * @param {Array|string} path The path of the property to get.
             * @param {*} [defaultValue] The value returned for `undefined` resolved values.
             * @returns {*} Returns the resolved value.
             * @example
             *
             * var object = { 'a': [{ 'b': { 'c': 3 } }] };
             *
             * _.get(object, 'a[0].b.c');
             * // => 3
             *
             * _.get(object, ['a', '0', 'b', 'c']);
             * // => 3
             *
             * _.get(object, 'a.b.c', 'default');
             * // => 'default'
             */
            function get(object, path, defaultValue) {
                var result = object == null ? undefined$1 : baseGet(object, path);
                return result === undefined$1 ? defaultValue : result;
            }

            /**
             * Checks if `path` is a direct property of `object`.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Object
             * @param {Object} object The object to query.
             * @param {Array|string} path The path to check.
             * @returns {boolean} Returns `true` if `path` exists, else `false`.
             * @example
             *
             * var object = { 'a': { 'b': 2 } };
             * var other = _.create({ 'a': _.create({ 'b': 2 }) });
             *
             * _.has(object, 'a');
             * // => true
             *
             * _.has(object, 'a.b');
             * // => true
             *
             * _.has(object, ['a', 'b']);
             * // => true
             *
             * _.has(other, 'a');
             * // => false
             */
            function has(object, path) {
                return object != null && hasPath(object, path, baseHas);
            }

            /**
             * Checks if `path` is a direct or inherited property of `object`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Object
             * @param {Object} object The object to query.
             * @param {Array|string} path The path to check.
             * @returns {boolean} Returns `true` if `path` exists, else `false`.
             * @example
             *
             * var object = _.create({ 'a': _.create({ 'b': 2 }) });
             *
             * _.hasIn(object, 'a');
             * // => true
             *
             * _.hasIn(object, 'a.b');
             * // => true
             *
             * _.hasIn(object, ['a', 'b']);
             * // => true
             *
             * _.hasIn(object, 'b');
             * // => false
             */
            function hasIn(object, path) {
                return object != null && hasPath(object, path, baseHasIn);
            }

            /**
             * Creates an object composed of the inverted keys and values of `object`.
             * If `object` contains duplicate values, subsequent values overwrite
             * property assignments of previous values.
             *
             * @static
             * @memberOf _
             * @since 0.7.0
             * @category Object
             * @param {Object} object The object to invert.
             * @returns {Object} Returns the new inverted object.
             * @example
             *
             * var object = { 'a': 1, 'b': 2, 'c': 1 };
             *
             * _.invert(object);
             * // => { '1': 'c', '2': 'b' }
             */
            var invert = createInverter(function (result, value, key) {
                if (value != null && typeof value.toString != 'function') {
                    value = nativeObjectToString.call(value);
                }

                result[value] = key;
            }, constant(identity));

            /**
             * This method is like `_.invert` except that the inverted object is generated
             * from the results of running each element of `object` thru `iteratee`. The
             * corresponding inverted value of each inverted key is an array of keys
             * responsible for generating the inverted value. The iteratee is invoked
             * with one argument: (value).
             *
             * @static
             * @memberOf _
             * @since 4.1.0
             * @category Object
             * @param {Object} object The object to invert.
             * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
             * @returns {Object} Returns the new inverted object.
             * @example
             *
             * var object = { 'a': 1, 'b': 2, 'c': 1 };
             *
             * _.invertBy(object);
             * // => { '1': ['a', 'c'], '2': ['b'] }
             *
             * _.invertBy(object, function(value) {
             *   return 'group' + value;
             * });
             * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
             */
            var invertBy = createInverter(function (result, value, key) {
                if (value != null && typeof value.toString != 'function') {
                    value = nativeObjectToString.call(value);
                }

                if (hasOwnProperty.call(result, value)) {
                    result[value].push(key);
                } else {
                    result[value] = [key];
                }
            }, getIteratee);

            /**
             * Invokes the method at `path` of `object`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Object
             * @param {Object} object The object to query.
             * @param {Array|string} path The path of the method to invoke.
             * @param {...*} [args] The arguments to invoke the method with.
             * @returns {*} Returns the result of the invoked method.
             * @example
             *
             * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
             *
             * _.invoke(object, 'a[0].b.c.slice', 1, 3);
             * // => [2, 3]
             */
            var invoke = baseRest(baseInvoke);

            /**
             * Creates an array of the own enumerable property names of `object`.
             *
             * **Note:** Non-object values are coerced to objects. See the
             * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
             * for more details.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Object
             * @param {Object} object The object to query.
             * @returns {Array} Returns the array of property names.
             * @example
             *
             * function Foo() {
             *   this.a = 1;
             *   this.b = 2;
             * }
             *
             * Foo.prototype.c = 3;
             *
             * _.keys(new Foo);
             * // => ['a', 'b'] (iteration order is not guaranteed)
             *
             * _.keys('hi');
             * // => ['0', '1']
             */
            function keys(object) {
                return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
            }

            /**
             * Creates an array of the own and inherited enumerable property names of `object`.
             *
             * **Note:** Non-object values are coerced to objects.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Object
             * @param {Object} object The object to query.
             * @returns {Array} Returns the array of property names.
             * @example
             *
             * function Foo() {
             *   this.a = 1;
             *   this.b = 2;
             * }
             *
             * Foo.prototype.c = 3;
             *
             * _.keysIn(new Foo);
             * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
             */
            function keysIn(object) {
                return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
            }

            /**
             * The opposite of `_.mapValues`; this method creates an object with the
             * same values as `object` and keys generated by running each own enumerable
             * string keyed property of `object` thru `iteratee`. The iteratee is invoked
             * with three arguments: (value, key, object).
             *
             * @static
             * @memberOf _
             * @since 3.8.0
             * @category Object
             * @param {Object} object The object to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @returns {Object} Returns the new mapped object.
             * @see _.mapValues
             * @example
             *
             * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
             *   return key + value;
             * });
             * // => { 'a1': 1, 'b2': 2 }
             */
            function mapKeys(object, iteratee) {
                var result = {};
                iteratee = getIteratee(iteratee, 3);

                baseForOwn(object, function (value, key, object) {
                    baseAssignValue(result, iteratee(value, key, object), value);
                });
                return result;
            }

            /**
             * Creates an object with the same keys as `object` and values generated
             * by running each own enumerable string keyed property of `object` thru
             * `iteratee`. The iteratee is invoked with three arguments:
             * (value, key, object).
             *
             * @static
             * @memberOf _
             * @since 2.4.0
             * @category Object
             * @param {Object} object The object to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @returns {Object} Returns the new mapped object.
             * @see _.mapKeys
             * @example
             *
             * var users = {
             *   'fred':    { 'user': 'fred',    'age': 40 },
             *   'pebbles': { 'user': 'pebbles', 'age': 1 }
             * };
             *
             * _.mapValues(users, function(o) { return o.age; });
             * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
             *
             * // The `_.property` iteratee shorthand.
             * _.mapValues(users, 'age');
             * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
             */
            function mapValues(object, iteratee) {
                var result = {};
                iteratee = getIteratee(iteratee, 3);

                baseForOwn(object, function (value, key, object) {
                    baseAssignValue(result, key, iteratee(value, key, object));
                });
                return result;
            }

            /**
             * This method is like `_.assign` except that it recursively merges own and
             * inherited enumerable string keyed properties of source objects into the
             * destination object. Source properties that resolve to `undefined` are
             * skipped if a destination value exists. Array and plain object properties
             * are merged recursively. Other objects and value types are overridden by
             * assignment. Source objects are applied from left to right. Subsequent
             * sources overwrite property assignments of previous sources.
             *
             * **Note:** This method mutates `object`.
             *
             * @static
             * @memberOf _
             * @since 0.5.0
             * @category Object
             * @param {Object} object The destination object.
             * @param {...Object} [sources] The source objects.
             * @returns {Object} Returns `object`.
             * @example
             *
             * var object = {
             *   'a': [{ 'b': 2 }, { 'd': 4 }]
             * };
             *
             * var other = {
             *   'a': [{ 'c': 3 }, { 'e': 5 }]
             * };
             *
             * _.merge(object, other);
             * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
             */
            var merge = createAssigner(function (object, source, srcIndex) {
                baseMerge(object, source, srcIndex);
            });

            /**
             * This method is like `_.merge` except that it accepts `customizer` which
             * is invoked to produce the merged values of the destination and source
             * properties. If `customizer` returns `undefined`, merging is handled by the
             * method instead. The `customizer` is invoked with six arguments:
             * (objValue, srcValue, key, object, source, stack).
             *
             * **Note:** This method mutates `object`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Object
             * @param {Object} object The destination object.
             * @param {...Object} sources The source objects.
             * @param {Function} customizer The function to customize assigned values.
             * @returns {Object} Returns `object`.
             * @example
             *
             * function customizer(objValue, srcValue) {
             *   if (_.isArray(objValue)) {
             *     return objValue.concat(srcValue);
             *   }
             * }
             *
             * var object = { 'a': [1], 'b': [2] };
             * var other = { 'a': [3], 'b': [4] };
             *
             * _.mergeWith(object, other, customizer);
             * // => { 'a': [1, 3], 'b': [2, 4] }
             */
            var mergeWith = createAssigner(function (object, source, srcIndex, customizer) {
                baseMerge(object, source, srcIndex, customizer);
            });

            /**
             * The opposite of `_.pick`; this method creates an object composed of the
             * own and inherited enumerable property paths of `object` that are not omitted.
             *
             * **Note:** This method is considerably slower than `_.pick`.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Object
             * @param {Object} object The source object.
             * @param {...(string|string[])} [paths] The property paths to omit.
             * @returns {Object} Returns the new object.
             * @example
             *
             * var object = { 'a': 1, 'b': '2', 'c': 3 };
             *
             * _.omit(object, ['a', 'c']);
             * // => { 'b': '2' }
             */
            var omit = flatRest(function (object, paths) {
                var result = {};
                if (object == null) {
                    return result;
                }
                var isDeep = false;
                paths = arrayMap(paths, function (path) {
                    path = castPath(path, object);
                    isDeep || (isDeep = path.length > 1);
                    return path;
                });
                copyObject(object, getAllKeysIn(object), result);
                if (isDeep) {
                    result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
                }
                var length = paths.length;
                while (length--) {
                    baseUnset(result, paths[length]);
                }
                return result;
            });

            /**
             * The opposite of `_.pickBy`; this method creates an object composed of
             * the own and inherited enumerable string keyed properties of `object` that
             * `predicate` doesn't return truthy for. The predicate is invoked with two
             * arguments: (value, key).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Object
             * @param {Object} object The source object.
             * @param {Function} [predicate=_.identity] The function invoked per property.
             * @returns {Object} Returns the new object.
             * @example
             *
             * var object = { 'a': 1, 'b': '2', 'c': 3 };
             *
             * _.omitBy(object, _.isNumber);
             * // => { 'b': '2' }
             */
            function omitBy(object, predicate) {
                return pickBy(object, negate(getIteratee(predicate)));
            }

            /**
             * Creates an object composed of the picked `object` properties.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Object
             * @param {Object} object The source object.
             * @param {...(string|string[])} [paths] The property paths to pick.
             * @returns {Object} Returns the new object.
             * @example
             *
             * var object = { 'a': 1, 'b': '2', 'c': 3 };
             *
             * _.pick(object, ['a', 'c']);
             * // => { 'a': 1, 'c': 3 }
             */
            var pick = flatRest(function (object, paths) {
                return object == null ? {} : basePick(object, paths);
            });

            /**
             * Creates an object composed of the `object` properties `predicate` returns
             * truthy for. The predicate is invoked with two arguments: (value, key).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Object
             * @param {Object} object The source object.
             * @param {Function} [predicate=_.identity] The function invoked per property.
             * @returns {Object} Returns the new object.
             * @example
             *
             * var object = { 'a': 1, 'b': '2', 'c': 3 };
             *
             * _.pickBy(object, _.isNumber);
             * // => { 'a': 1, 'c': 3 }
             */
            function pickBy(object, predicate) {
                if (object == null) {
                    return {};
                }
                var props = arrayMap(getAllKeysIn(object), function (prop) {
                    return [prop];
                });
                predicate = getIteratee(predicate);
                return basePickBy(object, props, function (value, path) {
                    return predicate(value, path[0]);
                });
            }

            /**
             * This method is like `_.get` except that if the resolved value is a
             * function it's invoked with the `this` binding of its parent object and
             * its result is returned.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Object
             * @param {Object} object The object to query.
             * @param {Array|string} path The path of the property to resolve.
             * @param {*} [defaultValue] The value returned for `undefined` resolved values.
             * @returns {*} Returns the resolved value.
             * @example
             *
             * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
             *
             * _.result(object, 'a[0].b.c1');
             * // => 3
             *
             * _.result(object, 'a[0].b.c2');
             * // => 4
             *
             * _.result(object, 'a[0].b.c3', 'default');
             * // => 'default'
             *
             * _.result(object, 'a[0].b.c3', _.constant('default'));
             * // => 'default'
             */
            function result(object, path, defaultValue) {
                path = castPath(path, object);

                var index = -1,
                    length = path.length;

                // Ensure the loop is entered when path is empty.
                if (!length) {
                    length = 1;
                    object = undefined$1;
                }
                while (++index < length) {
                    var value = object == null ? undefined$1 : object[toKey(path[index])];
                    if (value === undefined$1) {
                        index = length;
                        value = defaultValue;
                    }
                    object = isFunction(value) ? value.call(object) : value;
                }
                return object;
            }

            /**
             * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
             * it's created. Arrays are created for missing index properties while objects
             * are created for all other missing properties. Use `_.setWith` to customize
             * `path` creation.
             *
             * **Note:** This method mutates `object`.
             *
             * @static
             * @memberOf _
             * @since 3.7.0
             * @category Object
             * @param {Object} object The object to modify.
             * @param {Array|string} path The path of the property to set.
             * @param {*} value The value to set.
             * @returns {Object} Returns `object`.
             * @example
             *
             * var object = { 'a': [{ 'b': { 'c': 3 } }] };
             *
             * _.set(object, 'a[0].b.c', 4);
             * console.log(object.a[0].b.c);
             * // => 4
             *
             * _.set(object, ['x', '0', 'y', 'z'], 5);
             * console.log(object.x[0].y.z);
             * // => 5
             */
            function set(object, path, value) {
                return object == null ? object : baseSet(object, path, value);
            }

            /**
             * This method is like `_.set` except that it accepts `customizer` which is
             * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
             * path creation is handled by the method instead. The `customizer` is invoked
             * with three arguments: (nsValue, key, nsObject).
             *
             * **Note:** This method mutates `object`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Object
             * @param {Object} object The object to modify.
             * @param {Array|string} path The path of the property to set.
             * @param {*} value The value to set.
             * @param {Function} [customizer] The function to customize assigned values.
             * @returns {Object} Returns `object`.
             * @example
             *
             * var object = {};
             *
             * _.setWith(object, '[0][1]', 'a', Object);
             * // => { '0': { '1': 'a' } }
             */
            function setWith(object, path, value, customizer) {
                customizer = typeof customizer == 'function' ? customizer : undefined$1;
                return object == null ? object : baseSet(object, path, value, customizer);
            }

            /**
             * Creates an array of own enumerable string keyed-value pairs for `object`
             * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
             * entries are returned.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @alias entries
             * @category Object
             * @param {Object} object The object to query.
             * @returns {Array} Returns the key-value pairs.
             * @example
             *
             * function Foo() {
             *   this.a = 1;
             *   this.b = 2;
             * }
             *
             * Foo.prototype.c = 3;
             *
             * _.toPairs(new Foo);
             * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
             */
            var toPairs = createToPairs(keys);

            /**
             * Creates an array of own and inherited enumerable string keyed-value pairs
             * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
             * or set, its entries are returned.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @alias entriesIn
             * @category Object
             * @param {Object} object The object to query.
             * @returns {Array} Returns the key-value pairs.
             * @example
             *
             * function Foo() {
             *   this.a = 1;
             *   this.b = 2;
             * }
             *
             * Foo.prototype.c = 3;
             *
             * _.toPairsIn(new Foo);
             * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
             */
            var toPairsIn = createToPairs(keysIn);

            /**
             * An alternative to `_.reduce`; this method transforms `object` to a new
             * `accumulator` object which is the result of running each of its own
             * enumerable string keyed properties thru `iteratee`, with each invocation
             * potentially mutating the `accumulator` object. If `accumulator` is not
             * provided, a new object with the same `[[Prototype]]` will be used. The
             * iteratee is invoked with four arguments: (accumulator, value, key, object).
             * Iteratee functions may exit iteration early by explicitly returning `false`.
             *
             * @static
             * @memberOf _
             * @since 1.3.0
             * @category Object
             * @param {Object} object The object to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @param {*} [accumulator] The custom accumulator value.
             * @returns {*} Returns the accumulated value.
             * @example
             *
             * _.transform([2, 3, 4], function(result, n) {
             *   result.push(n *= n);
             *   return n % 2 == 0;
             * }, []);
             * // => [4, 9]
             *
             * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
             *   (result[value] || (result[value] = [])).push(key);
             * }, {});
             * // => { '1': ['a', 'c'], '2': ['b'] }
             */
            function transform(object, iteratee, accumulator) {
                var isArr = isArray(object),
                    isArrLike = isArr || isBuffer(object) || isTypedArray(object);

                iteratee = getIteratee(iteratee, 4);
                if (accumulator == null) {
                    var Ctor = object && object.constructor;
                    if (isArrLike) {
                        accumulator = isArr ? new Ctor() : [];
                    } else if (isObject(object)) {
                        accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
                    } else {
                        accumulator = {};
                    }
                }
                (isArrLike ? arrayEach : baseForOwn)(object, function (value, index, object) {
                    return iteratee(accumulator, value, index, object);
                });
                return accumulator;
            }

            /**
             * Removes the property at `path` of `object`.
             *
             * **Note:** This method mutates `object`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Object
             * @param {Object} object The object to modify.
             * @param {Array|string} path The path of the property to unset.
             * @returns {boolean} Returns `true` if the property is deleted, else `false`.
             * @example
             *
             * var object = { 'a': [{ 'b': { 'c': 7 } }] };
             * _.unset(object, 'a[0].b.c');
             * // => true
             *
             * console.log(object);
             * // => { 'a': [{ 'b': {} }] };
             *
             * _.unset(object, ['a', '0', 'b', 'c']);
             * // => true
             *
             * console.log(object);
             * // => { 'a': [{ 'b': {} }] };
             */
            function unset(object, path) {
                return object == null ? true : baseUnset(object, path);
            }

            /**
             * This method is like `_.set` except that accepts `updater` to produce the
             * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
             * is invoked with one argument: (value).
             *
             * **Note:** This method mutates `object`.
             *
             * @static
             * @memberOf _
             * @since 4.6.0
             * @category Object
             * @param {Object} object The object to modify.
             * @param {Array|string} path The path of the property to set.
             * @param {Function} updater The function to produce the updated value.
             * @returns {Object} Returns `object`.
             * @example
             *
             * var object = { 'a': [{ 'b': { 'c': 3 } }] };
             *
             * _.update(object, 'a[0].b.c', function(n) { return n * n; });
             * console.log(object.a[0].b.c);
             * // => 9
             *
             * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
             * console.log(object.x[0].y.z);
             * // => 0
             */
            function update(object, path, updater) {
                return object == null ? object : baseUpdate(object, path, castFunction(updater));
            }

            /**
             * This method is like `_.update` except that it accepts `customizer` which is
             * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
             * path creation is handled by the method instead. The `customizer` is invoked
             * with three arguments: (nsValue, key, nsObject).
             *
             * **Note:** This method mutates `object`.
             *
             * @static
             * @memberOf _
             * @since 4.6.0
             * @category Object
             * @param {Object} object The object to modify.
             * @param {Array|string} path The path of the property to set.
             * @param {Function} updater The function to produce the updated value.
             * @param {Function} [customizer] The function to customize assigned values.
             * @returns {Object} Returns `object`.
             * @example
             *
             * var object = {};
             *
             * _.updateWith(object, '[0][1]', _.constant('a'), Object);
             * // => { '0': { '1': 'a' } }
             */
            function updateWith(object, path, updater, customizer) {
                customizer = typeof customizer == 'function' ? customizer : undefined$1;
                return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
            }

            /**
             * Creates an array of the own enumerable string keyed property values of `object`.
             *
             * **Note:** Non-object values are coerced to objects.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Object
             * @param {Object} object The object to query.
             * @returns {Array} Returns the array of property values.
             * @example
             *
             * function Foo() {
             *   this.a = 1;
             *   this.b = 2;
             * }
             *
             * Foo.prototype.c = 3;
             *
             * _.values(new Foo);
             * // => [1, 2] (iteration order is not guaranteed)
             *
             * _.values('hi');
             * // => ['h', 'i']
             */
            function values(object) {
                return object == null ? [] : baseValues(object, keys(object));
            }

            /**
             * Creates an array of the own and inherited enumerable string keyed property
             * values of `object`.
             *
             * **Note:** Non-object values are coerced to objects.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Object
             * @param {Object} object The object to query.
             * @returns {Array} Returns the array of property values.
             * @example
             *
             * function Foo() {
             *   this.a = 1;
             *   this.b = 2;
             * }
             *
             * Foo.prototype.c = 3;
             *
             * _.valuesIn(new Foo);
             * // => [1, 2, 3] (iteration order is not guaranteed)
             */
            function valuesIn(object) {
                return object == null ? [] : baseValues(object, keysIn(object));
            }

            /*------------------------------------------------------------------------*/

            /**
             * Clamps `number` within the inclusive `lower` and `upper` bounds.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Number
             * @param {number} number The number to clamp.
             * @param {number} [lower] The lower bound.
             * @param {number} upper The upper bound.
             * @returns {number} Returns the clamped number.
             * @example
             *
             * _.clamp(-10, -5, 5);
             * // => -5
             *
             * _.clamp(10, -5, 5);
             * // => 5
             */
            function clamp(number, lower, upper) {
                if (upper === undefined$1) {
                    upper = lower;
                    lower = undefined$1;
                }
                if (upper !== undefined$1) {
                    upper = toNumber(upper);
                    upper = upper === upper ? upper : 0;
                }
                if (lower !== undefined$1) {
                    lower = toNumber(lower);
                    lower = lower === lower ? lower : 0;
                }
                return baseClamp(toNumber(number), lower, upper);
            }

            /**
             * Checks if `n` is between `start` and up to, but not including, `end`. If
             * `end` is not specified, it's set to `start` with `start` then set to `0`.
             * If `start` is greater than `end` the params are swapped to support
             * negative ranges.
             *
             * @static
             * @memberOf _
             * @since 3.3.0
             * @category Number
             * @param {number} number The number to check.
             * @param {number} [start=0] The start of the range.
             * @param {number} end The end of the range.
             * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
             * @see _.range, _.rangeRight
             * @example
             *
             * _.inRange(3, 2, 4);
             * // => true
             *
             * _.inRange(4, 8);
             * // => true
             *
             * _.inRange(4, 2);
             * // => false
             *
             * _.inRange(2, 2);
             * // => false
             *
             * _.inRange(1.2, 2);
             * // => true
             *
             * _.inRange(5.2, 4);
             * // => false
             *
             * _.inRange(-3, -2, -6);
             * // => true
             */
            function inRange(number, start, end) {
                start = toFinite(start);
                if (end === undefined$1) {
                    end = start;
                    start = 0;
                } else {
                    end = toFinite(end);
                }
                number = toNumber(number);
                return baseInRange(number, start, end);
            }

            /**
             * Produces a random number between the inclusive `lower` and `upper` bounds.
             * If only one argument is provided a number between `0` and the given number
             * is returned. If `floating` is `true`, or either `lower` or `upper` are
             * floats, a floating-point number is returned instead of an integer.
             *
             * **Note:** JavaScript follows the IEEE-754 standard for resolving
             * floating-point values which can produce unexpected results.
             *
             * @static
             * @memberOf _
             * @since 0.7.0
             * @category Number
             * @param {number} [lower=0] The lower bound.
             * @param {number} [upper=1] The upper bound.
             * @param {boolean} [floating] Specify returning a floating-point number.
             * @returns {number} Returns the random number.
             * @example
             *
             * _.random(0, 5);
             * // => an integer between 0 and 5
             *
             * _.random(5);
             * // => also an integer between 0 and 5
             *
             * _.random(5, true);
             * // => a floating-point number between 0 and 5
             *
             * _.random(1.2, 5.2);
             * // => a floating-point number between 1.2 and 5.2
             */
            function random(lower, upper, floating) {
                if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
                    upper = floating = undefined$1;
                }
                if (floating === undefined$1) {
                    if (typeof upper == 'boolean') {
                        floating = upper;
                        upper = undefined$1;
                    } else if (typeof lower == 'boolean') {
                        floating = lower;
                        lower = undefined$1;
                    }
                }
                if (lower === undefined$1 && upper === undefined$1) {
                    lower = 0;
                    upper = 1;
                } else {
                    lower = toFinite(lower);
                    if (upper === undefined$1) {
                        upper = lower;
                        lower = 0;
                    } else {
                        upper = toFinite(upper);
                    }
                }
                if (lower > upper) {
                    var temp = lower;
                    lower = upper;
                    upper = temp;
                }
                if (floating || lower % 1 || upper % 1) {
                    var rand = nativeRandom();
                    return nativeMin(lower + rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1))), upper);
                }
                return baseRandom(lower, upper);
            }

            /*------------------------------------------------------------------------*/

            /**
             * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category String
             * @param {string} [string=''] The string to convert.
             * @returns {string} Returns the camel cased string.
             * @example
             *
             * _.camelCase('Foo Bar');
             * // => 'fooBar'
             *
             * _.camelCase('--foo-bar--');
             * // => 'fooBar'
             *
             * _.camelCase('__FOO_BAR__');
             * // => 'fooBar'
             */
            var camelCase = createCompounder(function (result, word, index) {
                word = word.toLowerCase();
                return result + (index ? capitalize(word) : word);
            });

            /**
             * Converts the first character of `string` to upper case and the remaining
             * to lower case.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category String
             * @param {string} [string=''] The string to capitalize.
             * @returns {string} Returns the capitalized string.
             * @example
             *
             * _.capitalize('FRED');
             * // => 'Fred'
             */
            function capitalize(string) {
                return upperFirst(toString(string).toLowerCase());
            }

            /**
             * Deburrs `string` by converting
             * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
             * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
             * letters to basic Latin letters and removing
             * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category String
             * @param {string} [string=''] The string to deburr.
             * @returns {string} Returns the deburred string.
             * @example
             *
             * _.deburr('déjà vu');
             * // => 'deja vu'
             */
            function deburr(string) {
                string = toString(string);
                return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
            }

            /**
             * Checks if `string` ends with the given target string.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category String
             * @param {string} [string=''] The string to inspect.
             * @param {string} [target] The string to search for.
             * @param {number} [position=string.length] The position to search up to.
             * @returns {boolean} Returns `true` if `string` ends with `target`,
             *  else `false`.
             * @example
             *
             * _.endsWith('abc', 'c');
             * // => true
             *
             * _.endsWith('abc', 'b');
             * // => false
             *
             * _.endsWith('abc', 'b', 2);
             * // => true
             */
            function endsWith(string, target, position) {
                string = toString(string);
                target = baseToString(target);

                var length = string.length;
                position = position === undefined$1 ? length : baseClamp(toInteger(position), 0, length);

                var end = position;
                position -= target.length;
                return position >= 0 && string.slice(position, end) == target;
            }

            /**
             * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
             * corresponding HTML entities.
             *
             * **Note:** No other characters are escaped. To escape additional
             * characters use a third-party library like [_he_](https://mths.be/he).
             *
             * Though the ">" character is escaped for symmetry, characters like
             * ">" and "/" don't need escaping in HTML and have no special meaning
             * unless they're part of a tag or unquoted attribute value. See
             * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
             * (under "semi-related fun fact") for more details.
             *
             * When working with HTML you should always
             * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
             * XSS vectors.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category String
             * @param {string} [string=''] The string to escape.
             * @returns {string} Returns the escaped string.
             * @example
             *
             * _.escape('fred, barney, & pebbles');
             * // => 'fred, barney, &amp; pebbles'
             */
            function escape(string) {
                string = toString(string);
                return string && reHasUnescapedHtml.test(string) ? string.replace(reUnescapedHtml, escapeHtmlChar) : string;
            }

            /**
             * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
             * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category String
             * @param {string} [string=''] The string to escape.
             * @returns {string} Returns the escaped string.
             * @example
             *
             * _.escapeRegExp('[lodash](https://lodash.com/)');
             * // => '\[lodash\]\(https://lodash\.com/\)'
             */
            function escapeRegExp(string) {
                string = toString(string);
                return string && reHasRegExpChar.test(string) ? string.replace(reRegExpChar, '\\$&') : string;
            }

            /**
             * Converts `string` to
             * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category String
             * @param {string} [string=''] The string to convert.
             * @returns {string} Returns the kebab cased string.
             * @example
             *
             * _.kebabCase('Foo Bar');
             * // => 'foo-bar'
             *
             * _.kebabCase('fooBar');
             * // => 'foo-bar'
             *
             * _.kebabCase('__FOO_BAR__');
             * // => 'foo-bar'
             */
            var kebabCase = createCompounder(function (result, word, index) {
                return result + (index ? '-' : '') + word.toLowerCase();
            });

            /**
             * Converts `string`, as space separated words, to lower case.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category String
             * @param {string} [string=''] The string to convert.
             * @returns {string} Returns the lower cased string.
             * @example
             *
             * _.lowerCase('--Foo-Bar--');
             * // => 'foo bar'
             *
             * _.lowerCase('fooBar');
             * // => 'foo bar'
             *
             * _.lowerCase('__FOO_BAR__');
             * // => 'foo bar'
             */
            var lowerCase = createCompounder(function (result, word, index) {
                return result + (index ? ' ' : '') + word.toLowerCase();
            });

            /**
             * Converts the first character of `string` to lower case.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category String
             * @param {string} [string=''] The string to convert.
             * @returns {string} Returns the converted string.
             * @example
             *
             * _.lowerFirst('Fred');
             * // => 'fred'
             *
             * _.lowerFirst('FRED');
             * // => 'fRED'
             */
            var lowerFirst = createCaseFirst('toLowerCase');

            /**
             * Pads `string` on the left and right sides if it's shorter than `length`.
             * Padding characters are truncated if they can't be evenly divided by `length`.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category String
             * @param {string} [string=''] The string to pad.
             * @param {number} [length=0] The padding length.
             * @param {string} [chars=' '] The string used as padding.
             * @returns {string} Returns the padded string.
             * @example
             *
             * _.pad('abc', 8);
             * // => '  abc   '
             *
             * _.pad('abc', 8, '_-');
             * // => '_-abc_-_'
             *
             * _.pad('abc', 3);
             * // => 'abc'
             */
            function pad(string, length, chars) {
                string = toString(string);
                length = toInteger(length);

                var strLength = length ? stringSize(string) : 0;
                if (!length || strLength >= length) {
                    return string;
                }
                var mid = (length - strLength) / 2;
                return createPadding(nativeFloor(mid), chars) + string + createPadding(nativeCeil(mid), chars);
            }

            /**
             * Pads `string` on the right side if it's shorter than `length`. Padding
             * characters are truncated if they exceed `length`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category String
             * @param {string} [string=''] The string to pad.
             * @param {number} [length=0] The padding length.
             * @param {string} [chars=' '] The string used as padding.
             * @returns {string} Returns the padded string.
             * @example
             *
             * _.padEnd('abc', 6);
             * // => 'abc   '
             *
             * _.padEnd('abc', 6, '_-');
             * // => 'abc_-_'
             *
             * _.padEnd('abc', 3);
             * // => 'abc'
             */
            function padEnd(string, length, chars) {
                string = toString(string);
                length = toInteger(length);

                var strLength = length ? stringSize(string) : 0;
                return length && strLength < length ? string + createPadding(length - strLength, chars) : string;
            }

            /**
             * Pads `string` on the left side if it's shorter than `length`. Padding
             * characters are truncated if they exceed `length`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category String
             * @param {string} [string=''] The string to pad.
             * @param {number} [length=0] The padding length.
             * @param {string} [chars=' '] The string used as padding.
             * @returns {string} Returns the padded string.
             * @example
             *
             * _.padStart('abc', 6);
             * // => '   abc'
             *
             * _.padStart('abc', 6, '_-');
             * // => '_-_abc'
             *
             * _.padStart('abc', 3);
             * // => 'abc'
             */
            function padStart(string, length, chars) {
                string = toString(string);
                length = toInteger(length);

                var strLength = length ? stringSize(string) : 0;
                return length && strLength < length ? createPadding(length - strLength, chars) + string : string;
            }

            /**
             * Converts `string` to an integer of the specified radix. If `radix` is
             * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
             * hexadecimal, in which case a `radix` of `16` is used.
             *
             * **Note:** This method aligns with the
             * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
             *
             * @static
             * @memberOf _
             * @since 1.1.0
             * @category String
             * @param {string} string The string to convert.
             * @param {number} [radix=10] The radix to interpret `value` by.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {number} Returns the converted integer.
             * @example
             *
             * _.parseInt('08');
             * // => 8
             *
             * _.map(['6', '08', '10'], _.parseInt);
             * // => [6, 8, 10]
             */
            function parseInt(string, radix, guard) {
                if (guard || radix == null) {
                    radix = 0;
                } else if (radix) {
                    radix = +radix;
                }
                return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
            }

            /**
             * Repeats the given string `n` times.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category String
             * @param {string} [string=''] The string to repeat.
             * @param {number} [n=1] The number of times to repeat the string.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {string} Returns the repeated string.
             * @example
             *
             * _.repeat('*', 3);
             * // => '***'
             *
             * _.repeat('abc', 2);
             * // => 'abcabc'
             *
             * _.repeat('abc', 0);
             * // => ''
             */
            function repeat(string, n, guard) {
                if (guard ? isIterateeCall(string, n, guard) : n === undefined$1) {
                    n = 1;
                } else {
                    n = toInteger(n);
                }
                return baseRepeat(toString(string), n);
            }

            /**
             * Replaces matches for `pattern` in `string` with `replacement`.
             *
             * **Note:** This method is based on
             * [`String#replace`](https://mdn.io/String/replace).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category String
             * @param {string} [string=''] The string to modify.
             * @param {RegExp|string} pattern The pattern to replace.
             * @param {Function|string} replacement The match replacement.
             * @returns {string} Returns the modified string.
             * @example
             *
             * _.replace('Hi Fred', 'Fred', 'Barney');
             * // => 'Hi Barney'
             */
            function replace() {
                var args = arguments,
                    string = toString(args[0]);

                return args.length < 3 ? string : string.replace(args[1], args[2]);
            }

            /**
             * Converts `string` to
             * [snake case](https://en.wikipedia.org/wiki/Snake_case).
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category String
             * @param {string} [string=''] The string to convert.
             * @returns {string} Returns the snake cased string.
             * @example
             *
             * _.snakeCase('Foo Bar');
             * // => 'foo_bar'
             *
             * _.snakeCase('fooBar');
             * // => 'foo_bar'
             *
             * _.snakeCase('--FOO-BAR--');
             * // => 'foo_bar'
             */
            var snakeCase = createCompounder(function (result, word, index) {
                return result + (index ? '_' : '') + word.toLowerCase();
            });

            /**
             * Splits `string` by `separator`.
             *
             * **Note:** This method is based on
             * [`String#split`](https://mdn.io/String/split).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category String
             * @param {string} [string=''] The string to split.
             * @param {RegExp|string} separator The separator pattern to split by.
             * @param {number} [limit] The length to truncate results to.
             * @returns {Array} Returns the string segments.
             * @example
             *
             * _.split('a-b-c', '-', 2);
             * // => ['a', 'b']
             */
            function split(string, separator, limit) {
                if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
                    separator = limit = undefined$1;
                }
                limit = limit === undefined$1 ? MAX_ARRAY_LENGTH : limit >>> 0;
                if (!limit) {
                    return [];
                }
                string = toString(string);
                if (string && (typeof separator == 'string' || (separator != null && !isRegExp(separator)))) {
                    separator = baseToString(separator);
                    if (!separator && hasUnicode(string)) {
                        return castSlice(stringToArray(string), 0, limit);
                    }
                }
                return string.split(separator, limit);
            }

            /**
             * Converts `string` to
             * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
             *
             * @static
             * @memberOf _
             * @since 3.1.0
             * @category String
             * @param {string} [string=''] The string to convert.
             * @returns {string} Returns the start cased string.
             * @example
             *
             * _.startCase('--foo-bar--');
             * // => 'Foo Bar'
             *
             * _.startCase('fooBar');
             * // => 'Foo Bar'
             *
             * _.startCase('__FOO_BAR__');
             * // => 'FOO BAR'
             */
            var startCase = createCompounder(function (result, word, index) {
                return result + (index ? ' ' : '') + upperFirst(word);
            });

            /**
             * Checks if `string` starts with the given target string.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category String
             * @param {string} [string=''] The string to inspect.
             * @param {string} [target] The string to search for.
             * @param {number} [position=0] The position to search from.
             * @returns {boolean} Returns `true` if `string` starts with `target`,
             *  else `false`.
             * @example
             *
             * _.startsWith('abc', 'a');
             * // => true
             *
             * _.startsWith('abc', 'b');
             * // => false
             *
             * _.startsWith('abc', 'b', 1);
             * // => true
             */
            function startsWith(string, target, position) {
                string = toString(string);
                position = position == null ? 0 : baseClamp(toInteger(position), 0, string.length);

                target = baseToString(target);
                return string.slice(position, position + target.length) == target;
            }

            /**
             * Creates a compiled template function that can interpolate data properties
             * in "interpolate" delimiters, HTML-escape interpolated data properties in
             * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
             * properties may be accessed as free variables in the template. If a setting
             * object is given, it takes precedence over `_.templateSettings` values.
             *
             * **Note:** In the development build `_.template` utilizes
             * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
             * for easier debugging.
             *
             * For more information on precompiling templates see
             * [lodash's custom builds documentation](https://lodash.com/custom-builds).
             *
             * For more information on Chrome extension sandboxes see
             * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category String
             * @param {string} [string=''] The template string.
             * @param {Object} [options={}] The options object.
             * @param {RegExp} [options.escape=_.templateSettings.escape]
             *  The HTML "escape" delimiter.
             * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
             *  The "evaluate" delimiter.
             * @param {Object} [options.imports=_.templateSettings.imports]
             *  An object to import into the template as free variables.
             * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
             *  The "interpolate" delimiter.
             * @param {string} [options.sourceURL='lodash.templateSources[n]']
             *  The sourceURL of the compiled template.
             * @param {string} [options.variable='obj']
             *  The data object variable name.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {Function} Returns the compiled template function.
             * @example
             *
             * // Use the "interpolate" delimiter to create a compiled template.
             * var compiled = _.template('hello <%= user %>!');
             * compiled({ 'user': 'fred' });
             * // => 'hello fred!'
             *
             * // Use the HTML "escape" delimiter to escape data property values.
             * var compiled = _.template('<b><%- value %></b>');
             * compiled({ 'value': '<script>' });
             * // => '<b>&lt;script&gt;</b>'
             *
             * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
             * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
             * compiled({ 'users': ['fred', 'barney'] });
             * // => '<li>fred</li><li>barney</li>'
             *
             * // Use the internal `print` function in "evaluate" delimiters.
             * var compiled = _.template('<% print("hello " + user); %>!');
             * compiled({ 'user': 'barney' });
             * // => 'hello barney!'
             *
             * // Use the ES template literal delimiter as an "interpolate" delimiter.
             * // Disable support by replacing the "interpolate" delimiter.
             * var compiled = _.template('hello ${ user }!');
             * compiled({ 'user': 'pebbles' });
             * // => 'hello pebbles!'
             *
             * // Use backslashes to treat delimiters as plain text.
             * var compiled = _.template('<%= "\\<%- value %\\>" %>');
             * compiled({ 'value': 'ignored' });
             * // => '<%- value %>'
             *
             * // Use the `imports` option to import `jQuery` as `jq`.
             * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
             * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
             * compiled({ 'users': ['fred', 'barney'] });
             * // => '<li>fred</li><li>barney</li>'
             *
             * // Use the `sourceURL` option to specify a custom sourceURL for the template.
             * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
             * compiled(data);
             * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
             *
             * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
             * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
             * compiled.source;
             * // => function(data) {
             * //   var __t, __p = '';
             * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
             * //   return __p;
             * // }
             *
             * // Use custom template delimiters.
             * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
             * var compiled = _.template('hello {{ user }}!');
             * compiled({ 'user': 'mustache' });
             * // => 'hello mustache!'
             *
             * // Use the `source` property to inline compiled templates for meaningful
             * // line numbers in error messages and stack traces.
             * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
             *   var JST = {\
             *     "main": ' + _.template(mainText).source + '\
             *   };\
             * ');
             */
            function template(string, options, guard) {
                // Based on John Resig's `tmpl` implementation
                // (http://ejohn.org/blog/javascript-micro-templating/)
                // and Laura Doktorova's doT.js (https://github.com/olado/doT).
                var settings = lodash.templateSettings;

                if (guard && isIterateeCall(string, options, guard)) {
                    options = undefined$1;
                }
                string = toString(string);
                options = assignInWith({}, options, settings, customDefaultsAssignIn);

                var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
                    importsKeys = keys(imports),
                    importsValues = baseValues(imports, importsKeys);

                var isEscaping,
                    isEvaluating,
                    index = 0,
                    interpolate = options.interpolate || reNoMatch,
                    source = "__p += '";

                // Compile the regexp to match each delimiter.
                var reDelimiters = RegExp((options.escape || reNoMatch).source + '|' + interpolate.source + '|' + (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' + (options.evaluate || reNoMatch).source + '|$', 'g');

                // Use a sourceURL for easier debugging.
                // The sourceURL gets injected into the source that's eval-ed, so be careful
                // to normalize all kinds of whitespace, so e.g. newlines (and unicode versions of it) can't sneak in
                // and escape the comment, thus injecting code that gets evaled.
                var sourceURL = '//# sourceURL=' + (hasOwnProperty.call(options, 'sourceURL') ? (options.sourceURL + '').replace(/\s/g, ' ') : 'lodash.templateSources[' + ++templateCounter + ']') + '\n';

                string.replace(reDelimiters, function (match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
                    interpolateValue || (interpolateValue = esTemplateValue);

                    // Escape characters that can't be included in string literals.
                    source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

                    // Replace delimiters with snippets.
                    if (escapeValue) {
                        isEscaping = true;
                        source += "' +\n__e(" + escapeValue + ") +\n'";
                    }
                    if (evaluateValue) {
                        isEvaluating = true;
                        source += "';\n" + evaluateValue + ";\n__p += '";
                    }
                    if (interpolateValue) {
                        source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
                    }
                    index = offset + match.length;

                    // The JS engine embedded in Adobe products needs `match` returned in
                    // order to produce the correct `offset` value.
                    return match;
                });

                source += "';\n";

                // If `variable` is not specified wrap a with-statement around the generated
                // code to add the data object to the top of the scope chain.
                var variable = hasOwnProperty.call(options, 'variable') && options.variable;
                if (!variable) {
                    source = 'with (obj) {\n' + source + '\n}\n';
                }
                // Throw an error if a forbidden character was found in `variable`, to prevent
                // potential command injection attacks.
                else if (reForbiddenIdentifierChars.test(variable)) {
                    throw new Error(INVALID_TEMPL_VAR_ERROR_TEXT);
                }

                // Cleanup code by stripping empty strings.
                source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source).replace(reEmptyStringMiddle, '$1').replace(reEmptyStringTrailing, '$1;');

                // Frame code as the function body.
                source =
                    'function(' +
                    (variable || 'obj') +
                    ') {\n' +
                    (variable ? '' : 'obj || (obj = {});\n') +
                    "var __t, __p = ''" +
                    (isEscaping ? ', __e = _.escape' : '') +
                    (isEvaluating ? ', __j = Array.prototype.join;\n' + "function print() { __p += __j.call(arguments, '') }\n" : ';\n') +
                    source +
                    'return __p\n}';

                var result = attempt(function () {
                    return Function(importsKeys, sourceURL + 'return ' + source).apply(undefined$1, importsValues);
                });

                // Provide the compiled function's source by its `toString` method or
                // the `source` property as a convenience for inlining compiled templates.
                result.source = source;
                if (isError(result)) {
                    throw result;
                }
                return result;
            }

            /**
             * Converts `string`, as a whole, to lower case just like
             * [String#toLowerCase](https://mdn.io/toLowerCase).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category String
             * @param {string} [string=''] The string to convert.
             * @returns {string} Returns the lower cased string.
             * @example
             *
             * _.toLower('--Foo-Bar--');
             * // => '--foo-bar--'
             *
             * _.toLower('fooBar');
             * // => 'foobar'
             *
             * _.toLower('__FOO_BAR__');
             * // => '__foo_bar__'
             */
            function toLower(value) {
                return toString(value).toLowerCase();
            }

            /**
             * Converts `string`, as a whole, to upper case just like
             * [String#toUpperCase](https://mdn.io/toUpperCase).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category String
             * @param {string} [string=''] The string to convert.
             * @returns {string} Returns the upper cased string.
             * @example
             *
             * _.toUpper('--foo-bar--');
             * // => '--FOO-BAR--'
             *
             * _.toUpper('fooBar');
             * // => 'FOOBAR'
             *
             * _.toUpper('__foo_bar__');
             * // => '__FOO_BAR__'
             */
            function toUpper(value) {
                return toString(value).toUpperCase();
            }

            /**
             * Removes leading and trailing whitespace or specified characters from `string`.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category String
             * @param {string} [string=''] The string to trim.
             * @param {string} [chars=whitespace] The characters to trim.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {string} Returns the trimmed string.
             * @example
             *
             * _.trim('  abc  ');
             * // => 'abc'
             *
             * _.trim('-_-abc-_-', '_-');
             * // => 'abc'
             *
             * _.map(['  foo  ', '  bar  '], _.trim);
             * // => ['foo', 'bar']
             */
            function trim(string, chars, guard) {
                string = toString(string);
                if (string && (guard || chars === undefined$1)) {
                    return baseTrim(string);
                }
                if (!string || !(chars = baseToString(chars))) {
                    return string;
                }
                var strSymbols = stringToArray(string),
                    chrSymbols = stringToArray(chars),
                    start = charsStartIndex(strSymbols, chrSymbols),
                    end = charsEndIndex(strSymbols, chrSymbols) + 1;

                return castSlice(strSymbols, start, end).join('');
            }

            /**
             * Removes trailing whitespace or specified characters from `string`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category String
             * @param {string} [string=''] The string to trim.
             * @param {string} [chars=whitespace] The characters to trim.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {string} Returns the trimmed string.
             * @example
             *
             * _.trimEnd('  abc  ');
             * // => '  abc'
             *
             * _.trimEnd('-_-abc-_-', '_-');
             * // => '-_-abc'
             */
            function trimEnd(string, chars, guard) {
                string = toString(string);
                if (string && (guard || chars === undefined$1)) {
                    return string.slice(0, trimmedEndIndex(string) + 1);
                }
                if (!string || !(chars = baseToString(chars))) {
                    return string;
                }
                var strSymbols = stringToArray(string),
                    end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

                return castSlice(strSymbols, 0, end).join('');
            }

            /**
             * Removes leading whitespace or specified characters from `string`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category String
             * @param {string} [string=''] The string to trim.
             * @param {string} [chars=whitespace] The characters to trim.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {string} Returns the trimmed string.
             * @example
             *
             * _.trimStart('  abc  ');
             * // => 'abc  '
             *
             * _.trimStart('-_-abc-_-', '_-');
             * // => 'abc-_-'
             */
            function trimStart(string, chars, guard) {
                string = toString(string);
                if (string && (guard || chars === undefined$1)) {
                    return string.replace(reTrimStart, '');
                }
                if (!string || !(chars = baseToString(chars))) {
                    return string;
                }
                var strSymbols = stringToArray(string),
                    start = charsStartIndex(strSymbols, stringToArray(chars));

                return castSlice(strSymbols, start).join('');
            }

            /**
             * Truncates `string` if it's longer than the given maximum string length.
             * The last characters of the truncated string are replaced with the omission
             * string which defaults to "...".
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category String
             * @param {string} [string=''] The string to truncate.
             * @param {Object} [options={}] The options object.
             * @param {number} [options.length=30] The maximum string length.
             * @param {string} [options.omission='...'] The string to indicate text is omitted.
             * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
             * @returns {string} Returns the truncated string.
             * @example
             *
             * _.truncate('hi-diddly-ho there, neighborino');
             * // => 'hi-diddly-ho there, neighbo...'
             *
             * _.truncate('hi-diddly-ho there, neighborino', {
             *   'length': 24,
             *   'separator': ' '
             * });
             * // => 'hi-diddly-ho there,...'
             *
             * _.truncate('hi-diddly-ho there, neighborino', {
             *   'length': 24,
             *   'separator': /,? +/
             * });
             * // => 'hi-diddly-ho there...'
             *
             * _.truncate('hi-diddly-ho there, neighborino', {
             *   'omission': ' [...]'
             * });
             * // => 'hi-diddly-ho there, neig [...]'
             */
            function truncate(string, options) {
                var length = DEFAULT_TRUNC_LENGTH,
                    omission = DEFAULT_TRUNC_OMISSION;

                if (isObject(options)) {
                    var separator = 'separator' in options ? options.separator : separator;
                    length = 'length' in options ? toInteger(options.length) : length;
                    omission = 'omission' in options ? baseToString(options.omission) : omission;
                }
                string = toString(string);

                var strLength = string.length;
                if (hasUnicode(string)) {
                    var strSymbols = stringToArray(string);
                    strLength = strSymbols.length;
                }
                if (length >= strLength) {
                    return string;
                }
                var end = length - stringSize(omission);
                if (end < 1) {
                    return omission;
                }
                var result = strSymbols ? castSlice(strSymbols, 0, end).join('') : string.slice(0, end);

                if (separator === undefined$1) {
                    return result + omission;
                }
                if (strSymbols) {
                    end += result.length - end;
                }
                if (isRegExp(separator)) {
                    if (string.slice(end).search(separator)) {
                        var match,
                            substring = result;

                        if (!separator.global) {
                            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
                        }
                        separator.lastIndex = 0;
                        while ((match = separator.exec(substring))) {
                            var newEnd = match.index;
                        }
                        result = result.slice(0, newEnd === undefined$1 ? end : newEnd);
                    }
                } else if (string.indexOf(baseToString(separator), end) != end) {
                    var index = result.lastIndexOf(separator);
                    if (index > -1) {
                        result = result.slice(0, index);
                    }
                }
                return result + omission;
            }

            /**
             * The inverse of `_.escape`; this method converts the HTML entities
             * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
             * their corresponding characters.
             *
             * **Note:** No other HTML entities are unescaped. To unescape additional
             * HTML entities use a third-party library like [_he_](https://mths.be/he).
             *
             * @static
             * @memberOf _
             * @since 0.6.0
             * @category String
             * @param {string} [string=''] The string to unescape.
             * @returns {string} Returns the unescaped string.
             * @example
             *
             * _.unescape('fred, barney, &amp; pebbles');
             * // => 'fred, barney, & pebbles'
             */
            function unescape(string) {
                string = toString(string);
                return string && reHasEscapedHtml.test(string) ? string.replace(reEscapedHtml, unescapeHtmlChar) : string;
            }

            /**
             * Converts `string`, as space separated words, to upper case.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category String
             * @param {string} [string=''] The string to convert.
             * @returns {string} Returns the upper cased string.
             * @example
             *
             * _.upperCase('--foo-bar');
             * // => 'FOO BAR'
             *
             * _.upperCase('fooBar');
             * // => 'FOO BAR'
             *
             * _.upperCase('__foo_bar__');
             * // => 'FOO BAR'
             */
            var upperCase = createCompounder(function (result, word, index) {
                return result + (index ? ' ' : '') + word.toUpperCase();
            });

            /**
             * Converts the first character of `string` to upper case.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category String
             * @param {string} [string=''] The string to convert.
             * @returns {string} Returns the converted string.
             * @example
             *
             * _.upperFirst('fred');
             * // => 'Fred'
             *
             * _.upperFirst('FRED');
             * // => 'FRED'
             */
            var upperFirst = createCaseFirst('toUpperCase');

            /**
             * Splits `string` into an array of its words.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category String
             * @param {string} [string=''] The string to inspect.
             * @param {RegExp|string} [pattern] The pattern to match words.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {Array} Returns the words of `string`.
             * @example
             *
             * _.words('fred, barney, & pebbles');
             * // => ['fred', 'barney', 'pebbles']
             *
             * _.words('fred, barney, & pebbles', /[^, ]+/g);
             * // => ['fred', 'barney', '&', 'pebbles']
             */
            function words(string, pattern, guard) {
                string = toString(string);
                pattern = guard ? undefined$1 : pattern;

                if (pattern === undefined$1) {
                    return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
                }
                return string.match(pattern) || [];
            }

            /*------------------------------------------------------------------------*/

            /**
             * Attempts to invoke `func`, returning either the result or the caught error
             * object. Any additional arguments are provided to `func` when it's invoked.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Util
             * @param {Function} func The function to attempt.
             * @param {...*} [args] The arguments to invoke `func` with.
             * @returns {*} Returns the `func` result or error object.
             * @example
             *
             * // Avoid throwing errors for invalid selectors.
             * var elements = _.attempt(function(selector) {
             *   return document.querySelectorAll(selector);
             * }, '>_>');
             *
             * if (_.isError(elements)) {
             *   elements = [];
             * }
             */
            var attempt = baseRest(function (func, args) {
                try {
                    return apply(func, undefined$1, args);
                } catch (e) {
                    return isError(e) ? e : new Error(e);
                }
            });

            /**
             * Binds methods of an object to the object itself, overwriting the existing
             * method.
             *
             * **Note:** This method doesn't set the "length" property of bound functions.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Util
             * @param {Object} object The object to bind and assign the bound methods to.
             * @param {...(string|string[])} methodNames The object method names to bind.
             * @returns {Object} Returns `object`.
             * @example
             *
             * var view = {
             *   'label': 'docs',
             *   'click': function() {
             *     console.log('clicked ' + this.label);
             *   }
             * };
             *
             * _.bindAll(view, ['click']);
             * jQuery(element).on('click', view.click);
             * // => Logs 'clicked docs' when clicked.
             */
            var bindAll = flatRest(function (object, methodNames) {
                arrayEach(methodNames, function (key) {
                    key = toKey(key);
                    baseAssignValue(object, key, bind(object[key], object));
                });
                return object;
            });

            /**
             * Creates a function that iterates over `pairs` and invokes the corresponding
             * function of the first predicate to return truthy. The predicate-function
             * pairs are invoked with the `this` binding and arguments of the created
             * function.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Util
             * @param {Array} pairs The predicate-function pairs.
             * @returns {Function} Returns the new composite function.
             * @example
             *
             * var func = _.cond([
             *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
             *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
             *   [_.stubTrue,                      _.constant('no match')]
             * ]);
             *
             * func({ 'a': 1, 'b': 2 });
             * // => 'matches A'
             *
             * func({ 'a': 0, 'b': 1 });
             * // => 'matches B'
             *
             * func({ 'a': '1', 'b': '2' });
             * // => 'no match'
             */
            function cond(pairs) {
                var length = pairs == null ? 0 : pairs.length,
                    toIteratee = getIteratee();

                pairs = !length
                    ? []
                    : arrayMap(pairs, function (pair) {
                          if (typeof pair[1] != 'function') {
                              throw new TypeError(FUNC_ERROR_TEXT);
                          }
                          return [toIteratee(pair[0]), pair[1]];
                      });

                return baseRest(function (args) {
                    var index = -1;
                    while (++index < length) {
                        var pair = pairs[index];
                        if (apply(pair[0], this, args)) {
                            return apply(pair[1], this, args);
                        }
                    }
                });
            }

            /**
             * Creates a function that invokes the predicate properties of `source` with
             * the corresponding property values of a given object, returning `true` if
             * all predicates return truthy, else `false`.
             *
             * **Note:** The created function is equivalent to `_.conformsTo` with
             * `source` partially applied.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Util
             * @param {Object} source The object of property predicates to conform to.
             * @returns {Function} Returns the new spec function.
             * @example
             *
             * var objects = [
             *   { 'a': 2, 'b': 1 },
             *   { 'a': 1, 'b': 2 }
             * ];
             *
             * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
             * // => [{ 'a': 1, 'b': 2 }]
             */
            function conforms(source) {
                return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
            }

            /**
             * Creates a function that returns `value`.
             *
             * @static
             * @memberOf _
             * @since 2.4.0
             * @category Util
             * @param {*} value The value to return from the new function.
             * @returns {Function} Returns the new constant function.
             * @example
             *
             * var objects = _.times(2, _.constant({ 'a': 1 }));
             *
             * console.log(objects);
             * // => [{ 'a': 1 }, { 'a': 1 }]
             *
             * console.log(objects[0] === objects[1]);
             * // => true
             */
            function constant(value) {
                return function () {
                    return value;
                };
            }

            /**
             * Checks `value` to determine whether a default value should be returned in
             * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
             * or `undefined`.
             *
             * @static
             * @memberOf _
             * @since 4.14.0
             * @category Util
             * @param {*} value The value to check.
             * @param {*} defaultValue The default value.
             * @returns {*} Returns the resolved value.
             * @example
             *
             * _.defaultTo(1, 10);
             * // => 1
             *
             * _.defaultTo(undefined, 10);
             * // => 10
             */
            function defaultTo(value, defaultValue) {
                return value == null || value !== value ? defaultValue : value;
            }

            /**
             * Creates a function that returns the result of invoking the given functions
             * with the `this` binding of the created function, where each successive
             * invocation is supplied the return value of the previous.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Util
             * @param {...(Function|Function[])} [funcs] The functions to invoke.
             * @returns {Function} Returns the new composite function.
             * @see _.flowRight
             * @example
             *
             * function square(n) {
             *   return n * n;
             * }
             *
             * var addSquare = _.flow([_.add, square]);
             * addSquare(1, 2);
             * // => 9
             */
            var flow = createFlow();

            /**
             * This method is like `_.flow` except that it creates a function that
             * invokes the given functions from right to left.
             *
             * @static
             * @since 3.0.0
             * @memberOf _
             * @category Util
             * @param {...(Function|Function[])} [funcs] The functions to invoke.
             * @returns {Function} Returns the new composite function.
             * @see _.flow
             * @example
             *
             * function square(n) {
             *   return n * n;
             * }
             *
             * var addSquare = _.flowRight([square, _.add]);
             * addSquare(1, 2);
             * // => 9
             */
            var flowRight = createFlow(true);

            /**
             * This method returns the first argument it receives.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Util
             * @param {*} value Any value.
             * @returns {*} Returns `value`.
             * @example
             *
             * var object = { 'a': 1 };
             *
             * console.log(_.identity(object) === object);
             * // => true
             */
            function identity(value) {
                return value;
            }

            /**
             * Creates a function that invokes `func` with the arguments of the created
             * function. If `func` is a property name, the created function returns the
             * property value for a given element. If `func` is an array or object, the
             * created function returns `true` for elements that contain the equivalent
             * source properties, otherwise it returns `false`.
             *
             * @static
             * @since 4.0.0
             * @memberOf _
             * @category Util
             * @param {*} [func=_.identity] The value to convert to a callback.
             * @returns {Function} Returns the callback.
             * @example
             *
             * var users = [
             *   { 'user': 'barney', 'age': 36, 'active': true },
             *   { 'user': 'fred',   'age': 40, 'active': false }
             * ];
             *
             * // The `_.matches` iteratee shorthand.
             * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
             * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.filter(users, _.iteratee(['user', 'fred']));
             * // => [{ 'user': 'fred', 'age': 40 }]
             *
             * // The `_.property` iteratee shorthand.
             * _.map(users, _.iteratee('user'));
             * // => ['barney', 'fred']
             *
             * // Create custom iteratee shorthands.
             * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
             *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
             *     return func.test(string);
             *   };
             * });
             *
             * _.filter(['abc', 'def'], /ef/);
             * // => ['def']
             */
            function iteratee(func) {
                return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
            }

            /**
             * Creates a function that performs a partial deep comparison between a given
             * object and `source`, returning `true` if the given object has equivalent
             * property values, else `false`.
             *
             * **Note:** The created function is equivalent to `_.isMatch` with `source`
             * partially applied.
             *
             * Partial comparisons will match empty array and empty object `source`
             * values against any array or object value, respectively. See `_.isEqual`
             * for a list of supported value comparisons.
             *
             * **Note:** Multiple values can be checked by combining several matchers
             * using `_.overSome`
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Util
             * @param {Object} source The object of property values to match.
             * @returns {Function} Returns the new spec function.
             * @example
             *
             * var objects = [
             *   { 'a': 1, 'b': 2, 'c': 3 },
             *   { 'a': 4, 'b': 5, 'c': 6 }
             * ];
             *
             * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
             * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
             *
             * // Checking for several possible values
             * _.filter(objects, _.overSome([_.matches({ 'a': 1 }), _.matches({ 'a': 4 })]));
             * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
             */
            function matches(source) {
                return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
            }

            /**
             * Creates a function that performs a partial deep comparison between the
             * value at `path` of a given object to `srcValue`, returning `true` if the
             * object value is equivalent, else `false`.
             *
             * **Note:** Partial comparisons will match empty array and empty object
             * `srcValue` values against any array or object value, respectively. See
             * `_.isEqual` for a list of supported value comparisons.
             *
             * **Note:** Multiple values can be checked by combining several matchers
             * using `_.overSome`
             *
             * @static
             * @memberOf _
             * @since 3.2.0
             * @category Util
             * @param {Array|string} path The path of the property to get.
             * @param {*} srcValue The value to match.
             * @returns {Function} Returns the new spec function.
             * @example
             *
             * var objects = [
             *   { 'a': 1, 'b': 2, 'c': 3 },
             *   { 'a': 4, 'b': 5, 'c': 6 }
             * ];
             *
             * _.find(objects, _.matchesProperty('a', 4));
             * // => { 'a': 4, 'b': 5, 'c': 6 }
             *
             * // Checking for several possible values
             * _.filter(objects, _.overSome([_.matchesProperty('a', 1), _.matchesProperty('a', 4)]));
             * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
             */
            function matchesProperty(path, srcValue) {
                return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
            }

            /**
             * Creates a function that invokes the method at `path` of a given object.
             * Any additional arguments are provided to the invoked method.
             *
             * @static
             * @memberOf _
             * @since 3.7.0
             * @category Util
             * @param {Array|string} path The path of the method to invoke.
             * @param {...*} [args] The arguments to invoke the method with.
             * @returns {Function} Returns the new invoker function.
             * @example
             *
             * var objects = [
             *   { 'a': { 'b': _.constant(2) } },
             *   { 'a': { 'b': _.constant(1) } }
             * ];
             *
             * _.map(objects, _.method('a.b'));
             * // => [2, 1]
             *
             * _.map(objects, _.method(['a', 'b']));
             * // => [2, 1]
             */
            var method = baseRest(function (path, args) {
                return function (object) {
                    return baseInvoke(object, path, args);
                };
            });

            /**
             * The opposite of `_.method`; this method creates a function that invokes
             * the method at a given path of `object`. Any additional arguments are
             * provided to the invoked method.
             *
             * @static
             * @memberOf _
             * @since 3.7.0
             * @category Util
             * @param {Object} object The object to query.
             * @param {...*} [args] The arguments to invoke the method with.
             * @returns {Function} Returns the new invoker function.
             * @example
             *
             * var array = _.times(3, _.constant),
             *     object = { 'a': array, 'b': array, 'c': array };
             *
             * _.map(['a[2]', 'c[0]'], _.methodOf(object));
             * // => [2, 0]
             *
             * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
             * // => [2, 0]
             */
            var methodOf = baseRest(function (object, args) {
                return function (path) {
                    return baseInvoke(object, path, args);
                };
            });

            /**
             * Adds all own enumerable string keyed function properties of a source
             * object to the destination object. If `object` is a function, then methods
             * are added to its prototype as well.
             *
             * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
             * avoid conflicts caused by modifying the original.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Util
             * @param {Function|Object} [object=lodash] The destination object.
             * @param {Object} source The object of functions to add.
             * @param {Object} [options={}] The options object.
             * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
             * @returns {Function|Object} Returns `object`.
             * @example
             *
             * function vowels(string) {
             *   return _.filter(string, function(v) {
             *     return /[aeiou]/i.test(v);
             *   });
             * }
             *
             * _.mixin({ 'vowels': vowels });
             * _.vowels('fred');
             * // => ['e']
             *
             * _('fred').vowels().value();
             * // => ['e']
             *
             * _.mixin({ 'vowels': vowels }, { 'chain': false });
             * _('fred').vowels();
             * // => ['e']
             */
            function mixin(object, source, options) {
                var props = keys(source),
                    methodNames = baseFunctions(source, props);

                if (options == null && !(isObject(source) && (methodNames.length || !props.length))) {
                    options = source;
                    source = object;
                    object = this;
                    methodNames = baseFunctions(source, keys(source));
                }
                var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
                    isFunc = isFunction(object);

                arrayEach(methodNames, function (methodName) {
                    var func = source[methodName];
                    object[methodName] = func;
                    if (isFunc) {
                        object.prototype[methodName] = function () {
                            var chainAll = this.__chain__;
                            if (chain || chainAll) {
                                var result = object(this.__wrapped__),
                                    actions = (result.__actions__ = copyArray(this.__actions__));

                                actions.push({ func: func, args: arguments, thisArg: object });
                                result.__chain__ = chainAll;
                                return result;
                            }
                            return func.apply(object, arrayPush([this.value()], arguments));
                        };
                    }
                });

                return object;
            }

            /**
             * Reverts the `_` variable to its previous value and returns a reference to
             * the `lodash` function.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Util
             * @returns {Function} Returns the `lodash` function.
             * @example
             *
             * var lodash = _.noConflict();
             */
            function noConflict() {
                if (root._ === this) {
                    root._ = oldDash;
                }
                return this;
            }

            /**
             * This method returns `undefined`.
             *
             * @static
             * @memberOf _
             * @since 2.3.0
             * @category Util
             * @example
             *
             * _.times(2, _.noop);
             * // => [undefined, undefined]
             */
            function noop() {
                // No operation performed.
            }

            /**
             * Creates a function that gets the argument at index `n`. If `n` is negative,
             * the nth argument from the end is returned.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Util
             * @param {number} [n=0] The index of the argument to return.
             * @returns {Function} Returns the new pass-thru function.
             * @example
             *
             * var func = _.nthArg(1);
             * func('a', 'b', 'c', 'd');
             * // => 'b'
             *
             * var func = _.nthArg(-2);
             * func('a', 'b', 'c', 'd');
             * // => 'c'
             */
            function nthArg(n) {
                n = toInteger(n);
                return baseRest(function (args) {
                    return baseNth(args, n);
                });
            }

            /**
             * Creates a function that invokes `iteratees` with the arguments it receives
             * and returns their results.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Util
             * @param {...(Function|Function[])} [iteratees=[_.identity]]
             *  The iteratees to invoke.
             * @returns {Function} Returns the new function.
             * @example
             *
             * var func = _.over([Math.max, Math.min]);
             *
             * func(1, 2, 3, 4);
             * // => [4, 1]
             */
            var over = createOver(arrayMap);

            /**
             * Creates a function that checks if **all** of the `predicates` return
             * truthy when invoked with the arguments it receives.
             *
             * Following shorthands are possible for providing predicates.
             * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
             * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Util
             * @param {...(Function|Function[])} [predicates=[_.identity]]
             *  The predicates to check.
             * @returns {Function} Returns the new function.
             * @example
             *
             * var func = _.overEvery([Boolean, isFinite]);
             *
             * func('1');
             * // => true
             *
             * func(null);
             * // => false
             *
             * func(NaN);
             * // => false
             */
            var overEvery = createOver(arrayEvery);

            /**
             * Creates a function that checks if **any** of the `predicates` return
             * truthy when invoked with the arguments it receives.
             *
             * Following shorthands are possible for providing predicates.
             * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
             * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Util
             * @param {...(Function|Function[])} [predicates=[_.identity]]
             *  The predicates to check.
             * @returns {Function} Returns the new function.
             * @example
             *
             * var func = _.overSome([Boolean, isFinite]);
             *
             * func('1');
             * // => true
             *
             * func(null);
             * // => true
             *
             * func(NaN);
             * // => false
             *
             * var matchesFunc = _.overSome([{ 'a': 1 }, { 'a': 2 }])
             * var matchesPropertyFunc = _.overSome([['a', 1], ['a', 2]])
             */
            var overSome = createOver(arraySome);

            /**
             * Creates a function that returns the value at `path` of a given object.
             *
             * @static
             * @memberOf _
             * @since 2.4.0
             * @category Util
             * @param {Array|string} path The path of the property to get.
             * @returns {Function} Returns the new accessor function.
             * @example
             *
             * var objects = [
             *   { 'a': { 'b': 2 } },
             *   { 'a': { 'b': 1 } }
             * ];
             *
             * _.map(objects, _.property('a.b'));
             * // => [2, 1]
             *
             * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
             * // => [1, 2]
             */
            function property(path) {
                return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
            }

            /**
             * The opposite of `_.property`; this method creates a function that returns
             * the value at a given path of `object`.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Util
             * @param {Object} object The object to query.
             * @returns {Function} Returns the new accessor function.
             * @example
             *
             * var array = [0, 1, 2],
             *     object = { 'a': array, 'b': array, 'c': array };
             *
             * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
             * // => [2, 0]
             *
             * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
             * // => [2, 0]
             */
            function propertyOf(object) {
                return function (path) {
                    return object == null ? undefined$1 : baseGet(object, path);
                };
            }

            /**
             * Creates an array of numbers (positive and/or negative) progressing from
             * `start` up to, but not including, `end`. A step of `-1` is used if a negative
             * `start` is specified without an `end` or `step`. If `end` is not specified,
             * it's set to `start` with `start` then set to `0`.
             *
             * **Note:** JavaScript follows the IEEE-754 standard for resolving
             * floating-point values which can produce unexpected results.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Util
             * @param {number} [start=0] The start of the range.
             * @param {number} end The end of the range.
             * @param {number} [step=1] The value to increment or decrement by.
             * @returns {Array} Returns the range of numbers.
             * @see _.inRange, _.rangeRight
             * @example
             *
             * _.range(4);
             * // => [0, 1, 2, 3]
             *
             * _.range(-4);
             * // => [0, -1, -2, -3]
             *
             * _.range(1, 5);
             * // => [1, 2, 3, 4]
             *
             * _.range(0, 20, 5);
             * // => [0, 5, 10, 15]
             *
             * _.range(0, -4, -1);
             * // => [0, -1, -2, -3]
             *
             * _.range(1, 4, 0);
             * // => [1, 1, 1]
             *
             * _.range(0);
             * // => []
             */
            var range = createRange();

            /**
             * This method is like `_.range` except that it populates values in
             * descending order.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Util
             * @param {number} [start=0] The start of the range.
             * @param {number} end The end of the range.
             * @param {number} [step=1] The value to increment or decrement by.
             * @returns {Array} Returns the range of numbers.
             * @see _.inRange, _.range
             * @example
             *
             * _.rangeRight(4);
             * // => [3, 2, 1, 0]
             *
             * _.rangeRight(-4);
             * // => [-3, -2, -1, 0]
             *
             * _.rangeRight(1, 5);
             * // => [4, 3, 2, 1]
             *
             * _.rangeRight(0, 20, 5);
             * // => [15, 10, 5, 0]
             *
             * _.rangeRight(0, -4, -1);
             * // => [-3, -2, -1, 0]
             *
             * _.rangeRight(1, 4, 0);
             * // => [1, 1, 1]
             *
             * _.rangeRight(0);
             * // => []
             */
            var rangeRight = createRange(true);

            /**
             * This method returns a new empty array.
             *
             * @static
             * @memberOf _
             * @since 4.13.0
             * @category Util
             * @returns {Array} Returns the new empty array.
             * @example
             *
             * var arrays = _.times(2, _.stubArray);
             *
             * console.log(arrays);
             * // => [[], []]
             *
             * console.log(arrays[0] === arrays[1]);
             * // => false
             */
            function stubArray() {
                return [];
            }

            /**
             * This method returns `false`.
             *
             * @static
             * @memberOf _
             * @since 4.13.0
             * @category Util
             * @returns {boolean} Returns `false`.
             * @example
             *
             * _.times(2, _.stubFalse);
             * // => [false, false]
             */
            function stubFalse() {
                return false;
            }

            /**
             * This method returns a new empty object.
             *
             * @static
             * @memberOf _
             * @since 4.13.0
             * @category Util
             * @returns {Object} Returns the new empty object.
             * @example
             *
             * var objects = _.times(2, _.stubObject);
             *
             * console.log(objects);
             * // => [{}, {}]
             *
             * console.log(objects[0] === objects[1]);
             * // => false
             */
            function stubObject() {
                return {};
            }

            /**
             * This method returns an empty string.
             *
             * @static
             * @memberOf _
             * @since 4.13.0
             * @category Util
             * @returns {string} Returns the empty string.
             * @example
             *
             * _.times(2, _.stubString);
             * // => ['', '']
             */
            function stubString() {
                return '';
            }

            /**
             * This method returns `true`.
             *
             * @static
             * @memberOf _
             * @since 4.13.0
             * @category Util
             * @returns {boolean} Returns `true`.
             * @example
             *
             * _.times(2, _.stubTrue);
             * // => [true, true]
             */
            function stubTrue() {
                return true;
            }

            /**
             * Invokes the iteratee `n` times, returning an array of the results of
             * each invocation. The iteratee is invoked with one argument; (index).
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Util
             * @param {number} n The number of times to invoke `iteratee`.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @returns {Array} Returns the array of results.
             * @example
             *
             * _.times(3, String);
             * // => ['0', '1', '2']
             *
             *  _.times(4, _.constant(0));
             * // => [0, 0, 0, 0]
             */
            function times(n, iteratee) {
                n = toInteger(n);
                if (n < 1 || n > MAX_SAFE_INTEGER) {
                    return [];
                }
                var index = MAX_ARRAY_LENGTH,
                    length = nativeMin(n, MAX_ARRAY_LENGTH);

                iteratee = getIteratee(iteratee);
                n -= MAX_ARRAY_LENGTH;

                var result = baseTimes(length, iteratee);
                while (++index < n) {
                    iteratee(index);
                }
                return result;
            }

            /**
             * Converts `value` to a property path array.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Util
             * @param {*} value The value to convert.
             * @returns {Array} Returns the new property path array.
             * @example
             *
             * _.toPath('a.b.c');
             * // => ['a', 'b', 'c']
             *
             * _.toPath('a[0].b.c');
             * // => ['a', '0', 'b', 'c']
             */
            function toPath(value) {
                if (isArray(value)) {
                    return arrayMap(value, toKey);
                }
                return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
            }

            /**
             * Generates a unique ID. If `prefix` is given, the ID is appended to it.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Util
             * @param {string} [prefix=''] The value to prefix the ID with.
             * @returns {string} Returns the unique ID.
             * @example
             *
             * _.uniqueId('contact_');
             * // => 'contact_104'
             *
             * _.uniqueId();
             * // => '105'
             */
            function uniqueId(prefix) {
                var id = ++idCounter;
                return toString(prefix) + id;
            }

            /*------------------------------------------------------------------------*/

            /**
             * Adds two numbers.
             *
             * @static
             * @memberOf _
             * @since 3.4.0
             * @category Math
             * @param {number} augend The first number in an addition.
             * @param {number} addend The second number in an addition.
             * @returns {number} Returns the total.
             * @example
             *
             * _.add(6, 4);
             * // => 10
             */
            var add = createMathOperation(function (augend, addend) {
                return augend + addend;
            }, 0);

            /**
             * Computes `number` rounded up to `precision`.
             *
             * @static
             * @memberOf _
             * @since 3.10.0
             * @category Math
             * @param {number} number The number to round up.
             * @param {number} [precision=0] The precision to round up to.
             * @returns {number} Returns the rounded up number.
             * @example
             *
             * _.ceil(4.006);
             * // => 5
             *
             * _.ceil(6.004, 2);
             * // => 6.01
             *
             * _.ceil(6040, -2);
             * // => 6100
             */
            var ceil = createRound('ceil');

            /**
             * Divide two numbers.
             *
             * @static
             * @memberOf _
             * @since 4.7.0
             * @category Math
             * @param {number} dividend The first number in a division.
             * @param {number} divisor The second number in a division.
             * @returns {number} Returns the quotient.
             * @example
             *
             * _.divide(6, 4);
             * // => 1.5
             */
            var divide = createMathOperation(function (dividend, divisor) {
                return dividend / divisor;
            }, 1);

            /**
             * Computes `number` rounded down to `precision`.
             *
             * @static
             * @memberOf _
             * @since 3.10.0
             * @category Math
             * @param {number} number The number to round down.
             * @param {number} [precision=0] The precision to round down to.
             * @returns {number} Returns the rounded down number.
             * @example
             *
             * _.floor(4.006);
             * // => 4
             *
             * _.floor(0.046, 2);
             * // => 0.04
             *
             * _.floor(4060, -2);
             * // => 4000
             */
            var floor = createRound('floor');

            /**
             * Computes the maximum value of `array`. If `array` is empty or falsey,
             * `undefined` is returned.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Math
             * @param {Array} array The array to iterate over.
             * @returns {*} Returns the maximum value.
             * @example
             *
             * _.max([4, 2, 8, 6]);
             * // => 8
             *
             * _.max([]);
             * // => undefined
             */
            function max(array) {
                return array && array.length ? baseExtremum(array, identity, baseGt) : undefined$1;
            }

            /**
             * This method is like `_.max` except that it accepts `iteratee` which is
             * invoked for each element in `array` to generate the criterion by which
             * the value is ranked. The iteratee is invoked with one argument: (value).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Math
             * @param {Array} array The array to iterate over.
             * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
             * @returns {*} Returns the maximum value.
             * @example
             *
             * var objects = [{ 'n': 1 }, { 'n': 2 }];
             *
             * _.maxBy(objects, function(o) { return o.n; });
             * // => { 'n': 2 }
             *
             * // The `_.property` iteratee shorthand.
             * _.maxBy(objects, 'n');
             * // => { 'n': 2 }
             */
            function maxBy(array, iteratee) {
                return array && array.length ? baseExtremum(array, getIteratee(iteratee, 2), baseGt) : undefined$1;
            }

            /**
             * Computes the mean of the values in `array`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Math
             * @param {Array} array The array to iterate over.
             * @returns {number} Returns the mean.
             * @example
             *
             * _.mean([4, 2, 8, 6]);
             * // => 5
             */
            function mean(array) {
                return baseMean(array, identity);
            }

            /**
             * This method is like `_.mean` except that it accepts `iteratee` which is
             * invoked for each element in `array` to generate the value to be averaged.
             * The iteratee is invoked with one argument: (value).
             *
             * @static
             * @memberOf _
             * @since 4.7.0
             * @category Math
             * @param {Array} array The array to iterate over.
             * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
             * @returns {number} Returns the mean.
             * @example
             *
             * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
             *
             * _.meanBy(objects, function(o) { return o.n; });
             * // => 5
             *
             * // The `_.property` iteratee shorthand.
             * _.meanBy(objects, 'n');
             * // => 5
             */
            function meanBy(array, iteratee) {
                return baseMean(array, getIteratee(iteratee, 2));
            }

            /**
             * Computes the minimum value of `array`. If `array` is empty or falsey,
             * `undefined` is returned.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Math
             * @param {Array} array The array to iterate over.
             * @returns {*} Returns the minimum value.
             * @example
             *
             * _.min([4, 2, 8, 6]);
             * // => 2
             *
             * _.min([]);
             * // => undefined
             */
            function min(array) {
                return array && array.length ? baseExtremum(array, identity, baseLt) : undefined$1;
            }

            /**
             * This method is like `_.min` except that it accepts `iteratee` which is
             * invoked for each element in `array` to generate the criterion by which
             * the value is ranked. The iteratee is invoked with one argument: (value).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Math
             * @param {Array} array The array to iterate over.
             * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
             * @returns {*} Returns the minimum value.
             * @example
             *
             * var objects = [{ 'n': 1 }, { 'n': 2 }];
             *
             * _.minBy(objects, function(o) { return o.n; });
             * // => { 'n': 1 }
             *
             * // The `_.property` iteratee shorthand.
             * _.minBy(objects, 'n');
             * // => { 'n': 1 }
             */
            function minBy(array, iteratee) {
                return array && array.length ? baseExtremum(array, getIteratee(iteratee, 2), baseLt) : undefined$1;
            }

            /**
             * Multiply two numbers.
             *
             * @static
             * @memberOf _
             * @since 4.7.0
             * @category Math
             * @param {number} multiplier The first number in a multiplication.
             * @param {number} multiplicand The second number in a multiplication.
             * @returns {number} Returns the product.
             * @example
             *
             * _.multiply(6, 4);
             * // => 24
             */
            var multiply = createMathOperation(function (multiplier, multiplicand) {
                return multiplier * multiplicand;
            }, 1);

            /**
             * Computes `number` rounded to `precision`.
             *
             * @static
             * @memberOf _
             * @since 3.10.0
             * @category Math
             * @param {number} number The number to round.
             * @param {number} [precision=0] The precision to round to.
             * @returns {number} Returns the rounded number.
             * @example
             *
             * _.round(4.006);
             * // => 4
             *
             * _.round(4.006, 2);
             * // => 4.01
             *
             * _.round(4060, -2);
             * // => 4100
             */
            var round = createRound('round');

            /**
             * Subtract two numbers.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Math
             * @param {number} minuend The first number in a subtraction.
             * @param {number} subtrahend The second number in a subtraction.
             * @returns {number} Returns the difference.
             * @example
             *
             * _.subtract(6, 4);
             * // => 2
             */
            var subtract = createMathOperation(function (minuend, subtrahend) {
                return minuend - subtrahend;
            }, 0);

            /**
             * Computes the sum of the values in `array`.
             *
             * @static
             * @memberOf _
             * @since 3.4.0
             * @category Math
             * @param {Array} array The array to iterate over.
             * @returns {number} Returns the sum.
             * @example
             *
             * _.sum([4, 2, 8, 6]);
             * // => 20
             */
            function sum(array) {
                return array && array.length ? baseSum(array, identity) : 0;
            }

            /**
             * This method is like `_.sum` except that it accepts `iteratee` which is
             * invoked for each element in `array` to generate the value to be summed.
             * The iteratee is invoked with one argument: (value).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Math
             * @param {Array} array The array to iterate over.
             * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
             * @returns {number} Returns the sum.
             * @example
             *
             * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
             *
             * _.sumBy(objects, function(o) { return o.n; });
             * // => 20
             *
             * // The `_.property` iteratee shorthand.
             * _.sumBy(objects, 'n');
             * // => 20
             */
            function sumBy(array, iteratee) {
                return array && array.length ? baseSum(array, getIteratee(iteratee, 2)) : 0;
            }

            /*------------------------------------------------------------------------*/

            // Add methods that return wrapped values in chain sequences.
            lodash.after = after;
            lodash.ary = ary;
            lodash.assign = assign;
            lodash.assignIn = assignIn;
            lodash.assignInWith = assignInWith;
            lodash.assignWith = assignWith;
            lodash.at = at;
            lodash.before = before;
            lodash.bind = bind;
            lodash.bindAll = bindAll;
            lodash.bindKey = bindKey;
            lodash.castArray = castArray;
            lodash.chain = chain;
            lodash.chunk = chunk;
            lodash.compact = compact;
            lodash.concat = concat;
            lodash.cond = cond;
            lodash.conforms = conforms;
            lodash.constant = constant;
            lodash.countBy = countBy;
            lodash.create = create;
            lodash.curry = curry;
            lodash.curryRight = curryRight;
            lodash.debounce = debounce;
            lodash.defaults = defaults;
            lodash.defaultsDeep = defaultsDeep;
            lodash.defer = defer;
            lodash.delay = delay;
            lodash.difference = difference;
            lodash.differenceBy = differenceBy;
            lodash.differenceWith = differenceWith;
            lodash.drop = drop;
            lodash.dropRight = dropRight;
            lodash.dropRightWhile = dropRightWhile;
            lodash.dropWhile = dropWhile;
            lodash.fill = fill;
            lodash.filter = filter;
            lodash.flatMap = flatMap;
            lodash.flatMapDeep = flatMapDeep;
            lodash.flatMapDepth = flatMapDepth;
            lodash.flatten = flatten;
            lodash.flattenDeep = flattenDeep;
            lodash.flattenDepth = flattenDepth;
            lodash.flip = flip;
            lodash.flow = flow;
            lodash.flowRight = flowRight;
            lodash.fromPairs = fromPairs;
            lodash.functions = functions;
            lodash.functionsIn = functionsIn;
            lodash.groupBy = groupBy;
            lodash.initial = initial;
            lodash.intersection = intersection;
            lodash.intersectionBy = intersectionBy;
            lodash.intersectionWith = intersectionWith;
            lodash.invert = invert;
            lodash.invertBy = invertBy;
            lodash.invokeMap = invokeMap;
            lodash.iteratee = iteratee;
            lodash.keyBy = keyBy;
            lodash.keys = keys;
            lodash.keysIn = keysIn;
            lodash.map = map;
            lodash.mapKeys = mapKeys;
            lodash.mapValues = mapValues;
            lodash.matches = matches;
            lodash.matchesProperty = matchesProperty;
            lodash.memoize = memoize;
            lodash.merge = merge;
            lodash.mergeWith = mergeWith;
            lodash.method = method;
            lodash.methodOf = methodOf;
            lodash.mixin = mixin;
            lodash.negate = negate;
            lodash.nthArg = nthArg;
            lodash.omit = omit;
            lodash.omitBy = omitBy;
            lodash.once = once;
            lodash.orderBy = orderBy;
            lodash.over = over;
            lodash.overArgs = overArgs;
            lodash.overEvery = overEvery;
            lodash.overSome = overSome;
            lodash.partial = partial;
            lodash.partialRight = partialRight;
            lodash.partition = partition;
            lodash.pick = pick;
            lodash.pickBy = pickBy;
            lodash.property = property;
            lodash.propertyOf = propertyOf;
            lodash.pull = pull;
            lodash.pullAll = pullAll;
            lodash.pullAllBy = pullAllBy;
            lodash.pullAllWith = pullAllWith;
            lodash.pullAt = pullAt;
            lodash.range = range;
            lodash.rangeRight = rangeRight;
            lodash.rearg = rearg;
            lodash.reject = reject;
            lodash.remove = remove;
            lodash.rest = rest;
            lodash.reverse = reverse;
            lodash.sampleSize = sampleSize;
            lodash.set = set;
            lodash.setWith = setWith;
            lodash.shuffle = shuffle;
            lodash.slice = slice;
            lodash.sortBy = sortBy;
            lodash.sortedUniq = sortedUniq;
            lodash.sortedUniqBy = sortedUniqBy;
            lodash.split = split;
            lodash.spread = spread;
            lodash.tail = tail;
            lodash.take = take;
            lodash.takeRight = takeRight;
            lodash.takeRightWhile = takeRightWhile;
            lodash.takeWhile = takeWhile;
            lodash.tap = tap;
            lodash.throttle = throttle;
            lodash.thru = thru;
            lodash.toArray = toArray;
            lodash.toPairs = toPairs;
            lodash.toPairsIn = toPairsIn;
            lodash.toPath = toPath;
            lodash.toPlainObject = toPlainObject;
            lodash.transform = transform;
            lodash.unary = unary;
            lodash.union = union;
            lodash.unionBy = unionBy;
            lodash.unionWith = unionWith;
            lodash.uniq = uniq;
            lodash.uniqBy = uniqBy;
            lodash.uniqWith = uniqWith;
            lodash.unset = unset;
            lodash.unzip = unzip;
            lodash.unzipWith = unzipWith;
            lodash.update = update;
            lodash.updateWith = updateWith;
            lodash.values = values;
            lodash.valuesIn = valuesIn;
            lodash.without = without;
            lodash.words = words;
            lodash.wrap = wrap;
            lodash.xor = xor;
            lodash.xorBy = xorBy;
            lodash.xorWith = xorWith;
            lodash.zip = zip;
            lodash.zipObject = zipObject;
            lodash.zipObjectDeep = zipObjectDeep;
            lodash.zipWith = zipWith;

            // Add aliases.
            lodash.entries = toPairs;
            lodash.entriesIn = toPairsIn;
            lodash.extend = assignIn;
            lodash.extendWith = assignInWith;

            // Add methods to `lodash.prototype`.
            mixin(lodash, lodash);

            /*------------------------------------------------------------------------*/

            // Add methods that return unwrapped values in chain sequences.
            lodash.add = add;
            lodash.attempt = attempt;
            lodash.camelCase = camelCase;
            lodash.capitalize = capitalize;
            lodash.ceil = ceil;
            lodash.clamp = clamp;
            lodash.clone = clone;
            lodash.cloneDeep = cloneDeep;
            lodash.cloneDeepWith = cloneDeepWith;
            lodash.cloneWith = cloneWith;
            lodash.conformsTo = conformsTo;
            lodash.deburr = deburr;
            lodash.defaultTo = defaultTo;
            lodash.divide = divide;
            lodash.endsWith = endsWith;
            lodash.eq = eq;
            lodash.escape = escape;
            lodash.escapeRegExp = escapeRegExp;
            lodash.every = every;
            lodash.find = find;
            lodash.findIndex = findIndex;
            lodash.findKey = findKey;
            lodash.findLast = findLast;
            lodash.findLastIndex = findLastIndex;
            lodash.findLastKey = findLastKey;
            lodash.floor = floor;
            lodash.forEach = forEach;
            lodash.forEachRight = forEachRight;
            lodash.forIn = forIn;
            lodash.forInRight = forInRight;
            lodash.forOwn = forOwn;
            lodash.forOwnRight = forOwnRight;
            lodash.get = get;
            lodash.gt = gt;
            lodash.gte = gte;
            lodash.has = has;
            lodash.hasIn = hasIn;
            lodash.head = head;
            lodash.identity = identity;
            lodash.includes = includes;
            lodash.indexOf = indexOf;
            lodash.inRange = inRange;
            lodash.invoke = invoke;
            lodash.isArguments = isArguments;
            lodash.isArray = isArray;
            lodash.isArrayBuffer = isArrayBuffer;
            lodash.isArrayLike = isArrayLike;
            lodash.isArrayLikeObject = isArrayLikeObject;
            lodash.isBoolean = isBoolean;
            lodash.isBuffer = isBuffer;
            lodash.isDate = isDate;
            lodash.isElement = isElement;
            lodash.isEmpty = isEmpty;
            lodash.isEqual = isEqual;
            lodash.isEqualWith = isEqualWith;
            lodash.isError = isError;
            lodash.isFinite = isFinite;
            lodash.isFunction = isFunction;
            lodash.isInteger = isInteger;
            lodash.isLength = isLength;
            lodash.isMap = isMap;
            lodash.isMatch = isMatch;
            lodash.isMatchWith = isMatchWith;
            lodash.isNaN = isNaN;
            lodash.isNative = isNative;
            lodash.isNil = isNil;
            lodash.isNull = isNull;
            lodash.isNumber = isNumber;
            lodash.isObject = isObject;
            lodash.isObjectLike = isObjectLike;
            lodash.isPlainObject = isPlainObject;
            lodash.isRegExp = isRegExp;
            lodash.isSafeInteger = isSafeInteger;
            lodash.isSet = isSet;
            lodash.isString = isString;
            lodash.isSymbol = isSymbol;
            lodash.isTypedArray = isTypedArray;
            lodash.isUndefined = isUndefined;
            lodash.isWeakMap = isWeakMap;
            lodash.isWeakSet = isWeakSet;
            lodash.join = join;
            lodash.kebabCase = kebabCase;
            lodash.last = last;
            lodash.lastIndexOf = lastIndexOf;
            lodash.lowerCase = lowerCase;
            lodash.lowerFirst = lowerFirst;
            lodash.lt = lt;
            lodash.lte = lte;
            lodash.max = max;
            lodash.maxBy = maxBy;
            lodash.mean = mean;
            lodash.meanBy = meanBy;
            lodash.min = min;
            lodash.minBy = minBy;
            lodash.stubArray = stubArray;
            lodash.stubFalse = stubFalse;
            lodash.stubObject = stubObject;
            lodash.stubString = stubString;
            lodash.stubTrue = stubTrue;
            lodash.multiply = multiply;
            lodash.nth = nth;
            lodash.noConflict = noConflict;
            lodash.noop = noop;
            lodash.now = now;
            lodash.pad = pad;
            lodash.padEnd = padEnd;
            lodash.padStart = padStart;
            lodash.parseInt = parseInt;
            lodash.random = random;
            lodash.reduce = reduce;
            lodash.reduceRight = reduceRight;
            lodash.repeat = repeat;
            lodash.replace = replace;
            lodash.result = result;
            lodash.round = round;
            lodash.runInContext = runInContext;
            lodash.sample = sample;
            lodash.size = size;
            lodash.snakeCase = snakeCase;
            lodash.some = some;
            lodash.sortedIndex = sortedIndex;
            lodash.sortedIndexBy = sortedIndexBy;
            lodash.sortedIndexOf = sortedIndexOf;
            lodash.sortedLastIndex = sortedLastIndex;
            lodash.sortedLastIndexBy = sortedLastIndexBy;
            lodash.sortedLastIndexOf = sortedLastIndexOf;
            lodash.startCase = startCase;
            lodash.startsWith = startsWith;
            lodash.subtract = subtract;
            lodash.sum = sum;
            lodash.sumBy = sumBy;
            lodash.template = template;
            lodash.times = times;
            lodash.toFinite = toFinite;
            lodash.toInteger = toInteger;
            lodash.toLength = toLength;
            lodash.toLower = toLower;
            lodash.toNumber = toNumber;
            lodash.toSafeInteger = toSafeInteger;
            lodash.toString = toString;
            lodash.toUpper = toUpper;
            lodash.trim = trim;
            lodash.trimEnd = trimEnd;
            lodash.trimStart = trimStart;
            lodash.truncate = truncate;
            lodash.unescape = unescape;
            lodash.uniqueId = uniqueId;
            lodash.upperCase = upperCase;
            lodash.upperFirst = upperFirst;

            // Add aliases.
            lodash.each = forEach;
            lodash.eachRight = forEachRight;
            lodash.first = head;

            mixin(
                lodash,
                (function () {
                    var source = {};
                    baseForOwn(lodash, function (func, methodName) {
                        if (!hasOwnProperty.call(lodash.prototype, methodName)) {
                            source[methodName] = func;
                        }
                    });
                    return source;
                })(),
                { chain: false }
            );

            /*------------------------------------------------------------------------*/

            /**
             * The semantic version number.
             *
             * @static
             * @memberOf _
             * @type {string}
             */
            lodash.VERSION = VERSION;

            // Assign default placeholders.
            arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function (methodName) {
                lodash[methodName].placeholder = lodash;
            });

            // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
            arrayEach(['drop', 'take'], function (methodName, index) {
                LazyWrapper.prototype[methodName] = function (n) {
                    n = n === undefined$1 ? 1 : nativeMax(toInteger(n), 0);

                    var result = this.__filtered__ && !index ? new LazyWrapper(this) : this.clone();

                    if (result.__filtered__) {
                        result.__takeCount__ = nativeMin(n, result.__takeCount__);
                    } else {
                        result.__views__.push({
                            size: nativeMin(n, MAX_ARRAY_LENGTH),
                            type: methodName + (result.__dir__ < 0 ? 'Right' : ''),
                        });
                    }
                    return result;
                };

                LazyWrapper.prototype[methodName + 'Right'] = function (n) {
                    return this.reverse()[methodName](n).reverse();
                };
            });

            // Add `LazyWrapper` methods that accept an `iteratee` value.
            arrayEach(['filter', 'map', 'takeWhile'], function (methodName, index) {
                var type = index + 1,
                    isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

                LazyWrapper.prototype[methodName] = function (iteratee) {
                    var result = this.clone();
                    result.__iteratees__.push({
                        iteratee: getIteratee(iteratee, 3),
                        type: type,
                    });
                    result.__filtered__ = result.__filtered__ || isFilter;
                    return result;
                };
            });

            // Add `LazyWrapper` methods for `_.head` and `_.last`.
            arrayEach(['head', 'last'], function (methodName, index) {
                var takeName = 'take' + (index ? 'Right' : '');

                LazyWrapper.prototype[methodName] = function () {
                    return this[takeName](1).value()[0];
                };
            });

            // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
            arrayEach(['initial', 'tail'], function (methodName, index) {
                var dropName = 'drop' + (index ? '' : 'Right');

                LazyWrapper.prototype[methodName] = function () {
                    return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
                };
            });

            LazyWrapper.prototype.compact = function () {
                return this.filter(identity);
            };

            LazyWrapper.prototype.find = function (predicate) {
                return this.filter(predicate).head();
            };

            LazyWrapper.prototype.findLast = function (predicate) {
                return this.reverse().find(predicate);
            };

            LazyWrapper.prototype.invokeMap = baseRest(function (path, args) {
                if (typeof path == 'function') {
                    return new LazyWrapper(this);
                }
                return this.map(function (value) {
                    return baseInvoke(value, path, args);
                });
            });

            LazyWrapper.prototype.reject = function (predicate) {
                return this.filter(negate(getIteratee(predicate)));
            };

            LazyWrapper.prototype.slice = function (start, end) {
                start = toInteger(start);

                var result = this;
                if (result.__filtered__ && (start > 0 || end < 0)) {
                    return new LazyWrapper(result);
                }
                if (start < 0) {
                    result = result.takeRight(-start);
                } else if (start) {
                    result = result.drop(start);
                }
                if (end !== undefined$1) {
                    end = toInteger(end);
                    result = end < 0 ? result.dropRight(-end) : result.take(end - start);
                }
                return result;
            };

            LazyWrapper.prototype.takeRightWhile = function (predicate) {
                return this.reverse().takeWhile(predicate).reverse();
            };

            LazyWrapper.prototype.toArray = function () {
                return this.take(MAX_ARRAY_LENGTH);
            };

            // Add `LazyWrapper` methods to `lodash.prototype`.
            baseForOwn(LazyWrapper.prototype, function (func, methodName) {
                var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
                    isTaker = /^(?:head|last)$/.test(methodName),
                    lodashFunc = lodash[isTaker ? 'take' + (methodName == 'last' ? 'Right' : '') : methodName],
                    retUnwrapped = isTaker || /^find/.test(methodName);

                if (!lodashFunc) {
                    return;
                }
                lodash.prototype[methodName] = function () {
                    var value = this.__wrapped__,
                        args = isTaker ? [1] : arguments,
                        isLazy = value instanceof LazyWrapper,
                        iteratee = args[0],
                        useLazy = isLazy || isArray(value);

                    var interceptor = function (value) {
                        var result = lodashFunc.apply(lodash, arrayPush([value], args));
                        return isTaker && chainAll ? result[0] : result;
                    };

                    if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
                        // Avoid lazy use if the iteratee has a "length" value other than `1`.
                        isLazy = useLazy = false;
                    }
                    var chainAll = this.__chain__,
                        isHybrid = !!this.__actions__.length,
                        isUnwrapped = retUnwrapped && !chainAll,
                        onlyLazy = isLazy && !isHybrid;

                    if (!retUnwrapped && useLazy) {
                        value = onlyLazy ? value : new LazyWrapper(this);
                        var result = func.apply(value, args);
                        result.__actions__.push({ func: thru, args: [interceptor], thisArg: undefined$1 });
                        return new LodashWrapper(result, chainAll);
                    }
                    if (isUnwrapped && onlyLazy) {
                        return func.apply(this, args);
                    }
                    result = this.thru(interceptor);
                    return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
                };
            });

            // Add `Array` methods to `lodash.prototype`.
            arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function (methodName) {
                var func = arrayProto[methodName],
                    chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
                    retUnwrapped = /^(?:pop|shift)$/.test(methodName);

                lodash.prototype[methodName] = function () {
                    var args = arguments;
                    if (retUnwrapped && !this.__chain__) {
                        var value = this.value();
                        return func.apply(isArray(value) ? value : [], args);
                    }
                    return this[chainName](function (value) {
                        return func.apply(isArray(value) ? value : [], args);
                    });
                };
            });

            // Map minified method names to their real names.
            baseForOwn(LazyWrapper.prototype, function (func, methodName) {
                var lodashFunc = lodash[methodName];
                if (lodashFunc) {
                    var key = lodashFunc.name + '';
                    if (!hasOwnProperty.call(realNames, key)) {
                        realNames[key] = [];
                    }
                    realNames[key].push({ name: methodName, func: lodashFunc });
                }
            });

            realNames[createHybrid(undefined$1, WRAP_BIND_KEY_FLAG).name] = [
                {
                    name: 'wrapper',
                    func: undefined$1,
                },
            ];

            // Add methods to `LazyWrapper`.
            LazyWrapper.prototype.clone = lazyClone;
            LazyWrapper.prototype.reverse = lazyReverse;
            LazyWrapper.prototype.value = lazyValue;

            // Add chain sequence methods to the `lodash` wrapper.
            lodash.prototype.at = wrapperAt;
            lodash.prototype.chain = wrapperChain;
            lodash.prototype.commit = wrapperCommit;
            lodash.prototype.next = wrapperNext;
            lodash.prototype.plant = wrapperPlant;
            lodash.prototype.reverse = wrapperReverse;
            lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

            // Add lazy aliases.
            lodash.prototype.first = lodash.prototype.head;

            if (symIterator) {
                lodash.prototype[symIterator] = wrapperToIterator;
            }
            return lodash;
        };

        /*--------------------------------------------------------------------------*/

        // Export lodash.
        var _ = runInContext();

        // Some AMD build optimizers, like r.js, check for condition patterns like:
        if (freeModule) {
            // Export for Node.js.
            (freeModule.exports = _)._ = _;
            // Export for CommonJS support.
            freeExports._ = _;
        } else {
            // Export to the global object.
            root._ = _;
        }
    }.call(commonjsGlobal));
})(lodash, lodash.exports);

var _ = lodash.exports;

let pageInfo = {
    endCursor: null,
    hasNextPage: false,
    hasPreviousPage: false,
    startCursor: null,
};
let filterTimeout$1;
function MerchantProductCard(prop) {
    const app = appBridgeReact.useAppBridge();
    const fetch = userLoggedInFetch(app);
    const [queryValue, setQueryValue] = react.exports.useState(null);
    const [items, setItems] = react.exports.useState([]);
    const [selectedProduct, setSelectedProduct] = react.exports.useState(null);
    const [loadingUrl, setLoadingUrl] = react.exports.useState(false);
    const handleQueryValueRemove = () => {
        setQueryValue(null);
    };
    const [hasNext, setHasNext] = react.exports.useState(false);
    const [hasBefore, setHasBefore] = react.exports.useState(false);
    const getMerchantsProducts = async () => {
        try {
            setLoadingUrl(true);
            const productListResponse = await fetch('/merchant-products', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    search: queryValue,
                    end_cursor: pageInfo.endCursor,
                    start_cursor: pageInfo.startCursor,
                }),
            }).then((res) => res.json());
            setItems(productListResponse.body.data.products.edges);
            pageInfo = Object.assign({}, productListResponse.body.data.products.pageInfo);
            setHasNext(pageInfo.hasNextPage);
            setHasBefore(pageInfo.hasPreviousPage);
        } catch (e) {
            setItems([]);
        }
        setLoadingUrl(false);
    };
    react.exports.useEffect(async () => {
        pageInfo = Object.assign(
            {},
            {
                endCursor: null,
                hasNextPage: false,
                hasPreviousPage: false,
                startCursor: null,
            }
        );
        doFilter(queryValue);
    }, [queryValue]);
    const doFilter = (query) => {
        clearTimeout(filterTimeout$1);
        filterTimeout$1 = setTimeout(async () => {
            await getMerchantsProducts();
        }, 550);
    };
    const resourceName = {
        singular: 'product',
        plural: 'products',
    };
    const setPage = async (direction) => {
        if (direction === -1) {
            pageInfo.endCursor = null;
        }
        if (direction === 1) {
            pageInfo.startCursor = null;
        }
        if (direction === 0) {
            pageInfo.startCursor = null;
            pageInfo.endCursor = null;
        }
        await getMerchantsProducts();
    };
    const filterControl = /* @__PURE__ */ jsx(Filters, {
        queryValue,
        filters: [],
        onQueryChange: setQueryValue,
        onQueryClear: handleQueryValueRemove,
        children: /* @__PURE__ */ jsx('div', {
            style: {
                paddingLeft: '8px',
            },
            children: /* @__PURE__ */ jsx(Button, {
                onClick: () => setPage(0),
                children: 'Search',
            }),
        }),
    });
    return /* @__PURE__ */ jsxs(Card, {
        children: [
            /* @__PURE__ */ jsx(ResourceList, {
                loading: loadingUrl,
                resourceName,
                items,
                renderItem,
                filterControl,
            }),
            /* @__PURE__ */ jsx('div', {
                style: {
                    marginLeft: '45%',
                },
                children: /* @__PURE__ */ jsx(Pagination, {
                    nextTooltip: 'Next',
                    previousTooltip: 'Previous',
                    onPrevious: () => setPage(-1),
                    onNext: () => setPage(1),
                    hasPrevious: hasBefore,
                    hasNext,
                }),
            }),
        ],
    });
    function renderItem(item) {
        let selectedId = null;
        if (selectedProduct) {
            selectedId = selectedProduct.node.id;
        }
        const { id, title, handle, priceRangeV2, images } = item.node;
        const media = /* @__PURE__ */ jsx(Avatar, {
            customer: true,
            size: 'medium',
            name: id,
            source: _.get(images, 'edges[0].node') ? images.edges[0].node.url : 'https://polaris.shopify.com/icons/DomainsMajor.svg',
        });
        return /* @__PURE__ */ jsx('div', {
            style:
                selectedId === id
                    ? {
                          borderStyle: 'solid',
                      }
                    : {},
            children: /* @__PURE__ */ jsxs(ResourceItem, {
                id,
                media,
                onClick: () => {
                    prop.selectProduct(item);
                    setSelectedProduct(item);
                },
                children: [
                    /* @__PURE__ */ jsx('h3', {
                        children: /* @__PURE__ */ jsx(TextStyle, {
                            variation: 'strong',
                            children: title,
                        }),
                    }),
                    /* @__PURE__ */ jsxs('div', {
                        children: [priceWithCurrency(priceRangeV2.minVariantPrice.amount, priceRangeV2.minVariantPrice.currencyCode), ' '],
                    }),
                ],
            }),
        });
    }
}

let filterTimeout;
function CompetitorsProductsCard(prop) {
    const app = appBridgeReact.useAppBridge();
    const fetch = userLoggedInFetch(app);
    const [queryValue, setQueryValue] = react.exports.useState(null);
    const [items, setItems] = react.exports.useState([]);
    const [itemsCount, setItemsCount] = react.exports.useState(0);
    let itemsCountWithoutState = 0;
    let pageIndexWithoutState = 0;
    const [loadingUrl, setLoadingUrl] = react.exports.useState(false);
    const handleQueryValueRemove = () => {
        setQueryValue(null);
    };
    const [pageIndex, setPageIndex] = react.exports.useState(0);
    const [pageMaxIndex, setPageMaxIndex] = react.exports.useState(0);
    const getSameProducts = async () => {
        let item = prop.merchantProduct;
        if (!prop.merchantProduct) {
            return;
        }
        setLoadingUrl(true);
        try {
            console.log(item);
            const productListResponse = await fetch('/compare-product', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    id: item.node.id,
                    handle: item.node.handle,
                    vendor: item.node.vendor,
                    tags: item.node.tags,
                    productType: item.node.productType,
                    search: queryValue,
                    offset: pageIndexWithoutState * 10,
                }),
            }).then((res) => res.json());
            setItems(productListResponse.data);
            setItemsCount(productListResponse.count);
            itemsCountWithoutState = productListResponse.count;
        } catch (e) {
            console.log(e);
        }
        setLoadingUrl(false);
    };
    react.exports.useEffect(async () => {}, [prop.competitorsProduct]);
    react.exports.useEffect(async () => {
        doFilter(queryValue);
    }, [queryValue]);
    react.exports.useEffect(async () => {
        await setPage(0);
    }, [prop.merchantProduct]);
    const setPage = async (index) => {
        pageIndexWithoutState = index;
        await getSameProducts();
        let productMaxIndex = Math.max(Math.ceil(itemsCountWithoutState / 10) - 1, 0);
        index = Math.min(index, productMaxIndex);
        setPageIndex(index);
        setPageMaxIndex(productMaxIndex);
    };
    const resourceName = {
        singular: "competitor's product",
        plural: "competitor's products",
    };
    const doFilter = (query) => {
        clearTimeout(filterTimeout);
        filterTimeout = setTimeout(async () => {
            await setPage(0);
        }, 550);
    };
    const filterControl = /* @__PURE__ */ jsx(Filters, {
        queryValue,
        filters: [],
        onQueryChange: setQueryValue,
        onQueryClear: handleQueryValueRemove,
        children: /* @__PURE__ */ jsx('div', {
            style: {
                paddingLeft: '8px',
            },
            children: /* @__PURE__ */ jsx(Button, {
                onClick: () => setPage(0),
                children: 'Search',
            }),
        }),
    });
    return /* @__PURE__ */ jsxs(Card, {
        children: [
            /* @__PURE__ */ jsx(ResourceList, {
                loading: loadingUrl,
                resourceName,
                items,
                renderItem,
                filterControl,
            }),
            /* @__PURE__ */ jsx('div', {
                style: {
                    marginLeft: '45%',
                },
                children: /* @__PURE__ */ jsx(Pagination, {
                    label: /* @__PURE__ */ jsxs('p', {
                        children: [pageIndex + 1, ' / ', pageMaxIndex + 1],
                    }),
                    nextTooltip: 'Next',
                    previousTooltip: 'Previous',
                    onPrevious: () => setPage(pageIndex - 1),
                    onNext: () => setPage(pageIndex + 1),
                    hasPrevious: pageIndex !== 0 && !loadingUrl,
                    hasNext: pageIndex < pageMaxIndex && !loadingUrl,
                }),
            }),
        ],
    });
    function renderItem(item) {
        const { id, title, images, website } = item;
        const media = /* @__PURE__ */ jsx(Avatar, {
            customer: true,
            size: 'medium',
            name: id,
            source: _.get(images, '[0]') ? images[0].src : 'https://polaris.shopify.com/icons/DomainsMajor.svg',
        });
        return /* @__PURE__ */ jsx('div', {
            children: /* @__PURE__ */ jsxs(ResourceItem, {
                id,
                media,
                onClick: () => {
                    prop.selectProduct(item);
                },
                children: [
                    /* @__PURE__ */ jsx('h3', {
                        children: /* @__PURE__ */ jsx(TextStyle, {
                            variation: 'strong',
                            children: title,
                        }),
                    }),
                    /* @__PURE__ */ jsxs('div', {
                        children: [website, ' '],
                    }),
                ],
            }),
        });
    }
}

function cartesian(arr) {
    return arr.reduce(
        function (a, b) {
            return a
                .map(function (x) {
                    return b.map(function (y) {
                        return x.concat([y]);
                    });
                })
                .reduce(function (a, b) {
                    return a.concat(b);
                }, []);
        },
        [[]]
    );
}

function CompareModal(props) {
    const [active, setActive] = react.exports.useState(false);
    const [merchantProduct, setMerchantProduct] = react.exports.useState({});
    const [competitorsProduct, setCompetitorsProduct] = react.exports.useState({});
    const handleChange = react.exports.useCallback(() => {
        props.resetCompetitorsProduct();
        setActive(!active);
    }, [active]);
    const defaultObject = {
        id: null,
        handle: null,
        title: null,
        images: [],
        createdAt: null,
        publishedAt: null,
        updatedAt: null,
        variants: [],
        productType: null,
        tags: [],
        vendor: null,
        mainImage: 'https://polaris.shopify.com/icons/DomainsMajor.svg',
        variantList: [],
    };
    const [selectedMerchantVariantOption, setSelectedMerchantVariantOption] = react.exports.useState('0');
    const [selectedCompetitorVariantOption, setSelectedCompetitorVariantOption] = react.exports.useState('0');
    const [selectedMerchantVariant, setSelectedMerchantVariant] = react.exports.useState({});
    const [selectedCompetitorVariant, setSelectedCompetitorVariant] = react.exports.useState({});
    const handleSelectChangeMerchant = react.exports.useCallback(async (value) => {
        setSelectedMerchantVariantOption(value);
    }, []);
    const handleSelectChangeCompetitor = react.exports.useCallback(async (value) => {
        setSelectedCompetitorVariantOption(value);
    }, []);
    const loadMerchantData = () => {
        let merchantProduct2 = props.merchantProduct.node;
        let data = Object.assign({}, defaultObject);
        data.id = merchantProduct2.id;
        data.handle = merchantProduct2.handle;
        data.title = merchantProduct2.title;
        data.createdAt = merchantProduct2.createdAt;
        data.publishedAt = merchantProduct2.publishedAt;
        data.updatedAt = merchantProduct2.updatedAt;
        data.productType = merchantProduct2.productType;
        data.vendor = merchantProduct2.vendor;
        data.options = merchantProduct2.options;
        data.mainImage = _.get(merchantProduct2, 'images.edges[0].node') ? merchantProduct2.images.edges[0].node.url : 'https://polaris.shopify.com/icons/DomainsMajor.svg';
        data.variantList = setVariantOptions(merchantProduct2.options);
        setMerchantProduct(data);
    };
    const loadCompetitorsData = () => {
        let competitorsProduct2 = props.competitorsProduct;
        let data = Object.assign({}, defaultObject);
        data.id = competitorsProduct2.id;
        data.handle = competitorsProduct2.handle;
        data.title = competitorsProduct2.title;
        data.createdAt = competitorsProduct2.created_at;
        data.publishedAt = competitorsProduct2.published_at;
        data.updatedAt = competitorsProduct2.updated_at;
        data.productType = competitorsProduct2.product_type;
        data.vendor = competitorsProduct2.vendor;
        data.mainImage = _.get(competitorsProduct2, 'images[0]') ? competitorsProduct2.images[0].src : null;
        data.variantList = setVariantOptions(competitorsProduct2.options);
        setCompetitorsProduct(data);
    };
    const setVariantOptions = (data) => {
        let variantMatrix = [];
        data.forEach((variant) => {
            let variantList = [];
            variant.values.forEach((variantEntity) => {
                variantList.push(variant.name + ': ' + variantEntity);
            });
            variantMatrix.push(variantList);
        });
        let cartesianMatrix = cartesian(variantMatrix);
        let result = [];
        let idCounter = 0;
        cartesianMatrix.forEach((variant) => {
            result.push({
                label: variant.join(', '),
                value: idCounter.toString(),
            });
            idCounter++;
        });
        return result;
    };
    react.exports.useEffect(async () => {
        if (!props.merchantProduct) {
            return;
        }
        let data = props.merchantProduct.node.variants.edges[selectedMerchantVariantOption].node;
        let result = {};
        result.price = data.price;
        result.compareAtPrice = data.compareAtPrice;
        result.createdAt = data.createdAt;
        result.displayName = data.displayName;
        result.id = data.id;
        result.sku = data.sku;
        result.title = data.title;
        result.updatedAt = data.updatedAt;
        result.weight = data.weight;
        result.weightUnit = data.weightUnit;
        result.currency = props.merchantProduct.node.priceRangeV2.maxVariantPrice.currencyCode;
        setSelectedMerchantVariant(result);
    }, [selectedMerchantVariantOption, props.merchantProduct]);
    react.exports.useEffect(async () => {
        if (!props.competitorsProduct) {
            return;
        }
        let data = props.competitorsProduct.variants[selectedCompetitorVariantOption];
        let result = {};
        result.price = data.price;
        result.compareAtPrice = data.compare_at_price;
        result.createdAt = data.created_at;
        result.displayName = data.parent_title;
        result.id = data.id;
        result.sku = data.sku;
        result.title = data.title;
        result.updatedAt = data.updated_at;
        result.weight = data.grams;
        result.weightUnit = 'gram';
        result.currency = props.competitorsProduct.currency;
        setSelectedCompetitorVariant(result);
    }, [selectedCompetitorVariantOption, props.competitorsProduct]);
    react.exports.useEffect(async () => {
        if (props.merchantProduct && props.competitorsProduct) {
            setActive(true);
        }
        if (props.merchantProduct) {
            loadMerchantData();
        }
        if (props.competitorsProduct) {
            loadCompetitorsData();
        }
    }, [props.merchantProduct, props.competitorsProduct]);
    return /* @__PURE__ */ jsx('div', {
        style: {
            height: '500px',
        },
        children: /* @__PURE__ */ jsxs(Modal, {
            open: active,
            title: 'Compare Products',
            onClose: handleChange,
            large: true,
            children: [
                /* @__PURE__ */ jsx(Modal.Section, {
                    children: /* @__PURE__ */ jsxs(Card, {
                        children: [
                            /* @__PURE__ */ jsxs(Card.Section, {
                                children: [
                                    /* @__PURE__ */ jsxs(FormLayout.Group, {
                                        condensed: true,
                                        children: [
                                            /* @__PURE__ */ jsx(TextStyle, {
                                                variation: 'strong',
                                            }),
                                            /* @__PURE__ */ jsx(TextStyle, {
                                                variation: 'strong',
                                                children: 'Me',
                                            }),
                                            /* @__PURE__ */ jsx(TextStyle, {
                                                variation: 'strong',
                                                children: 'Competitor',
                                            }),
                                        ],
                                    }),
                                    /* @__PURE__ */ jsxs(FormLayout.Group, {
                                        condensed: true,
                                        children: [
                                            /* @__PURE__ */ jsx(TextStyle, {
                                                variation: 'strong',
                                            }),
                                            /* @__PURE__ */ jsx(Thumbnail, {
                                                source: merchantProduct.mainImage,
                                                alt: 'Black choker necklace',
                                            }),
                                            /* @__PURE__ */ jsx(Thumbnail, {
                                                source: competitorsProduct.mainImage,
                                                alt: 'Black choker necklace',
                                            }),
                                        ],
                                    }),
                                ],
                            }),
                            /* @__PURE__ */ jsx(Card.Section, {
                                children: /* @__PURE__ */ jsxs(FormLayout.Group, {
                                    condensed: true,
                                    children: [
                                        /* @__PURE__ */ jsx(TextStyle, {
                                            variation: 'strong',
                                            children: 'Title',
                                        }),
                                        /* @__PURE__ */ jsx(TextStyle, {
                                            variation: 'subdued',
                                            children: merchantProduct.title,
                                        }),
                                        /* @__PURE__ */ jsx(TextStyle, {
                                            variation: 'subdued',
                                            children: competitorsProduct.title,
                                        }),
                                    ],
                                }),
                            }),
                            /* @__PURE__ */ jsx(Card.Section, {
                                children: /* @__PURE__ */ jsxs(FormLayout.Group, {
                                    condensed: true,
                                    children: [
                                        /* @__PURE__ */ jsx(TextStyle, {
                                            variation: 'strong',
                                            children: 'Handle',
                                        }),
                                        /* @__PURE__ */ jsx(TextStyle, {
                                            variation: 'subdued',
                                            children: merchantProduct.handle,
                                        }),
                                        /* @__PURE__ */ jsx(TextStyle, {
                                            variation: 'subdued',
                                            children: competitorsProduct.handle,
                                        }),
                                    ],
                                }),
                            }),
                        ],
                    }),
                }),
                /* @__PURE__ */ jsx(Modal.Section, {
                    children: /* @__PURE__ */ jsxs(Card, {
                        children: [
                            /* @__PURE__ */ jsx(Card.Section, {
                                children: /* @__PURE__ */ jsxs(FormLayout.Group, {
                                    condensed: true,
                                    children: [
                                        /* @__PURE__ */ jsx(TextStyle, {
                                            variation: 'strong',
                                            children: 'Created at',
                                        }),
                                        /* @__PURE__ */ jsx(TextStyle, {
                                            variation: 'subdued',
                                            children: humanReadableTime(merchantProduct.createdAt),
                                        }),
                                        /* @__PURE__ */ jsx(TextStyle, {
                                            variation: 'subdued',
                                            children: humanReadableTime(competitorsProduct.createdAt),
                                        }),
                                    ],
                                }),
                            }),
                            /* @__PURE__ */ jsx(Card.Section, {
                                children: /* @__PURE__ */ jsxs(FormLayout.Group, {
                                    condensed: true,
                                    children: [
                                        /* @__PURE__ */ jsx(TextStyle, {
                                            variation: 'strong',
                                            children: 'Published at',
                                        }),
                                        /* @__PURE__ */ jsx(TextStyle, {
                                            variation: 'subdued',
                                            children: humanReadableTime(merchantProduct.publishedAt),
                                        }),
                                        /* @__PURE__ */ jsx(TextStyle, {
                                            variation: 'subdued',
                                            children: humanReadableTime(competitorsProduct.publishedAt),
                                        }),
                                    ],
                                }),
                            }),
                            /* @__PURE__ */ jsx(Card.Section, {
                                children: /* @__PURE__ */ jsxs(FormLayout.Group, {
                                    condensed: true,
                                    children: [
                                        /* @__PURE__ */ jsx(TextStyle, {
                                            variation: 'strong',
                                            children: 'Updated at',
                                        }),
                                        /* @__PURE__ */ jsx(TextStyle, {
                                            variation: 'subdued',
                                            children: humanReadableTime(merchantProduct.updatedAt),
                                        }),
                                        /* @__PURE__ */ jsx(TextStyle, {
                                            variation: 'subdued',
                                            children: humanReadableTime(competitorsProduct.updatedAt),
                                        }),
                                    ],
                                }),
                            }),
                        ],
                    }),
                }),
                /* @__PURE__ */ jsx(Modal.Section, {
                    children: /* @__PURE__ */ jsxs(Card, {
                        title: 'Variants',
                        children: [
                            /* @__PURE__ */ jsx(Card.Section, {
                                children: /* @__PURE__ */ jsxs(FormLayout.Group, {
                                    condensed: true,
                                    children: [
                                        /* @__PURE__ */ jsx(TextStyle, {
                                            variation: 'strong',
                                            children: 'Select Variant',
                                        }),
                                        /* @__PURE__ */ jsx(Select, {
                                            options: merchantProduct.variantList,
                                            onChange: handleSelectChangeMerchant,
                                            value: selectedMerchantVariantOption,
                                        }),
                                        /* @__PURE__ */ jsx(Select, {
                                            options: competitorsProduct.variantList,
                                            onChange: handleSelectChangeCompetitor,
                                            value: selectedCompetitorVariantOption,
                                        }),
                                    ],
                                }),
                            }),
                            /* @__PURE__ */ jsx(Card.Section, {
                                children: /* @__PURE__ */ jsxs(FormLayout.Group, {
                                    condensed: true,
                                    children: [
                                        /* @__PURE__ */ jsx(TextStyle, {
                                            variation: 'strong',
                                            children: 'SKU',
                                        }),
                                        /* @__PURE__ */ jsx(TextStyle, {
                                            variation: 'subdued',
                                            children: selectedMerchantVariant.sku,
                                        }),
                                        /* @__PURE__ */ jsx(TextStyle, {
                                            variation: 'subdued',
                                            children: selectedCompetitorVariant.sku,
                                        }),
                                    ],
                                }),
                            }),
                            /* @__PURE__ */ jsx(Card.Section, {
                                children: /* @__PURE__ */ jsxs(FormLayout.Group, {
                                    condensed: true,
                                    children: [
                                        /* @__PURE__ */ jsx(TextStyle, {
                                            variation: 'strong',
                                            children: 'Title',
                                        }),
                                        /* @__PURE__ */ jsx(TextStyle, {
                                            variation: 'subdued',
                                            children: selectedMerchantVariant.title,
                                        }),
                                        /* @__PURE__ */ jsx(TextStyle, {
                                            variation: 'subdued',
                                            children: selectedCompetitorVariant.title,
                                        }),
                                    ],
                                }),
                            }),
                            /* @__PURE__ */ jsx(Card.Section, {
                                children: /* @__PURE__ */ jsxs(FormLayout.Group, {
                                    condensed: true,
                                    children: [
                                        /* @__PURE__ */ jsx(TextStyle, {
                                            variation: 'strong',
                                            children: 'Display Name',
                                        }),
                                        /* @__PURE__ */ jsx(TextStyle, {
                                            variation: 'subdued',
                                            children: selectedMerchantVariant.displayName,
                                        }),
                                        /* @__PURE__ */ jsx(TextStyle, {
                                            variation: 'subdued',
                                            children: selectedCompetitorVariant.displayName,
                                        }),
                                    ],
                                }),
                            }),
                            /* @__PURE__ */ jsx(Card.Section, {
                                children: /* @__PURE__ */ jsxs(FormLayout.Group, {
                                    condensed: true,
                                    children: [
                                        /* @__PURE__ */ jsx(TextStyle, {
                                            variation: 'strong',
                                            children: 'Created At',
                                        }),
                                        /* @__PURE__ */ jsx(TextStyle, {
                                            variation: 'subdued',
                                            children: humanReadableTime(selectedMerchantVariant.createdAt),
                                        }),
                                        /* @__PURE__ */ jsx(TextStyle, {
                                            variation: 'subdued',
                                            children: humanReadableTime(selectedCompetitorVariant.createdAt),
                                        }),
                                    ],
                                }),
                            }),
                            /* @__PURE__ */ jsx(Card.Section, {
                                children: /* @__PURE__ */ jsxs(FormLayout.Group, {
                                    condensed: true,
                                    children: [
                                        /* @__PURE__ */ jsx(TextStyle, {
                                            variation: 'strong',
                                            children: 'Updated At',
                                        }),
                                        /* @__PURE__ */ jsx(TextStyle, {
                                            variation: 'subdued',
                                            children: humanReadableTime(selectedMerchantVariant.updatedAt),
                                        }),
                                        /* @__PURE__ */ jsx(TextStyle, {
                                            variation: 'subdued',
                                            children: humanReadableTime(selectedCompetitorVariant.updatedAt),
                                        }),
                                    ],
                                }),
                            }),
                            /* @__PURE__ */ jsx(Card.Section, {
                                children: /* @__PURE__ */ jsxs(FormLayout.Group, {
                                    condensed: true,
                                    children: [
                                        /* @__PURE__ */ jsx(TextStyle, {
                                            variation: 'strong',
                                            children: 'Price',
                                        }),
                                        /* @__PURE__ */ jsx(TextStyle, {
                                            variation: 'subdued',
                                            children: priceWithCurrency(selectedMerchantVariant.price, selectedMerchantVariant && selectedMerchantVariant.currency ? selectedMerchantVariant.currency : 'USD'),
                                        }),
                                        /* @__PURE__ */ jsx(TextStyle, {
                                            variation: 'subdued',
                                            children: priceWithCurrency(selectedCompetitorVariant.price, selectedCompetitorVariant && selectedCompetitorVariant.currency ? selectedCompetitorVariant.currency : 'USD'),
                                        }),
                                    ],
                                }),
                            }),
                        ],
                    }),
                }),
            ],
        }),
    });
}

var compareGif = '/assets/compare.0beca807.gif';

function Compare() {
    const app = appBridgeReact.useAppBridge();
    userLoggedInFetch(app);
    const [selectedMerchantProduct, setSelectedMerchantProduct] = react.exports.useState(null);
    const [selectedCompetitorsProduct, setSelectedCompetitorsProduct] = react.exports.useState(null);
    const selectMerchantProduct = async (item) => {
        setSelectedMerchantProduct(item);
    };
    const selectCompetitorsProduct = async (item) => {
        setSelectedCompetitorsProduct(item);
    };
    const resetCompetitorsProduct = async () => {
        setSelectedCompetitorsProduct(null);
    };
    return /* @__PURE__ */ jsxs(Page, {
        compactTitle: true,
        title: 'Compare',
        titleMetadata: /* @__PURE__ */ jsx(Tooltip, {
            content: /* @__PURE__ */ jsx('img', {
                alt: '',
                width: '100%',
                height: '100%',
                style: {
                    objectFit: 'cover',
                    objectPosition: 'center',
                },
                src: compareGif,
            }),
            children: /* @__PURE__ */ jsx(Icon, {
                source: SvgQuestionMarkInverseMajor,
                color: 'base',
            }),
        }),
        subtitle: 'To use the comparison structure, first select a product available in your store. Next, select the product you want to compare.',
        children: [
            /* @__PURE__ */ jsx(Subheading, {
                children: 'Comparisons can be made with only one product.',
            }),
            /* @__PURE__ */ jsx('br', {}),
            /* @__PURE__ */ jsxs(Layout, {
                children: [
                    /* @__PURE__ */ jsx(Layout.Section, {
                        secondary: true,
                        children: /* @__PURE__ */ jsx(MerchantProductCard, {
                            selectProduct: (item) => selectMerchantProduct(item),
                        }),
                    }),
                    /* @__PURE__ */ jsx(Layout.Section, {
                        secondary: true,
                        children: /* @__PURE__ */ jsx(CompetitorsProductsCard, {
                            merchantProduct: selectedMerchantProduct,
                            selectProduct: (item) => selectCompetitorsProduct(item),
                            competitorsProduct: selectedCompetitorsProduct,
                        }),
                    }),
                    /* @__PURE__ */ jsx(CompareModal, {
                        merchantProduct: selectedMerchantProduct,
                        competitorsProduct: selectedCompetitorsProduct,
                        resetCompetitorsProduct: () => resetCompetitorsProduct(),
                    }),
                ],
            }),
        ],
    });
}

function App() {
    return /* @__PURE__ */ jsx(AppProvider, {
        i18n: translations,
        children: /* @__PURE__ */ jsx(appBridgeReact.Provider, {
            config: {
                apiKey: 'e7ff36fde2cac23c8cf5a8a81d0e1434',
                host: new URL(location).searchParams.get('host'),
                forceRedirect: true,
            },
            children: /* @__PURE__ */ jsx(Frame, {
                children: /* @__PURE__ */ jsx(BrowserRouter, {
                    children: /* @__PURE__ */ jsxs(Routes, {
                        children: [
                            /* @__PURE__ */ jsx(Route, {
                                path: '/',
                                element: /* @__PURE__ */ jsx(Profile, {}),
                            }),
                            /* @__PURE__ */ jsx(Route, {
                                path: '/contact-us',
                                element: /* @__PURE__ */ jsx(ContactUs, {}),
                            }),
                            /* @__PURE__ */ jsx(Route, {
                                path: '/add-store',
                                element: /* @__PURE__ */ jsx(AddStore, {}),
                            }),
                            /* @__PURE__ */ jsx(Route, {
                                path: '/set-alarm',
                                element: /* @__PURE__ */ jsx(Alarm, {}),
                            }),
                            /* @__PURE__ */ jsx(Route, {
                                path: '/dashboard',
                                element: /* @__PURE__ */ jsx(Dashboard, {}),
                            }),
                            /* @__PURE__ */ jsx(Route, {
                                path: '/compare',
                                element: /* @__PURE__ */ jsx(Compare, {}),
                            }),
                            /* @__PURE__ */ jsx(Route, {
                                path: 'expenses',
                                element: /* @__PURE__ */ jsx(ServiceUnavailable, {}),
                            }),
                        ],
                    }),
                }),
            }),
        }),
    });
}
function userLoggedInFetch(app) {
    const fetchFunction = appBridgeUtils.authenticatedFetch(app);
    return async (uri, options) => {
        const response = await fetchFunction(uri, options);
        console.log(response.status);
        if (response.status === 503) {
            const authUrlHeader = response.headers.get('X-Shopify-API-Request-Failure-Reauthorize-AddStore');
            const redirect = actions$2.Redirect.create(app);
            redirect.dispatch(actions$2.Redirect.Action.APP, authUrlHeader || `/expenses`);
            return null;
        }
        if (response.headers.get('X-Shopify-API-Request-Failure-Reauthorize') === '1') {
            const authUrlHeader = response.headers.get('X-Shopify-API-Request-Failure-Reauthorize-AddStore');
            const redirect = actions$2.Redirect.create(app);
            redirect.dispatch(actions$2.Redirect.Action.APP, authUrlHeader || `/auth`);
            return null;
        }
        return response;
    };
}

ReactDOM.render(/* @__PURE__ */ jsx(App, {}), document.getElementById('app'));
